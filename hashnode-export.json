{"posts":[{"reward":{"type":"xlm"},"commentMetadata":{"qualityCommentCharLength":343,"qualityCommentCount":2,"totalCommentCount":2,"lastCommentAddedDate":"2025-06-30T16:02:23.209Z"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"6862521f65d2733b6338c6d7","createdAt":"2025-06-30T09:00:15.637Z","updatedAt":"2025-06-30T16:02:23.216Z","views":26,"isActive":true,"hasLatex":false,"popularity":7605.8403,"discussionScore":9.122514512309602,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":1,"replyCount":1,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":1,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"From Prompt to Production: Vibe Coding Local AI Apps with Claude + Ollama","subtitle":"A guide to building offline AI apps and dealing with CORS","cuid":"cmcivbyqc000f02kvbuvu1b99","dateAdded":"2025-06-30T09:00:15.636Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"from-prompt-to-production-vibe-coding-local-ai-apps-with-claude-ollama","content":"<p>In this guide, I’ll show you how you can build and run your own AI-powered apps that work completely offline, and do it without writing a single line of code. I’ll be using my favorite vibe-coding tool, Claude Code, to build an app that connects to local AI models using Ollama.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Installing Ollama and running models locally</p>\n</li>\n<li><p>Installing Claude Code and starting a new project</p>\n</li>\n<li><p>Building a web app with Claude Code</p>\n</li>\n<li><p>Dealing with CORS errors when connecting to Ollama</p>\n</li>\n<li><p>Using multi-modal models with image recognition</p>\n</li>\n</ul>\n<p>To show the multi-modal input (image with prompt), I’ll be building an app for logging machinery inspections, that can analyze an equipment photo and auto-fill the inspection form. But we’ll keep the vibe-coded app simple and focus more on the process, so you can apply this to any AI powered app that you’d like to build and run offline.</p>\n<h2 id=\"heading-installing-ollama-and-running-models-locally\">Installing Ollama and running models locally</h2>\n<p>I’ll be using Mac for this guide, but Ollama also has Windows and Linux installers, and most of this guide should be the same regardless of the OS.</p>\n<p>Start out by downloading and installing <a target=\"_blank\" href=\"https://ollama.com/download\">Ollama</a>, then open it up. You’ll notice a new llama icon in the menu bar, with a single option to <em>Quit Ollama</em>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731150387579/b9ce4790-220e-4721-8346-8e4cbdd4d05c.png?auto=compress,format&amp;format=webp&amp;auto=compress,format&amp;format=webp&amp;auto=compress,format&amp;format=webp\" alt /></p>\n<p>There’s no other GUI— everything else is done from the terminal.</p>\n<h3 id=\"heading-downloading-and-prompting-models\"><strong>Downloading and Prompting Models</strong></h3>\n<p>Next, open the terminal and run:</p>\n<pre><code class=\"lang-bash\">ollama run llama3.2:1b\n</code></pre>\n<p>This will download the smaller, 1 billion parameter Llama3.2 model, then run it and let you begin prompting from the terminal. You’ll see several files download the first time running a model, but after that it should load quickly and be ready to start prompting.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1746880539273/d64ce232-ab23-451d-b481-e1f69624c61e.png?auto=compress,format&amp;format=webp\" alt /></p>\n<p>Type a prompt and hit <strong>Enter</strong>. You should see a response in the terminal.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1751118446059/5670c764-c38d-4ae7-9032-084a8ee05eda.png\" alt class=\"image--center mx-auto\" /></p>\n<p>You can also test that the server is running from the browser, by going to <a target=\"_blank\" href=\"http://localhost:11434/\">http://localhost:11434/</a></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1751118556153/9036a000-953f-4d27-86ec-9fa6d065c5b9.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Type <code>/bye</code> to exit the Ollama chat, and return to the terminal. You can also type <code>/?</code> for a list of other commands.</p>\n<p>Once you’ve exited Ollama and get back to the regular terminal, you can list the models you have downloaded using:</p>\n<pre><code class=\"lang-bash\">ollama list\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1751118764946/69ac4dae-bd4f-4ec2-b3d2-eb61a5b22770.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Next, download the <code>llama3.2-vision</code> model so we can build an app with image recognition. But this time, we don’t want to chat from the terminal, we want to build our own web app to interact with it. So we only want to pull the model, but not run it from the terminal.</p>\n<pre><code class=\"lang-bash\">ollama pull llama3.2-vision\n</code></pre>\n<p>This will download the model without starting the terminal chat. When the download finishes, close the terminal and exit Ollama from the menu bar. This will ensure Ollama releases the 11343 port before we try starting it in server only mode in the next step.</p>\n<p>Next, we’ll start up the ollama server without running a specific model. This way we can access it from the API only, without the terminal chat session going.</p>\n<pre><code class=\"lang-bash\">ollama serve\n</code></pre>\n<p>This will start up the Ollama server, without a specific model or chat running. Then, you can chat through the API and specify the model in your request.</p>\n<p>If you see an error about port 11434 already being in use, make sure you exited Ollama from the Mac menu bar first.</p>\n<p>Retest <a target=\"_blank\" href=\"http://localhost:11434/\">http://localhost:11434/</a> and you should still see the status page. You’ll also notice the server activity logged in the terminal as a <code>GET</code> request with a <code>200</code> response.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1751119493706/36495cc7-bc58-4820-bb88-c776d50aca15.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, the Ollama server is running and available by API. Now let’s get Claude Code installed. Be sure to keep this terminal window running for Ollama, and open a new terminal window for the next step.</p>\n<h2 id=\"heading-installing-claude-code-and-starting-a-new-project\">Installing Claude Code and starting a new project</h2>\n<p>Download and install <a target=\"_blank\" href=\"https://docs.anthropic.com/en/docs/claude-code/overview\">Claude Code</a> from the terminal:</p>\n<pre><code class=\"lang-bash\">npm install -g @anthropic-ai/claude-code\n</code></pre>\n<p>Once you have it installed, create a new folder for the project, and navigate into it.</p>\n<pre><code class=\"lang-bash\">mkdir inspection-app &amp;&amp; <span class=\"hljs-built_in\">cd</span> inspection-app\n</code></pre>\n<p>Now, start up Claude Code:</p>\n<pre><code class=\"lang-bash\">claude\n</code></pre>\n<p>You’ll see a confirmation screen asking for permission to allow Claude to access this folder.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1751120106569/cf4d2ff6-17b3-4f90-97e7-44a6a977945b.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Approve it, and then you’ll be greeted with a prompt. From here, you can begin chatting with Claude and tell it what to build.</p>\n<h2 id=\"heading-building-a-web-app-with-claude-code\">Building a web app with Claude Code</h2>\n<p>Paste in the following prompt, or try with your own app idea. Be sure to keep that first line to tell Claude that Ollama is running with the llama3.2-vision model available.</p>\n<pre><code class=\"lang-plaintext\">Ollama is running locally with llama3.2-vision. \nBuild a simple client-side web app for machinery inspections with photo upload to local storage. \nUse Ollama to examine the image and fill out the inspection.\n</code></pre>\n<p>Hit <strong>Enter</strong>, and you’ll see Claude start chugging away. Claude will know how to integrate with Ollama’s API. But if you’re curious about the details, here’s the <a target=\"_blank\" href=\"https://github.com/ollama/ollama/blob/main/docs/api.md#generate-request-streaming\">docs</a>.</p>\n<p>After some planning, you should get prompted to allow Claude to create a new file in the project folder. You can approve it once, or <em>always approve</em> for the rest of the session.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1751120480910/6406436a-a46a-40fb-ad17-98b360f96a57.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Give it a few more minutes to finish writing the JavaScript and CSS, and then you should have a basic web app ready to test out.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1751120622748/1e21bdf6-3f3e-433b-aeec-b7cb3de93ca4.png\" alt class=\"image--center mx-auto\" /></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1751120739195/74843249-54c0-4da1-a1d9-5807cb532de6.png\" alt class=\"image--center mx-auto\" /></p>\n<p><em>Not bad!</em> Time to test it out. Try uploading an image and analyzing it.</p>\n<h2 id=\"heading-dealing-with-cors-errors-when-connecting-to-ollama\">Dealing with CORS errors when connecting to Ollama</h2>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1751120844300/5708f800-f819-4d08-8eea-6c20629d90ec.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Oh, our first error. Ok, take a look at the browser console.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1751120906134/a6de0a2b-fef2-4724-87a9-c549cca49397.png\" alt class=\"image--center mx-auto\" /></p>\n<p><strong><em>CORS!</em></strong> 🤬</p>\n<p>The browser is blocking our web app from connecting to APIs on local host because the server (Ollama) is not accepting cross origin requests.</p>\n<blockquote>\n<p><strong>Note</strong>: CORS is an issue because our app is just a simple HTML file with everything running client-side. If we prompted Claude Code to build a Node.js or Python server for the app, then CORS wouldn’t be a problem as long as the API requests run from the server-side to Ollama.</p>\n</blockquote>\n<p>Go back to the terminal that has Ollama running and hit <code>control+c</code>, or close it and open a new terminal. Then restart Ollama with a wildcard to allow all origins.</p>\n<pre><code class=\"lang-bash\">OLLAMA_ORIGINS=<span class=\"hljs-string\">\"*\"</span> ollama serve\n</code></pre>\n<p>Clear out the console errors, and try again. This time, test it out with the internet off, and Ollama should still be able to generate a response. Just remember to turn it back on before asking Claude to make any edits to the app.</p>\n<p>You should now be able to use Ollama and the Llama3.2-vision model to analyze images and auto-fill the form.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1751121437162/25dbc674-f58e-4719-a02e-620e61d029fb.png\" alt class=\"image--center mx-auto\" /></p>\n<blockquote>\n<p><strong>Note</strong>: Ollama may take several minutes to respond, depending on your hardware. I’m running a ~4 year old Macbook Pro M1 with 16GB of RAM, and it takes about 2-3 minutes. Desktops with a decent video card will have much better response times.</p>\n</blockquote>\n<p><strong>Look at that!</strong> The vibe-coded app actually worked on the first prompt, once we had Ollama running with CORS enabled. From here, you can continue to prompt with Claude to add features and build your own custom, AI powered app that works completely offline with no internet!</p>\n<h2 id=\"heading-other-thoughts\">Other Thoughts</h2>\n<p>There’s a lot more I could say here about vibe-coding, and techniques to plan out your app before prompting. But I wanted to keep this tutorial about connecting to Ollama with a local web app and dealing with CORS errors. For more info on vibe-coding techniques, check out this <a target=\"_blank\" href=\"https://www.anthropic.com/engineering/claude-code-best-practices\">best practices</a> guide from Anthropic.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Newer language models have become more efficient and can now run on regular hardware using Ollama, enabling new use cases in environments where AI was previously not an option. Other AI tools like Claude Code can be used to build apps that integrate with Ollama, without writing a single line of code. This enables non-developers to build AI powered applications that can run on their local network, with no outside internet, and even use more advanced features like image recognition.</p>\n","contentMarkdown":"In this guide, I’ll show you how you can build and run your own AI-powered apps that work completely offline, and do it without writing a single line of code. I’ll be using my favorite vibe-coding tool, Claude Code, to build an app that connects to local AI models using Ollama.\n\n**This guide will cover:**\n\n* Installing Ollama and running models locally\n    \n* Installing Claude Code and starting a new project\n    \n* Building a web app with Claude Code\n    \n* Dealing with CORS errors when connecting to Ollama\n    \n* Using multi-modal models with image recognition\n    \n\nTo show the multi-modal input (image with prompt), I’ll be building an app for logging machinery inspections, that can analyze an equipment photo and auto-fill the inspection form. But we’ll keep the vibe-coded app simple and focus more on the process, so you can apply this to any AI powered app that you’d like to build and run offline.\n\n## Installing Ollama and running models locally\n\nI’ll be using Mac for this guide, but Ollama also has Windows and Linux installers, and most of this guide should be the same regardless of the OS.\n\nStart out by downloading and installing [Ollama](https://ollama.com/download), then open it up. You’ll notice a new llama icon in the menu bar, with a single option to *Quit Ollama*.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731150387579/b9ce4790-220e-4721-8346-8e4cbdd4d05c.png?auto=compress,format&format=webp&auto=compress,format&format=webp&auto=compress,format&format=webp align=\"left\")\n\nThere’s no other GUI— everything else is done from the terminal.\n\n### **Downloading and Prompting Models**\n\nNext, open the terminal and run:\n\n```bash\nollama run llama3.2:1b\n```\n\nThis will download the smaller, 1 billion parameter Llama3.2 model, then run it and let you begin prompting from the terminal. You’ll see several files download the first time running a model, but after that it should load quickly and be ready to start prompting.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1746880539273/d64ce232-ab23-451d-b481-e1f69624c61e.png?auto=compress,format&format=webp align=\"left\")\n\nType a prompt and hit **Enter**. You should see a response in the terminal.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1751118446059/5670c764-c38d-4ae7-9032-084a8ee05eda.png align=\"center\")\n\nYou can also test that the server is running from the browser, by going to [http://localhost:11434/](http://localhost:11434/)\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1751118556153/9036a000-953f-4d27-86ec-9fa6d065c5b9.png align=\"center\")\n\nType `/bye` to exit the Ollama chat, and return to the terminal. You can also type `/?` for a list of other commands.\n\nOnce you’ve exited Ollama and get back to the regular terminal, you can list the models you have downloaded using:\n\n```bash\nollama list\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1751118764946/69ac4dae-bd4f-4ec2-b3d2-eb61a5b22770.png align=\"center\")\n\nNext, download the `llama3.2-vision` model so we can build an app with image recognition. But this time, we don’t want to chat from the terminal, we want to build our own web app to interact with it. So we only want to pull the model, but not run it from the terminal.\n\n```bash\nollama pull llama3.2-vision\n```\n\nThis will download the model without starting the terminal chat. When the download finishes, close the terminal and exit Ollama from the menu bar. This will ensure Ollama releases the 11343 port before we try starting it in server only mode in the next step.\n\nNext, we’ll start up the ollama server without running a specific model. This way we can access it from the API only, without the terminal chat session going.\n\n```bash\nollama serve\n```\n\nThis will start up the Ollama server, without a specific model or chat running. Then, you can chat through the API and specify the model in your request.\n\nIf you see an error about port 11434 already being in use, make sure you exited Ollama from the Mac menu bar first.\n\nRetest [http://localhost:11434/](http://localhost:11434/) and you should still see the status page. You’ll also notice the server activity logged in the terminal as a `GET` request with a `200` response.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1751119493706/36495cc7-bc58-4820-bb88-c776d50aca15.png align=\"center\")\n\nOk, the Ollama server is running and available by API. Now let’s get Claude Code installed. Be sure to keep this terminal window running for Ollama, and open a new terminal window for the next step.\n\n## Installing Claude Code and starting a new project\n\nDownload and install [Claude Code](https://docs.anthropic.com/en/docs/claude-code/overview) from the terminal:\n\n```bash\nnpm install -g @anthropic-ai/claude-code\n```\n\nOnce you have it installed, create a new folder for the project, and navigate into it.\n\n```bash\nmkdir inspection-app && cd inspection-app\n```\n\nNow, start up Claude Code:\n\n```bash\nclaude\n```\n\nYou’ll see a confirmation screen asking for permission to allow Claude to access this folder.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1751120106569/cf4d2ff6-17b3-4f90-97e7-44a6a977945b.png align=\"center\")\n\nApprove it, and then you’ll be greeted with a prompt. From here, you can begin chatting with Claude and tell it what to build.\n\n## Building a web app with Claude Code\n\nPaste in the following prompt, or try with your own app idea. Be sure to keep that first line to tell Claude that Ollama is running with the llama3.2-vision model available.\n\n```plaintext\nOllama is running locally with llama3.2-vision. \nBuild a simple client-side web app for machinery inspections with photo upload to local storage. \nUse Ollama to examine the image and fill out the inspection. \n```\n\nHit **Enter**, and you’ll see Claude start chugging away. Claude will know how to integrate with Ollama’s API. But if you’re curious about the details, here’s the [docs](https://github.com/ollama/ollama/blob/main/docs/api.md#generate-request-streaming).\n\nAfter some planning, you should get prompted to allow Claude to create a new file in the project folder. You can approve it once, or *always approve* for the rest of the session.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1751120480910/6406436a-a46a-40fb-ad17-98b360f96a57.png align=\"center\")\n\nGive it a few more minutes to finish writing the JavaScript and CSS, and then you should have a basic web app ready to test out.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1751120622748/1e21bdf6-3f3e-433b-aeec-b7cb3de93ca4.png align=\"center\")\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1751120739195/74843249-54c0-4da1-a1d9-5807cb532de6.png align=\"center\")\n\n*Not bad!* Time to test it out. Try uploading an image and analyzing it.\n\n## Dealing with CORS errors when connecting to Ollama\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1751120844300/5708f800-f819-4d08-8eea-6c20629d90ec.png align=\"center\")\n\nOh, our first error. Ok, take a look at the browser console.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1751120906134/a6de0a2b-fef2-4724-87a9-c549cca49397.png align=\"center\")\n\n***CORS!*** 🤬\n\nThe browser is blocking our web app from connecting to APIs on local host because the server (Ollama) is not accepting cross origin requests.\n\n> **Note**: CORS is an issue because our app is just a simple HTML file with everything running client-side. If we prompted Claude Code to build a Node.js or Python server for the app, then CORS wouldn’t be a problem as long as the API requests run from the server-side to Ollama.\n\nGo back to the terminal that has Ollama running and hit `control+c`, or close it and open a new terminal. Then restart Ollama with a wildcard to allow all origins.\n\n```bash\nOLLAMA_ORIGINS=\"*\" ollama serve\n```\n\nClear out the console errors, and try again. This time, test it out with the internet off, and Ollama should still be able to generate a response. Just remember to turn it back on before asking Claude to make any edits to the app.\n\nYou should now be able to use Ollama and the Llama3.2-vision model to analyze images and auto-fill the form.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1751121437162/25dbc674-f58e-4719-a02e-620e61d029fb.png align=\"center\")\n\n> **Note**: Ollama may take several minutes to respond, depending on your hardware. I’m running a ~4 year old Macbook Pro M1 with 16GB of RAM, and it takes about 2-3 minutes. Desktops with a decent video card will have much better response times.\n\n**Look at that!** The vibe-coded app actually worked on the first prompt, once we had Ollama running with CORS enabled. From here, you can continue to prompt with Claude to add features and build your own custom, AI powered app that works completely offline with no internet!\n\n## Other Thoughts\n\nThere’s a lot more I could say here about vibe-coding, and techniques to plan out your app before prompting. But I wanted to keep this tutorial about connecting to Ollama with a local web app and dealing with CORS errors. For more info on vibe-coding techniques, check out this [best practices](https://www.anthropic.com/engineering/claude-code-best-practices) guide from Anthropic.\n\n## Conclusion\n\nNewer language models have become more efficient and can now run on regular hardware using Ollama, enabling new use cases in environments where AI was previously not an option. Other AI tools like Claude Code can be used to build apps that integrate with Ollama, without writing a single line of code. This enables non-developers to build AI powered applications that can run on their local network, with no outside internet, and even use more advanced features like image recognition.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1751125199660/d2ecd9c2-420d-4c60-b26b-59eb25257a56.png","brief":"In this guide, I’ll show you how you can build and run your own AI-powered apps that work completely offline, and do it without writing a single line of code. I’ll be using my favorite vibe-coding tool, Claude Code, to build an app that connects to l...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":6,"draft":"685f40e53abf9b442d29a0ec","tags":["6547328115caa6554c5d5bc0","66262e2391ab510b4cf347d5","6573264cc26ff09a814b849d","635ad52efe8087002dee4707","56744721958ef13879b9488e","576a1d6e13cc2eb2d90e2383","64db61864068aa09901095c7","648b5e20f9b78f110edf4195","56744722958ef13879b94f32","67c0b2be64ca958ae5fc6b6c"],"publication":"60771c264155da32fc83ad6e","metaDescription":"Learn to build offline AI-powered apps using Claude Code and Ollama without coding. From installation to handling CORS errors, and multi-modal prompts.","series":"67d765f0447947a764ae3d33","isNewsletterActivated":true,"coAuthors":[],"contributors":[{"_id":"686429d7dbf6bfe1b0c07128","user":"6862ad615b24d62bc4d6e567","stamp":"cmcj9d1z6000x02jx62b783rd"}],"lastActivity":"2025-06-30T16:02:23.212Z","pollOptions":[],"badges":[],"questionReplies":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"6862521f65d2733b6338c6d7"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"685917b545be8226cb86b293","createdAt":"2025-06-23T09:00:37.446Z","updatedAt":"2025-06-25T00:48:45.072Z","views":27,"isActive":true,"hasLatex":false,"popularity":7592.4008,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"So you want to integrate with the SEC API","subtitle":"A How-To Guide for Dealing with EDGAR's Oddities","cuid":"cmc8v9gw5000x02k10a986ny9","dateAdded":"2025-06-23T09:00:37.445Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"so-you-want-to-integrate-with-the-sec-api","content":"<blockquote>\n<p>Hello, yes I’d like to speak to the (developer experience) manager! <em>🤬</em></p>\n</blockquote>\n<p><img src=\"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExc20zcjhwbTk1c3JkdnN2bTVuODJkdXlzZGh1a2kxc2prMnF5YWRiMSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/wIU9MjBVKF4Qw/giphy.gif\" alt /></p>\n<p>☝️<strong>That was me a few weeks ago when I first tried using the</strong> <a target=\"_blank\" href=\"https://www.sec.gov/search-filings/edgar-application-programming-interfaces\"><strong>SEC API</strong></a><strong>.</strong></p>\n<p>I’ve integrated with a lot of APIs over the years, but none have thrown me quite as many curve balls as this ancient beast and its mysterious endpoints. But I’m over my rage phase now. I’m not here to throw shade. Actually, I’ve come to understand and appreciate the oddities of the SEC endpoints. Although difficult to work with at first, it turns out there are very valid reasons for the design choices that seem hell-bent on ruining your weekend project.</p>\n<p>In this post, I’ll break down the various hurdles when integrating with the SEC API, and provide some boilerplate JavaScript functions that can be used as a starting point for your project. There are some more advanced libraries and tools that can abstract away these complexities, but this post is for developers who would like to understand the data formats involved, and how to transform them for displaying in the UI without using other libraries. Let’s do it the hard way and learn something!</p>\n<h2 id=\"heading-problem-0-no-api-key-required\">Problem #0 : No API Key Required?</h2>\n<p>This one isn’t really an issue, just an oddity, and one of the first things I noticed. The SEC API doesn’t require an API key. They don’t even offer an option to create one!? But they do require a <code>User-Agent</code> header, to identify the app and provide contact info for the developer. It should be in the format <code>app_name email@example.com</code>, and is sort of like an API key <em>that you define</em>.</p>\n<p>This makes sense though, because the API is read-only. So the only purpose of the user-agent is to limit usage and prevent abuse.</p>\n<h2 id=\"heading-problem-1-cors-more-like-no-rs\">Problem #1: CORS? More Like NO-RS!</h2>\n<p>If you’re trying to fetch SEC data from the browser, especially from environments like CodePen or a local dev server, you’re gonna have a bad time. The SEC API does <strong>not</strong> include CORS headers, so you can’t access it directly from the frontend due to browser security restrictions.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1750508668610/d6bb531b-a50b-41a1-b033-489a8e2a9942.png\" alt class=\"image--center mx-auto\" /></p>\n<p>So how do you get around the CORS errors? You have a few options:</p>\n<p><strong>Option A: Use a proxy to fetch from browser/client-side (not for production)</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> proxy = <span class=\"hljs-string\">'https://corsproxy.io/?'</span>;\n<span class=\"hljs-keyword\">const</span> url = proxy + <span class=\"hljs-built_in\">encodeURIComponent</span>(<span class=\"hljs-string\">'https://www.sec.gov/files/company_tickers.json'</span>);\n\n<span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> fetch(url);\n<span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> res.json();\n\n<span class=\"hljs-comment\">/* or as a one-liner\nfetch('https://corsproxy.io/?'+encodeURIComponent('https://www.sec.gov/files/company_tickers.json'))\n  .then(r =&gt; r.json())\n  .then(console.log);\n*/</span>\n</code></pre>\n<p><strong>Option B: Fetch server-side</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// Node.js or serverless function with a backend fetch</span>\n<span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'https://www.sec.gov/files/company_tickers.json'</span>, {\n  <span class=\"hljs-attr\">headers</span>: { <span class=\"hljs-string\">'User-Agent'</span>: <span class=\"hljs-string\">'my-sec-app myemail@example.com'</span> }\n}).then(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =&gt;</span> r.json());\n</code></pre>\n<p><strong>Option C: Download and host the file</strong></p>\n<pre><code class=\"lang-bash\">curl https://www.sec.gov/files/company_tickers.json -o tickers.json\n</code></pre>\n<p>Alright, that’s easy enough to work around. But why are client-side requests blocked?</p>\n<p>CORS restrictions are not common on REST APIs that have API Keys, but this one only has a User-Agent header. The CORS restrictions help prevent abuse and heavy traffic from anonymous users.</p>\n<p>For this guide, I’ll be using Appsmith to run the APIs server-side, so CORS won’t be an issue.</p>\n<hr />\n<h3 id=\"heading-problem-2-ticker-lookup-format-is-not-an-array\">Problem #2: Ticker Lookup Format is Not an Array</h3>\n<p>Ok, you made it past the CORS issues, and now you want to list out companies and their tickers. Sounds easy?</p>\n<p>You’d expect the API to return <em>an array</em> of company <em>objects</em>. Instead, you get an <em>object</em> with numeric-strings as keys:</p>\n<pre><code class=\"lang-javascript\">{\n  <span class=\"hljs-string\">\"0\"</span>: { <span class=\"hljs-string\">\"cik_str\"</span>: <span class=\"hljs-number\">789019</span>, <span class=\"hljs-string\">\"ticker\"</span>: <span class=\"hljs-string\">\"MSFT\"</span>, <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"MICROSOFT CORP\"</span> },\n  <span class=\"hljs-string\">\"1\"</span>: { <span class=\"hljs-string\">\"cik_str\"</span>: <span class=\"hljs-number\">320193</span>, <span class=\"hljs-string\">\"ticker\"</span>: <span class=\"hljs-string\">\"AAPL\"</span>, <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"Apple Inc.\"</span> },\n...\n<span class=\"hljs-comment\">// </span>\n}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1750462348470/bfa5881a-d9ba-4135-95ce-da52c5b4c6cf.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Yes, that’s a single object with <strong>10034</strong> properties, using sequential integers-as-strings for the keys. 🤮</p>\n<p>Luckily this can easily be converted into an array of objects:</p>\n<pre><code class=\"lang-javascript\">    tickerTable(){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.values(GetTickers.data)\n    }\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1750462515436/c885863a-4f36-4df6-ad0e-b956e596e6e9.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, easy fix. <strong><em>BUT WHY!?!?</em></strong> Most UI tools expect an array of objects for the input data.</p>\n<p>Well, this format dates back to the 1990s for IDX/TSV files which were commonly used then for bulk downloads. Single objects are also faster for adding/updating a company’s properties vs an array format.</p>\n<h3 id=\"heading-problem-3-columnar-instead-of-row-based-data\">Problem #3: Columnar Instead of Row-Based Data</h3>\n<p>The <code>filings.recent</code> section returns each field as a separate array—one array for dates, another for form types, etc.</p>\n<pre><code class=\"lang-javascript\">{\n  <span class=\"hljs-string\">\"filingDate\"</span>: [<span class=\"hljs-string\">\"2024-06-18\"</span>, <span class=\"hljs-string\">\"2024-06-17\"</span>],\n  <span class=\"hljs-string\">\"form\"</span>: [<span class=\"hljs-string\">\"8-K\"</span>, <span class=\"hljs-string\">\"10-Q\"</span>],\n  <span class=\"hljs-string\">\"accessionNumber\"</span>: [<span class=\"hljs-string\">\"0000320193-24-000058\"</span>, <span class=\"hljs-string\">\"0000320193-24-000054\"</span>]\n}\n</code></pre>\n<p>Instead of an array of objects, it’s an object of arrays. Fun! 🫠</p>\n<p><img src=\"https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExdmtmZ3EzbmdvdGowYWYzbGpjMTM5MmRteTFramVobzNsM3YwamczeiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/ukGm72ZLZvYfS/giphy.gif\" alt /></p>\n<h4 id=\"heading-solution\">💡 Solution</h4>\n<p>Map over the list of headers and build an array of objects. This requires an outer loop for the list of fields, and an inner loop to reduce each row to an object.</p>\n<pre><code class=\"lang-javascript\">    fields: [\n        <span class=\"hljs-string\">'accessionNumber'</span>,<span class=\"hljs-string\">'filingDate'</span>,<span class=\"hljs-string\">'reportDate'</span>,\n        <span class=\"hljs-string\">'form'</span>,<span class=\"hljs-string\">'fileNumber'</span>,<span class=\"hljs-string\">'primaryDocument'</span>\n    ],\n\n    <span class=\"hljs-comment\">/** Convert SEC \"columns‑as‑arrays\" structure → rows of objects */</span>\nbuildSubmissions() {\n  <span class=\"hljs-keyword\">const</span> src = GetSubmissions.data.filings.recent; <span class=\"hljs-comment\">// SEC payload</span>\n  <span class=\"hljs-keyword\">const</span> n = <span class=\"hljs-built_in\">Math</span>.max(...this.fields.map(<span class=\"hljs-function\"><span class=\"hljs-params\">f</span> =&gt;</span> src[f] ?. length || <span class=\"hljs-number\">0</span>));\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Array</span>.from({\n    <span class=\"hljs-attr\">length</span>: n\n  }, <span class=\"hljs-function\">(<span class=\"hljs-params\">_, i</span>) =&gt;</span> <span class=\"hljs-built_in\">this</span>.fields.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">row, key</span>) =&gt;</span> {\n    row[key] = src[key] ?. [i] ?? <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// keep order + fill blanks</span>\n    <span class=\"hljs-keyword\">return</span> row;\n  }, {}));\n}\n</code></pre>\n<p>Now <code>buildSubmissions()</code> returns an array of rows ready for UI rendering.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1750510121800/6ee00f22-4ff3-4253-95c2-ee5f96e965ec.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Not nearly as easy as the last fix, but still manageable. But WHY?! What’s with all these weird formats?</p>\n<p>The \"columns-as-arrays\" structure found in <code>filings.recent</code> mirrors the bulk dataset format used in downloadable EDGAR index files going back decades (e.g., .tsv and .idx files). This format is efficient for batch processing and CSV-style exports.</p>\n<hr />\n<h3 id=\"heading-problem-4-cik-and-accession-numbers-require-manual-cleanup\">Problem #4: CIK and Accession Numbers Require Manual Cleanup</h3>\n<p>Most people only know companies by their name, and maybe their stock ticker, but not their CIK number. Unfortunately, it’s the CIK number you need in the URL to lookup company info. So first you have to lookup the CIK with a different endpoint, then use that to search for more info on the company.</p>\n<p>That’s not an uncommon pattern with REST APIs, but it is complicated by the leading zeros that must be added in the URLs. CIK numbers should be padded with zeros to ensure the string is 10 characters. But that’s not how the <code>/company_tickers.json</code> endpoint returns them.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1750510870992/2a5e1395-cf3c-4b14-86ac-7000147c56c5.png\" alt class=\"image--center mx-auto\" /></p>\n<p>So once you lookup the CIK number and want to use it in the next API, you have to add the extra zeros to make it 10 digits.</p>\n<pre><code class=\"lang-bash\">https://data.sec.gov/api/xbrl/companyfacts/CIK{{String(Table1.selectedRow.cik_str).padStart(10, <span class=\"hljs-string\">'0'</span>)}}.json\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1750511010430/190eb07f-6d87-402a-be0d-938363f71db2.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Also, the accession number includes dashes (<code>\"0000320193-24-000058\"</code>), but the URLs to filings on sec.gov require you to strip them out.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> accPlain = accessionNumber.replace(<span class=\"hljs-regexp\">/-/g</span>, <span class=\"hljs-string\">''</span>);\n<span class=\"hljs-keyword\">const</span> url = <span class=\"hljs-string\">`https://www.sec.gov/Archives/edgar/data/<span class=\"hljs-subst\">${cik}</span>/<span class=\"hljs-subst\">${accPlain}</span>/<span class=\"hljs-subst\">${primaryDocument}</span>`</span>;\n</code></pre>\n<p>So what’s the deal with this one? Your guess is as good as mine. It’s probably a limitation or requirement of the website’s archiving structure.</p>\n<h3 id=\"heading-problem-5-some-endpoints-return-xml\">Problem #5: Some Endpoints Return XML</h3>\n<p>You finally lookup the CIK number, add the zeros, and use it get a company filing, and—surprise—it’s XML, not JSON.</p>\n<h4 id=\"heading-solution-1\">💡 Solution</h4>\n<p>Use <a target=\"_blank\" href=\"https://github.com/NaturalIntelligence/fast-xml-parser\"><code>fast-xml-parser</code></a>:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> { XMLParser } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fast-xml-parser'</span>;\n\nconst parser = new XMLParser();\nconst parsed = parser.parse(xmlString);\n</code></pre>\n<p>Again, this one just comes down to the SEC API being old and slow to evolve to modern standards.</p>\n<hr />\n<h3 id=\"heading-so-whats-the-deal-why-so-many-hurdles-with-this-api\">So what’s the deal? Why so many hurdles with this API?</h3>\n<p>It’s tempting to chalk this up to outdated tech, and you wouldn’t be wrong. EDGAR was built in <strong>1993</strong> to support compliance and disclosure, not RESTful UIs. But there’s more to it than that.</p>\n<p>The “API” you see now is a modernized wrapper around legacy systems and bulk download indexes that haven’t changed in decades. The data structures returned by the API resemble CSVs and fixed-width formats because that’s what the wrapper is built around.</p>\n<p>Additionally, the SEC’s priority is public access, not developer convenience. Think “download 10 years of filings” more than “live queries from a React app.”</p>\n<p>In other words, the SEC API lacks a modern REST API experience because it’s not meant to be the backend for your project. It’s a public archive, and and the fact that it has an API at all is a bonus.</p>\n<hr />\n<h3 id=\"heading-conclusion\">Conclusion</h3>\n<p>The SEC API is not broken—it’s just built for a different audience, from a different era. But once you understand the quirks, it’s completely usable and incredibly powerful.</p>\n<p>Hopefully, this post helped you skip the rage phase and jump straight to working with the data. If you're building with Appsmith or another frontend framework, you can use the patterns and snippets here to normalize and present filings, company info, and primary documents in a user-friendly UI.</p>\n","contentMarkdown":"> Hello, yes I’d like to speak to the (developer experience) manager! *🤬*\n\n![](https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExc20zcjhwbTk1c3JkdnN2bTVuODJkdXlzZGh1a2kxc2prMnF5YWRiMSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/wIU9MjBVKF4Qw/giphy.gif align=\"left\")\n\n☝️**That was me a few weeks ago when I first tried using the** [**SEC API**](https://www.sec.gov/search-filings/edgar-application-programming-interfaces)**.**\n\nI’ve integrated with a lot of APIs over the years, but none have thrown me quite as many curve balls as this ancient beast and its mysterious endpoints. But I’m over my rage phase now. I’m not here to throw shade. Actually, I’ve come to understand and appreciate the oddities of the SEC endpoints. Although difficult to work with at first, it turns out there are very valid reasons for the design choices that seem hell-bent on ruining your weekend project.\n\nIn this post, I’ll break down the various hurdles when integrating with the SEC API, and provide some boilerplate JavaScript functions that can be used as a starting point for your project. There are some more advanced libraries and tools that can abstract away these complexities, but this post is for developers who would like to understand the data formats involved, and how to transform them for displaying in the UI without using other libraries. Let’s do it the hard way and learn something!\n\n## Problem #0 : No API Key Required?\n\nThis one isn’t really an issue, just an oddity, and one of the first things I noticed. The SEC API doesn’t require an API key. They don’t even offer an option to create one!? But they do require a `User-Agent` header, to identify the app and provide contact info for the developer. It should be in the format `app_name email@example.com`, and is sort of like an API key *that you define*.\n\nThis makes sense though, because the API is read-only. So the only purpose of the user-agent is to limit usage and prevent abuse.\n\n## Problem #1: CORS? More Like NO-RS!\n\nIf you’re trying to fetch SEC data from the browser, especially from environments like CodePen or a local dev server, you’re gonna have a bad time. The SEC API does **not** include CORS headers, so you can’t access it directly from the frontend due to browser security restrictions.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1750508668610/d6bb531b-a50b-41a1-b033-489a8e2a9942.png align=\"center\")\n\nSo how do you get around the CORS errors? You have a few options:\n\n**Option A: Use a proxy to fetch from browser/client-side (not for production)**\n\n```javascript\nconst proxy = 'https://corsproxy.io/?';\nconst url = proxy + encodeURIComponent('https://www.sec.gov/files/company_tickers.json');\n\nconst res = await fetch(url);\nconst data = await res.json();\n\n/* or as a one-liner\nfetch('https://corsproxy.io/?'+encodeURIComponent('https://www.sec.gov/files/company_tickers.json'))\n  .then(r => r.json())\n  .then(console.log);\n*/\n```\n\n**Option B: Fetch server-side**\n\n```javascript\n// Node.js or serverless function with a backend fetch\nconst data = await fetch('https://www.sec.gov/files/company_tickers.json', {\n  headers: { 'User-Agent': 'my-sec-app myemail@example.com' }\n}).then(r => r.json());\n```\n\n**Option C: Download and host the file**\n\n```bash\ncurl https://www.sec.gov/files/company_tickers.json -o tickers.json\n```\n\nAlright, that’s easy enough to work around. But why are client-side requests blocked?\n\nCORS restrictions are not common on REST APIs that have API Keys, but this one only has a User-Agent header. The CORS restrictions help prevent abuse and heavy traffic from anonymous users.\n\nFor this guide, I’ll be using Appsmith to run the APIs server-side, so CORS won’t be an issue.\n\n---\n\n### Problem #2: Ticker Lookup Format is Not an Array\n\nOk, you made it past the CORS issues, and now you want to list out companies and their tickers. Sounds easy?\n\nYou’d expect the API to return *an array* of company *objects*. Instead, you get an *object* with numeric-strings as keys:\n\n```javascript\n{\n  \"0\": { \"cik_str\": 789019, \"ticker\": \"MSFT\", \"title\": \"MICROSOFT CORP\" },\n  \"1\": { \"cik_str\": 320193, \"ticker\": \"AAPL\", \"title\": \"Apple Inc.\" },\n...\n// \n}\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1750462348470/bfa5881a-d9ba-4135-95ce-da52c5b4c6cf.png align=\"center\")\n\nYes, that’s a single object with **10034** properties, using sequential integers-as-strings for the keys. 🤮\n\nLuckily this can easily be converted into an array of objects:\n\n```javascript\n\ttickerTable(){\n\t\treturn Object.values(GetTickers.data)\n\t}\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1750462515436/c885863a-4f36-4df6-ad0e-b956e596e6e9.png align=\"center\")\n\nOk, easy fix. ***BUT WHY!?!?*** Most UI tools expect an array of objects for the input data.\n\nWell, this format dates back to the 1990s for IDX/TSV files which were commonly used then for bulk downloads. Single objects are also faster for adding/updating a company’s properties vs an array format.\n\n### Problem #3: Columnar Instead of Row-Based Data\n\nThe `filings.recent` section returns each field as a separate array—one array for dates, another for form types, etc.\n\n```javascript\n{\n  \"filingDate\": [\"2024-06-18\", \"2024-06-17\"],\n  \"form\": [\"8-K\", \"10-Q\"],\n  \"accessionNumber\": [\"0000320193-24-000058\", \"0000320193-24-000054\"]\n}\n```\n\nInstead of an array of objects, it’s an object of arrays. Fun! 🫠\n\n![](https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExdmtmZ3EzbmdvdGowYWYzbGpjMTM5MmRteTFramVobzNsM3YwamczeiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/ukGm72ZLZvYfS/giphy.gif align=\"left\")\n\n#### 💡 Solution\n\nMap over the list of headers and build an array of objects. This requires an outer loop for the list of fields, and an inner loop to reduce each row to an object.\n\n```javascript\n\tfields: [\n\t\t'accessionNumber','filingDate','reportDate',\n\t\t'form','fileNumber','primaryDocument'\n\t],\n\n\t/** Convert SEC \"columns‑as‑arrays\" structure → rows of objects */\nbuildSubmissions() {\n  const src = GetSubmissions.data.filings.recent; // SEC payload\n  const n = Math.max(...this.fields.map(f => src[f] ?. length || 0));\n  return Array.from({\n    length: n\n  }, (_, i) => this.fields.reduce((row, key) => {\n    row[key] = src[key] ?. [i] ?? null; // keep order + fill blanks\n    return row;\n  }, {}));\n}\n```\n\nNow `buildSubmissions()` returns an array of rows ready for UI rendering.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1750510121800/6ee00f22-4ff3-4253-95c2-ee5f96e965ec.png align=\"center\")\n\nNot nearly as easy as the last fix, but still manageable. But WHY?! What’s with all these weird formats?\n\nThe \"columns-as-arrays\" structure found in `filings.recent` mirrors the bulk dataset format used in downloadable EDGAR index files going back decades (e.g., .tsv and .idx files). This format is efficient for batch processing and CSV-style exports.\n\n---\n\n### Problem #4: CIK and Accession Numbers Require Manual Cleanup\n\nMost people only know companies by their name, and maybe their stock ticker, but not their CIK number. Unfortunately, it’s the CIK number you need in the URL to lookup company info. So first you have to lookup the CIK with a different endpoint, then use that to search for more info on the company.\n\nThat’s not an uncommon pattern with REST APIs, but it is complicated by the leading zeros that must be added in the URLs. CIK numbers should be padded with zeros to ensure the string is 10 characters. But that’s not how the `/company_tickers.json` endpoint returns them.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1750510870992/2a5e1395-cf3c-4b14-86ac-7000147c56c5.png align=\"center\")\n\nSo once you lookup the CIK number and want to use it in the next API, you have to add the extra zeros to make it 10 digits.\n\n```bash\nhttps://data.sec.gov/api/xbrl/companyfacts/CIK{{String(Table1.selectedRow.cik_str).padStart(10, '0')}}.json\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1750511010430/190eb07f-6d87-402a-be0d-938363f71db2.png align=\"center\")\n\nAlso, the accession number includes dashes (`\"0000320193-24-000058\"`), but the URLs to filings on sec.gov require you to strip them out.\n\n```javascript\nconst accPlain = accessionNumber.replace(/-/g, '');\nconst url = `https://www.sec.gov/Archives/edgar/data/${cik}/${accPlain}/${primaryDocument}`;\n```\n\nSo what’s the deal with this one? Your guess is as good as mine. It’s probably a limitation or requirement of the website’s archiving structure.\n\n### Problem #5: Some Endpoints Return XML\n\nYou finally lookup the CIK number, add the zeros, and use it get a company filing, and—surprise—it’s XML, not JSON.\n\n#### 💡 Solution\n\nUse [`fast-xml-parser`](https://github.com/NaturalIntelligence/fast-xml-parser):\n\n```python\nimport { XMLParser } from 'fast-xml-parser';\n\nconst parser = new XMLParser();\nconst parsed = parser.parse(xmlString);\n```\n\nAgain, this one just comes down to the SEC API being old and slow to evolve to modern standards.\n\n---\n\n### So what’s the deal? Why so many hurdles with this API?\n\nIt’s tempting to chalk this up to outdated tech, and you wouldn’t be wrong. EDGAR was built in **1993** to support compliance and disclosure, not RESTful UIs. But there’s more to it than that.\n\nThe “API” you see now is a modernized wrapper around legacy systems and bulk download indexes that haven’t changed in decades. The data structures returned by the API resemble CSVs and fixed-width formats because that’s what the wrapper is built around.\n\nAdditionally, the SEC’s priority is public access, not developer convenience. Think “download 10 years of filings” more than “live queries from a React app.”\n\nIn other words, the SEC API lacks a modern REST API experience because it’s not meant to be the backend for your project. It’s a public archive, and and the fact that it has an API at all is a bonus.\n\n---\n\n### Conclusion\n\nThe SEC API is not broken—it’s just built for a different audience, from a different era. But once you understand the quirks, it’s completely usable and incredibly powerful.\n\nHopefully, this post helped you skip the rage phase and jump straight to working with the data. If you're building with Appsmith or another frontend framework, you can use the patterns and snippets here to normalize and present filings, company info, and primary documents in a user-friendly UI.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1750518143975/04356db1-9dcd-46f5-9ae2-5b30a17d4220.png","brief":"Hello, yes I’d like to speak to the (developer experience) manager! 🤬\n\n\n☝️That was me a few weeks ago when I first tried using the SEC API.\nI’ve integrated with a lot of APIs over the years, but none have thrown me quite as many curve balls as this ...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":7,"draft":"6855e1c42a674d3c9ac4664b","tags":["59809b28e9cd026f4a60db7a","59809b28e9cd026f4a60db7b","62c42d87c0401b3dcbd00661","5fb32dcd9f9a5659bcfe3248","56744721958ef13879b94cad","56744721958ef13879b94dec","56744721958ef13879b94b0b","5676154ae64b075af6ade54e"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"dateUpdated":"2025-06-25T00:48:45.071Z","hasCustomDate":false,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"685917b545be8226cb86b293"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"6846a2c2bc4373ab2e385654","createdAt":"2025-06-09T09:00:50.891Z","updatedAt":"2025-06-09T09:00:50.891Z","views":356,"isActive":true,"hasLatex":false,"popularity":7565.5211,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Knowledge Graph Generator with Claude Desktop and Neo4j MCP","subtitle":"Building A Text to Cypher Agent Without A Single Line Of Code","cuid":"cmbov3txj000002l51jp6atux","dateAdded":"2025-06-09T09:00:50.887Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"knowledge-graph-generator-with-claude-desktop-and-neo4j-mcp","content":"<p>Knowledge graphs are more than just interesting data visualizations. They’re also extremely effective as a data source for RAG (Retrieval-Augmented Generation), and can significantly improve LLM responses when compared to vector RAG. But building a quality knowledge graph requires careful planning of the ontology, or system of entities and relationships to extract.</p>\n<p>AI tools like ChatGPT can help in parsing unstructured text and generating Cypher queries to insert the data into a graph database, but that still leaves you copying/pasting to run the queries. Fortunately, Neo4j recently released an MCP server, enabling AI agents to interact directly with the database.</p>\n<p>In this guide, I’ll show you how to use Claude Desktop with the Neo4j MCP server on MacOS to automatically generate graphs from unstructured text.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Deploying Neo4j locally with Docker</p>\n</li>\n<li><p>Installing Claude Desktop</p>\n</li>\n<li><p>Adding the Neo4j MCP Server</p>\n</li>\n<li><p>Generating graphs from unstructured text</p>\n</li>\n</ul>\n<p><em>Let’s get to it!</em></p>\n<h2 id=\"heading-deploying-neo4j-locally-with-docker\">Deploying Neo4j Locally with Docker</h2>\n<p>Start out by installing <a target=\"_blank\" href=\"https://www.docker.com/products/docker-desktop/\">Docker Desktop</a> if not already installed. Then open it and go to the Images section. Type <code>neo4j</code> in the search, then click <strong>Run</strong> on the top result.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1749307825004/594959c3-883b-4149-b686-19f52d0ad995.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Give the container a minute to start up, then select the <strong>Containers</strong> section on the left. Click <code>Show all ports</code> on the Neo4j container, then click to open the web console on <a target=\"_blank\" href=\"http://localhost:7474/\">port 7474</a>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1749308298439/fa7cd9a8-6c92-4649-bbd3-a0f16a46b168.png\" alt class=\"image--center mx-auto\" /></p>\n<h3 id=\"heading-neo4j-dashboard\">Neo4j Dashboard</h3>\n<p>You’ll be prompted to login to the database and then change your password on first login. The default user name and password are both <code>neo4j</code>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1749308464054/83d7d852-e4ce-4c1b-b2a0-aa9aa38cd7bb.png\" alt class=\"image--center mx-auto\" /></p>\n<p><strong>Note</strong>: The web interface runs on port 7474, but it uses port 7687 to connect to the database.</p>\n<p>Click <strong>Connect</strong>, then run a query to create a few related nodes.</p>\n<pre><code class=\"lang-plaintext\">CREATE\n  (bb:Show {title: \"Breaking Bad\"}),\n  (crime:Genre {name: \"Crime Drama\"}),\n\n  (walter:Character {name: \"Walter White\"}),\n  (jesse:Character {name: \"Jesse Pinkman\"}),\n  (skyler:Character {name: \"Skyler White\"}),\n  (hank:Character {name: \"Hank Schrader\"}),\n\n  (walter)-[:APPEARS_IN]-&gt;(bb),\n  (jesse)-[:APPEARS_IN]-&gt;(bb),\n  (skyler)-[:APPEARS_IN]-&gt;(bb),\n  (hank)-[:APPEARS_IN]-&gt;(bb),\n\n  (bb)-[:HAS_GENRE]-&gt;(crime),\n\n  (walter)-[:PARTNER]-&gt;(jesse),\n  (walter)-[:MARRIED_TO]-&gt;(skyler),\n  (skyler)-[:SIBLING_IN_LAW]-&gt;(hank),\n  (hank)-[:INVESTIGATES]-&gt;(walter);\n</code></pre>\n<p>You should see the new node and relationship types appear on the left sidebar. Now run a query to show all the nodes and relationships.</p>\n<pre><code class=\"lang-plaintext\">MATCH (n)-[r]-&gt;(m)\nRETURN n, r, m\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1749309493119/91f82139-957c-4a92-b24a-a926c9129bb4.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, Neo4j is up and running. Now clear out the database so we can start fresh in the next section.</p>\n<pre><code class=\"lang-plaintext\">MATCH (n) DETACH DELETE n\n</code></pre>\n<h2 id=\"heading-installing-claude-desktop\">Installing Claude Desktop</h2>\n<p>Next, install <a target=\"_blank\" href=\"https://claude.ai/download\">Claude Desktop</a>, open it and go to the <strong>Settings</strong>, then <strong>Developer</strong>. Then click <strong>Edit Config</strong>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1749309770123/c5f96851-4d46-4de0-b416-a17ee202ef38.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-adding-the-neo4j-mcp-server\">Adding the Neo4j MCP Server</h2>\n<p>Since Claude Desktop is running locally, we can connect to any local server also running on the same machine, without having to expose it to the internet.</p>\n<p>That will open up the folder containing the <code>claude_desktop_config.json</code> file. Open it with any text editor, and paste in the MCP config from the <a target=\"_blank\" href=\"https://pypi.org/project/mcp-neo4j-cypher/\">mcp-neo4j-cypher</a> server.</p>\n<pre><code class=\"lang-json\">{\n  <span class=\"hljs-attr\">\"mcpServers\"</span>: {\n    <span class=\"hljs-attr\">\"neo4j-aura\"</span>: {\n      <span class=\"hljs-attr\">\"command\"</span>: <span class=\"hljs-string\">\"uvx\"</span>,\n      <span class=\"hljs-attr\">\"args\"</span>: [\n        <span class=\"hljs-string\">\"mcp-neo4j-cypher@0.2.2\"</span>,\n        <span class=\"hljs-string\">\"--transport\"</span>,\n        <span class=\"hljs-string\">\"stdio\"</span>\n      ],\n      <span class=\"hljs-attr\">\"env\"</span>: {\n        <span class=\"hljs-attr\">\"NEO4J_URI\"</span>: <span class=\"hljs-string\">\"bolt://localhost:7687\"</span>,\n        <span class=\"hljs-attr\">\"NEO4J_USERNAME\"</span>: <span class=\"hljs-string\">\"neo4j\"</span>,\n        <span class=\"hljs-attr\">\"NEO4J_PASSWORD\"</span>: <span class=\"hljs-string\">\"YOUR_PASSWORD\"</span>,\n        <span class=\"hljs-attr\">\"NEO4J_DATABASE\"</span>: <span class=\"hljs-string\">\"neo4j\"</span>\n      }\n    }\n  }\n}\n</code></pre>\n<p>Enter your Neo4j password in place of <code>YOUR_PASSWORD</code> and then save the file.</p>\n<p>Next, install the uvx Python library if not already installed.</p>\n<pre><code class=\"lang-bash\">pip install --user pipx\npipx install uvx            \npipx ensurepath\n</code></pre>\n<p>This will allow Claude Desktop to communicate with the MCP server and Neo4j with the same environment.</p>\n<p>If you have any issues (or you want to use an existing install of uvx), you may need to change <code>“command”: “uvx“</code> to <em>your path</em> for uvx. Run <code>which uvx</code> in the terminal to get the path, then replace “uvx” with the full path in the claude_desktop_config.json.</p>\n<p>Lastly, restart Claude Desktop so the MCP server config changes can take effect. If you see an error about connecting to the MCP, try changing the “uvx” command to your path.</p>\n<h2 id=\"heading-generating-graphs-from-unstructured-text\">Generating graphs from unstructured text</h2>\n<p>Ok, time to test it out. Claude Desktop should be able to access the Neo4j database now. Start a new chat and upload any text file that you want to turn into a graph. For this example, I’m using the text from the Wikipedia article on The Hitch Hiker’s Guide to the Galaxy.</p>\n<p>Once the file is attached, ask Claude to create a Neo4j graph based on the entities and relationships in the document.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1749310973308/5c0dc616-8f5d-483f-83fc-9862e6b6a37f.png\" alt class=\"image--center mx-auto\" /></p>\n<p>You should be prompted to approve permission for each function or tool in the Neo4j MCP server. You can <em>approve once</em>, or <em>approve all</em> so that it doesn’t have to ask every time.</p>\n<p>Give it a few minutes, and you should see several queries ran during the chat.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1749311092403/bca7733f-23c9-48b6-bf11-24943cb9214f.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Now head back to Neo4j and refresh the dashboard. Then run a query to display all the nodes and edges.</p>\n<pre><code class=\"lang-plaintext\">MATCH (n)-[r]-&gt;(m)\nRETURN n, r, m\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1749311179941/5602a5a2-97b5-4fd1-8aeb-40fbc3a61b19.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Look at that! A complete graph with multiple node and relationship types, complex, multi-hop relationships, and metadata, all generated from a simple prompt! And this is just a basic example. You can get more detailed with the prompt and relationships to extract, or use JSON or CSVs as input to build relationships based on foreign keys.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Knowledge graphs are amazing tools for data visualization and RAG, but building them has traditionally been difficult and time-consuming. AI tools are becoming more useful for graph generation though, and now MCPs can be used to automate the entire process of NER (Named-Entity Recognition) data extraction, Cypher query writing, and running the actual queries. With just a simple prompt, you can now convert unstructured input data into a complex knowledge graphs in only a few seconds.</p>\n","contentMarkdown":"Knowledge graphs are more than just interesting data visualizations. They’re also extremely effective as a data source for RAG (Retrieval-Augmented Generation), and can significantly improve LLM responses when compared to vector RAG. But building a quality knowledge graph requires careful planning of the ontology, or system of entities and relationships to extract.\n\nAI tools like ChatGPT can help in parsing unstructured text and generating Cypher queries to insert the data into a graph database, but that still leaves you copying/pasting to run the queries. Fortunately, Neo4j recently released an MCP server, enabling AI agents to interact directly with the database.\n\nIn this guide, I’ll show you how to use Claude Desktop with the Neo4j MCP server on MacOS to automatically generate graphs from unstructured text.\n\n**This guide will cover:**\n\n* Deploying Neo4j locally with Docker\n    \n* Installing Claude Desktop\n    \n* Adding the Neo4j MCP Server\n    \n* Generating graphs from unstructured text\n    \n\n*Let’s get to it!*\n\n## Deploying Neo4j Locally with Docker\n\nStart out by installing [Docker Desktop](https://www.docker.com/products/docker-desktop/) if not already installed. Then open it and go to the Images section. Type `neo4j` in the search, then click **Run** on the top result.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1749307825004/594959c3-883b-4149-b686-19f52d0ad995.png align=\"center\")\n\nGive the container a minute to start up, then select the **Containers** section on the left. Click `Show all ports` on the Neo4j container, then click to open the web console on [port 7474](http://localhost:7474/).\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1749308298439/fa7cd9a8-6c92-4649-bbd3-a0f16a46b168.png align=\"center\")\n\n### Neo4j Dashboard\n\nYou’ll be prompted to login to the database and then change your password on first login. The default user name and password are both `neo4j`.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1749308464054/83d7d852-e4ce-4c1b-b2a0-aa9aa38cd7bb.png align=\"center\")\n\n**Note**: The web interface runs on port 7474, but it uses port 7687 to connect to the database.\n\nClick **Connect**, then run a query to create a few related nodes.\n\n```plaintext\nCREATE\n  (bb:Show {title: \"Breaking Bad\"}),\n  (crime:Genre {name: \"Crime Drama\"}),\n\n  (walter:Character {name: \"Walter White\"}),\n  (jesse:Character {name: \"Jesse Pinkman\"}),\n  (skyler:Character {name: \"Skyler White\"}),\n  (hank:Character {name: \"Hank Schrader\"}),\n\n  (walter)-[:APPEARS_IN]->(bb),\n  (jesse)-[:APPEARS_IN]->(bb),\n  (skyler)-[:APPEARS_IN]->(bb),\n  (hank)-[:APPEARS_IN]->(bb),\n\n  (bb)-[:HAS_GENRE]->(crime),\n\n  (walter)-[:PARTNER]->(jesse),\n  (walter)-[:MARRIED_TO]->(skyler),\n  (skyler)-[:SIBLING_IN_LAW]->(hank),\n  (hank)-[:INVESTIGATES]->(walter);\n```\n\nYou should see the new node and relationship types appear on the left sidebar. Now run a query to show all the nodes and relationships.\n\n```plaintext\nMATCH (n)-[r]->(m)\nRETURN n, r, m\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1749309493119/91f82139-957c-4a92-b24a-a926c9129bb4.png align=\"center\")\n\nOk, Neo4j is up and running. Now clear out the database so we can start fresh in the next section.\n\n```plaintext\nMATCH (n) DETACH DELETE n\n```\n\n## Installing Claude Desktop\n\nNext, install [Claude Desktop](https://claude.ai/download), open it and go to the **Settings**, then **Developer**. Then click **Edit Config**.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1749309770123/c5f96851-4d46-4de0-b416-a17ee202ef38.png align=\"center\")\n\n## Adding the Neo4j MCP Server\n\nSince Claude Desktop is running locally, we can connect to any local server also running on the same machine, without having to expose it to the internet.\n\nThat will open up the folder containing the `claude_desktop_config.json` file. Open it with any text editor, and paste in the MCP config from the [mcp-neo4j-cypher](https://pypi.org/project/mcp-neo4j-cypher/) server.\n\n```json\n{\n  \"mcpServers\": {\n    \"neo4j-aura\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-neo4j-cypher@0.2.2\",\n        \"--transport\",\n        \"stdio\"\n      ],\n      \"env\": {\n        \"NEO4J_URI\": \"bolt://localhost:7687\",\n        \"NEO4J_USERNAME\": \"neo4j\",\n        \"NEO4J_PASSWORD\": \"YOUR_PASSWORD\",\n        \"NEO4J_DATABASE\": \"neo4j\"\n      }\n    }\n  }\n}\n```\n\nEnter your Neo4j password in place of `YOUR_PASSWORD` and then save the file.\n\nNext, install the uvx Python library if not already installed.\n\n```bash\npip install --user pipx\npipx install uvx            \npipx ensurepath\n```\n\nThis will allow Claude Desktop to communicate with the MCP server and Neo4j with the same environment.\n\nIf you have any issues (or you want to use an existing install of uvx), you may need to change `“command”: “uvx“` to *your path* for uvx. Run `which uvx` in the terminal to get the path, then replace “uvx” with the full path in the claude\\_desktop\\_config.json.\n\nLastly, restart Claude Desktop so the MCP server config changes can take effect. If you see an error about connecting to the MCP, try changing the “uvx” command to your path.\n\n## Generating graphs from unstructured text\n\nOk, time to test it out. Claude Desktop should be able to access the Neo4j database now. Start a new chat and upload any text file that you want to turn into a graph. For this example, I’m using the text from the Wikipedia article on The Hitch Hiker’s Guide to the Galaxy.\n\nOnce the file is attached, ask Claude to create a Neo4j graph based on the entities and relationships in the document.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1749310973308/5c0dc616-8f5d-483f-83fc-9862e6b6a37f.png align=\"center\")\n\nYou should be prompted to approve permission for each function or tool in the Neo4j MCP server. You can *approve once*, or *approve all* so that it doesn’t have to ask every time.\n\nGive it a few minutes, and you should see several queries ran during the chat.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1749311092403/bca7733f-23c9-48b6-bf11-24943cb9214f.png align=\"center\")\n\nNow head back to Neo4j and refresh the dashboard. Then run a query to display all the nodes and edges.\n\n```plaintext\nMATCH (n)-[r]->(m)\nRETURN n, r, m\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1749311179941/5602a5a2-97b5-4fd1-8aeb-40fbc3a61b19.png align=\"center\")\n\nLook at that! A complete graph with multiple node and relationship types, complex, multi-hop relationships, and metadata, all generated from a simple prompt! And this is just a basic example. You can get more detailed with the prompt and relationships to extract, or use JSON or CSVs as input to build relationships based on foreign keys.\n\n## Conclusion\n\nKnowledge graphs are amazing tools for data visualization and RAG, but building them has traditionally been difficult and time-consuming. AI tools are becoming more useful for graph generation though, and now MCPs can be used to automate the entire process of NER (Named-Entity Recognition) data extraction, Cypher query writing, and running the actual queries. With just a simple prompt, you can now convert unstructured input data into a complex knowledge graphs in only a few seconds.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1749393402402/d4f8d4a9-a959-4d2c-9d75-d6642ad2191e.png","brief":"Knowledge graphs are more than just interesting data visualizations. They’re also extremely effective as a data source for RAG (Retrieval-Augmented Generation), and can significantly improve LLM responses when compared to vector RAG. But building a q...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":5,"draft":"6844432a9bdc3fd38224a029","tags":["56744722958ef13879b94e4b","63c1667e09eddfeb66db5ebb","64db61864068aa09901095c7","648b5e20f9b78f110edf4195","67d49c2ede985f9e45cf942f","65102817dae1474f64f9c4f8","635ad52efe8087002dee4707","599281200bcf15061f141025","56744721958ef13879b9488e"],"publication":"60771c264155da32fc83ad6e","ogImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1749393418027/578d9b10-e253-41c5-9d4a-83401d76cf38.png","metaTitle":"Generate Knowledge Graphs with Claude and Neo4j","series":"67d765f0447947a764ae3d33","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"6846a2c2bc4373ab2e385654"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"683c31a9d5f901e6d995ad78","createdAt":"2025-06-01T10:55:37.378Z","updatedAt":"2025-06-01T10:55:37.378Z","views":50,"isActive":true,"hasLatex":false,"popularity":7550.3142,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Building an AI-Powered Discord Bot with Railway and Pinecone","subtitle":"Automating Server Moderation with Python","cuid":"cmbdjom8w000i09jpdw4i9lhg","dateAdded":"2025-06-01T10:55:37.376Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"building-an-ai-powered-discord-bot-with-railway-and-pinecone","content":"<p>Discord may be known for gaming, but it’s also widely used as a community and support forum for tech companies. Regardless of the use though, pretty much ever server has to deal with spam and scammers at some point. Discord has a few simple tools built-in to help combat this, but they don’t catch everything.</p>\n<p>You can try to catch everything yourself, or maybe elevate some community members to moderators, but someone has to be online to see and remove the offending posts quickly. This is a perfect job for a Discord bot.</p>\n<p>In this guide, I’ll show you how to build an AI-powered Discord bot using a Python script running in <a target=\"_blank\" href=\"https://railway.com/\">Railway</a>, and a <a target=\"_blank\" href=\"https://www.pinecone.io/\">Pinecone</a> Assistant.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Creating a Discord bot and installing it to a server</p>\n</li>\n<li><p>Running the bot from a Python script in Railway</p>\n</li>\n<li><p>Creating a Pinecone Assistant</p>\n</li>\n<li><p>Integrating the Discord bot with Pinecone</p>\n</li>\n</ul>\n<p>Let’s get started!</p>\n<h2 id=\"heading-creating-a-discord-bot\">Creating a Discord bot</h2>\n<p>Start out by going to the <a target=\"_blank\" href=\"https://discord.com/developers/applications\">Discord Applications</a> page click <strong>New Application</strong>. Give it a name, agree to the terms, and click <strong>Create</strong>. This will take you to the app’s setting page.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748719198636/cb6ed2d3-c095-42fa-8075-46829ffb385d.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Go to the <strong>Bot</strong> section on the left sidebar, and then scroll down to <strong>Privileged Gateway Intents</strong>.</p>\n<ul>\n<li><p>enable SERVER MEMBERS INTENT</p>\n</li>\n<li><p>enable MESSAGE CONTENT INTENT</p>\n</li>\n</ul>\n<p>Scroll down to Bot Permissions and enable:</p>\n<p>✅ View Channels<br />✅ Send Messages<br />✅ Manage Messages (required to delete messages)<br />✅ Read Message History</p>\n<p>Be sure to click <strong>SAVE</strong> before installing the bot in the next step!</p>\n<h2 id=\"heading-installing-the-bot-to-a-server\">Installing the bot to a server</h2>\n<p>Ok, the bot is created and the permissions are set, but we haven’t added the bot to a server yet. Next, go to the <strong>OAuth2</strong> tab.</p>\n<p>Scroll down to the <strong>Scopes</strong> section and enable the <code>bot</code> scope. Then, under Bot Permissions, enable:</p>\n<ul>\n<li><p>Send Messages</p>\n</li>\n<li><p>Send Messages in Threads</p>\n</li>\n<li><p>Read Message History</p>\n</li>\n<li><p>View Channels</p>\n</li>\n</ul>\n<p>But wait, didn’t we just turn on those same settings in the Bot section? Kind of… In the Bot section, you’re setting the max settings this Discord app should ever have, no matter where it’s installed. Then, in the OAuth2 section, you are selecting the permissions for a single install of the bot on a specific server. You can request up-to the same permissions as the Bot tab, but not more.</p>\n<p>Scroll to the bottom and copy the GENERATED URL. This URL contains a <code>permissions=#</code> parameter, where the number is a unique integer representing the exact combination of permissions you’ve selected.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748719849255/bfcf5a07-fa84-4aad-a349-4b737967d9a6.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Open the URL and you should be prompted to install the bot to a server. Select your server, and authorize the bot.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748719903711/45e58b9d-9a61-4ad5-a034-ab53ab74b655.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Alright, the bot has been added to the server. You should see a welcome message in the server chat.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748720026643/b3132490-6620-46c1-8ab5-8822f023fc0c.png\" alt class=\"image--center mx-auto\" /></p>\n<p>At this point, the bot has permissions to begin posting in the channel. But we don’t actually have a bot running anywhere. We need to set up a server where the bot can run and listen for messages to reply to.</p>\n<h2 id=\"heading-running-the-bot-from-a-python-script-in-railway\">Running the bot from a Python script in Railway</h2>\n<p>Up to this point, I’ve used ‘bot’ to refer to the application we created in Discord, and the settings and permissions that go with it. But that’s just part of the solution. It’s more like an account or identity for the bot, not the bot itself. The logic and actions come from running custom code to interact the bot account and the server where the bot is installed.</p>\n<p>For this guide, I’ll be using Railway to run a Python script to act as our bot. Railway offers a free <em>trial</em> with no credit card required. There are some free alternatives, but they require work-arounds to keep the bot awake and online. If you prefer a completely free service, try Replit’s free tier and search ‘Discord bot keep alive’ for a workaround to keep the bot from going to sleep.</p>\n<h3 id=\"heading-bot-github-repo\">Bot GitHub Repo</h3>\n<p>Start out by creating a GitHub repo for the project. You can make it private if you want. Add the three files below:</p>\n<p><strong>runtime.txt</strong></p>\n<pre><code class=\"lang-plaintext\">python-3.11.8\n</code></pre>\n<p><strong>requirements.txt</strong></p>\n<pre><code class=\"lang-plaintext\">discord.py==2.3.2\npinecone\n</code></pre>\n<p><strong>main.py</strong></p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> discord\n<span class=\"hljs-keyword\">from</span> discord.ext <span class=\"hljs-keyword\">import</span> commands\n\nintents = discord.Intents.default()\nintents.message_content = <span class=\"hljs-literal\">True</span>\nintents.guilds = <span class=\"hljs-literal\">True</span>\nintents.messages = <span class=\"hljs-literal\">True</span>\n\nbot = commands.Bot(command_prefix=<span class=\"hljs-string\">\"!\"</span>, intents=intents)\n\n<span class=\"hljs-meta\">@bot.event</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">on_ready</span>():</span>\n    print(<span class=\"hljs-string\">f\"✅ Logged in as <span class=\"hljs-subst\">{bot.user}</span>\"</span>)\n\n<span class=\"hljs-meta\">@bot.event</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">on_message</span>(<span class=\"hljs-params\">message</span>):</span>\n    <span class=\"hljs-keyword\">if</span> message.author.bot:\n        <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-keyword\">if</span> bot.user <span class=\"hljs-keyword\">in</span> message.mentions:\n        <span class=\"hljs-keyword\">await</span> message.reply(<span class=\"hljs-string\">\"Hello from Discord-bot!\"</span>)  <span class=\"hljs-comment\"># ⬅️ reply to original message</span>\n\n    <span class=\"hljs-keyword\">await</span> bot.process_commands(message)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    bot.run(os.environ[<span class=\"hljs-string\">\"DISCORD_TOKEN\"</span>])\n</code></pre>\n<p>This will start up the bot and log it into any server where it has been installed (using the generated link), then run the <code>on_message()</code> function whenever a message is posted. The function then checks to see if the bot was mentioned, and if so, replies ‘Hello from Discord-bot!’.</p>\n<p>Once you have these 3 files saved to a new repo, head over to the <a target=\"_blank\" href=\"https://railway.com/account\">account page</a> in Railway and connect GitHub, then select your repo. If you’ve already connected GitHub for a different repo, click the <strong>Edit Scopes</strong> button to add a new repo.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748724322960/8467ab33-59e6-4737-8927-8c95d9799696.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Then create a <a target=\"_blank\" href=\"https://railway.com/new\">new project</a> and select the repo as the source. You should see the new project open up, and the server automatically building and deploying. Give it a few minutes to finish. You’ll eventually see a green status saying the deployment was successful, followed by a red status saying the server crashed.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748724568004/0d50bc98-e1fd-468d-b9f3-2c2d8a3ab2cf.png\" alt class=\"image--center mx-auto\" /></p>\n<p>This is because the server is missing the Discord bot token in the environment variables. Head back to the Discord App’s setting page and go to the Bot section. Click <strong>Reset Token</strong> to generate a new token.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748724836235/c0d65d6c-1367-4edd-8e17-57e705adc62f.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Then add the token as a new variable in Railway, with the key <code>DISCORD_TOKEN</code>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748724839858/3d76bfdc-e0fd-4a11-a75a-577ce609497d.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Lastly, click <strong>Deploy</strong> to apply the changes.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748724900520/a9e8da40-b1be-484d-a673-39da95f04a95.png\" alt class=\"image--center mx-auto\" /></p>\n<p>The server should automatically rebuild and deploy. Once the status shows it’s running, click to view the logs. You should see the log entry showing the bot logging into the server.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748725368805/81cdf142-3bfc-4b67-844d-2e4cd8f627af.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, the bot is running and logged into the server. Now go to the Discord server, and mention the bot in a new message.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748725430152/6bcee778-121c-4b9a-bbd2-6d4fcb1ea449.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Awesome! The bot is listening to messages, and responding when mentioned. But the response is hard-coded. To get a real reply, we need to send the message to an LLM and generate a response, then send that back to Discord.</p>\n<h2 id=\"heading-creating-a-pinecone-assistant\">Creating a Pinecone Assistant</h2>\n<p>Next, create a free <a target=\"_blank\" href=\"https://www.pinecone.io/\">Pinecone account</a> and go to the Dashboard. Then create a new assistant.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748725730553/297dfc36-6631-44f0-a4c5-6f9b81557918.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Give it a name and click <strong>Create assistant</strong>.</p>\n<p>Next, the assistant needs at least one file to reference. Pinecone’s Assistant’s are made for performing RAG (Retrieval-Augmented Generation), and the chat won’t work until you’ve added at least one file. This can be anything you want the bot to reference to help answer questions, like software documentation, example responses, or other instructions.</p>\n<p>In my case, I added a text file with some common questions and responses, and a list of banned topics.</p>\n<p><strong>instructions.txt</strong></p>\n<pre><code class=\"lang-plaintext\"># Common questions and responses\n- User asks about contributing to Appsmith\n- - Thank them for their interest. Direct them to: https://github.com/appsmithorg/appsmith/blob/release/CONTRIBUTING.md\n\n- Any question about licensing, pricing, business/enterprise features\n- - Direct them to sales@appsmith.com\n\n# Banned Topics\nUse this list of banned topics to identify messages that should be flagged for removal. \n\n- Invitations to cyrpto discords, or anything crypto related that doesn't involve an Appsmith app building question. \n- Posting a full CV or resume. It's ok to introduce yourself and mention some skills, but don't advertize your services here. \n- anything NSFW related. It's ok to use a bad word or two, but no NSFW topics.\n</code></pre>\n<p>There’s also the Assistant Instructions field where you can add more instructions for how the assistant should respond. Enter a description of the bot and it’s purpose.</p>\n<pre><code class=\"lang-plaintext\">You are an assistant that responds to users on Discord. Read their message and reply as a helpful Discord bot. Your job is to supplement the main Appsmith Discord support bot, by monitoring the other channels outside of actual product support. \n\nUsers sometimes mistakenly ask support questions in the wrong channel. Direct them to post in #support for Appsmith support questions. \n\nIf any of the banned topics are mentioned, respond only with: \nThis message should be deleted.\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748769490614/e49d4659-aa04-4852-8146-da56dd01a366.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Next, go to the <strong>API Keys</strong> tab and create a new API key. Then add it as a new variable in Railway with the key <code>PINECONE_API_KEY</code>. Click <strong>Deploy</strong>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748726516283/2f1ac27a-025d-4f58-bc7a-16fd9653e92a.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-integrating-the-discord-bot-with-pinecone\">Integrating the Discord bot with Pinecone</h2>\n<p>Alright, we have a bot that can listen for mentions and respond with a hard-coded reply. And now we have a Pinecone assistant that can generate real replies. Now we need a script to tie it all together.</p>\n<p>For my use case, I have a few banned topics, where I want to delete the message instead of replying. This means ALL messages need to be sent to the assistant, even if the bot isn’t mentioned. The assistant will look for banned topics first, and reply that the message should be deleted. Then, only if the bot was mentioned (and the topic isn’t banned), it will reply to that thread.</p>\n<p>You don’t want to have to mention the bot every time though, if you’re in a thread where it has already replied. So I’ve added some logic to only require the mention once, then the bot continues to reply on that thread.</p>\n<p>Here’s the resulting script:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> discord\n<span class=\"hljs-keyword\">from</span> discord.ext <span class=\"hljs-keyword\">import</span> commands\n<span class=\"hljs-keyword\">from</span> pinecone <span class=\"hljs-keyword\">import</span> Pinecone\n<span class=\"hljs-keyword\">from</span> pinecone_plugins.assistant.models.chat <span class=\"hljs-keyword\">import</span> Message\n\n<span class=\"hljs-comment\"># Discord bot setup</span>\nintents = discord.Intents.default()\nintents.message_content = <span class=\"hljs-literal\">True</span>\nintents.guilds = <span class=\"hljs-literal\">True</span>\nintents.messages = <span class=\"hljs-literal\">True</span>\n\nbot = commands.Bot(command_prefix=<span class=\"hljs-string\">\"!\"</span>, intents=intents)\n\n<span class=\"hljs-comment\"># Pinecone Assistant setup</span>\npc = Pinecone(api_key=os.environ[<span class=\"hljs-string\">\"PINECONE_API_KEY\"</span>])\nassistant = pc.assistant.Assistant(assistant_name=<span class=\"hljs-string\">\"railway-discord-bot\"</span>)\n\n<span class=\"hljs-comment\"># Track channels (including threads) where the bot was mentioned</span>\nactive_channels = set()\n\n<span class=\"hljs-meta\">@bot.event</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">on_ready</span>():</span>\n    print(<span class=\"hljs-string\">f\"✅ Logged in as <span class=\"hljs-subst\">{bot.user}</span>\"</span>)\n\n<span class=\"hljs-meta\">@bot.event</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">on_message</span>(<span class=\"hljs-params\">message</span>):</span>\n    <span class=\"hljs-keyword\">if</span> message.author.bot:\n        <span class=\"hljs-keyword\">return</span>\n\n    channel_id = message.channel.id\n    mentioned = bot.user <span class=\"hljs-keyword\">in</span> message.mentions\n    is_thread = isinstance(message.channel, discord.Thread)\n\n    <span class=\"hljs-comment\"># Track channels where bot was mentioned for future replies</span>\n    <span class=\"hljs-keyword\">if</span> mentioned:\n        active_channels.add(channel_id)\n\n    <span class=\"hljs-comment\"># Always send every message to Pinecone</span>\n    query = message.clean_content.replace(<span class=\"hljs-string\">f\"@<span class=\"hljs-subst\">{bot.user.name}</span>\"</span>, <span class=\"hljs-string\">\"\"</span>).strip()\n\n    <span class=\"hljs-keyword\">try</span>:\n        msg = Message(content=query <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"[empty]\"</span>)\n        response = assistant.chat(messages=[msg])\n        content = response[<span class=\"hljs-string\">\"message\"</span>][<span class=\"hljs-string\">\"content\"</span>]\n\n        <span class=\"hljs-comment\"># Always check for deletion</span>\n        <span class=\"hljs-keyword\">if</span> content.strip() == <span class=\"hljs-string\">\"This message should be deleted.\"</span>:\n            <span class=\"hljs-keyword\">await</span> message.delete()\n            <span class=\"hljs-keyword\">return</span>\n\n        <span class=\"hljs-comment\"># Only reply if mentioned or in active channel</span>\n        <span class=\"hljs-keyword\">if</span> mentioned <span class=\"hljs-keyword\">or</span> channel_id <span class=\"hljs-keyword\">in</span> active_channels:\n            <span class=\"hljs-keyword\">await</span> message.reply(content[:<span class=\"hljs-number\">2000</span>])\n\n    <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n        <span class=\"hljs-keyword\">if</span> mentioned <span class=\"hljs-keyword\">or</span> channel_id <span class=\"hljs-keyword\">in</span> active_channels:\n            <span class=\"hljs-keyword\">await</span> message.reply(<span class=\"hljs-string\">f\"❌ Error: <span class=\"hljs-subst\">{e}</span>\"</span>)\n\n    <span class=\"hljs-keyword\">await</span> bot.process_commands(message)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    bot.run(os.environ[<span class=\"hljs-string\">\"DISCORD_TOKEN\"</span>])\n</code></pre>\n<p>Update the repo with the new <code>main.py</code> file, and the server should redeploy automatically.</p>\n<p>Once the server is running again, send a new test message and mention the bot.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748727160524/06731735-2b82-42ea-9f89-64f6c4a81a9a.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, the assistant is replying now. Let’s test one of those banned topics.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748727262761/aa774e63-cd5b-4636-b57f-c374a71c94a0.gif\" alt class=\"image--center mx-auto\" /></p>\n<p>Awesome! The Pinecone assistant recognized the banned topic and responded with the trigger phrase to mark it for deletion. Then the Python code deleted the message almost instantly!</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Setting up a Discord bot is a great way to moderate a server and assist members with common questions. You can adjust the assistant instructions and knowledge sources to create bots for customer support, or just use them to scan for and remove banned content. The <a target=\"_blank\" href=\"https://discordpy.readthedocs.io/en/stable/\">Discord.py</a> library makes it easy to set up with only a few lines of code, which can be hosted on Railway, <a target=\"_blank\" href=\"https://replit.com/\">Replit</a>, <a target=\"_blank\" href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a>, or any other Python hosting platform.</p>\n","contentMarkdown":"Discord may be known for gaming, but it’s also widely used as a community and support forum for tech companies. Regardless of the use though, pretty much ever server has to deal with spam and scammers at some point. Discord has a few simple tools built-in to help combat this, but they don’t catch everything.\n\nYou can try to catch everything yourself, or maybe elevate some community members to moderators, but someone has to be online to see and remove the offending posts quickly. This is a perfect job for a Discord bot.\n\nIn this guide, I’ll show you how to build an AI-powered Discord bot using a Python script running in [Railway](https://railway.com/), and a [Pinecone](https://www.pinecone.io/) Assistant.\n\n**This guide will cover:**\n\n* Creating a Discord bot and installing it to a server\n    \n* Running the bot from a Python script in Railway\n    \n* Creating a Pinecone Assistant\n    \n* Integrating the Discord bot with Pinecone\n    \n\nLet’s get started!\n\n## Creating a Discord bot\n\nStart out by going to the [Discord Applications](https://discord.com/developers/applications) page click **New Application**. Give it a name, agree to the terms, and click **Create**. This will take you to the app’s setting page.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748719198636/cb6ed2d3-c095-42fa-8075-46829ffb385d.png align=\"center\")\n\nGo to the **Bot** section on the left sidebar, and then scroll down to **Privileged Gateway Intents**.\n\n* enable SERVER MEMBERS INTENT\n    \n* enable MESSAGE CONTENT INTENT\n    \n\nScroll down to Bot Permissions and enable:\n\n✅ View Channels  \n✅ Send Messages  \n✅ Manage Messages (required to delete messages)  \n✅ Read Message History\n\nBe sure to click **SAVE** before installing the bot in the next step!\n\n## Installing the bot to a server\n\nOk, the bot is created and the permissions are set, but we haven’t added the bot to a server yet. Next, go to the **OAuth2** tab.\n\nScroll down to the **Scopes** section and enable the `bot` scope. Then, under Bot Permissions, enable:\n\n* Send Messages\n    \n* Send Messages in Threads\n    \n* Read Message History\n    \n* View Channels\n    \n\nBut wait, didn’t we just turn on those same settings in the Bot section? Kind of… In the Bot section, you’re setting the max settings this Discord app should ever have, no matter where it’s installed. Then, in the OAuth2 section, you are selecting the permissions for a single install of the bot on a specific server. You can request up-to the same permissions as the Bot tab, but not more.\n\nScroll to the bottom and copy the GENERATED URL. This URL contains a `permissions=#` parameter, where the number is a unique integer representing the exact combination of permissions you’ve selected.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748719849255/bfcf5a07-fa84-4aad-a349-4b737967d9a6.png align=\"center\")\n\nOpen the URL and you should be prompted to install the bot to a server. Select your server, and authorize the bot.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748719903711/45e58b9d-9a61-4ad5-a034-ab53ab74b655.png align=\"center\")\n\nAlright, the bot has been added to the server. You should see a welcome message in the server chat.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748720026643/b3132490-6620-46c1-8ab5-8822f023fc0c.png align=\"center\")\n\nAt this point, the bot has permissions to begin posting in the channel. But we don’t actually have a bot running anywhere. We need to set up a server where the bot can run and listen for messages to reply to.\n\n## Running the bot from a Python script in Railway\n\nUp to this point, I’ve used ‘bot’ to refer to the application we created in Discord, and the settings and permissions that go with it. But that’s just part of the solution. It’s more like an account or identity for the bot, not the bot itself. The logic and actions come from running custom code to interact the bot account and the server where the bot is installed.\n\nFor this guide, I’ll be using Railway to run a Python script to act as our bot. Railway offers a free *trial* with no credit card required. There are some free alternatives, but they require work-arounds to keep the bot awake and online. If you prefer a completely free service, try Replit’s free tier and search ‘Discord bot keep alive’ for a workaround to keep the bot from going to sleep.\n\n### Bot GitHub Repo\n\nStart out by creating a GitHub repo for the project. You can make it private if you want. Add the three files below:\n\n**runtime.txt**\n\n```plaintext\npython-3.11.8\n```\n\n**requirements.txt**\n\n```plaintext\ndiscord.py==2.3.2\npinecone\n```\n\n**main.py**\n\n```python\nimport os\nimport discord\nfrom discord.ext import commands\n\nintents = discord.Intents.default()\nintents.message_content = True\nintents.guilds = True\nintents.messages = True\n\nbot = commands.Bot(command_prefix=\"!\", intents=intents)\n\n@bot.event\nasync def on_ready():\n    print(f\"✅ Logged in as {bot.user}\")\n\n@bot.event\nasync def on_message(message):\n    if message.author.bot:\n        return\n\n    if bot.user in message.mentions:\n        await message.reply(\"Hello from Discord-bot!\")  # ⬅️ reply to original message\n\n    await bot.process_commands(message)\n\nif __name__ == \"__main__\":\n    bot.run(os.environ[\"DISCORD_TOKEN\"])\n```\n\nThis will start up the bot and log it into any server where it has been installed (using the generated link), then run the `on_message()` function whenever a message is posted. The function then checks to see if the bot was mentioned, and if so, replies ‘Hello from Discord-bot!’.\n\nOnce you have these 3 files saved to a new repo, head over to the [account page](https://railway.com/account) in Railway and connect GitHub, then select your repo. If you’ve already connected GitHub for a different repo, click the **Edit Scopes** button to add a new repo.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748724322960/8467ab33-59e6-4737-8927-8c95d9799696.png align=\"center\")\n\nThen create a [new project](https://railway.com/new) and select the repo as the source. You should see the new project open up, and the server automatically building and deploying. Give it a few minutes to finish. You’ll eventually see a green status saying the deployment was successful, followed by a red status saying the server crashed.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748724568004/0d50bc98-e1fd-468d-b9f3-2c2d8a3ab2cf.png align=\"center\")\n\nThis is because the server is missing the Discord bot token in the environment variables. Head back to the Discord App’s setting page and go to the Bot section. Click **Reset Token** to generate a new token.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748724836235/c0d65d6c-1367-4edd-8e17-57e705adc62f.png align=\"center\")\n\nThen add the token as a new variable in Railway, with the key `DISCORD_TOKEN`.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748724839858/3d76bfdc-e0fd-4a11-a75a-577ce609497d.png align=\"center\")\n\nLastly, click **Deploy** to apply the changes.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748724900520/a9e8da40-b1be-484d-a673-39da95f04a95.png align=\"center\")\n\nThe server should automatically rebuild and deploy. Once the status shows it’s running, click to view the logs. You should see the log entry showing the bot logging into the server.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748725368805/81cdf142-3bfc-4b67-844d-2e4cd8f627af.png align=\"center\")\n\nOk, the bot is running and logged into the server. Now go to the Discord server, and mention the bot in a new message.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748725430152/6bcee778-121c-4b9a-bbd2-6d4fcb1ea449.png align=\"center\")\n\nAwesome! The bot is listening to messages, and responding when mentioned. But the response is hard-coded. To get a real reply, we need to send the message to an LLM and generate a response, then send that back to Discord.\n\n## Creating a Pinecone Assistant\n\nNext, create a free [Pinecone account](https://www.pinecone.io/) and go to the Dashboard. Then create a new assistant.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748725730553/297dfc36-6631-44f0-a4c5-6f9b81557918.png align=\"center\")\n\nGive it a name and click **Create assistant**.\n\nNext, the assistant needs at least one file to reference. Pinecone’s Assistant’s are made for performing RAG (Retrieval-Augmented Generation), and the chat won’t work until you’ve added at least one file. This can be anything you want the bot to reference to help answer questions, like software documentation, example responses, or other instructions.\n\nIn my case, I added a text file with some common questions and responses, and a list of banned topics.\n\n**instructions.txt**\n\n```plaintext\n# Common questions and responses\n- User asks about contributing to Appsmith\n- - Thank them for their interest. Direct them to: https://github.com/appsmithorg/appsmith/blob/release/CONTRIBUTING.md\n\n- Any question about licensing, pricing, business/enterprise features\n- - Direct them to sales@appsmith.com\n\n# Banned Topics\nUse this list of banned topics to identify messages that should be flagged for removal. \n\n- Invitations to cyrpto discords, or anything crypto related that doesn't involve an Appsmith app building question. \n- Posting a full CV or resume. It's ok to introduce yourself and mention some skills, but don't advertize your services here. \n- anything NSFW related. It's ok to use a bad word or two, but no NSFW topics.\n```\n\nThere’s also the Assistant Instructions field where you can add more instructions for how the assistant should respond. Enter a description of the bot and it’s purpose.\n\n```plaintext\nYou are an assistant that responds to users on Discord. Read their message and reply as a helpful Discord bot. Your job is to supplement the main Appsmith Discord support bot, by monitoring the other channels outside of actual product support. \n\nUsers sometimes mistakenly ask support questions in the wrong channel. Direct them to post in #support for Appsmith support questions. \n\nIf any of the banned topics are mentioned, respond only with: \nThis message should be deleted.\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748769490614/e49d4659-aa04-4852-8146-da56dd01a366.png align=\"center\")\n\nNext, go to the **API Keys** tab and create a new API key. Then add it as a new variable in Railway with the key `PINECONE_API_KEY`. Click **Deploy**.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748726516283/2f1ac27a-025d-4f58-bc7a-16fd9653e92a.png align=\"center\")\n\n## Integrating the Discord bot with Pinecone\n\nAlright, we have a bot that can listen for mentions and respond with a hard-coded reply. And now we have a Pinecone assistant that can generate real replies. Now we need a script to tie it all together.\n\nFor my use case, I have a few banned topics, where I want to delete the message instead of replying. This means ALL messages need to be sent to the assistant, even if the bot isn’t mentioned. The assistant will look for banned topics first, and reply that the message should be deleted. Then, only if the bot was mentioned (and the topic isn’t banned), it will reply to that thread.\n\nYou don’t want to have to mention the bot every time though, if you’re in a thread where it has already replied. So I’ve added some logic to only require the mention once, then the bot continues to reply on that thread.\n\nHere’s the resulting script:\n\n```python\nimport os\nimport discord\nfrom discord.ext import commands\nfrom pinecone import Pinecone\nfrom pinecone_plugins.assistant.models.chat import Message\n\n# Discord bot setup\nintents = discord.Intents.default()\nintents.message_content = True\nintents.guilds = True\nintents.messages = True\n\nbot = commands.Bot(command_prefix=\"!\", intents=intents)\n\n# Pinecone Assistant setup\npc = Pinecone(api_key=os.environ[\"PINECONE_API_KEY\"])\nassistant = pc.assistant.Assistant(assistant_name=\"railway-discord-bot\")\n\n# Track channels (including threads) where the bot was mentioned\nactive_channels = set()\n\n@bot.event\nasync def on_ready():\n    print(f\"✅ Logged in as {bot.user}\")\n\n@bot.event\nasync def on_message(message):\n    if message.author.bot:\n        return\n\n    channel_id = message.channel.id\n    mentioned = bot.user in message.mentions\n    is_thread = isinstance(message.channel, discord.Thread)\n\n    # Track channels where bot was mentioned for future replies\n    if mentioned:\n        active_channels.add(channel_id)\n\n    # Always send every message to Pinecone\n    query = message.clean_content.replace(f\"@{bot.user.name}\", \"\").strip()\n\n    try:\n        msg = Message(content=query or \"[empty]\")\n        response = assistant.chat(messages=[msg])\n        content = response[\"message\"][\"content\"]\n\n        # Always check for deletion\n        if content.strip() == \"This message should be deleted.\":\n            await message.delete()\n            return\n\n        # Only reply if mentioned or in active channel\n        if mentioned or channel_id in active_channels:\n            await message.reply(content[:2000])\n\n    except Exception as e:\n        if mentioned or channel_id in active_channels:\n            await message.reply(f\"❌ Error: {e}\")\n\n    await bot.process_commands(message)\n\nif __name__ == \"__main__\":\n    bot.run(os.environ[\"DISCORD_TOKEN\"])\n```\n\nUpdate the repo with the new `main.py` file, and the server should redeploy automatically.\n\nOnce the server is running again, send a new test message and mention the bot.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748727160524/06731735-2b82-42ea-9f89-64f6c4a81a9a.png align=\"center\")\n\nOk, the assistant is replying now. Let’s test one of those banned topics.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748727262761/aa774e63-cd5b-4636-b57f-c374a71c94a0.gif align=\"center\")\n\nAwesome! The Pinecone assistant recognized the banned topic and responded with the trigger phrase to mark it for deletion. Then the Python code deleted the message almost instantly!\n\n## Conclusion\n\nSetting up a Discord bot is a great way to moderate a server and assist members with common questions. You can adjust the assistant instructions and knowledge sources to create bots for customer support, or just use them to scan for and remove banned content. The [Discord.py](https://discordpy.readthedocs.io/en/stable/) library makes it easy to set up with only a few lines of code, which can be hosted on Railway, [Replit](https://replit.com/), [AWS Lambda](https://aws.amazon.com/lambda/), or any other Python hosting platform.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1748768084103/1ac03d56-8fc6-454c-9fe7-5e6ba0ba242a.png","brief":"Discord may be known for gaming, but it’s also widely used as a community and support forum for tech companies. Regardless of the use though, pretty much ever server has to deal with spam and scammers at some point. Discord has a few simple tools bui...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":9,"draft":"683b4fe8af71655d4b1aa8bb","tags":["56744721958ef13879b94d67","5ca538ddfe7c839b212f98b9","63c57fa109eddfeb665ccd82","658315f87f2e4b55d0bba63f","56744721958ef13879b94c63","5d02349bba757de40ab6bcb4","635ad52efe8087002dee4707","56744721958ef13879b948df"],"publication":"60771c264155da32fc83ad6e","series":"67d765f0447947a764ae3d33","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"683c31a9d5f901e6d995ad78"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"683a38a0916573cab8746f03","createdAt":"2025-05-30T23:00:48.919Z","updatedAt":"2025-05-30T23:00:48.919Z","views":5,"isActive":true,"hasLatex":false,"popularity":7547.4411,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Deep Dive Into Hashnode Embeds and Widgets","subtitle":"Power up your Hashnode blog with advanced features","cuid":"cmbbepimu000808lb44g13p28","dateAdded":"2025-05-30T23:00:48.918Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"deep-dive-into-hashnode-embeds-and-widgets","content":"<p>I’ve been using Hashnode for my blog for about 5 years now. I originally chose it because it was the only option that supported connecting a custom domain for free, and 5 years later I have no regrets. Actually, I’m doubling down.</p>\n<p>While I’m quite happy with the features of Hashnode that I <em>do</em> use, I recently realized that there’s another set of features that I haven’t explored at all: <strong>embeds</strong> and <strong>widgets</strong>. So I decided to do a deep-dive into the various embed options and see what else Hashnode has to offer. I’ll be testing out several of these options in this post, and providing real use cases and examples that I’ll be adding to the rest of my blogs.</p>\n<h2 id=\"heading-built-in-support\">Built-in Support</h2>\n<p>Hashnode has built-in support for embedding content from several different services, using only the URL. You can access the embed menu by typing:</p>\n<p><code>/embeds</code></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742435568114/576bceb8-777d-4fa2-8dae-ad31dfeebd54.png\" alt class=\"image--center mx-auto\" /></p>\n<p>This allows you to embed live, interactive content from other platforms. You can embed an external link, YouTube Video, Tweet, CodePen, or several other options, just by adding a link.</p>\n<p><strong>Here are a few examples:</strong></p>\n<p>You can embed a Tweet, but you have to replace <em>x.com</em> with <strong><em>twitter.com</em></strong>.</p>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://twitter.com/greenflux_dev/status/1858286704618250321\">https://twitter.com/greenflux_dev/status/1858286704618250321</a></div>\n<p> </p>\n<p>Or a YouTube video</p>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://youtu.be/xOfJukfKM3U\">https://youtu.be/xOfJukfKM3U</a></div>\n<p> </p>\n<p>Or even a playlist:</p>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://www.youtube.com/playlist?list=PLE_KXGiWfqwhADyWxNZJhwn7HF89KxiKB\">https://www.youtube.com/playlist?list=PLE_KXGiWfqwhADyWxNZJhwn7HF89KxiKB</a></div>\n<p> </p>\n<p>You can also embed live, interactive code using CodePen!</p>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://codepen.io/GreenFlux/pen/yLdwgxN\">https://codepen.io/GreenFlux/pen/yLdwgxN</a></div>\n<p> </p>\n<p>All of these options work using only the URL itself, without needing to copy the iframe embed code from the source site. Just paste in the direct URL, video or CodePen link and it will display the embedded content.</p>\n<p>Here’s the full list of supported sites:<br /><a target=\"_blank\" href=\"https://docs.hashnode.com/help-center/hashnode-editor/which-embeds-are-supported-by-hashnode\">https://docs.hashnode.com/help-center/hashnode-editor/which-embeds-are-supported-by-hashnode</a></p>\n<p>These work great for content you want to embed just once, in a single article. But what if you want to add the same embed to every page, or make it reusable on select pages?</p>\n<h2 id=\"heading-hashnode-widgets\">Hashnode Widgets</h2>\n<p>Another option is to create a <a target=\"_blank\" href=\"https://docs.hashnode.com/blogs/blog-dashboard/widgets\">widget</a>. This allows you to reuse the embed in any post. You can reference it with <code>%%WIDGET_NAME</code>, anywhere in your markdown, and the widget will get inserted. Or use <code>/widget</code> to display a list of available widget to insert.</p>\n<p>To create a widget, you need the full embed code from YouTube, CodePen, or whatever site you want to use, not just the URL.</p>\n<p>Here’s a widget using the profile card embed code from Daily.dev.</p>\n<div class=\"hn-embed-widget\" id=\"dailydev\"></div><p> </p>\n<p>And here’s the code used for the widget:</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://app.daily.dev/greenflux\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://api.daily.dev/devcards/v2/ZPb9mU4UbNJoR54JkhxoC.png?type=default&amp;r=bw8\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"356\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"Joseph Petty's Dev Card\"</span>/&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n</code></pre>\n<h3 id=\"heading-pinned-embeds\">Pinned embeds</h3>\n<p>Want to show the same embed on every page? Crate a custom embed and pin it. You can pin up to two widgets.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1748645857357/d3f420ba-e7a5-4ec1-b347-56041c04ccb4.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-interactive-widgets\">Interactive Widgets</h2>\n<p>You can even embed interactive content using other websites, or a no-code/low-code app builder. Here’s a custom widget I made in Appsmith to display an interactive knowledge graph of all of my blog posts. Try zooming on the middle and selecting a node.</p>\n<div class=\"hn-embed-widget\" id=\"blog-graph\"></div><p> </p>\n<p>View the app in full screen here:</p>\n<p><a target=\"_blank\" href=\"https://app.appsmith.com/app/hashnode/graph-67ff01cb70e14943222474a8\">https://app.appsmith.com/app/hashnode/graph-67ff01cb70e14943222474a8</a></p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>It turns out there’s quite a bit you can do with Hashnode embeds and widgets. I’ll be using these more in my blog now, and creating more interactive content. The CodePen and Appsmith embeds in particular seem to have quite a bit of potential for interactive tutorial content. Drop a comment below if you have a specific topic you’d like me to cover!</p>\n","contentMarkdown":"I’ve been using Hashnode for my blog for about 5 years now. I originally chose it because it was the only option that supported connecting a custom domain for free, and 5 years later I have no regrets. Actually, I’m doubling down.\n\nWhile I’m quite happy with the features of Hashnode that I *do* use, I recently realized that there’s another set of features that I haven’t explored at all: **embeds** and **widgets**. So I decided to do a deep-dive into the various embed options and see what else Hashnode has to offer. I’ll be testing out several of these options in this post, and providing real use cases and examples that I’ll be adding to the rest of my blogs.\n\n## Built-in Support\n\nHashnode has built-in support for embedding content from several different services, using only the URL. You can access the embed menu by typing:\n\n`/embeds`\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1742435568114/576bceb8-777d-4fa2-8dae-ad31dfeebd54.png align=\"center\")\n\nThis allows you to embed live, interactive content from other platforms. You can embed an external link, YouTube Video, Tweet, CodePen, or several other options, just by adding a link.\n\n**Here are a few examples:**\n\nYou can embed a Tweet, but you have to replace *x.com* with ***twitter.com***.\n\n%[https://twitter.com/greenflux_dev/status/1858286704618250321] \n\nOr a YouTube video\n\n%[https://youtu.be/xOfJukfKM3U] \n\nOr even a playlist:\n\n%[https://www.youtube.com/playlist?list=PLE_KXGiWfqwhADyWxNZJhwn7HF89KxiKB] \n\nYou can also embed live, interactive code using CodePen!\n\n%[https://codepen.io/GreenFlux/pen/yLdwgxN] \n\nAll of these options work using only the URL itself, without needing to copy the iframe embed code from the source site. Just paste in the direct URL, video or CodePen link and it will display the embedded content.\n\nHere’s the full list of supported sites:  \n[https://docs.hashnode.com/help-center/hashnode-editor/which-embeds-are-supported-by-hashnode](https://docs.hashnode.com/help-center/hashnode-editor/which-embeds-are-supported-by-hashnode)\n\nThese work great for content you want to embed just once, in a single article. But what if you want to add the same embed to every page, or make it reusable on select pages?\n\n## Hashnode Widgets\n\nAnother option is to create a [widget](https://docs.hashnode.com/blogs/blog-dashboard/widgets). This allows you to reuse the embed in any post. You can reference it with `%%WIDGET_NAME`, anywhere in your markdown, and the widget will get inserted. Or use `/widget` to display a list of available widget to insert.\n\nTo create a widget, you need the full embed code from YouTube, CodePen, or whatever site you want to use, not just the URL.\n\nHere’s a widget using the profile card embed code from Daily.dev.\n\n%%[dailydev] \n\nAnd here’s the code used for the widget:\n\n```xml\n<a href=\"https://app.daily.dev/greenflux\"><img src=\"https://api.daily.dev/devcards/v2/ZPb9mU4UbNJoR54JkhxoC.png?type=default&r=bw8\" width=\"356\" alt=\"Joseph Petty's Dev Card\"/></a>\n```\n\n### Pinned embeds\n\nWant to show the same embed on every page? Crate a custom embed and pin it. You can pin up to two widgets.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1748645857357/d3f420ba-e7a5-4ec1-b347-56041c04ccb4.png align=\"center\")\n\n## Interactive Widgets\n\nYou can even embed interactive content using other websites, or a no-code/low-code app builder. Here’s a custom widget I made in Appsmith to display an interactive knowledge graph of all of my blog posts. Try zooming on the middle and selecting a node.\n\n%%[blog-graph] \n\nView the app in full screen here:\n\n[https://app.appsmith.com/app/hashnode/graph-67ff01cb70e14943222474a8](https://app.appsmith.com/app/hashnode/graph-67ff01cb70e14943222474a8)\n\n## Conclusion\n\nIt turns out there’s quite a bit you can do with Hashnode embeds and widgets. I’ll be using these more in my blog now, and creating more interactive content. The CodePen and Appsmith embeds in particular seem to have quite a bit of potential for interactive tutorial content. Drop a comment below if you have a specific topic you’d like me to cover!","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1748645473466/6f8834ad-1c5b-480e-a0df-8dfa586c78da.png","brief":"I’ve been using Hashnode for my blog for about 5 years now. I originally chose it because it was the only option that supported connecting a custom domain for free, and 5 years later I have no regrets. Actually, I’m doubling down.\nWhile I’m quite hap...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":3,"draft":"67db693f9a1cd1fbfa05ea26","tags":["567ae5a72b926c3063c3061a","5c4da358c30d058d61cb961b","56744721958ef13879b94873","63c1667e09eddfeb66db5ebb","56744722958ef13879b94f96"],"publication":"60771c264155da32fc83ad6e","metaTitle":"Exploring Hashnode Embeds and Widgets","metaDescription":"Explore Hashnode's powerful embed and widget features for enhancing your blog with interactive and reusable content from various platforms","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"683a38a0916573cab8746f03"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"68208e51a2a81e6625887df8","createdAt":"2025-05-11T11:47:29.075Z","updatedAt":"2025-05-11T11:47:29.075Z","views":47,"isActive":true,"hasLatex":false,"popularity":7510.0633,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Ollama & FastAPI for Local Markdown Automations","subtitle":"Self-hosted Markdown Generator in Python","cuid":"cmajlaf8x000509lehubyaqux","dateAdded":"2025-05-11T11:47:29.073Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"ollama-and-fastapi-for-local-markdown-automations","content":"<p>Markdown is a great format for storing text files that need to be compatible with multiple systems. And LLMs excel at generating Markdown. If you regularly copy/paste responses from ChatGPT to a text document, the context-switching can become a friction point or bottle-neck in repetitive tasks.</p>\n<p>There are countless AI-powered automation platforms out there that could solve this, but what if the data is sensitive/private, and can’t be shared with a 3rd party API? Or maybe you have vast amounts of data to process, and a paid service is not scalable? In cases like these, you can run an LLM locally using Ollama.</p>\n<p>But what about automating the Markdown file creation? Ollama provides a local API for the LLM, but we need a local API for creating/editing Markdown files. It only takes a few lines of Python to handle the text file management, and that can easily be turned into an API using FastAPI.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Running LLMs locally with Ollama</p>\n</li>\n<li><p>Prompting the model from a Python Script</p>\n</li>\n<li><p>Markdown CRUD with FastAPI</p>\n</li>\n<li><p>Saving LLM Responses to Markdown with Python</p>\n</li>\n</ul>\n<p><em>Let’s get to it!</em></p>\n<h2 id=\"heading-running-llms-locally-with-ollama\">Running LLMs locally with Ollama</h2>\n<p>Start out by downloading Ollama and installing it.</p>\n<p><a target=\"_blank\" href=\"http://ollama.com/download\"><strong>ollama.com/download</strong></a></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1729380535005/1c86f951-2e50-4d0a-a5e3-faf03d073ccf.png?auto=compress,format&amp;format=webp&amp;auto=compress,format&amp;format=webp\" alt /></p>\n<p>Once the download finishes, move the <code>Ollama.app</code> file to your <strong>Applications</strong> folder, then open it. Then click through the installer and approve the drive access. You’ll notice a new llama icon in the menu bar, with a single option to <em>Quit Ollama</em>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731150387579/b9ce4790-220e-4721-8346-8e4cbdd4d05c.png?auto=compress,format&amp;format=webp&amp;auto=compress,format&amp;format=webp\" alt /></p>\n<p>There’s no other GUI— everything else is done from the terminal.</p>\n<h2 id=\"heading-downloading-and-prompting-models\">Downloading and Prompting Models</h2>\n<p>Next, open the terminal and run:</p>\n<pre><code class=\"lang-bash\">ollama run llama3.2:1b\n</code></pre>\n<p>This will download the smaller, 1 billion parameter Llama3.2 model, then run it and let you begin prompting from the terminal. You’ll see several files download the first time running a model, but after that it should load quickly and be ready to start prompting.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1746880539273/d64ce232-ab23-451d-b481-e1f69624c61e.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Type a prompt and hit Enter. You should see a response in the terminal.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1746880613961/d434b073-7a5c-44c9-be91-04d2db99bb54.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, Ollama and the Llama3.2 model are running locally. Next, we’ll send a prompt from Python using the Ollama API. Leave this terminal window open to keep Ollama and Llama3.2 running, and open a new terminal window for the next section.</p>\n<p><strong>Note</strong>: You can type <code>/bye</code> to exit Ollama and return to the main terminal, or <code>/?</code> for a list of other Ollama commands. But for now, keep it running to use in the next step.</p>\n<h2 id=\"heading-prompting-the-model-from-a-python-script\">Prompting the model from a Python Script</h2>\n<p>Open the terminal and create a new folder for the project, then cd into it.</p>\n<pre><code class=\"lang-bash\">mkdir MarkdownAPI &amp;&amp; <span class=\"hljs-built_in\">cd</span> MarkdownAPI\n</code></pre>\n<h3 id=\"heading-install-python-310-if-not-already\"><strong>Install Python 3.10</strong> (if not already)</h3>\n<p>Using <a target=\"_blank\" href=\"https://docs.brew.sh/Installation\">Homebrew</a>:</p>\n<pre><code class=\"lang-bash\">brew install python@3.10\n</code></pre>\n<p>Add it to your shell:</p>\n<pre><code class=\"lang-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">'export PATH=\"/opt/homebrew/opt/python@3.10/bin:$PATH\"'</span> &gt;&gt; ~/.zshrc\n<span class=\"hljs-built_in\">source</span> ~/.zshrc\n</code></pre>\n<p>Verify:</p>\n<pre><code class=\"lang-bash\">python3.10 --version\n</code></pre>\n<p>Then create a virtual environment:</p>\n<pre><code class=\"lang-bash\">python3.10 -m venv .venv\n<span class=\"hljs-built_in\">source</span> .venv/bin/activate\n</code></pre>\n<p>And install the required packages:</p>\n<pre><code class=\"lang-bash\">pip install --upgrade pip\npip install fastapi uvicorn aiofiles requests\n</code></pre>\n<p>Ok, the environment is set up. Next create a new Python script and save it in the root folder for the environment.</p>\n<p><strong>send_prompt.py</strong></p>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n<span class=\"hljs-string\">\"\"\"\nCLI wrapper for Ollama’s HTTP API (chat endpoint).\n\nUsage\n-----\n$ ./send_prompt.py \"Explain RAG in one paragraph\"\n\nEnvironment\n-----------\n- Expects the Ollama daemon to be running locally (default: http://localhost:11434).\n- Adjust `OLLAMA_HOST` if your daemon is on a different host/port.\n\"\"\"</span>\n\n<span class=\"hljs-keyword\">import</span> argparse\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">from</span> pathlib <span class=\"hljs-keyword\">import</span> Path\n\n<span class=\"hljs-keyword\">import</span> requests\n\n<span class=\"hljs-comment\"># --------------------------------------------------------------------------- #</span>\n<span class=\"hljs-comment\"># Configuration                                                               #</span>\n<span class=\"hljs-comment\"># --------------------------------------------------------------------------- #</span>\nOLLAMA_HOST   = <span class=\"hljs-string\">\"http://localhost:11434\"</span>        <span class=\"hljs-comment\"># Change if Ollama runs elsewhere</span>\nMODEL_NAME    = <span class=\"hljs-string\">\"llama3.2:1b\"</span>                  <span class=\"hljs-comment\"># FQN of the model to query</span>\nSYSTEM_PROMPT = (\n    <span class=\"hljs-string\">\"You are a concise technical assistant. \"</span>\n    <span class=\"hljs-string\">\"Respond in short, precise language with no fluff.\"</span>\n)\n\n<span class=\"hljs-comment\"># --------------------------------------------------------------------------- #</span>\n<span class=\"hljs-comment\"># Helpers                                                                     #</span>\n<span class=\"hljs-comment\"># --------------------------------------------------------------------------- #</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">chat</span>(<span class=\"hljs-params\">user_prompt: str</span>) -&gt; str:</span>\n    <span class=\"hljs-string\">\"\"\"Send a single-turn chat request to Ollama and return the assistant reply.\"\"\"</span>\n    url = <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{OLLAMA_HOST}</span>/api/chat\"</span>\n    payload = {\n        <span class=\"hljs-string\">\"model\"</span>: MODEL_NAME,\n        <span class=\"hljs-string\">\"stream\"</span>: <span class=\"hljs-literal\">False</span>,\n        <span class=\"hljs-string\">\"messages\"</span>: [\n            {<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"system\"</span>, <span class=\"hljs-string\">\"content\"</span>: SYSTEM_PROMPT},\n            {<span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"user\"</span>,   <span class=\"hljs-string\">\"content\"</span>: user_prompt},\n        ],\n    }\n\n    <span class=\"hljs-keyword\">try</span>:\n        r = requests.post(url, json=payload, timeout=<span class=\"hljs-number\">300</span>)\n    <span class=\"hljs-keyword\">except</span> requests.exceptions.RequestException <span class=\"hljs-keyword\">as</span> exc:\n        sys.exit(<span class=\"hljs-string\">f\"[error] HTTP request failed: <span class=\"hljs-subst\">{exc}</span>\"</span>)\n\n    <span class=\"hljs-keyword\">if</span> r.status_code != <span class=\"hljs-number\">200</span>:\n        sys.exit(<span class=\"hljs-string\">f\"[error] Ollama returned <span class=\"hljs-subst\">{r.status_code}</span>: <span class=\"hljs-subst\">{r.text}</span>\"</span>)\n\n    data = r.json()\n    <span class=\"hljs-keyword\">return</span> data[<span class=\"hljs-string\">\"message\"</span>][<span class=\"hljs-string\">\"content\"</span>].strip()\n\n\n<span class=\"hljs-comment\"># --------------------------------------------------------------------------- #</span>\n<span class=\"hljs-comment\"># Main                                                                        #</span>\n<span class=\"hljs-comment\"># --------------------------------------------------------------------------- #</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>() -&gt; <span class=\"hljs-keyword\">None</span>:</span>\n    parser = argparse.ArgumentParser(\n        description=<span class=\"hljs-string\">\"Send a prompt to an Ollama model and print the response.\"</span>\n    )\n    parser.add_argument(<span class=\"hljs-string\">\"prompt\"</span>, help=<span class=\"hljs-string\">\"User prompt text (wrap in quotes).\"</span>)\n    args = parser.parse_args()\n\n    reply = chat(args.prompt)\n    print(reply)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    main()\n</code></pre>\n<p>Then change the file permissions to allow executing, and then run the script with a prompt:</p>\n<pre><code class=\"lang-bash\">chmod +x send_prompt.py\n./send_prompt.py <span class=\"hljs-string\">\"List 3 use cases for local LLMs.\"</span>\n</code></pre>\n<p>You should see the Llama3.2 response in the new terminal window now.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1746910949196/a2cc42b1-d57d-491f-bd12-6601ef07bea7.png\" alt class=\"image--center mx-auto\" /></p>\n<p>This allows you to prompt the model and receive responses <em>while staying at the main terminal</em>, where you can run other scripts.</p>\n<p>Next, we need a way to create and update Markdown files from an API.</p>\n<h2 id=\"heading-markdown-crud-with-fastapi\">Markdown CRUD with FastAPI</h2>\n<p>FastAPI is a framework for building APIs with Python. We can write a few functions for Markdown CRUD, and route them to HTTP methods like <code>POST =&gt; Create</code>, <code>PUT =&gt; Update</code>, and <code>Delete =&gt; Delete</code> .</p>\n<p>Create a new script called app.py:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> fastapi <span class=\"hljs-keyword\">import</span> FastAPI, HTTPException, Request\n<span class=\"hljs-keyword\">from</span> fastapi.responses <span class=\"hljs-keyword\">import</span> PlainTextResponse\n<span class=\"hljs-keyword\">import</span> aiofiles\n<span class=\"hljs-keyword\">from</span> pathlib <span class=\"hljs-keyword\">import</span> Path\n\nDATA_DIR = Path(<span class=\"hljs-string\">\"data\"</span>)\nDATA_DIR.mkdir(exist_ok=<span class=\"hljs-literal\">True</span>)\n\napp = FastAPI()\n\n<span class=\"hljs-meta\">@app.post(\"/files/{filename}\")</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">create_file</span>(<span class=\"hljs-params\">filename: str, request: Request</span>):</span>\n    path = DATA_DIR / filename\n    <span class=\"hljs-keyword\">if</span> path.exists():\n        <span class=\"hljs-keyword\">raise</span> HTTPException(status_code=<span class=\"hljs-number\">400</span>, detail=<span class=\"hljs-string\">\"File already exists\"</span>)\n    body = <span class=\"hljs-keyword\">await</span> request.body()\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> aiofiles.open(path, <span class=\"hljs-string\">\"wb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n        <span class=\"hljs-keyword\">await</span> f.write(body)\n    <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-string\">\"status\"</span>: <span class=\"hljs-string\">\"created\"</span>, <span class=\"hljs-string\">\"filename\"</span>: filename}\n\n<span class=\"hljs-meta\">@app.get(\"/files/{filename}\", response_class=PlainTextResponse)</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">read_file</span>(<span class=\"hljs-params\">filename: str</span>):</span>\n    path = DATA_DIR / filename\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> path.exists():\n        <span class=\"hljs-keyword\">raise</span> HTTPException(status_code=<span class=\"hljs-number\">404</span>, detail=<span class=\"hljs-string\">\"Not found\"</span>)\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> aiofiles.open(path, <span class=\"hljs-string\">\"rb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> f.read()\n\n<span class=\"hljs-meta\">@app.put(\"/files/{filename}\")</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">update_file</span>(<span class=\"hljs-params\">filename: str, request: Request</span>):</span>\n    path = DATA_DIR / filename\n    body = <span class=\"hljs-keyword\">await</span> request.body()\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> aiofiles.open(path, <span class=\"hljs-string\">\"wb\"</span>) <span class=\"hljs-keyword\">as</span> f:\n        <span class=\"hljs-keyword\">await</span> f.write(body)\n    <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-string\">\"status\"</span>: <span class=\"hljs-string\">\"updated\"</span>, <span class=\"hljs-string\">\"filename\"</span>: filename}\n\n<span class=\"hljs-meta\">@app.delete(\"/files/{filename}\")</span>\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">delete_file</span>(<span class=\"hljs-params\">filename: str</span>):</span>\n    path = DATA_DIR / filename\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> path.exists():\n        <span class=\"hljs-keyword\">raise</span> HTTPException(status_code=<span class=\"hljs-number\">404</span>, detail=<span class=\"hljs-string\">\"Not found\"</span>)\n    path.unlink()\n    <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-string\">\"status\"</span>: <span class=\"hljs-string\">\"deleted\"</span>, <span class=\"hljs-string\">\"filename\"</span>: filename}\n</code></pre>\n<p>Save it in the project’s root folder, and then start up the server. Be sure to start the uvicorn server in the virtual environment.</p>\n<pre><code class=\"lang-bash\">pip install fastapi uvicorn aiofiles\n.venv/bin/uvicorn app:app --reload\n</code></pre>\n<p>Next, test it out with a few different cUrl requests from the terminal.</p>\n<pre><code class=\"lang-bash\">curl -X POST http://localhost:8000/files/test.txt --data-binary <span class=\"hljs-string\">\"Hello\"</span>\ncurl http://localhost:8000/files/test.txt\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1746912173429/6c2c4142-ffa3-40cf-9940-9bff8a05d89e.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Check your local folder and you should see the new file. Now try updating then deleting the file.</p>\n<pre><code class=\"lang-bash\">curl -X PUT http://localhost:8000/files/test.txt --data-binary <span class=\"hljs-string\">\"Updated\"</span>\ncurl -X DELETE http://localhost:8000/files/test.txt\n</code></pre>\n<p>Alright, now we just need to tie these two together.</p>\n<h2 id=\"heading-saving-llm-responses-to-markdown-with-python\">Saving LLM Responses to Markdown with Python</h2>\n<p>Add a <code>save_response()</code> function to the <strong>send_prompt.py</strong> script, and update the <code>main()</code> function to call it after the LLM responds:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">save_response</span>(<span class=\"hljs-params\">content: str, filename: str = <span class=\"hljs-string\">\"output.md\"</span></span>) -&gt; <span class=\"hljs-keyword\">None</span>:</span>\n    <span class=\"hljs-string\">\"\"\"Save the assistant's response to a Markdown file via local FastAPI endpoint.\"\"\"</span>\n    url = <span class=\"hljs-string\">f\"http://localhost:8000/files/<span class=\"hljs-subst\">{filename}</span>\"</span>\n    <span class=\"hljs-keyword\">try</span>:\n        r = requests.post(url, data=content.encode(<span class=\"hljs-string\">\"utf-8\"</span>), timeout=<span class=\"hljs-number\">10</span>)\n    <span class=\"hljs-keyword\">except</span> requests.exceptions.RequestException <span class=\"hljs-keyword\">as</span> exc:\n        sys.exit(<span class=\"hljs-string\">f\"[error] Failed to save file: <span class=\"hljs-subst\">{exc}</span>\"</span>)\n\n    <span class=\"hljs-keyword\">if</span> r.status_code != <span class=\"hljs-number\">200</span>:\n        sys.exit(<span class=\"hljs-string\">f\"[error] File save failed: <span class=\"hljs-subst\">{r.status_code}</span> <span class=\"hljs-subst\">{r.text}</span>\"</span>)\n\n    print(<span class=\"hljs-string\">f\"[saved] <span class=\"hljs-subst\">{filename}</span>\"</span>)\n\n\n<span class=\"hljs-comment\"># --------------------------------------------------------------------------- #</span>\n<span class=\"hljs-comment\"># Main                                                                        #</span>\n<span class=\"hljs-comment\"># --------------------------------------------------------------------------- #</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>() -&gt; <span class=\"hljs-keyword\">None</span>:</span>\n    parser = argparse.ArgumentParser(\n        description=<span class=\"hljs-string\">\"Send a prompt to an Ollama model and print/save the response.\"</span>\n    )\n    parser.add_argument(<span class=\"hljs-string\">\"prompt\"</span>, help=<span class=\"hljs-string\">\"User prompt text (wrap in quotes).\"</span>)\n    parser.add_argument(<span class=\"hljs-string\">\"--save\"</span>, help=<span class=\"hljs-string\">\"Filename to save output as .md\"</span>, default=<span class=\"hljs-literal\">None</span>)\n    args = parser.parse_args()\n\n    reply = chat(args.prompt)\n    print(reply)\n\n    <span class=\"hljs-keyword\">if</span> args.save:\n        save_response(reply, args.save)\n\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    main()\n</code></pre>\n<p>Save it and then test it out from the terminal. You should be able to send a prompt and save the response to a text or Markdown file.</p>\n<pre><code class=\"lang-python\">./send_prompt.py <span class=\"hljs-string\">\"Write a Markdown tutorial summary\"</span> --save tutorial.md\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1746913221473/3dc1151c-f6b3-402f-a99f-6bd050775199.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Well look at that! A new tutorial.md Markdown file just appeared. The LLM response still shows in the terminal, but now it also gets saved to a text file if the <code>—save file_name.md</code> option is used. So you can chat with the LLM first and refine the prompt, then save the final version when you’re ready.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Generating text with AI can easily be done on local hardware using Ollama. And with a little Python, you can save the LLM response to a local file, to avoid the copy/pasting and enable automations or bulk processing of prompts. From here you could integrate a file syncing tool, build a UI to upload files and send prompts, or set up an MCP client to add other features.</p>\n","contentMarkdown":"Markdown is a great format for storing text files that need to be compatible with multiple systems. And LLMs excel at generating Markdown. If you regularly copy/paste responses from ChatGPT to a text document, the context-switching can become a friction point or bottle-neck in repetitive tasks.\n\nThere are countless AI-powered automation platforms out there that could solve this, but what if the data is sensitive/private, and can’t be shared with a 3rd party API? Or maybe you have vast amounts of data to process, and a paid service is not scalable? In cases like these, you can run an LLM locally using Ollama.\n\nBut what about automating the Markdown file creation? Ollama provides a local API for the LLM, but we need a local API for creating/editing Markdown files. It only takes a few lines of Python to handle the text file management, and that can easily be turned into an API using FastAPI.\n\n**This guide will cover:**\n\n* Running LLMs locally with Ollama\n    \n* Prompting the model from a Python Script\n    \n* Markdown CRUD with FastAPI\n    \n* Saving LLM Responses to Markdown with Python\n    \n\n*Let’s get to it!*\n\n## Running LLMs locally with Ollama\n\nStart out by downloading Ollama and installing it.\n\n[**ollama.com/download**](http://ollama.com/download)\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729380535005/1c86f951-2e50-4d0a-a5e3-faf03d073ccf.png?auto=compress,format&format=webp&auto=compress,format&format=webp align=\"left\")\n\nOnce the download finishes, move the `Ollama.app` file to your **Applications** folder, then open it. Then click through the installer and approve the drive access. You’ll notice a new llama icon in the menu bar, with a single option to *Quit Ollama*.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731150387579/b9ce4790-220e-4721-8346-8e4cbdd4d05c.png?auto=compress,format&format=webp&auto=compress,format&format=webp align=\"left\")\n\nThere’s no other GUI— everything else is done from the terminal.\n\n## Downloading and Prompting Models\n\nNext, open the terminal and run:\n\n```bash\nollama run llama3.2:1b\n```\n\nThis will download the smaller, 1 billion parameter Llama3.2 model, then run it and let you begin prompting from the terminal. You’ll see several files download the first time running a model, but after that it should load quickly and be ready to start prompting.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1746880539273/d64ce232-ab23-451d-b481-e1f69624c61e.png align=\"center\")\n\nType a prompt and hit Enter. You should see a response in the terminal.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1746880613961/d434b073-7a5c-44c9-be91-04d2db99bb54.png align=\"center\")\n\nOk, Ollama and the Llama3.2 model are running locally. Next, we’ll send a prompt from Python using the Ollama API. Leave this terminal window open to keep Ollama and Llama3.2 running, and open a new terminal window for the next section.\n\n**Note**: You can type `/bye` to exit Ollama and return to the main terminal, or `/?` for a list of other Ollama commands. But for now, keep it running to use in the next step.\n\n## Prompting the model from a Python Script\n\nOpen the terminal and create a new folder for the project, then cd into it.\n\n```bash\nmkdir MarkdownAPI && cd MarkdownAPI\n```\n\n### **Install Python 3.10** (if not already)\n\nUsing [Homebrew](https://docs.brew.sh/Installation):\n\n```bash\nbrew install python@3.10\n```\n\nAdd it to your shell:\n\n```bash\necho 'export PATH=\"/opt/homebrew/opt/python@3.10/bin:$PATH\"' >> ~/.zshrc\nsource ~/.zshrc\n```\n\nVerify:\n\n```bash\npython3.10 --version\n```\n\nThen create a virtual environment:\n\n```bash\npython3.10 -m venv .venv\nsource .venv/bin/activate\n```\n\nAnd install the required packages:\n\n```bash\npip install --upgrade pip\npip install fastapi uvicorn aiofiles requests\n```\n\nOk, the environment is set up. Next create a new Python script and save it in the root folder for the environment.\n\n**send\\_prompt.py**\n\n```python\n#!/usr/bin/env python3\n\"\"\"\nCLI wrapper for Ollama’s HTTP API (chat endpoint).\n\nUsage\n-----\n$ ./send_prompt.py \"Explain RAG in one paragraph\"\n\nEnvironment\n-----------\n- Expects the Ollama daemon to be running locally (default: http://localhost:11434).\n- Adjust `OLLAMA_HOST` if your daemon is on a different host/port.\n\"\"\"\n\nimport argparse\nimport json\nimport sys\nfrom pathlib import Path\n\nimport requests\n\n# --------------------------------------------------------------------------- #\n# Configuration                                                               #\n# --------------------------------------------------------------------------- #\nOLLAMA_HOST   = \"http://localhost:11434\"        # Change if Ollama runs elsewhere\nMODEL_NAME    = \"llama3.2:1b\"                  # FQN of the model to query\nSYSTEM_PROMPT = (\n    \"You are a concise technical assistant. \"\n    \"Respond in short, precise language with no fluff.\"\n)\n\n# --------------------------------------------------------------------------- #\n# Helpers                                                                     #\n# --------------------------------------------------------------------------- #\ndef chat(user_prompt: str) -> str:\n    \"\"\"Send a single-turn chat request to Ollama and return the assistant reply.\"\"\"\n    url = f\"{OLLAMA_HOST}/api/chat\"\n    payload = {\n        \"model\": MODEL_NAME,\n        \"stream\": False,\n        \"messages\": [\n            {\"role\": \"system\", \"content\": SYSTEM_PROMPT},\n            {\"role\": \"user\",   \"content\": user_prompt},\n        ],\n    }\n\n    try:\n        r = requests.post(url, json=payload, timeout=300)\n    except requests.exceptions.RequestException as exc:\n        sys.exit(f\"[error] HTTP request failed: {exc}\")\n\n    if r.status_code != 200:\n        sys.exit(f\"[error] Ollama returned {r.status_code}: {r.text}\")\n\n    data = r.json()\n    return data[\"message\"][\"content\"].strip()\n\n\n# --------------------------------------------------------------------------- #\n# Main                                                                        #\n# --------------------------------------------------------------------------- #\ndef main() -> None:\n    parser = argparse.ArgumentParser(\n        description=\"Send a prompt to an Ollama model and print the response.\"\n    )\n    parser.add_argument(\"prompt\", help=\"User prompt text (wrap in quotes).\")\n    args = parser.parse_args()\n\n    reply = chat(args.prompt)\n    print(reply)\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThen change the file permissions to allow executing, and then run the script with a prompt:\n\n```bash\nchmod +x send_prompt.py\n./send_prompt.py \"List 3 use cases for local LLMs.\"\n```\n\nYou should see the Llama3.2 response in the new terminal window now.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1746910949196/a2cc42b1-d57d-491f-bd12-6601ef07bea7.png align=\"center\")\n\nThis allows you to prompt the model and receive responses *while staying at the main terminal*, where you can run other scripts.\n\nNext, we need a way to create and update Markdown files from an API.\n\n## Markdown CRUD with FastAPI\n\nFastAPI is a framework for building APIs with Python. We can write a few functions for Markdown CRUD, and route them to HTTP methods like `POST => Create`, `PUT => Update`, and `Delete => Delete` .\n\nCreate a new script called app.py:\n\n```python\nfrom fastapi import FastAPI, HTTPException, Request\nfrom fastapi.responses import PlainTextResponse\nimport aiofiles\nfrom pathlib import Path\n\nDATA_DIR = Path(\"data\")\nDATA_DIR.mkdir(exist_ok=True)\n\napp = FastAPI()\n\n@app.post(\"/files/{filename}\")\nasync def create_file(filename: str, request: Request):\n    path = DATA_DIR / filename\n    if path.exists():\n        raise HTTPException(status_code=400, detail=\"File already exists\")\n    body = await request.body()\n    async with aiofiles.open(path, \"wb\") as f:\n        await f.write(body)\n    return {\"status\": \"created\", \"filename\": filename}\n\n@app.get(\"/files/{filename}\", response_class=PlainTextResponse)\nasync def read_file(filename: str):\n    path = DATA_DIR / filename\n    if not path.exists():\n        raise HTTPException(status_code=404, detail=\"Not found\")\n    async with aiofiles.open(path, \"rb\") as f:\n        return await f.read()\n\n@app.put(\"/files/{filename}\")\nasync def update_file(filename: str, request: Request):\n    path = DATA_DIR / filename\n    body = await request.body()\n    async with aiofiles.open(path, \"wb\") as f:\n        await f.write(body)\n    return {\"status\": \"updated\", \"filename\": filename}\n\n@app.delete(\"/files/{filename}\")\nasync def delete_file(filename: str):\n    path = DATA_DIR / filename\n    if not path.exists():\n        raise HTTPException(status_code=404, detail=\"Not found\")\n    path.unlink()\n    return {\"status\": \"deleted\", \"filename\": filename}\n```\n\nSave it in the project’s root folder, and then start up the server. Be sure to start the uvicorn server in the virtual environment.\n\n```bash\npip install fastapi uvicorn aiofiles\n.venv/bin/uvicorn app:app --reload\n```\n\nNext, test it out with a few different cUrl requests from the terminal.\n\n```bash\ncurl -X POST http://localhost:8000/files/test.txt --data-binary \"Hello\"\ncurl http://localhost:8000/files/test.txt\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1746912173429/6c2c4142-ffa3-40cf-9940-9bff8a05d89e.png align=\"center\")\n\nCheck your local folder and you should see the new file. Now try updating then deleting the file.\n\n```bash\ncurl -X PUT http://localhost:8000/files/test.txt --data-binary \"Updated\"\ncurl -X DELETE http://localhost:8000/files/test.txt\n```\n\nAlright, now we just need to tie these two together.\n\n## Saving LLM Responses to Markdown with Python\n\nAdd a `save_response()` function to the **send\\_prompt.py** script, and update the `main()` function to call it after the LLM responds:\n\n```python\ndef save_response(content: str, filename: str = \"output.md\") -> None:\n    \"\"\"Save the assistant's response to a Markdown file via local FastAPI endpoint.\"\"\"\n    url = f\"http://localhost:8000/files/{filename}\"\n    try:\n        r = requests.post(url, data=content.encode(\"utf-8\"), timeout=10)\n    except requests.exceptions.RequestException as exc:\n        sys.exit(f\"[error] Failed to save file: {exc}\")\n\n    if r.status_code != 200:\n        sys.exit(f\"[error] File save failed: {r.status_code} {r.text}\")\n\n    print(f\"[saved] {filename}\")\n\n\n# --------------------------------------------------------------------------- #\n# Main                                                                        #\n# --------------------------------------------------------------------------- #\ndef main() -> None:\n    parser = argparse.ArgumentParser(\n        description=\"Send a prompt to an Ollama model and print/save the response.\"\n    )\n    parser.add_argument(\"prompt\", help=\"User prompt text (wrap in quotes).\")\n    parser.add_argument(\"--save\", help=\"Filename to save output as .md\", default=None)\n    args = parser.parse_args()\n\n    reply = chat(args.prompt)\n    print(reply)\n\n    if args.save:\n        save_response(reply, args.save)\n\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nSave it and then test it out from the terminal. You should be able to send a prompt and save the response to a text or Markdown file.\n\n```python\n./send_prompt.py \"Write a Markdown tutorial summary\" --save tutorial.md\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1746913221473/3dc1151c-f6b3-402f-a99f-6bd050775199.png align=\"center\")\n\nWell look at that! A new tutorial.md Markdown file just appeared. The LLM response still shows in the terminal, but now it also gets saved to a text file if the `—save file_name.md` option is used. So you can chat with the LLM first and refine the prompt, then save the final version when you’re ready.\n\n## Conclusion\n\nGenerating text with AI can easily be done on local hardware using Ollama. And with a little Python, you can save the LLM response to a local file, to avoid the copy/pasting and enable automations or bulk processing of prompts. From here you could integrate a file syncing tool, build a UI to upload files and send prompts, or set up an MCP client to add other features.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1746962748212/be77b440-e4eb-43dc-be91-59fe78abf063.png","brief":"Markdown is a great format for storing text files that need to be compatible with multiple systems. And LLMs excel at generating Markdown. If you regularly copy/paste responses from ChatGPT to a text document, the context-switching can become a frict...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":7,"draft":"681f3c10b31dc1024d4d5aa9","tags":["56744721958ef13879b94d67","56744723958ef13879b95342","6547328115caa6554c5d5bc0","64156e99fe70c2c6425030ed","638891761e50d717cbfd7b5b","56744722958ef13879b950b2","635ad52efe8087002dee4707","5eeddcf7f4262384494c02cb","57d7b6ffd17cab545cab9d14"],"publication":"60771c264155da32fc83ad6e","metaTitle":"Local Markdown Automation with Ollama & FastAPI","metaDescription":"Learn to automate Markdown file creation using Ollama, FastAPI, and local AI models with Python for privacy-conscious solutions","series":"67d765f0447947a764ae3d33","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"68208e51a2a81e6625887df8"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"68175f8ceaf13cf1805f45d9","createdAt":"2025-05-04T12:37:32.046Z","updatedAt":"2025-05-04T12:37:32.046Z","views":522,"isActive":true,"hasLatex":false,"popularity":7496.69,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"May the Nodes Be with You","subtitle":"A Star Wars Themed Knowledge Graph Generator with Neo4j & JavaScript","cuid":"cma9mztoq00000alb8loq768k","dateAdded":"2025-05-04T12:37:32.042Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"may-the-nodes-be-with-you","content":"<p>Knowledge graphs are powerful tools to visualize and explore your data, and can help uncover new insights and patterns in how your data is related. They are easy to search and navigate, but getting your data <em>into the graph database</em> in the right format can be challenging. And the resulting graph is only as good as the data— or as they say, garbage in, garbage out. So it’s important to define a good schema, or ontology, that describes the entities and relationships you want to extract from your data.</p>\n<p>With unstructured text, you can use an LLM to extract entities and relationships, and then generate a Cypher query using the model (<a target=\"_blank\" href=\"https://blog.greenflux.us/building-a-knowledge-graph-locally-with-neo4j-and-ollama\">guide</a>). This can take a lot of the work out of generating the Cypher queries but it comes with the risk of hallucinations, and the security and privacy concerns of sending your data to a 3rd party.</p>\n<p>When working with structured data though, you can just write a function to map over the data and build the Cypher query programmatically, without the risk of hallucinations, or sharing your data with a 3rd party. With just a few lines of JavaScript, you can map over API responses and bulk insert data into a knowledge graph to use for exploring data visually, or building a RAG pipeline.</p>\n<p>In this guide, we’ll be using the <strong>Star Wars API</strong> to fetch data about an episode, and all of the planets, star ships, vehicles and species mentioned in it. Then, we’ll map over that data to build a Cypher query, and run it to build a new graph.</p>\n<p><strong>Topics Covered:</strong></p>\n<ul>\n<li><p>Using the Star Wars API</p>\n</li>\n<li><p>Merging data from multiple endpoints with JavaScript</p>\n</li>\n<li><p>Mapping the results to a Cypher query</p>\n</li>\n<li><p>Running the query via Neo4j’s REST API</p>\n</li>\n</ul>\n<p><em>Let’s get to it!</em></p>\n<h2 id=\"heading-using-the-star-wars-api\">Using the Star Wars API</h2>\n<p>The original Star Wars API (swapi.co) was a free API with data on Star Wars characters, planets, ships, etc. It is no longer maintained, but a few newer API providers offer a similar service. For this guide, I’ll be using <a target=\"_blank\" href=\"https://swapi.info/\">swapi.info</a>. Just like the original API, swapi.info works without a login and is completely free to use.</p>\n<p>Take a look at the JSON structure for a record from the <a target=\"_blank\" href=\"https://swapi.info/api/films\"><code>/films</code></a> endpoint.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1746144140833/b50a8d3e-c3e7-4b30-b2da-24e72e53c7d8.png\" alt class=\"image--center mx-auto\" /></p>\n<p>There’s a title, and a few other data points, and then arrays for <code>characters</code>, <code>planets</code>, <code>starships</code>, <code>vehicles</code>, and <code>species</code>. Each one of those array entries link to another endpoint, and record, with more details. We can use this data to build a knowledge graph by mapping over it and building a Cypher query to insert the data into Neo4j.</p>\n<h3 id=\"heading-local-neo4j-and-appsmith\">Local Neo4j and Appsmith</h3>\n<p>For this guide, I’ll be using Neo4j as the graph database, and Appsmith to run the API calls and write the JavaScript. Check out this <a target=\"_blank\" href=\"https://community.appsmith.com/tutorial/self-hosted-knowledge-graph-neo4j-and-appsmith\">tutorial</a> on how to deploy both in Docker, or you can use the cloud versions of Appsmith and Neo4j/AuraDB.</p>\n<p>Alright, let’s graph the planets and species in the first 3 movies and see how they are related. Notice how in the JSON above, each related record is just a link, and doesn’t include the title or name of the entity. This means we’ll have to loop through all the related records to lookup the name or title before the graph can be built.</p>\n<p>Normally I would use the REST API query in Appsmith, but in this case the looping can be handled nicely with <code>fetch()</code>, and a dynamic URL.</p>\n<h2 id=\"heading-merging-data-from-multiple-endpoints-with-javascript\">Merging data from multiple endpoints with JavaScript</h2>\n<p>In Appsmith, create a new JSObject named <code>SWAPI</code> and paste in the following:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">filmData</span>: [],\n\n  <span class=\"hljs-keyword\">async</span> loadFilms() {\n    <span class=\"hljs-keyword\">const</span> base = <span class=\"hljs-string\">'https://swapi.info/api'</span>;\n    <span class=\"hljs-keyword\">const</span> fetchJson = <span class=\"hljs-keyword\">async</span> url =&gt; {\n      <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> fetch(url);\n      <span class=\"hljs-keyword\">if</span> (!res.ok) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">`Failed to fetch <span class=\"hljs-subst\">${url}</span>`</span>);\n      <span class=\"hljs-keyword\">return</span> res.json();\n    };\n\n    <span class=\"hljs-keyword\">const</span> rawFilms = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all(\n      [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].map(<span class=\"hljs-function\"><span class=\"hljs-params\">id</span> =&gt;</span> fetchJson(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${base}</span>/films/<span class=\"hljs-subst\">${id}</span>`</span>))\n    );\n    <span class=\"hljs-keyword\">const</span> planetUrls = [...new <span class=\"hljs-built_in\">Set</span>(rawFilms.flatMap(<span class=\"hljs-function\"><span class=\"hljs-params\">f</span> =&gt;</span> f.planets))];\n    <span class=\"hljs-keyword\">const</span> speciesUrls = [...new <span class=\"hljs-built_in\">Set</span>(rawFilms.flatMap(<span class=\"hljs-function\"><span class=\"hljs-params\">f</span> =&gt;</span> f.species))];\n\n    <span class=\"hljs-keyword\">const</span> [planetObjs, speciesObjs] = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all([\n      <span class=\"hljs-built_in\">Promise</span>.all(planetUrls.map(fetchJson)),\n      <span class=\"hljs-built_in\">Promise</span>.all(speciesUrls.map(fetchJson))\n    ]);\n    <span class=\"hljs-keyword\">const</span> planetMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(planetObjs.map(<span class=\"hljs-function\"><span class=\"hljs-params\">p</span> =&gt;</span> [p.url, p.name]));\n    <span class=\"hljs-keyword\">const</span> speciesMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(speciesObjs.map(<span class=\"hljs-function\"><span class=\"hljs-params\">s</span> =&gt;</span> [s.url, s.name]));\n\n    <span class=\"hljs-built_in\">this</span>.filmData = rawFilms.map(<span class=\"hljs-function\"><span class=\"hljs-params\">f</span> =&gt;</span> ({\n      <span class=\"hljs-attr\">episode_id</span>: f.episode_id,\n      <span class=\"hljs-attr\">title</span>:      f.title,\n      <span class=\"hljs-attr\">planets</span>:    f.planets.map(<span class=\"hljs-function\"><span class=\"hljs-params\">url</span> =&gt;</span> planetMap.get(url)),\n      <span class=\"hljs-attr\">species</span>:    f.species.map(<span class=\"hljs-function\"><span class=\"hljs-params\">url</span> =&gt;</span> speciesMap.get(url))\n    }));\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.filmData;\n  }\n}\n</code></pre>\n<p>This loops over each related endpoint and returns a new films object with the actual names/titles of the related entities, instead of the URL.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1746360424377/168d6859-25cc-452f-bd89-6610e3b24f10.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, now that we have all the names, we can loop over all the child arrays and generate a Cypher query.</p>\n<h2 id=\"heading-mapping-the-results-to-a-cypher-query\">Mapping the results to a Cypher query</h2>\n<p>The most important step in building a knowledge graph is planning out an ontology, or schema for the entities and relationships you want to represent. For this example, I’ll be representing the first 3 films (episodes 4-6), and a portion of the planets and species, to limit the graph size to 20 nodes.</p>\n<p>Add a new function to the JSObject to map the <code>filmData</code> to a Cypher query.</p>\n<pre><code class=\"lang-javascript\">  generate20NodeGraphRequest(data = <span class=\"hljs-built_in\">this</span>.filmData) {\n    <span class=\"hljs-keyword\">const</span> films      = data;\n    <span class=\"hljs-keyword\">const</span> allPlanets = [...new <span class=\"hljs-built_in\">Set</span>(films.flatMap(<span class=\"hljs-function\"><span class=\"hljs-params\">f</span> =&gt;</span> f.planets))];\n    <span class=\"hljs-keyword\">const</span> allSpecies = [...new <span class=\"hljs-built_in\">Set</span>(films.flatMap(<span class=\"hljs-function\"><span class=\"hljs-params\">f</span> =&gt;</span> f.species))];\n\n    <span class=\"hljs-comment\">// allocate 20 nodes: 3 films + X planets + Y species = 20</span>\n    <span class=\"hljs-keyword\">let</span> remaining = <span class=\"hljs-number\">20</span> - films.length;       <span class=\"hljs-comment\">// 17</span>\n    <span class=\"hljs-keyword\">const</span> planets = allPlanets.slice(<span class=\"hljs-number\">0</span>, remaining);\n    remaining   -= planets.length;           <span class=\"hljs-comment\">// leftover for species</span>\n    <span class=\"hljs-keyword\">const</span> species = allSpecies.slice(<span class=\"hljs-number\">0</span>, remaining);\n\n    <span class=\"hljs-keyword\">const</span> cypher = <span class=\"hljs-string\">`\nUNWIND $films AS filmObj\nWITH filmObj\n\nMERGE (f:Film {episode_id: filmObj.episode_id, title: filmObj.title})\n\nWITH filmObj, f\n\nCALL {\n  WITH filmObj, f\n  UNWIND filmObj.planets AS pname\n  WITH f, pname\n  WHERE pname IN $planets\n  MERGE (p:Planet {name: pname})\n  MERGE (p)-[:FEATURED_IN]-&gt;(f)\n  RETURN COUNT(*) AS planetCount\n}\n\nCALL {\n  WITH filmObj, f\n  UNWIND filmObj.species AS spname\n  WITH f, spname\n  WHERE spname IN $species\n  MERGE (s:Species {name: spname})\n  MERGE (s)-[:FEATURED_IN]-&gt;(f)\n  RETURN COUNT(*) AS speciesCount\n}\n\nRETURN f\n`</span>.trim();\n\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">statements</span>: [{\n        <span class=\"hljs-attr\">statement</span>:  cypher,\n        <span class=\"hljs-attr\">parameters</span>: { films, planets, species }\n      }]\n    };\n  }\n</code></pre>\n<p>This uses the <code>MERGE</code> command to <em>create-or-update</em> the entities, and avoid duplicates. Each name or title is mapped into an array, and then turned into multiple records using <code>UNWIND</code> in the Cypher query.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1746360673788/325aaa4c-26f9-4424-bf0c-6619cf6d7683.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-running-the-query-via-neo4js-rest-api\">Running the query via Neo4j’s REST API</h2>\n<p>Ok, we have a Cypher query built from the Star Wars API data. Next, let’s add an API to insert the data into Neo4j.</p>\n<p>Once you have Neo4j running locally in Docker, create a new API in Appsmith to run a Cypher query.</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>Name</td><td>RunCypher</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Method</td><td>POST</td></tr>\n<tr>\n<td>URL</td><td>http://host.docker.internal/7474/db/neo4j/tx/commit</td></tr>\n<tr>\n<td>Body type</td><td>JSON</td></tr>\n<tr>\n<td>Body</td><td>{{ SWAPI.generate20NodeGraphRequest.data }}</td></tr>\n</tbody>\n</table>\n</div><p>Then click the <strong>Save URL</strong> button to save the credentials to an Appsmith datasource.</p>\n<p>Choose <em>Basic</em> for the <strong>Authentication type</strong>, and then enter your Neo4j user name and password, then click <strong>Save</strong>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1746315921720/375880ab-abdc-46d6-83ae-1ec9d2ffbfe1.png\" alt class=\"image--center mx-auto\" /></p>\n<p>This will keep the credentials on the Appsmith server instead of in the app itself.</p>\n<p>Since we’re using Docker to run both Neo4j and Appsmith locally, the <code>localhost</code> URLs are replaced with <code>host.docker.internal</code>.</p>\n<p>Run the query in Appsmith, and then open the Neo4j dashboard.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1746361254617/4d1a11c8-b8d1-4fc0-92a4-fa86bad9534c.png\" alt class=\"image--center mx-auto\" /></p>\n<p>In Neo4j, select all the nodes and relationships by running the query:</p>\n<pre><code class=\"lang-sql\">MATCH p=()-[]-&gt;() RETURN p\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1746360808779/b8e96d7d-888e-4aa1-86a9-9c271b1e68e8.png\" alt class=\"image--center mx-auto\" /></p>\n<p><img src=\"https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExNjk5Z3BrMjJ6d2ZhMWZqNWw0NXk2amN5MGRsYjc1aGhlNnd3OW1vMyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/ZwxpIHk5LutMc/giphy.gif\" alt /></p>\n<p>Nice! Now we can easily see how all the planets and characters relate back to each movie. Or we can query the graph to answer questions like:</p>\n<blockquote>\n<p>Which species appeared in all 3 films?</p>\n</blockquote>\n<pre><code class=\"lang-sql\">MATCH (s:Species)-[:FEATURED_IN]-&gt;(f:Film)\nWHERE f.episode_id IN [4,5,6]\n<span class=\"hljs-keyword\">WITH</span> s, <span class=\"hljs-keyword\">count</span>(<span class=\"hljs-keyword\">DISTINCT</span> f) <span class=\"hljs-keyword\">AS</span> appearances\n<span class=\"hljs-keyword\">WHERE</span> appearances = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">RETURN</span> s.name <span class=\"hljs-keyword\">AS</span> Species\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1746361497700/1b935c9b-599e-4974-be22-8eee33bcfd03.png\" alt class=\"image--center mx-auto\" /></p>\n<p><img src=\"https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExemd0cGg4Nzl0emZwb25jNGUzNjk3ODU5d2FoMTJmamdhaWZkOW5maiZlcD12MV9naWZzX3NlYXJjaCZjdD1n/3oOWASkCzFuP6/200.gif\" alt=\"Video gif. C3PO dances jerkily before we cut to R2D2 gliding our way.\" /></p>\n<p>From here, you can use the Neo4j browser to explore the data, or query Neo4j via the API has part of a RAG pipeline.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>It can be tempting to use LLMs to generate Cypher queries to insert graph data, but that comes with inherent risks of hallucination, and potential security and privacy issues. When working with structured data like JSON or SQL, you can map over the data using JavaScript to build the Cypher query programmatically, avoiding the risks of using an LLM to generate the query.</p>\n<p>This allows you to build knowledge graphs with clearly defined relationships and a more repeatable structure than using LLMs to generate Cypher queries. With a little planning and a few lines of code, you can easily convert structured data into interactive knowledge graphs.</p>\n","contentMarkdown":"Knowledge graphs are powerful tools to visualize and explore your data, and can help uncover new insights and patterns in how your data is related. They are easy to search and navigate, but getting your data *into the graph database* in the right format can be challenging. And the resulting graph is only as good as the data— or as they say, garbage in, garbage out. So it’s important to define a good schema, or ontology, that describes the entities and relationships you want to extract from your data.\n\nWith unstructured text, you can use an LLM to extract entities and relationships, and then generate a Cypher query using the model ([guide](https://blog.greenflux.us/building-a-knowledge-graph-locally-with-neo4j-and-ollama)). This can take a lot of the work out of generating the Cypher queries but it comes with the risk of hallucinations, and the security and privacy concerns of sending your data to a 3rd party.\n\nWhen working with structured data though, you can just write a function to map over the data and build the Cypher query programmatically, without the risk of hallucinations, or sharing your data with a 3rd party. With just a few lines of JavaScript, you can map over API responses and bulk insert data into a knowledge graph to use for exploring data visually, or building a RAG pipeline.\n\nIn this guide, we’ll be using the **Star Wars API** to fetch data about an episode, and all of the planets, star ships, vehicles and species mentioned in it. Then, we’ll map over that data to build a Cypher query, and run it to build a new graph.\n\n**Topics Covered:**\n\n* Using the Star Wars API\n    \n* Merging data from multiple endpoints with JavaScript\n    \n* Mapping the results to a Cypher query\n    \n* Running the query via Neo4j’s REST API\n    \n\n*Let’s get to it!*\n\n## Using the Star Wars API\n\nThe original Star Wars API (swapi.co) was a free API with data on Star Wars characters, planets, ships, etc. It is no longer maintained, but a few newer API providers offer a similar service. For this guide, I’ll be using [swapi.info](https://swapi.info/). Just like the original API, swapi.info works without a login and is completely free to use.\n\nTake a look at the JSON structure for a record from the [`/films`](https://swapi.info/api/films) endpoint.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1746144140833/b50a8d3e-c3e7-4b30-b2da-24e72e53c7d8.png align=\"center\")\n\nThere’s a title, and a few other data points, and then arrays for `characters`, `planets`, `starships`, `vehicles`, and `species`. Each one of those array entries link to another endpoint, and record, with more details. We can use this data to build a knowledge graph by mapping over it and building a Cypher query to insert the data into Neo4j.\n\n### Local Neo4j and Appsmith\n\nFor this guide, I’ll be using Neo4j as the graph database, and Appsmith to run the API calls and write the JavaScript. Check out this [tutorial](https://community.appsmith.com/tutorial/self-hosted-knowledge-graph-neo4j-and-appsmith) on how to deploy both in Docker, or you can use the cloud versions of Appsmith and Neo4j/AuraDB.\n\nAlright, let’s graph the planets and species in the first 3 movies and see how they are related. Notice how in the JSON above, each related record is just a link, and doesn’t include the title or name of the entity. This means we’ll have to loop through all the related records to lookup the name or title before the graph can be built.\n\nNormally I would use the REST API query in Appsmith, but in this case the looping can be handled nicely with `fetch()`, and a dynamic URL.\n\n## Merging data from multiple endpoints with JavaScript\n\nIn Appsmith, create a new JSObject named `SWAPI` and paste in the following:\n\n```javascript\nexport default {\n  filmData: [],\n\n  async loadFilms() {\n    const base = 'https://swapi.info/api';\n    const fetchJson = async url => {\n      const res = await fetch(url);\n      if (!res.ok) throw new Error(`Failed to fetch ${url}`);\n      return res.json();\n    };\n\n    const rawFilms = await Promise.all(\n      [1, 2, 3].map(id => fetchJson(`${base}/films/${id}`))\n    );\n    const planetUrls = [...new Set(rawFilms.flatMap(f => f.planets))];\n    const speciesUrls = [...new Set(rawFilms.flatMap(f => f.species))];\n\n    const [planetObjs, speciesObjs] = await Promise.all([\n      Promise.all(planetUrls.map(fetchJson)),\n      Promise.all(speciesUrls.map(fetchJson))\n    ]);\n    const planetMap = new Map(planetObjs.map(p => [p.url, p.name]));\n    const speciesMap = new Map(speciesObjs.map(s => [s.url, s.name]));\n\n    this.filmData = rawFilms.map(f => ({\n      episode_id: f.episode_id,\n      title:      f.title,\n      planets:    f.planets.map(url => planetMap.get(url)),\n      species:    f.species.map(url => speciesMap.get(url))\n    }));\n    return this.filmData;\n  }\n}\n```\n\nThis loops over each related endpoint and returns a new films object with the actual names/titles of the related entities, instead of the URL.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1746360424377/168d6859-25cc-452f-bd89-6610e3b24f10.png align=\"center\")\n\nOk, now that we have all the names, we can loop over all the child arrays and generate a Cypher query.\n\n## Mapping the results to a Cypher query\n\nThe most important step in building a knowledge graph is planning out an ontology, or schema for the entities and relationships you want to represent. For this example, I’ll be representing the first 3 films (episodes 4-6), and a portion of the planets and species, to limit the graph size to 20 nodes.\n\nAdd a new function to the JSObject to map the `filmData` to a Cypher query.\n\n```javascript\n  generate20NodeGraphRequest(data = this.filmData) {\n    const films      = data;\n    const allPlanets = [...new Set(films.flatMap(f => f.planets))];\n    const allSpecies = [...new Set(films.flatMap(f => f.species))];\n\n    // allocate 20 nodes: 3 films + X planets + Y species = 20\n    let remaining = 20 - films.length;       // 17\n    const planets = allPlanets.slice(0, remaining);\n    remaining   -= planets.length;           // leftover for species\n    const species = allSpecies.slice(0, remaining);\n\n    const cypher = `\nUNWIND $films AS filmObj\nWITH filmObj\n\nMERGE (f:Film {episode_id: filmObj.episode_id, title: filmObj.title})\n\nWITH filmObj, f\n\nCALL {\n  WITH filmObj, f\n  UNWIND filmObj.planets AS pname\n  WITH f, pname\n  WHERE pname IN $planets\n  MERGE (p:Planet {name: pname})\n  MERGE (p)-[:FEATURED_IN]->(f)\n  RETURN COUNT(*) AS planetCount\n}\n\nCALL {\n  WITH filmObj, f\n  UNWIND filmObj.species AS spname\n  WITH f, spname\n  WHERE spname IN $species\n  MERGE (s:Species {name: spname})\n  MERGE (s)-[:FEATURED_IN]->(f)\n  RETURN COUNT(*) AS speciesCount\n}\n\nRETURN f\n`.trim();\n\n    return {\n      statements: [{\n        statement:  cypher,\n        parameters: { films, planets, species }\n      }]\n    };\n  }\n```\n\nThis uses the `MERGE` command to *create-or-update* the entities, and avoid duplicates. Each name or title is mapped into an array, and then turned into multiple records using `UNWIND` in the Cypher query.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1746360673788/325aaa4c-26f9-4424-bf0c-6619cf6d7683.png align=\"center\")\n\n## Running the query via Neo4j’s REST API\n\nOk, we have a Cypher query built from the Star Wars API data. Next, let’s add an API to insert the data into Neo4j.\n\nOnce you have Neo4j running locally in Docker, create a new API in Appsmith to run a Cypher query.\n\n| Name | RunCypher |\n| --- | --- |\n| Method | POST |\n| URL | http://host.docker.internal/7474/db/neo4j/tx/commit |\n| Body type | JSON |\n| Body | {{ SWAPI.generate20NodeGraphRequest.data }} |\n\nThen click the **Save URL** button to save the credentials to an Appsmith datasource.\n\nChoose *Basic* for the **Authentication type**, and then enter your Neo4j user name and password, then click **Save**.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1746315921720/375880ab-abdc-46d6-83ae-1ec9d2ffbfe1.png align=\"center\")\n\nThis will keep the credentials on the Appsmith server instead of in the app itself.\n\nSince we’re using Docker to run both Neo4j and Appsmith locally, the `localhost` URLs are replaced with `host.docker.internal`.\n\nRun the query in Appsmith, and then open the Neo4j dashboard.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1746361254617/4d1a11c8-b8d1-4fc0-92a4-fa86bad9534c.png align=\"center\")\n\nIn Neo4j, select all the nodes and relationships by running the query:\n\n```sql\nMATCH p=()-[]->() RETURN p\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1746360808779/b8e96d7d-888e-4aa1-86a9-9c271b1e68e8.png align=\"center\")\n\n![](https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExNjk5Z3BrMjJ6d2ZhMWZqNWw0NXk2amN5MGRsYjc1aGhlNnd3OW1vMyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/ZwxpIHk5LutMc/giphy.gif align=\"left\")\n\nNice! Now we can easily see how all the planets and characters relate back to each movie. Or we can query the graph to answer questions like:\n\n> Which species appeared in all 3 films?\n\n```sql\nMATCH (s:Species)-[:FEATURED_IN]->(f:Film)\nWHERE f.episode_id IN [4,5,6]\nWITH s, count(DISTINCT f) AS appearances\nWHERE appearances = 3\nRETURN s.name AS Species\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1746361497700/1b935c9b-599e-4974-be22-8eee33bcfd03.png align=\"center\")\n\n![Video gif. C3PO dances jerkily before we cut to R2D2 gliding our way.](https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExemd0cGg4Nzl0emZwb25jNGUzNjk3ODU5d2FoMTJmamdhaWZkOW5maiZlcD12MV9naWZzX3NlYXJjaCZjdD1n/3oOWASkCzFuP6/200.gif align=\"left\")\n\nFrom here, you can use the Neo4j browser to explore the data, or query Neo4j via the API has part of a RAG pipeline.\n\n## Conclusion\n\nIt can be tempting to use LLMs to generate Cypher queries to insert graph data, but that comes with inherent risks of hallucination, and potential security and privacy issues. When working with structured data like JSON or SQL, you can map over the data using JavaScript to build the Cypher query programmatically, avoiding the risks of using an LLM to generate the query.\n\nThis allows you to build knowledge graphs with clearly defined relationships and a more repeatable structure than using LLMs to generate Cypher queries. With a little planning and a few lines of code, you can easily convert structured data into interactive knowledge graphs.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1746150077731/71d015b3-4354-4934-83ba-ef5098e40faa.png","brief":"Knowledge graphs are powerful tools to visualize and explore your data, and can help uncover new insights and patterns in how your data is related. They are easy to search and navigate, but getting your data into the graph database in the right forma...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":7,"draft":"6813afc37eaea66216eb685d","tags":["68175f8ad84b725df043883a","68175f8ad84b725df043883b","63c1667e09eddfeb66db5ebb","59f01ec6df239c392dee763c","56744722958ef13879b94e4b","58b96527be993da9e4853150","62ec5d9ef583cc2636e5492c","56744721958ef13879b94cad","63304e6d3ac18d0d78a03640","5e844d758570b09f3cace381"],"publication":"60771c264155da32fc83ad6e","metaDescription":"Learn how to use the Star Wars API and JavaScript to build a knowledge graph with Neo4j","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"68175f8ceaf13cf1805f45d9"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"681218cb976eaf9b724ec20a","createdAt":"2025-04-30T12:34:19.406Z","updatedAt":"2025-04-30T12:34:19.406Z","views":142,"isActive":true,"hasLatex":false,"popularity":7489.0058,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Reddit API with OAuth2 using Google Apps Script","subtitle":"A guide for Reddit OAuth2 flow and refresh token using Apps Script and Google Sheets","cuid":"cma3x4adp000c09l74hs9hg0o","dateAdded":"2025-04-30T12:34:19.406Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"reddit-api-with-oauth2-using-google-apps-script","content":"<p>Reddit offers several different options for integrating web apps, scripts, and installed apps. Just go to <a target=\"_blank\" href=\"https://www.reddit.com/prefs/apps/\">https://www.reddit.com/prefs/apps/</a> to create a new app and select the type.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745711363590/ab91b1c0-3435-404a-bab1-948da9ecf2da.png\" alt class=\"image--center mx-auto\" /></p>\n<p>In this guide, we’ll be taking a closer look at the <em>script</em> type of Reddit app, made to run on a server, without user interaction in the browser. This could be used for scheduled posts from sheet data, automating a notification when a keyword is mentioned, or anything else for use on your own Reddit account.</p>\n<p><strong>Note</strong>: If you’re looking to build an app that <em>other Reddit users</em> can install, check out the <em>installed app</em> option. This guide is for script-type apps that only work on your account.</p>\n<h2 id=\"heading-reddit-authorization-methods\">Reddit Authorization Methods</h2>\n<p>Reddit does not support creating an API key or token from the Reddit website. Regardless of which app type you choose, that app will have to login with either a user name and password, or client_id and secret.</p>\n<p>You can create apps from the Reddit website (installed apps, web apps, or script), and then use the client ID to request an access token to begin using the API from your app.</p>\n<h3 id=\"heading-reddit-rest-api-with-2fa-enabled\">Reddit REST API with 2FA Enabled</h3>\n<p>If your Reddit account has two-factor authentication enabled, Reddit’s won’t allow logging into the API with a user name and password. This makes integrating with the API more complex, or forces you to turn off 2FA just to use the API. I didn’t want to sacrifice security to use the API, so I was looking for a method that would still work with 2FA enabled.</p>\n<p>This guide will show you how to integrate with the Reddit API while keeping 2FA enabled. It uses a workaround that requires a one-time authorization in the browser to receive the verification code, after which the script can run completely server-side with no user interaction. This method works perfect for scripts that you want to run on a timer, or trigger with a webhook from another system.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Creating an App in Reddit</p>\n</li>\n<li><p>Requesting an authorization code</p>\n</li>\n<li><p>Using the code in Apps Script to request an Access and Refresh Token</p>\n</li>\n<li><p>Keeping the token refreshed</p>\n</li>\n<li><p>Saving Reddit Data to Google Sheets on a Schedule</p>\n</li>\n</ul>\n<p><strong><em>Let’s get to it!</em></strong></p>\n<h2 id=\"heading-creating-an-app-in-reddit\">Creating an App in Reddit</h2>\n<p>Start out by creating a <a target=\"_blank\" href=\"https://www.reddit.com/prefs/apps/\">new app</a> in your Reddit account and choose <em>Script</em> for the type. For the redirect URL, enter:</p>\n<pre><code class=\"lang-plaintext\">http://localhost\n</code></pre>\n<p>This tells Reddit where to send the verification code after you login and authorize your app in the browser.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745755517378/bac8a432-265f-482e-8d15-4ec9f5babd2f.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Next, authorize the app by adding your <code>client_id</code> to this url and opening it in the browser:</p>\n<pre><code class=\"lang-plaintext\">https://www.reddit.com/api/v1/authorize?client_id=CLIENT_ID&amp;response_type=code&amp;state=random_string&amp;redirect_uri=http://localhost&amp;duration=permanent&amp;scope=read\n</code></pre>\n<p>After clicking <strong>Allow</strong>, it should redirect you to your localhost, with the verification code in the URL parameter. The browser will show an error, unless you happen to have a web server running on your local host, but all you need is the code from the URL to use in the next step.</p>\n<p>Copy everything between <code>code=</code> and <code>#_</code> .</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745756045363/b521d152-3620-4f72-b525-29bf4f034d97.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-requesting-an-access-token-and-refresh-token\">Requesting an Access Token and Refresh Token</h2>\n<p>The verification code can now be used to request an access token and refresh token from Apps Script. But we need somewhere to store the refresh token to avoid the browser login every time we run the script.</p>\n<p>Create a new Google Spreadsheet with a <em>credentials</em> sheet, and columns for <code>access_token</code>, <code>refresh_token</code>, and <code>auth_code</code>.</p>\n<p>Enter your auth_code obtained from the URL in the last step.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745757415997/6c00502f-1af4-4cdf-8f13-9dd9f7e990b3.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Then go to <strong>Extensions</strong> &gt; <strong>Apps Script</strong>, and paste in the following script:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// === CONFIGURATION ===</span>\n<span class=\"hljs-keyword\">const</span> subredditName = <span class=\"hljs-string\">'GoogleAppsScript'</span>;\n<span class=\"hljs-keyword\">const</span> userAgent = <span class=\"hljs-string\">'script:Get Subreddit:v1.1 (by /u/YOUR_USER_NAME)'</span>;\n<span class=\"hljs-keyword\">const</span> credsSheetName = <span class=\"hljs-string\">'credentials'</span>;\n<span class=\"hljs-keyword\">const</span> creds = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(credsSheetName);\n<span class=\"hljs-keyword\">const</span> props = PropertiesService.getScriptProperties().getProperties();\n<span class=\"hljs-keyword\">const</span> clientId = props.CLIENT_ID;\n<span class=\"hljs-keyword\">const</span> clientSecret = props.SECRET;\n<span class=\"hljs-keyword\">const</span> redirectUri = <span class=\"hljs-string\">'http://localhost'</span>; <span class=\"hljs-comment\">// Ensure this matches your Reddit app config</span>\n<span class=\"hljs-keyword\">let</span> accessToken = creds.getRange(<span class=\"hljs-string\">'A2'</span>).getValue();\n<span class=\"hljs-keyword\">const</span> refreshToken = creds.getRange(<span class=\"hljs-string\">'B2'</span>).getValue();\n<span class=\"hljs-keyword\">const</span> authCode = creds.getRange(<span class=\"hljs-string\">'C2'</span>).getValue();\n\n<span class=\"hljs-comment\">// Use AuthCode from URL after approving app</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">exchangeAuthCodeForTokens</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> payload = {\n    <span class=\"hljs-attr\">grant_type</span>: <span class=\"hljs-string\">'authorization_code'</span>,\n    <span class=\"hljs-attr\">code</span>: authCode,\n    <span class=\"hljs-attr\">redirect_uri</span>: redirectUri\n  };\n\n  <span class=\"hljs-keyword\">const</span> options = {\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'post'</span>,\n    <span class=\"hljs-attr\">payload</span>: payload,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Basic '</span> + Utilities.base64Encode(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${clientId}</span>:<span class=\"hljs-subst\">${clientSecret}</span>`</span>),\n    },\n    <span class=\"hljs-attr\">muteHttpExceptions</span>: <span class=\"hljs-literal\">true</span>\n  };\n\n  Logger.log(<span class=\"hljs-string\">\"Exchange Auth Code Request Options: \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(options, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));\n\n  <span class=\"hljs-keyword\">const</span> response = UrlFetchApp.fetch(<span class=\"hljs-string\">'https://www.reddit.com/api/v1/access_token'</span>, options);\n  Logger.log(<span class=\"hljs-string\">\"Exchange Auth Code Response: \"</span> + response.getContentText());\n\n  <span class=\"hljs-keyword\">const</span> tokens = <span class=\"hljs-built_in\">JSON</span>.parse(response.getContentText());\n\n  <span class=\"hljs-keyword\">if</span> (tokens &amp;&amp; tokens.access_token &amp;&amp; tokens.refresh_token) {\n    creds.getRange(<span class=\"hljs-string\">'A2'</span>).setValue(tokens.access_token);\n    creds.getRange(<span class=\"hljs-string\">'B2'</span>).setValue(tokens.refresh_token);\n    creds.getRange(<span class=\"hljs-string\">'C2'</span>).clearContent(); <span class=\"hljs-comment\">// Clear the used auth code</span>\n    <span class=\"hljs-keyword\">return</span> tokens.access_token;\n  } <span class=\"hljs-keyword\">else</span> {\n    Logger.log(<span class=\"hljs-string\">\"Error exchanging auth code: \"</span> + response.getContentText());\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n  }\n}\n</code></pre>\n<p>Next, go to <strong>Project Settings</strong> and scroll down to <strong>Script Properties</strong>. Add properties for the <code>CLIENT_ID</code> and <code>SECRET</code> and add the values from your Reddit app.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745786865872/bc595747-866a-4767-807f-f0c1d2e9bf3d.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Save the script and run it, and approve the permissions request on the first run. You should see the auth_code in the sheet replaced with an access token and refresh token.</p>\n<p><strong>Note</strong>: <em>Auth codes only work once!</em> If you lose the valid refresh token in the sheet or want to retest this function, you’ll have to revisit the link to authorize the app again and get a new code. Also, these codes are short-lived. So the first one may have expired by the time you try testing this function. Just request a new code and update the sheet, then run the function again to get the tokens.</p>\n<h2 id=\"heading-exchanging-the-refresh-token-for-a-new-access-token\">Exchanging the Refresh Token for a new Access Token</h2>\n<p>Next we need a function to get a new access token in case the current one is expired.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">refreshRedditToken</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> payload = {\n    <span class=\"hljs-attr\">grant_type</span>: <span class=\"hljs-string\">'refresh_token'</span>,\n    <span class=\"hljs-attr\">refresh_token</span>: refreshToken\n  };\n\n  <span class=\"hljs-keyword\">const</span> options = {\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'post'</span>,\n    <span class=\"hljs-attr\">payload</span>: payload,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Basic '</span> + Utilities.base64Encode(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${clientId}</span>:<span class=\"hljs-subst\">${clientSecret}</span>`</span>),\n    },\n    <span class=\"hljs-attr\">muteHttpExceptions</span>: <span class=\"hljs-literal\">true</span>\n  };\n\n  Logger.log(<span class=\"hljs-string\">\"Refresh Token Request Options: \"</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(options, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));\n\n  <span class=\"hljs-keyword\">const</span> response = UrlFetchApp.fetch(<span class=\"hljs-string\">'https://www.reddit.com/api/v1/access_token'</span>, options);\n  Logger.log(<span class=\"hljs-string\">\"Refresh Token Response: \"</span> + response.getContentText());\n\n  <span class=\"hljs-keyword\">const</span> tokens = <span class=\"hljs-built_in\">JSON</span>.parse(response.getContentText());\n  <span class=\"hljs-keyword\">if</span> (tokens &amp;&amp; tokens.access_token) {\n    creds.getRange(<span class=\"hljs-string\">'A2'</span>).setValue(tokens.access_token);\n    <span class=\"hljs-keyword\">return</span> tokens.access_token;\n  } <span class=\"hljs-keyword\">else</span> {\n    Logger.log(<span class=\"hljs-string\">\"Error refreshing token: \"</span> + response.getContentText());\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n  }\n}\n</code></pre>\n<p>Save and then run this function and you should see the access_token updated in the sheet. Now this function can be called at any time to get an updated access_token, and then call the Reddit API with authentication.</p>\n<h2 id=\"heading-saving-reddit-data-to-google-sheets\">Saving Reddit Data to Google Sheets</h2>\n<p>Lastly we’ll add a function to pull some metrics about a subreddit, and save it to a new sheet. Create a <code>metrics</code> sheet and add columns for <code>timestamp</code>, <code>subreddit</code>, <code>subscribers</code>, and <code>active_users</code>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745787381522/7a71dc8a-c348-4b23-bbd9-399b320ef1d7.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Then add a few lines to the config at the top:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> metricsSheetName = <span class=\"hljs-string\">'metrics'</span>; \n<span class=\"hljs-keyword\">const</span> metrics = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(metricsSheetName);\n</code></pre>\n<p>And a function to get the Subreddit metrics:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// === REDDIT METRICS ===</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getSubreddit</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">//First run, using auth code from URL after approving app</span>\n  <span class=\"hljs-keyword\">if</span> (!accessToken &amp;&amp; authCode) {\n    accessToken = exchangeAuthCodeForTokens();\n    <span class=\"hljs-comment\">// If successful, accessToken and refreshToken should now be in the sheet</span>\n    accessToken = creds.getRange(<span class=\"hljs-string\">'A2'</span>).getValue(); <span class=\"hljs-comment\">// Get the newly stored access token</span>\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!accessToken &amp;&amp; refreshToken) {\n    accessToken = refreshRedditToken();\n  }\n\n  <span class=\"hljs-keyword\">if</span> (accessToken) {\n    <span class=\"hljs-keyword\">const</span> response = UrlFetchApp.fetch(<span class=\"hljs-string\">`https://oauth.reddit.com/r/<span class=\"hljs-subst\">${subredditName}</span>/about`</span>, {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'get'</span>,\n      <span class=\"hljs-attr\">headers</span>: {\n        <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer '</span> + accessToken,\n        <span class=\"hljs-string\">'User-Agent'</span>: userAgent\n      }\n    });\n\n    <span class=\"hljs-keyword\">const</span> redditData = <span class=\"hljs-built_in\">JSON</span>.parse(response.getContentText()).data;\n    metrics.appendRow([ \n      <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().toDateString(),\n      redditData.display_name,\n      redditData.subscribers, \n      redditData.active_user_count, \n      ])\n    Logger.log(redditData);\n\n    <span class=\"hljs-keyword\">return</span> redditData;\n  } <span class=\"hljs-keyword\">else</span> {\n    Logger.log(<span class=\"hljs-string\">'No access token available. Ensure you have either an auth code or a refresh token.'</span>);\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">reddit_subscribers</span>: <span class=\"hljs-literal\">null</span> }; \n  }\n}\n</code></pre>\n<p>Save and run the function, and approve the new permissions if needed. You should now see a new row logged from the Reddit API.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745787611050/f6fc6cc8-2afc-4f4c-9c50-6f3ad5b72611.png\" alt class=\"image--center mx-auto\" /></p>\n<p>To access other data from the Reddit API, see the API docs <a target=\"_blank\" href=\"https://www.reddit.com/dev/api/\">here</a>.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>This is just one method of accessing the Reddit API. There are easier ways that avoid the one-time browser login, but that requires disabling two-factor authentication. If you’re looking for a secure way to use the Reddit API on a timer or triggered by a webhook, this is a decent solution for personal use.</p>\n<h3 id=\"heading-whats-next\">What’s Next?</h3>\n<p>From here, you could chart a subreddit’s growth, schedule posts using sheet data, or get notified when certain key words are mentioned. Although if it’s mentions you’re after, I highly recommend checking out <a target=\"_blank\" href=\"https://f5bot.com/\">F5Bot</a>. Their free service will email you any time a keyword is mentioned on Reddit or Hacker News. This can be used in combination with Apps Script and a mail filter that applies a certain label, simplifying the script and avoiding the Reddit auth.</p>\n","contentMarkdown":"Reddit offers several different options for integrating web apps, scripts, and installed apps. Just go to [https://www.reddit.com/prefs/apps/](https://www.reddit.com/prefs/apps/) to create a new app and select the type.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745711363590/ab91b1c0-3435-404a-bab1-948da9ecf2da.png align=\"center\")\n\nIn this guide, we’ll be taking a closer look at the *script* type of Reddit app, made to run on a server, without user interaction in the browser. This could be used for scheduled posts from sheet data, automating a notification when a keyword is mentioned, or anything else for use on your own Reddit account.\n\n**Note**: If you’re looking to build an app that *other Reddit users* can install, check out the *installed app* option. This guide is for script-type apps that only work on your account.\n\n## Reddit Authorization Methods\n\nReddit does not support creating an API key or token from the Reddit website. Regardless of which app type you choose, that app will have to login with either a user name and password, or client\\_id and secret.\n\nYou can create apps from the Reddit website (installed apps, web apps, or script), and then use the client ID to request an access token to begin using the API from your app.\n\n### Reddit REST API with 2FA Enabled\n\nIf your Reddit account has two-factor authentication enabled, Reddit’s won’t allow logging into the API with a user name and password. This makes integrating with the API more complex, or forces you to turn off 2FA just to use the API. I didn’t want to sacrifice security to use the API, so I was looking for a method that would still work with 2FA enabled.\n\nThis guide will show you how to integrate with the Reddit API while keeping 2FA enabled. It uses a workaround that requires a one-time authorization in the browser to receive the verification code, after which the script can run completely server-side with no user interaction. This method works perfect for scripts that you want to run on a timer, or trigger with a webhook from another system.\n\n**This guide will cover:**\n\n* Creating an App in Reddit\n    \n* Requesting an authorization code\n    \n* Using the code in Apps Script to request an Access and Refresh Token\n    \n* Keeping the token refreshed\n    \n* Saving Reddit Data to Google Sheets on a Schedule\n    \n\n***Let’s get to it!***\n\n## Creating an App in Reddit\n\nStart out by creating a [new app](https://www.reddit.com/prefs/apps/) in your Reddit account and choose *Script* for the type. For the redirect URL, enter:\n\n```plaintext\nhttp://localhost\n```\n\nThis tells Reddit where to send the verification code after you login and authorize your app in the browser.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745755517378/bac8a432-265f-482e-8d15-4ec9f5babd2f.png align=\"center\")\n\nNext, authorize the app by adding your `client_id` to this url and opening it in the browser:\n\n```plaintext\nhttps://www.reddit.com/api/v1/authorize?client_id=CLIENT_ID&response_type=code&state=random_string&redirect_uri=http://localhost&duration=permanent&scope=read\n```\n\nAfter clicking **Allow**, it should redirect you to your localhost, with the verification code in the URL parameter. The browser will show an error, unless you happen to have a web server running on your local host, but all you need is the code from the URL to use in the next step.\n\nCopy everything between `code=` and `#_` .\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745756045363/b521d152-3620-4f72-b525-29bf4f034d97.png align=\"center\")\n\n## Requesting an Access Token and Refresh Token\n\nThe verification code can now be used to request an access token and refresh token from Apps Script. But we need somewhere to store the refresh token to avoid the browser login every time we run the script.\n\nCreate a new Google Spreadsheet with a *credentials* sheet, and columns for `access_token`, `refresh_token`, and `auth_code`.\n\nEnter your auth\\_code obtained from the URL in the last step.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745757415997/6c00502f-1af4-4cdf-8f13-9dd9f7e990b3.png align=\"center\")\n\nThen go to **Extensions** &gt; **Apps Script**, and paste in the following script:\n\n```javascript\n// === CONFIGURATION ===\nconst subredditName = 'GoogleAppsScript';\nconst userAgent = 'script:Get Subreddit:v1.1 (by /u/YOUR_USER_NAME)';\nconst credsSheetName = 'credentials';\nconst creds = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(credsSheetName);\nconst props = PropertiesService.getScriptProperties().getProperties();\nconst clientId = props.CLIENT_ID;\nconst clientSecret = props.SECRET;\nconst redirectUri = 'http://localhost'; // Ensure this matches your Reddit app config\nlet accessToken = creds.getRange('A2').getValue();\nconst refreshToken = creds.getRange('B2').getValue();\nconst authCode = creds.getRange('C2').getValue();\n\n// Use AuthCode from URL after approving app\nfunction exchangeAuthCodeForTokens() {\n  const payload = {\n    grant_type: 'authorization_code',\n    code: authCode,\n    redirect_uri: redirectUri\n  };\n\n  const options = {\n    method: 'post',\n    payload: payload,\n    headers: {\n      Authorization: 'Basic ' + Utilities.base64Encode(`${clientId}:${clientSecret}`),\n    },\n    muteHttpExceptions: true\n  };\n\n  Logger.log(\"Exchange Auth Code Request Options: \" + JSON.stringify(options, null, 2));\n\n  const response = UrlFetchApp.fetch('https://www.reddit.com/api/v1/access_token', options);\n  Logger.log(\"Exchange Auth Code Response: \" + response.getContentText());\n\n  const tokens = JSON.parse(response.getContentText());\n\n  if (tokens && tokens.access_token && tokens.refresh_token) {\n    creds.getRange('A2').setValue(tokens.access_token);\n    creds.getRange('B2').setValue(tokens.refresh_token);\n    creds.getRange('C2').clearContent(); // Clear the used auth code\n    return tokens.access_token;\n  } else {\n    Logger.log(\"Error exchanging auth code: \" + response.getContentText());\n    return null;\n  }\n}\n```\n\nNext, go to **Project Settings** and scroll down to **Script Properties**. Add properties for the `CLIENT_ID` and `SECRET` and add the values from your Reddit app.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745786865872/bc595747-866a-4767-807f-f0c1d2e9bf3d.png align=\"center\")\n\nSave the script and run it, and approve the permissions request on the first run. You should see the auth\\_code in the sheet replaced with an access token and refresh token.\n\n**Note**: *Auth codes only work once!* If you lose the valid refresh token in the sheet or want to retest this function, you’ll have to revisit the link to authorize the app again and get a new code. Also, these codes are short-lived. So the first one may have expired by the time you try testing this function. Just request a new code and update the sheet, then run the function again to get the tokens.\n\n## Exchanging the Refresh Token for a new Access Token\n\nNext we need a function to get a new access token in case the current one is expired.\n\n```javascript\nfunction refreshRedditToken() {\n  const payload = {\n    grant_type: 'refresh_token',\n    refresh_token: refreshToken\n  };\n\n  const options = {\n    method: 'post',\n    payload: payload,\n    headers: {\n      Authorization: 'Basic ' + Utilities.base64Encode(`${clientId}:${clientSecret}`),\n    },\n    muteHttpExceptions: true\n  };\n\n  Logger.log(\"Refresh Token Request Options: \" + JSON.stringify(options, null, 2));\n\n  const response = UrlFetchApp.fetch('https://www.reddit.com/api/v1/access_token', options);\n  Logger.log(\"Refresh Token Response: \" + response.getContentText());\n\n  const tokens = JSON.parse(response.getContentText());\n  if (tokens && tokens.access_token) {\n    creds.getRange('A2').setValue(tokens.access_token);\n    return tokens.access_token;\n  } else {\n    Logger.log(\"Error refreshing token: \" + response.getContentText());\n    return null;\n  }\n}\n```\n\nSave and then run this function and you should see the access\\_token updated in the sheet. Now this function can be called at any time to get an updated access\\_token, and then call the Reddit API with authentication.\n\n## Saving Reddit Data to Google Sheets\n\nLastly we’ll add a function to pull some metrics about a subreddit, and save it to a new sheet. Create a `metrics` sheet and add columns for `timestamp`, `subreddit`, `subscribers`, and `active_users`.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745787381522/7a71dc8a-c348-4b23-bbd9-399b320ef1d7.png align=\"center\")\n\nThen add a few lines to the config at the top:\n\n```javascript\nconst metricsSheetName = 'metrics'; \nconst metrics = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(metricsSheetName);\n```\n\nAnd a function to get the Subreddit metrics:\n\n```javascript\n// === REDDIT METRICS ===\nfunction getSubreddit() {\n  //First run, using auth code from URL after approving app\n  if (!accessToken && authCode) {\n    accessToken = exchangeAuthCodeForTokens();\n    // If successful, accessToken and refreshToken should now be in the sheet\n    accessToken = creds.getRange('A2').getValue(); // Get the newly stored access token\n  } else if (!accessToken && refreshToken) {\n    accessToken = refreshRedditToken();\n  }\n\n  if (accessToken) {\n    const response = UrlFetchApp.fetch(`https://oauth.reddit.com/r/${subredditName}/about`, {\n      method: 'get',\n      headers: {\n        Authorization: 'Bearer ' + accessToken,\n        'User-Agent': userAgent\n      }\n    });\n\n    const redditData = JSON.parse(response.getContentText()).data;\n    metrics.appendRow([ \n      new Date().toDateString(),\n      redditData.display_name,\n      redditData.subscribers, \n      redditData.active_user_count, \n      ])\n    Logger.log(redditData);\n\n    return redditData;\n  } else {\n    Logger.log('No access token available. Ensure you have either an auth code or a refresh token.');\n    return { reddit_subscribers: null }; \n  }\n}\n```\n\nSave and run the function, and approve the new permissions if needed. You should now see a new row logged from the Reddit API.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745787611050/f6fc6cc8-2afc-4f4c-9c50-6f3ad5b72611.png align=\"center\")\n\nTo access other data from the Reddit API, see the API docs [here](https://www.reddit.com/dev/api/).\n\n## Conclusion\n\nThis is just one method of accessing the Reddit API. There are easier ways that avoid the one-time browser login, but that requires disabling two-factor authentication. If you’re looking for a secure way to use the Reddit API on a timer or triggered by a webhook, this is a decent solution for personal use.\n\n### What’s Next?\n\nFrom here, you could chart a subreddit’s growth, schedule posts using sheet data, or get notified when certain key words are mentioned. Although if it’s mentions you’re after, I highly recommend checking out [F5Bot](https://f5bot.com/). Their free service will email you any time a keyword is mentioned on Reddit or Hacker News. This can be used in combination with Apps Script and a mail filter that applies a certain label, simplifying the script and avoiding the Reddit auth.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1745789526505/126d2634-be20-4bed-8ee9-5accb64109a6.png","brief":"Reddit offers several different options for integrating web apps, scripts, and installed apps. Just go to https://www.reddit.com/prefs/apps/ to create a new app and select the type.\n\nIn this guide, we’ll be taking a closer look at the script type of ...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":7,"draft":"680d6c09feb5123fb97a50a2","tags":["5895494279c2579c40dba3b4","56b1208d04f0061506b360ff","56744721958ef13879b94cad","5e270f8a32d5fad159b76b9a","58bfef9389908f2263321329","56e669b622f645300192ed17","56744723958ef13879b95245","5775ff2c57675ec2fcfd086e","5934fcc11905ab47100f3f73"],"publication":"60771c264155da32fc83ad6e","metaDescription":"Learn how to access the Reddit API using OAuth2 and Google Apps Script, even with 2FA, for automation and data retrieval","series":"679fa03905414f167a095994","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"681218cb976eaf9b724ec20a"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"680cd0ab30d3538d5bfdaa90","createdAt":"2025-04-26T12:25:15.347Z","updatedAt":"2025-04-26T12:25:15.347Z","views":182,"isActive":true,"hasLatex":false,"popularity":7481.3137,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"So you want to send JSON to a Google Apps Script Web App...","subtitle":"Dealing with 405 Method Not Allowed Errors and 302 Redirects","cuid":"cm9y717wz002909ju6ynecnnc","dateAdded":"2025-04-26T12:25:15.347Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"so-you-want-to-send-json-to-a-google-apps-script-web-app","content":"<p>Google Apps Scripts is incredible for a free product. There are so many things you can automate using script triggers and Google Sheets, Gmail, Docs, Calendar, and the rest of the Google ecosystem. You can also trigger Apps Script to run from an incoming webhook, and even send data with the request to save to Google Sheets, or send a new email. But there are some serious limitations in the webhook triggers that make integrating other systems harder, and difficult to troubleshoot.</p>\n<p>Let’s say you want to post a JSON object to an Apps Script web app and parse the data to use in an email. There are two main issues you are likely to run into.</p>\n<h2 id=\"heading-issue-1-redirects-and-method-change\"><strong>Issue #1: Redirects and Method Change</strong></h2>\n<p>Apps Script <code>/exec</code> endpoints don’t return your doPost/doGet script response directly. They return a <code>302 Found</code> with a URL to the actual script, when POST’ing to the deployment URL. This new endpoint expects a GET request, so following the redirect with the same POST method throws a <code>405 Method not allowed</code>.</p>\n<p>If you test from Postman, you probably won’t notice any issues because Postman follows the 302 and switches the method from POST to GET by default. But turn off the <code>automatically follow redirects</code> option in settings, and you’ll receive a <strong>302 Moved Temporarily</strong> error.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745627543943/340ac521-70f2-4a62-ac6e-b41884ebb77c.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Postman, and most browsers follow the redirect by default, but as the Postman error points out, this is contradictory to the RFC 1945 standard, and many other platforms enforce the standard. This means those platforms keep the original POST method, and fail to <em>GET</em> the redirect URL.</p>\n<p>In cUrl, you can follow redirects and switch methods using the <code>—location</code> or <code>-L</code> flag, which is off by default, so POSTs to Apps Script will fail unless you enable the flag.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745666909352/e5e2488c-d6be-4393-9122-4a8dc4b40a70.png\" alt class=\"image--center mx-auto\" /></p>\n<p>If you’re trying to trigger an Apps Script web app from another platform like subscribing to an event in Shopify, or an automation in Make/n8n, you may see the <code>405 method not allowed</code> error because the platform is just following the RFC standard, and <em>not</em> switching the method to GET. But if you can’t control this behavior from that platform then you may be out of luck.</p>\n<p>However, if the platform supports running your own custom JavaScript code with <code>fetch()</code>, you can easily work around this because fetch follows redirects by default, like Postman. I came across this issue recently with Appsmith’s REST API integration, but fortunately it was easy to work around since you can run your own JavaScript in Appsmith.</p>\n<p>Fetch should follow the redirect automatically, but you can also specify it explicitly in the request:</p>\n<pre><code class=\"lang-javascript\">fetch(URL, {\n      <span class=\"hljs-attr\">redirect</span>: <span class=\"hljs-string\">\"follow\"</span>,\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"POST\"</span>,\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(DATA),\n      <span class=\"hljs-attr\">headers</span>: {\n        <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"text/plain;charset=utf-8\"</span>,\n      },\n    })\n</code></pre>\n<p>Ok, so following the redirect should solve the <code>405 Method not allowed</code> error, right? <em>Right?!</em></p>\n<p><img src=\"https://media0.giphy.com/media/RKMm7X3HGKZMuoZlMF/200.gif?cid=ecf05e47xigk4gtb18i0aex9csbjwc13wf1n6l4ift1z3784&amp;ep=v1_gifs_search&amp;rid=200.gif&amp;ct=g\" alt=\"Fail Star Trek The Next Generation GIF by MOODMAN\" /></p>\n<h2 id=\"heading-issue-2-preflight-options-not-supported-in-apps-script\"><strong>Issue #2: Preflight Options not supported in Apps Script</strong></h2>\n<p>HTTP methods sometimes use a preflight request to check the receiving server, and ensure it supports the method and content-type being sent. If the server supports these options, it will respond to the preflight request, and then the main request will run.</p>\n<p>This preflight request runs whenever the client is not in the <em>CORS-safelisted</em> header, or if the content-type is anything besides <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code>, or <code>text/plain</code>.</p>\n<p>When you send a POST request with <code>application/json</code>, this triggers a preflight request to ensure the server supports this method and content-type. But Apps Script only exposes <code>doPost</code> and <code>doGet</code> methods, and does not provide a <code>doOptions</code> method to handle other content-types. So Apps Script can’t respond to the preflight request, and returns a <code>405 Method Not Allowed</code>, just like issue #1!</p>\n<p>Structuring the body as plain text and stringifying the JSON allows the preflight test to be skipped, so you can send the data directly. So you can send the body as plain-text, url-encoded, or multipart/form-data, and avoid the preflight request. But sending as JSON will fail with a <code>405 method not allowed</code>, even if you follow the redirect to avoid the first issue.</p>\n<h2 id=\"heading-two-errors-one-code\">Two Errors, One Code</h2>\n<p>This is a tough one to figure out because there are two different causes for the same error. Fix one, and you think it didn’t work because you still get a 405 error. So you change it back, and fix the other. Same error.</p>\n<p>Best practices for troubleshooting would have you only change one variable at a time. But in this case I had to dig deeper (burn more ChatGPT tokens) and look through the browser console and Postman logs to figure it out.</p>\n<h2 id=\"heading-closing-thoughts\">Closing Thoughts</h2>\n<p>I ran into this error over a year ago and couldn’t figure it out so I eventually gave up because it was just a hobby project I was working on. But a member from the Appsmith community recently asked about the same issue and I decided to take a closer look.</p>\n<p>It would have been much easier to troubleshoot if there were different error codes for each problem, but I eventually figured it out, and now I have a whole bunch of new Apps Scripts project in mind. Posting data to the body is more secure, and avoids the character limits and encoding of URL parameters. This opens up a lot of new possibilities for integrating Google with other platforms, without relying on a paid service.</p>\n","contentMarkdown":"Google Apps Scripts is incredible for a free product. There are so many things you can automate using script triggers and Google Sheets, Gmail, Docs, Calendar, and the rest of the Google ecosystem. You can also trigger Apps Script to run from an incoming webhook, and even send data with the request to save to Google Sheets, or send a new email. But there are some serious limitations in the webhook triggers that make integrating other systems harder, and difficult to troubleshoot.\n\nLet’s say you want to post a JSON object to an Apps Script web app and parse the data to use in an email. There are two main issues you are likely to run into.\n\n## **Issue #1: Redirects and Method Change**\n\nApps Script `/exec` endpoints don’t return your doPost/doGet script response directly. They return a `302 Found` with a URL to the actual script, when POST’ing to the deployment URL. This new endpoint expects a GET request, so following the redirect with the same POST method throws a `405 Method not allowed`.\n\nIf you test from Postman, you probably won’t notice any issues because Postman follows the 302 and switches the method from POST to GET by default. But turn off the `automatically follow redirects` option in settings, and you’ll receive a **302 Moved Temporarily** error.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745627543943/340ac521-70f2-4a62-ac6e-b41884ebb77c.png align=\"center\")\n\nPostman, and most browsers follow the redirect by default, but as the Postman error points out, this is contradictory to the RFC 1945 standard, and many other platforms enforce the standard. This means those platforms keep the original POST method, and fail to *GET* the redirect URL.\n\nIn cUrl, you can follow redirects and switch methods using the `—location` or `-L` flag, which is off by default, so POSTs to Apps Script will fail unless you enable the flag.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745666909352/e5e2488c-d6be-4393-9122-4a8dc4b40a70.png align=\"center\")\n\nIf you’re trying to trigger an Apps Script web app from another platform like subscribing to an event in Shopify, or an automation in Make/n8n, you may see the `405 method not allowed` error because the platform is just following the RFC standard, and *not* switching the method to GET. But if you can’t control this behavior from that platform then you may be out of luck.\n\nHowever, if the platform supports running your own custom JavaScript code with `fetch()`, you can easily work around this because fetch follows redirects by default, like Postman. I came across this issue recently with Appsmith’s REST API integration, but fortunately it was easy to work around since you can run your own JavaScript in Appsmith.\n\nFetch should follow the redirect automatically, but you can also specify it explicitly in the request:\n\n```javascript\nfetch(URL, {\n      redirect: \"follow\",\n      method: \"POST\",\n      body: JSON.stringify(DATA),\n      headers: {\n        \"Content-Type\": \"text/plain;charset=utf-8\",\n      },\n    })\n```\n\nOk, so following the redirect should solve the `405 Method not allowed` error, right? *Right?!*\n\n![Fail Star Trek The Next Generation GIF by MOODMAN](https://media0.giphy.com/media/RKMm7X3HGKZMuoZlMF/200.gif?cid=ecf05e47xigk4gtb18i0aex9csbjwc13wf1n6l4ift1z3784&ep=v1_gifs_search&rid=200.gif&ct=g align=\"left\")\n\n## **Issue #2: Preflight Options not supported in Apps Script**\n\nHTTP methods sometimes use a preflight request to check the receiving server, and ensure it supports the method and content-type being sent. If the server supports these options, it will respond to the preflight request, and then the main request will run.\n\nThis preflight request runs whenever the client is not in the *CORS-safelisted* header, or if the content-type is anything besides `application/x-www-form-urlencoded`, `multipart/form-data`, or `text/plain`.\n\nWhen you send a POST request with `application/json`, this triggers a preflight request to ensure the server supports this method and content-type. But Apps Script only exposes `doPost` and `doGet` methods, and does not provide a `doOptions` method to handle other content-types. So Apps Script can’t respond to the preflight request, and returns a `405 Method Not Allowed`, just like issue #1!\n\nStructuring the body as plain text and stringifying the JSON allows the preflight test to be skipped, so you can send the data directly. So you can send the body as plain-text, url-encoded, or multipart/form-data, and avoid the preflight request. But sending as JSON will fail with a `405 method not allowed`, even if you follow the redirect to avoid the first issue.\n\n## Two Errors, One Code\n\nThis is a tough one to figure out because there are two different causes for the same error. Fix one, and you think it didn’t work because you still get a 405 error. So you change it back, and fix the other. Same error.\n\nBest practices for troubleshooting would have you only change one variable at a time. But in this case I had to dig deeper (burn more ChatGPT tokens) and look through the browser console and Postman logs to figure it out.\n\n## Closing Thoughts\n\nI ran into this error over a year ago and couldn’t figure it out so I eventually gave up because it was just a hobby project I was working on. But a member from the Appsmith community recently asked about the same issue and I decided to take a closer look.\n\nIt would have been much easier to troubleshoot if there were different error codes for each problem, but I eventually figured it out, and now I have a whole bunch of new Apps Scripts project in mind. Posting data to the body is more secure, and avoids the character limits and encoding of URL parameters. This opens up a lot of new possibilities for integrating Google with other platforms, without relying on a paid service.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1745669824529/32a1e81b-6dae-4700-9216-ec2a44de91b1.png","brief":"Google Apps Scripts is incredible for a free product. There are so many things you can automate using script triggers and Google Sheets, Gmail, Docs, Calendar, and the rest of the Google ecosystem. You can also trigger Apps Script to run from an inco...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":4,"draft":"680c26c6bb59f4914a7004b8","tags":["5e270f8a32d5fad159b76b9a","56e669b622f645300192ed17","56744721958ef13879b94cad","5758618112a8cb07bb8426d2","5676154ae64b075af6ade54e","56744721958ef13879b94c04","56b1208d04f0061506b360ff","56744721958ef13879b94dec","56744723958ef13879b9535d"],"publication":"60771c264155da32fc83ad6e","metaTitle":"Sending JSON to Google Apps Script Web App","metaDescription":"Learn how to troubleshoot common issues when sending JSON to a Google Apps Script Web App, including redirects and method change challenges","series":"679fa03905414f167a095994","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"680cd0ab30d3538d5bfdaa90"},{"reward":{"type":"xlm"},"commentMetadata":{"qualityCommentCharLength":280,"qualityCommentCount":1,"totalCommentCount":8,"lastCommentAddedDate":"2025-05-26T03:10:38.235Z"},"githubAsSourceMeta":null,"_id":"680617ce149b5afce9abae94","createdAt":"2025-04-21T10:02:54.103Z","updatedAt":"2025-06-02T23:48:41.565Z","views":884,"isActive":true,"hasLatex":true,"popularity":7473.3092,"discussionScore":7.805246650831551,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":5,"replyCount":3,"isFeatured":true,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":61,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Building a Knowledge Graph Locally with Neo4j & Ollama","subtitle":"Generating Cypher Queries From Text Using Python & Hugging Face","cuid":"cm9qwqw46002309l1b6fphsgw","dateAdded":"2025-04-21T10:02:54.102Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"building-a-knowledge-graph-locally-with-neo4j-and-ollama","content":"<p>Knowledge graphs, also known as semantic networks, are a specialized application of graph databases used to store information about entities (person, location, organization, etc) and their relationships. They allow you to explore your data with an interactive network graph, and perform complex queries that would be difficult or impossible with SQL. Knowledge graphs are often used in fraud detection, social networks, recommendation engines, and RAG (retrieval-augmented generation).</p>\n<p>Traditionally, building a knowledge graph has involved extensive work in preprocessing the input data, carefully extracting and labeling entities and relationships based on an ontology, or schema that defines the types of data to extract. But LLMs have enabled this process to be automated, allowing large datasets to be processed into knowledge graphs quickly and easily.</p>\n<p>In this guide, we’ll be building a knowledge graph locally using a text-to-cypher model from Hugging Face, Neo4j to store and display the graph data, and Python to interact with the model and Neo4j API. This tutorial is for Mac, but Docker, Ollama and Python can all be used on Windows or Linux as well.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Deploying Neo4j locally with Docker</p>\n</li>\n<li><p>Downloading a model from HuggingFace and creating a Modelfile for Ollama</p>\n</li>\n<li><p>Running the model with Ollama</p>\n</li>\n<li><p>Prompting the model from a Python script</p>\n</li>\n<li><p>Bulk processing local files into a knowledge graph</p>\n</li>\n</ul>\n<p><strong>Let’s get started!</strong></p>\n<h2 id=\"heading-deploying-neo4j-locally-with-docker\">Deploying Neo4j locally with Docker</h2>\n<p>Install Docker, then open it up and enter Neo4j in the search bar. Click <strong>Run</strong> on the top result with the ‘Docker Official Image’ badge.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745074175948/5aa90e2a-f7da-4322-93af-a34f400912ac.png\" alt class=\"image--center mx-auto\" /></p>\n<p>You should see the image download and the container start up. Select the container and click the link or open <a target=\"_blank\" href=\"http://localhost:7474/\"><code>http://localhost:7474/</code></a> in the browser.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745074423486/7991504d-3cca-4bae-a841-6cdb3eff37d3.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Next you should see a login screen for Neo4j. The user name and password are both <code>neo4j</code>. There’s also a preview of their newer browser tool (shown below). You may see an older login screen first, then an option to try the new browser. Login on the first screen, set a new password, then choose the option to try the new browser.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745074507506/d7ecad0a-2508-4c86-adfa-964280d88daf.png\" alt class=\"image--center mx-auto\" /></p>\n<p><strong>Note</strong>: The browser UI serves on port 7474, but it connects to the Neo4j database instance on port 7687.</p>\n<p>Once logged in, you’ll see a command line input to run Cypher queries, similar to SQL queries, to search and manage data in the graph. Paste in the following query and run it.</p>\n<pre><code class=\"lang-plaintext\">CREATE \n  (sisko:Character {name: \"Benjamin Sisko\", rank: \"Captain\", species: \"Human\"}),\n  (kira:Character {name: \"Kira Nerys\", rank: \"Major\", species: \"Bajoran\"}),\n  (odo:Character {name: \"Odo\", rank: \"Constable\", species: \"Changeling\"}),\n  (jake:Character {name: \"Jake Sisko\", rank: \"Civilian\", species: \"Human\"}),\n  (nog:Character {name: \"Nog\", rank: \"Ensign\", species: \"Ferengi\"}),\n\n  (kira)-[:SERVES_WITH]-&gt;(sisko),\n  (odo)-[:SERVES_WITH]-&gt;(sisko),\n  (jake)-[:RELATED_TO]-&gt;(sisko),\n\n  (nog)-[:FRIEND_OF]-&gt;(jake)\n</code></pre>\n<p><strong>Run</strong> the query, then click the <strong>(*)</strong> button under Relationships to view the graph.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745074934768/5161b219-a6c5-4267-8f09-a9d660a0a115.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, we have Neo4j running locally and can create a graph. Next we need a way to generate Cypher queries. You could just ask ChatGPT, but there are several fine-tuned models on Hugging Face that are made for text-to-cypher generation. We’ll use Ollama to run one of these models locally so there’s no subscription cost, no internet required (after download), and no privacy or security concerns with sending data to a 3rd party.</p>\n<p>But first, let’s clear out the test query we ran earlier. Run the following command to purge the database.</p>\n<pre><code class=\"lang-plaintext\">MATCH (n)\nDETACH DELETE n\n</code></pre>\n<h2 id=\"heading-installing-ollama-and-downloading-a-model\">Installing Ollama and Downloading a Model</h2>\n<p>Next, download and install <a target=\"_blank\" href=\"https://ollama.com/\">Ollama</a>, then run it. You should see a Llama icon in the menu bar once it’s running. The only option is <code>quit Ollama</code>. Everything else is done through the terminal.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745077078924/66ffc603-dcd5-41f5-aec6-7d888943231c.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Now we’ll download one of the models hosted by Ollama to test it out before trying the model from Hugging Face. This will create a Modelfile that we can use as a template, and edit it to run the Hugging Face model in Ollama.</p>\n<p>Run the following command:</p>\n<pre><code class=\"lang-bash\">ollama run llama3.2\n</code></pre>\n<p>You’ll see several files download, then a message from the model asking you to send a message.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745077883623/f60d33c8-0a75-48fd-96a5-186232576d99.png\" alt class=\"image--center mx-auto\" /></p>\n<p>You should be able to chat with the Llama3.2 model from the terminal now. Enter a prompt to test it out.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745077987624/b288fb35-f349-4630-8ab6-bfc171166db7.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Now type <code>/bye</code> to exit the model and return to the terminal.</p>\n<p>Next, we need to copy the existing Modelfile to use as a template.</p>\n<p>Run the following command:</p>\n<pre><code class=\"lang-bash\">ollama show --modelfile llama3.2\n</code></pre>\n<p>Scroll up and find the line that starts with <code>FROM /Users/{YOUR_USER_NAME}/.ollama/models/blobs</code></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745078413277/037d5316-3fff-4049-a464-d60a51d6eebc.png\" alt class=\"image--center mx-auto\" /></p>\n<p>This contains the blob reference that will be used in the next section to build our own Modelfile. Copy this line to a new text file. Then save the file in a new folder to use for this project. Name the file Modelfile (no extension) and save it to the new folder. For this guide, I’m naming my folder <strong>Neo4j</strong>.</p>\n<h2 id=\"heading-downloading-a-model-from-hugging-face-and-creating-a-modelfile-for-ollama\">Downloading a model from Hugging Face and creating a Modelfile for Ollama</h2>\n<p>Next, we’ll be using the <a target=\"_blank\" href=\"https://huggingface.co/neo4j/text2cypher-gemma-2-9b-it-finetuned-2024v1\">neo4j/text2cypher-gemma-2-9b-it-finetuned-2024v1</a> model from Hugging Face, and cloning the repo locally. Start by opening the new Neo4j folder in the terminal.</p>\n<p>Hugging Face suggests using <a target=\"_blank\" href=\"https://git-lfs.com/\">Git Large File Storage (LFS)</a> to clone the repo and minimize the download size by keeping larger files on the server. You can install it with <code>brew install git-lfs</code> if you have <a target=\"_blank\" href=\"https://brew.sh/\">Homebrew</a> installed, or download the installer from their <a target=\"_blank\" href=\"https://git-lfs.com/\">website</a>.</p>\n<p>Once <strong>git-lfs</strong> is installed, run:</p>\n<pre><code class=\"lang-bash\">git lfs install\n\ngit <span class=\"hljs-built_in\">clone</span> https://huggingface.co/neo4j/text2cypher-gemma-2-9b-it-finetuned-2024v1\n</code></pre>\n<p>You should see the repo downloaded as a new folder in the current directory.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745078920274/5988fc13-7c57-4130-88a5-0e38f27dc819.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Next, we need to update the Modelfile to tell Ollama how to build and serve our model, since this is a Hugging Face model, and not one hosted by Ollama.</p>\n<p>Keep the <code>FROM /Users/…</code> line at the top, and then add the remaining text like the sample below, then save the Modelfile.</p>\n<pre><code class=\"lang-plaintext\">FROM /Users/greenflux/.ollama/models/blobs/sha256-YOUR-SHA-KEY\nTEMPLATE \"{{ if .System }}&lt;|start_header_id|&gt;system&lt;|end_header_id|&gt;\n\n{{ .System }}&lt;|eot_id|&gt;{{ end }}{{ if .Prompt }}&lt;|start_header_id|&gt;user&lt;|end_header_id|&gt;\n\n{{ .Prompt }}&lt;|eot_id|&gt;{{ end }}&lt;|start_header_id|&gt;assistant&lt;|end_header_id|&gt;\n\n{{ .Response }}&lt;|eot_id|&gt;\"\nPARAMETER stop &lt;|start_header_id|&gt;\nPARAMETER stop &lt;|end_header_id|&gt;\nPARAMETER stop &lt;|eot_id|&gt;\n</code></pre>\n<p>Ok, we have Ollama downloaded and running, the HF model cloned locally, and a Modelfile to tell Ollama how to use it. We’re now ready to run the model.</p>\n<h2 id=\"heading-running-the-model-with-ollama\">Running the model with Ollama</h2>\n<p>Next, run:</p>\n<pre><code class=\"lang-plaintext\">ollama create text2cypher -f Modelfile\n</code></pre>\n<p>This tells Ollama to create a new model named <em>text2cypher</em>, using the settings in our Modelfile. You should see a few operations in the terminal, followed by a success message.</p>\n<p>Next, run:</p>\n<pre><code class=\"lang-plaintext\">ollama run text2cypher\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745079420160/2947dbdd-a9d2-4e6a-845d-d4e9a55110e3.png\" alt class=\"image--center mx-auto\" /></p>\n<p>You should see the <code>Send a message</code> prompt again, but this time we’re using the text2cypher model from Hugging Face. This model is fine-tuned to create Cypher queries. It works best when you provide it with the schema of your knowledge graph so that the generated query is limited to the entities and relationships you want in your graph.</p>\n<p>When building a new graph, you can decide on your schema first, then provide that with the prompt to generate a CREATE query to insert the new data. And to search an existing graph, just provide it with the schema and a text description of the search.</p>\n<p>Here are a prompt you can try out:</p>\n<pre><code class=\"lang-plaintext\">Node types:\n- Character(name, rank, species)\n- Station(name, location)\n- Relationships:\n    - ASSIGNED_TO (Character → Station)\n    - ALLIES_WITH (Character ↔ Character)\n\nWrite a Cypher query to create the following data:\n- Commander Benjamin Sisko, a Human, is assigned to Deep Space Nine (orbiting Bajor).\n- Major Kira Nerys, a Bajoran, is also assigned to Deep Space Nine.\n- Odo, a Changeling, serves as chief of security on the station.\n- Jadzia Dax, a Trill, is friends with Sisko and works as the station's science officer.\n- Quark, a Ferengi, is not part of the crew but owns a bar on the station and is friends with Odo.\n</code></pre>\n<p>This tells the model what schema to use, then provides a few lines of text data to extract entities and relationships from. The response should be a Cypher CREATE query like this:</p>\n<pre><code class=\"lang-plaintext\">CREATE (s:Character {name: \"Benjamin Sisko\", rank: \"Commander\", species: \"Human\"})\nCREATE (d:Station {name: \"Deep Space Nine\", location: \"orbiting Bajor\"})\nCREATE (s)-[:ASSIGNED_TO]-&gt;(d)\n\nCREATE (k:Character {name: \"Kira Nerys\", rank: \"Major\", species: \"Bajoran\"})\nCREATE (k)-[:ASSIGNED_TO]-&gt;(d)\n\nCREATE (o:Character {name: \"Odo\", rank: \"Chief of Security\", species: \"Changeling\"})\nCREATE (o)-[:ASSIGNED_TO]-&gt;(d)\n\nCREATE (j:Character {name: \"Jadzia Dax\", rank: \"Science Officer\", species: \"Trill\"})\nCREATE (j)-[:ALLIES_WITH]-&gt;(s)\nCREATE (s)-[:ALLIES_WITH]-&gt;(o)\n\nCREATE (q:Character {name: \"Quark\", rank: \"\", species: \"Ferengi\"})\nCREATE (q)-[:OWNS_BAR_ON]-&gt;(d)\nCREATE (o)-[:ALLIES_WITH]-&gt;(q)\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745080054466/96de170b-6fbb-48f3-a3c4-94f21583fb5f.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Now go back to Neo4j and run the query. Then click the (*) again to view the new graph.</p>\n<p><strong>Note</strong>: You may have to remove the inline <code>//comments</code> for the query to run.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745080361233/6cfbc00e-5e63-4a9b-bb61-80466f1ef0a7.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, now we’re able to generate Cypher queries from a text prompt. Lastly, let’s write a Python script to bulk process text files into Cypher queries and insert the data into our graph.</p>\n<h2 id=\"heading-prompting-the-model-from-a-python-script\">Prompting the model from a Python script</h2>\n<p>Next, open up your favorite text editor or IDE and create a python script to send prompts to Ollama. This script takes a text parameter for the prompt and will return the LLM response in the terminal.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">import</span> argparse\n\n<span class=\"hljs-comment\"># Static schema</span>\nschema = <span class=\"hljs-string\">\"\"\"\nNode types:\n- Character(name, rank, species)\n- Ship(name, class)\n- Relationships:\n    - SERVES_ON (Character → Ship)\n    - FRIENDS_WITH (Character ↔ Character)\n\"\"\"</span>\n\n<span class=\"hljs-comment\"># Parse CLI arguments</span>\nparser = argparse.ArgumentParser(description=<span class=\"hljs-string\">\"Send prompt to Ollama text2cypher model\"</span>)\nparser.add_argument(<span class=\"hljs-string\">\"prompt\"</span>, type=str, help=<span class=\"hljs-string\">\"Prompt text to send (wrap in quotes)\"</span>)\nargs = parser.parse_args()\n\n<span class=\"hljs-comment\"># Ollama local model endpoint</span>\nOLLAMA_URL = <span class=\"hljs-string\">\"http://localhost:11434/api/generate\"</span>\nMODEL_NAME = <span class=\"hljs-string\">\"text2cypher\"</span>\n\n<span class=\"hljs-comment\"># Build request payload</span>\npayload = {\n    <span class=\"hljs-string\">\"model\"</span>: MODEL_NAME,\n    <span class=\"hljs-string\">\"prompt\"</span>: <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{schema}</span>\\n\\nQuestion: <span class=\"hljs-subst\">{args.prompt}</span>\\n\\nReturn only a valid Cypher query.\"</span>,\n    <span class=\"hljs-string\">\"stream\"</span>: <span class=\"hljs-literal\">False</span>\n}\n\n<span class=\"hljs-comment\"># Send request</span>\nresponse = requests.post(OLLAMA_URL, json=payload)\nresponse.raise_for_status()\n\n<span class=\"hljs-comment\"># Print result</span>\ncypher = response.json().get(<span class=\"hljs-string\">\"response\"</span>)\nprint(<span class=\"hljs-string\">\"Generated Cypher Query:\\n\"</span>, cypher)\n</code></pre>\n<p>Save the script to the Neo4j folder and name it <em>send_prompt.py</em>. Then create a virtual environment and run it.</p>\n<pre><code class=\"lang-bash\">python3 -m venv venv\n</code></pre>\n<pre><code class=\"lang-bash\"><span class=\"hljs-built_in\">source</span> venv/bin/activate\n</code></pre>\n<pre><code class=\"lang-bash\">pip install requests\n</code></pre>\n<p>You should now be able to prompt the text2cypher model from the terminal using:</p>\n<pre><code class=\"lang-bash\">python3 send_prompt.py <span class=\"hljs-string\">\"Create nodes for Captain Jean-Luc Picard (Human), Lieutenant Worf (Klingon), and Counselor Deanna Troi (Betazoid). All of them serve on the USS Enterprise (Galaxy-class). Worf and Troi are friends.\"</span>\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745085175389/4d0faa99-9bf0-442d-bd12-8842fb07dd41.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Alright, the Python script can return a Cypher query. Now let’s update it to run that query in Neo4j.</p>\n<h2 id=\"heading-bulk-processing-local-files-into-a-knowledge-graph\">Bulk processing local files into a knowledge graph</h2>\n<p>Start out by creating a new script called run_cypher.py in the Neo4j folder. Paste in the following script and save. Be sure to update it with your password at the top of the script.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># run_cypher.py</span>\n<span class=\"hljs-keyword\">import</span> argparse\n<span class=\"hljs-keyword\">from</span> neo4j <span class=\"hljs-keyword\">import</span> GraphDatabase\n\n<span class=\"hljs-comment\"># --- Configuration ---</span>\nNEO4J_URI = <span class=\"hljs-string\">\"bolt://localhost:7687\"</span>\nNEO4J_USER = <span class=\"hljs-string\">\"neo4j\"</span>\nNEO4J_PASSWORD = <span class=\"hljs-string\">\"YOUR_PASSWORD\"</span>\n\n<span class=\"hljs-comment\"># --- Parse CLI Argument ---</span>\nparser = argparse.ArgumentParser(description=<span class=\"hljs-string\">\"Run a Cypher query on Neo4j\"</span>)\nparser.add_argument(<span class=\"hljs-string\">\"query\"</span>, type=str, help=<span class=\"hljs-string\">\"Cypher query to run (wrap in quotes)\"</span>)\nargs = parser.parse_args()\ncypher_query = args.query.strip()\n\n<span class=\"hljs-comment\"># --- Run Cypher Query ---</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run_query</span>(<span class=\"hljs-params\">query</span>):</span>\n    driver = GraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USER, NEO4J_PASSWORD))\n    <span class=\"hljs-keyword\">with</span> driver.session(database=<span class=\"hljs-string\">\"neo4j\"</span>) <span class=\"hljs-keyword\">as</span> session:\n        <span class=\"hljs-keyword\">try</span>:\n            result = session.run(query)\n            <span class=\"hljs-comment\"># Collect results first before consuming</span>\n            records = list(result)\n            summary = result.consume()\n            print(<span class=\"hljs-string\">\"Query executed. Stats:\"</span>, summary.counters)\n            <span class=\"hljs-keyword\">for</span> record <span class=\"hljs-keyword\">in</span> records:\n                print(record.data())\n        <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n            print(<span class=\"hljs-string\">\"Cypher execution error:\"</span>, str(e))\n    driver.close()\n\nrun_query(cypher_query)\n</code></pre>\n<p>Next, install the Neo4j driver:</p>\n<pre><code class=\"lang-bash\">pip install neo4j\n</code></pre>\n<p>Then run the script with a prompt containing a Cypher query.</p>\n<pre><code class=\"lang-bash\">python run_cypher.py <span class=\"hljs-string\">\"CREATE (sisko:Character {name: 'Benjamin Sisko', rank: 'Captain', species: 'Human'}), (kira:Character {name: 'Kira Nerys', rank: 'Colonel', species: 'Bajoran'}), (bashir:Character {name: 'Julian Bashir', rank: 'Doctor', species: 'Human'}), (defiant:Ship {name: 'USS Defiant', class: 'Defiant-class'}), (sisko)-[:SERVES_ON]-&gt;(defiant), (kira)-[:SERVES_ON]-&gt;(defiant), (bashir)-[:SERVES_ON]-&gt;(defiant), (sisko)-[:FRIENDS_WITH]-&gt;(kira), (bashir)-[:FRIENDS_WITH]-&gt;(sisko)\"</span>\n</code></pre>\n<p>Refresh the Neo4j browser, and you should see the new nodes created.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745087413634/4dbea19f-51e9-4d4f-9f92-71fe3a7ca24f.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Now delete all the nodes one last time before the bulk upload.</p>\n<pre><code class=\"lang-plaintext\">MATCH (n)\nDETACH DELETE n\n</code></pre>\n<h3 id=\"heading-bulk-processing-text-files\">Bulk Processing Text Files</h3>\n<p>Ok, we’re almost there! Lastly, we need a script to process a folder of text files, and call both of these scripts to generate a cypher then run it. For this example, I’m using 3 text files located in a <em>Notes</em> folder, inside the neo4j folder.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745087720620/06e4cbc9-80aa-4721-a222-6314cff5727a.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Here’s the files I used, in case you want to test with the same input data.</p>\n<p><strong>prompt1.txt</strong></p>\n<pre><code class=\"lang-plaintext\">Captain Benjamin Sisko entered the operations center on Deep Space Nine and found Major Kira Nerys consulting with Constable Odo. The captain outlined a new security protocol and asked Kira to oversee its implementation. Odo adjusted his uniform and nodded as he scanned incoming reports. Kira offered suggestions for patrol routes while Odo confirmed gate readings. By the end of the briefing, all three had agreed on the plan to increase boarding inspections and monitor cargo manifests more closely.\n</code></pre>\n<p><strong>prompt2.txt</strong></p>\n<pre><code class=\"lang-plaintext\">Later that morning, Kira Nerys joined Science Officer Jadzia Dax in the lab for an experimental sensor test. Dr Julian Bashir arrived with new calibration data from Starfleet Medical. As Jadzia calibrated the particle analyzer, Kira reviewed station logs for unusual energy signatures. Julian smiled at their progress and noted that the anomaly readings matched a pattern he had seen during his medical travels. Together they prepared to present their findings to Captain Sisko before the next scheduled docking.\n</code></pre>\n<p><strong>prompt3.txt</strong></p>\n<pre><code class=\"lang-plaintext\">That evening, Jadzia Dax walked through the promenade to visit the bar run by Quark. She found Nog polishing glasses behind the counter. Quark greeted her with a nod and gestured toward a table near the entrance. Nog filled a fresh glass of synthehol while Jadzia described the sensor anomaly discovered earlier. Quark leaned forward, offering to check his Ferengi data logs for any related transactions. Nog made a note to share the information with Dr Bashir first thing tomorrow.\n</code></pre>\n<p>Create one last script to loop over the Notes folder. This script will call the <code>send_prompt.py</code> and <code>run_cypher.py</code> scripts for each file in the Notes folder.</p>\n<p><strong>Note</strong>: I had to do a bit of cleanup on the response to get only the valid Cypher CREATE queries. The model was wrapping the response with <code>``` </code>, but not consistently. And occasionally it would add extra text at the beginning, like <code>Generated Cypher Query:</code>. So the script is a little long on the text parsing, but the main logic for looping and running the other scripts is pretty straight-forward.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n<span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> re\n<span class=\"hljs-keyword\">import</span> subprocess\n<span class=\"hljs-keyword\">import</span> argparse\n\n<span class=\"hljs-comment\"># Configuration</span>\nNOTES_DIR = <span class=\"hljs-string\">\"Notes\"</span>         <span class=\"hljs-comment\"># directory containing .txt files</span>\nSEND_PROMPT_SCRIPT = <span class=\"hljs-string\">\"send_prompt.py\"</span>\nRUN_CYPHER_SCRIPT = <span class=\"hljs-string\">\"run_cypher.py\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">extract_character_ship_info</span>(<span class=\"hljs-params\">output</span>):</span>\n    <span class=\"hljs-string\">\"\"\"Extract Character and Ship information from the output.\"\"\"</span>\n    characters = []\n    ships = []\n    relationships = []\n    in_code_block = <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> output.strip().splitlines():\n        line = line.strip()\n\n        <span class=\"hljs-comment\"># Handle code blocks and filtering</span>\n        <span class=\"hljs-keyword\">if</span> line.startswith(<span class=\"hljs-string\">\"```\"</span>):\n            in_code_block = <span class=\"hljs-keyword\">not</span> in_code_block\n            <span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">if</span> line.lower().startswith(<span class=\"hljs-string\">\"here are\"</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> line <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> line.upper().startswith(<span class=\"hljs-string\">\"CREATE \"</span>):\n            <span class=\"hljs-keyword\">continue</span>\n\n        <span class=\"hljs-comment\"># Ensure statement ends with semicolon</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> line.endswith(<span class=\"hljs-string\">\";\"</span>):\n            line += <span class=\"hljs-string\">\";\"</span>\n\n        <span class=\"hljs-comment\"># Extract character creation</span>\n        character_match = re.search(<span class=\"hljs-string\">r'CREATE\\s+\\((\\w+):Character\\s+\\{(.+?)\\}\\)'</span>, line)\n        <span class=\"hljs-keyword\">if</span> character_match:\n            alias = character_match.group(<span class=\"hljs-number\">1</span>)\n            props_str = character_match.group(<span class=\"hljs-number\">2</span>)\n\n            <span class=\"hljs-comment\"># Extract properties</span>\n            name_match = re.search(<span class=\"hljs-string\">r'name:\\s*\"([^\"]+)\"'</span>, props_str)\n            rank_match = re.search(<span class=\"hljs-string\">r'rank:\\s*\"([^\"]*)\"'</span>, props_str)\n            species_match = re.search(<span class=\"hljs-string\">r'species:\\s*\"([^\"]+)\"'</span>, props_str)\n\n            <span class=\"hljs-keyword\">if</span> name_match:\n                name = name_match.group(<span class=\"hljs-number\">1</span>)\n                rank = rank_match.group(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">if</span> rank_match <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">\"\"</span>\n                species = species_match.group(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">if</span> species_match <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">\"Unknown\"</span>\n\n                characters.append({\n                    <span class=\"hljs-string\">\"alias\"</span>: alias,\n                    <span class=\"hljs-string\">\"name\"</span>: name,\n                    <span class=\"hljs-string\">\"rank\"</span>: rank,\n                    <span class=\"hljs-string\">\"species\"</span>: species\n                })\n            <span class=\"hljs-keyword\">continue</span>\n\n        <span class=\"hljs-comment\"># Extract ship creation</span>\n        ship_match = re.search(<span class=\"hljs-string\">r'CREATE\\s+\\((\\w+):Ship\\s+\\{(.+?)\\}\\)'</span>, line)\n        <span class=\"hljs-keyword\">if</span> ship_match:\n            alias = ship_match.group(<span class=\"hljs-number\">1</span>)\n            props_str = ship_match.group(<span class=\"hljs-number\">2</span>)\n\n            <span class=\"hljs-comment\"># Extract properties</span>\n            name_match = re.search(<span class=\"hljs-string\">r'name:\\s*\"([^\"]+)\"'</span>, props_str)\n            class_match = re.search(<span class=\"hljs-string\">r'class:\\s*\"([^\"]*)\"'</span>, props_str)\n\n            <span class=\"hljs-keyword\">if</span> name_match:\n                name = name_match.group(<span class=\"hljs-number\">1</span>)\n                ship_class = class_match.group(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">if</span> class_match <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">\"Unknown\"</span>\n\n                ships.append({\n                    <span class=\"hljs-string\">\"alias\"</span>: alias,\n                    <span class=\"hljs-string\">\"name\"</span>: name,\n                    <span class=\"hljs-string\">\"class\"</span>: ship_class\n                })\n            <span class=\"hljs-keyword\">continue</span>\n\n        <span class=\"hljs-comment\"># Extract relationships</span>\n        rel_match = re.search(<span class=\"hljs-string\">r'CREATE\\s+\\((\\w+)\\)-\\[:(\\w+)\\]-&gt;\\((\\w+)\\)'</span>, line)\n        <span class=\"hljs-keyword\">if</span> rel_match:\n            source_alias = rel_match.group(<span class=\"hljs-number\">1</span>)\n            rel_type = rel_match.group(<span class=\"hljs-number\">2</span>)\n            target_alias = rel_match.group(<span class=\"hljs-number\">3</span>)\n\n            <span class=\"hljs-keyword\">if</span> rel_type <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-string\">\"SERVES_ON\"</span>, <span class=\"hljs-string\">\"FRIENDS_WITH\"</span>, <span class=\"hljs-string\">\"OWNED_BY\"</span>]:\n                relationships.append({\n                    <span class=\"hljs-string\">\"source\"</span>: source_alias,\n                    <span class=\"hljs-string\">\"type\"</span>: rel_type,\n                    <span class=\"hljs-string\">\"target\"</span>: target_alias\n                })\n\n    <span class=\"hljs-keyword\">return</span> characters, ships, relationships\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_file</span>(<span class=\"hljs-params\">file_path, send_script, run_script</span>):</span>\n    <span class=\"hljs-string\">\"\"\"Process a single text file, extract entities and create database entries.\"\"\"</span>\n    <span class=\"hljs-comment\"># Read the prompt file</span>\n    <span class=\"hljs-keyword\">with</span> open(file_path, <span class=\"hljs-string\">\"r\"</span>, encoding=<span class=\"hljs-string\">\"utf-8\"</span>) <span class=\"hljs-keyword\">as</span> f:\n        prompt = f.read().strip()\n\n    <span class=\"hljs-comment\"># Generate Cypher from text using send_prompt.py</span>\n    result = subprocess.run(\n        [<span class=\"hljs-string\">\"python3\"</span>, send_script, prompt],\n        capture_output=<span class=\"hljs-literal\">True</span>,\n        text=<span class=\"hljs-literal\">True</span>\n    )\n\n    <span class=\"hljs-keyword\">if</span> result.returncode != <span class=\"hljs-number\">0</span>:\n        print(<span class=\"hljs-string\">f\"[Error] <span class=\"hljs-subst\">{result.stderr.strip()}</span>\"</span>)\n        <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-comment\"># Extract entity information</span>\n    characters, ships, relationships = extract_character_ship_info(result.stdout)\n\n    <span class=\"hljs-comment\"># Create Characters</span>\n    <span class=\"hljs-keyword\">if</span> characters:\n        print(<span class=\"hljs-string\">f\"Creating <span class=\"hljs-subst\">{len(characters)}</span> Character nodes:\"</span>)\n        <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> characters:\n            <span class=\"hljs-comment\"># MERGE ensures we don't create duplicates</span>\n            cypher = <span class=\"hljs-string\">f\"\"\"\n            MERGE (c:Character {{name: \"<span class=\"hljs-subst\">{char[<span class=\"hljs-string\">'name'</span>]}</span>\"}})\n            ON CREATE SET \n                c.species = \"<span class=\"hljs-subst\">{char[<span class=\"hljs-string\">'species'</span>]}</span>\",\n                c.rank = \"<span class=\"hljs-subst\">{char[<span class=\"hljs-string\">'rank'</span>]}</span>\"\n            RETURN c\n            \"\"\"</span>\n\n            print(<span class=\"hljs-string\">f\"Creating character: <span class=\"hljs-subst\">{char[<span class=\"hljs-string\">'name'</span>]}</span>\"</span>)\n            cypher_result = subprocess.run(\n                [<span class=\"hljs-string\">\"python3\"</span>, run_script, cypher],\n                capture_output=<span class=\"hljs-literal\">True</span>,\n                text=<span class=\"hljs-literal\">True</span>\n            )\n\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">\"error\"</span> <span class=\"hljs-keyword\">in</span> cypher_result.stdout.lower() <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"error\"</span> <span class=\"hljs-keyword\">in</span> cypher_result.stderr.lower():\n                print(<span class=\"hljs-string\">f\"[Error] <span class=\"hljs-subst\">{cypher_result.stderr.strip() <span class=\"hljs-keyword\">or</span> cypher_result.stdout.strip()}</span>\"</span>)\n\n    <span class=\"hljs-comment\"># Create Ships</span>\n    <span class=\"hljs-keyword\">if</span> ships:\n        print(<span class=\"hljs-string\">f\"Creating <span class=\"hljs-subst\">{len(ships)}</span> Ship nodes:\"</span>)\n        <span class=\"hljs-keyword\">for</span> ship <span class=\"hljs-keyword\">in</span> ships:\n            <span class=\"hljs-comment\"># MERGE ensures we don't create duplicates</span>\n            cypher = <span class=\"hljs-string\">f\"\"\"\n            MERGE (s:Ship {{name: \"<span class=\"hljs-subst\">{ship[<span class=\"hljs-string\">'name'</span>]}</span>\"}})\n            ON CREATE SET \n                s.class = \"<span class=\"hljs-subst\">{ship[<span class=\"hljs-string\">'class'</span>]}</span>\"\n            RETURN s\n            \"\"\"</span>\n\n            print(<span class=\"hljs-string\">f\"Creating ship: <span class=\"hljs-subst\">{ship[<span class=\"hljs-string\">'name'</span>]}</span>\"</span>)\n            cypher_result = subprocess.run(\n                [<span class=\"hljs-string\">\"python3\"</span>, run_script, cypher],\n                capture_output=<span class=\"hljs-literal\">True</span>,\n                text=<span class=\"hljs-literal\">True</span>\n            )\n\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">\"error\"</span> <span class=\"hljs-keyword\">in</span> cypher_result.stdout.lower() <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"error\"</span> <span class=\"hljs-keyword\">in</span> cypher_result.stderr.lower():\n                print(<span class=\"hljs-string\">f\"[Error] <span class=\"hljs-subst\">{cypher_result.stderr.strip() <span class=\"hljs-keyword\">or</span> cypher_result.stdout.strip()}</span>\"</span>)\n\n    <span class=\"hljs-comment\"># Create Relationships</span>\n    <span class=\"hljs-keyword\">if</span> relationships:\n        print(<span class=\"hljs-string\">f\"Creating <span class=\"hljs-subst\">{len(relationships)}</span> relationships:\"</span>)\n        <span class=\"hljs-keyword\">for</span> rel <span class=\"hljs-keyword\">in</span> relationships:\n            <span class=\"hljs-comment\"># Find the actual character/ship entities from the lists</span>\n            source_type = <span class=\"hljs-string\">\"Character\"</span>  <span class=\"hljs-comment\"># Default assumption</span>\n            source_name = <span class=\"hljs-literal\">None</span>\n\n            <span class=\"hljs-comment\"># Look for source in characters</span>\n            <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> characters:\n                <span class=\"hljs-keyword\">if</span> char[<span class=\"hljs-string\">\"alias\"</span>] == rel[<span class=\"hljs-string\">\"source\"</span>]:\n                    source_name = char[<span class=\"hljs-string\">\"name\"</span>]\n                    <span class=\"hljs-keyword\">break</span>\n\n            <span class=\"hljs-comment\"># If not found in characters, check ships</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> source_name:\n                <span class=\"hljs-keyword\">for</span> ship <span class=\"hljs-keyword\">in</span> ships:\n                    <span class=\"hljs-keyword\">if</span> ship[<span class=\"hljs-string\">\"alias\"</span>] == rel[<span class=\"hljs-string\">\"source\"</span>]:\n                        source_type = <span class=\"hljs-string\">\"Ship\"</span>\n                        source_name = ship[<span class=\"hljs-string\">\"name\"</span>]\n                        <span class=\"hljs-keyword\">break</span>\n\n            <span class=\"hljs-comment\"># If still not found, skip this relationship</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> source_name:\n                print(<span class=\"hljs-string\">f\"Skipping relationship: source alias '<span class=\"hljs-subst\">{rel[<span class=\"hljs-string\">'source'</span>]}</span>' not found\"</span>)\n                <span class=\"hljs-keyword\">continue</span>\n\n            <span class=\"hljs-comment\"># Now find the target</span>\n            target_type = <span class=\"hljs-string\">\"Character\"</span>  <span class=\"hljs-comment\"># Default assumption </span>\n            target_name = <span class=\"hljs-literal\">None</span>\n\n            <span class=\"hljs-comment\"># For SERVES_ON, target should be a Ship</span>\n            <span class=\"hljs-keyword\">if</span> rel[<span class=\"hljs-string\">\"type\"</span>] == <span class=\"hljs-string\">\"SERVES_ON\"</span>:\n                target_type = <span class=\"hljs-string\">\"Ship\"</span>\n                <span class=\"hljs-keyword\">for</span> ship <span class=\"hljs-keyword\">in</span> ships:\n                    <span class=\"hljs-keyword\">if</span> ship[<span class=\"hljs-string\">\"alias\"</span>] == rel[<span class=\"hljs-string\">\"target\"</span>]:\n                        target_name = ship[<span class=\"hljs-string\">\"name\"</span>]\n                        <span class=\"hljs-keyword\">break</span>\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-comment\"># For other relationships, look for target in characters</span>\n                <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> characters:\n                    <span class=\"hljs-keyword\">if</span> char[<span class=\"hljs-string\">\"alias\"</span>] == rel[<span class=\"hljs-string\">\"target\"</span>]:\n                        target_name = char[<span class=\"hljs-string\">\"name\"</span>]\n                        <span class=\"hljs-keyword\">break</span>\n\n            <span class=\"hljs-comment\"># If target not found, skip</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> target_name:\n                print(<span class=\"hljs-string\">f\"Skipping relationship: target alias '<span class=\"hljs-subst\">{rel[<span class=\"hljs-string\">'target'</span>]}</span>' not found\"</span>)\n                <span class=\"hljs-keyword\">continue</span>\n\n            <span class=\"hljs-comment\"># Create the relationship using MATCH to find existing nodes</span>\n            cypher = <span class=\"hljs-string\">f\"\"\"\n            MATCH (a:<span class=\"hljs-subst\">{source_type}</span> {{name: \"<span class=\"hljs-subst\">{source_name}</span>\"}})\n            MATCH (b:<span class=\"hljs-subst\">{target_type}</span> {{name: \"<span class=\"hljs-subst\">{target_name}</span>\"}})\n            MERGE (a)-[r:<span class=\"hljs-subst\">{rel[<span class=\"hljs-string\">'type'</span>]}</span>]-&gt;(b)\n            RETURN a, r, b\n            \"\"\"</span>\n\n            print(<span class=\"hljs-string\">f\"Creating relationship: <span class=\"hljs-subst\">{source_name}</span> -[<span class=\"hljs-subst\">{rel[<span class=\"hljs-string\">'type'</span>]}</span>]-&gt; <span class=\"hljs-subst\">{target_name}</span>\"</span>)\n            cypher_result = subprocess.run(\n                [<span class=\"hljs-string\">\"python3\"</span>, run_script, cypher],\n                capture_output=<span class=\"hljs-literal\">True</span>,\n                text=<span class=\"hljs-literal\">True</span>\n            )\n\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">\"error\"</span> <span class=\"hljs-keyword\">in</span> cypher_result.stdout.lower() <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"error\"</span> <span class=\"hljs-keyword\">in</span> cypher_result.stderr.lower():\n                print(<span class=\"hljs-string\">f\"[Error] <span class=\"hljs-subst\">{cypher_result.stderr.strip() <span class=\"hljs-keyword\">or</span> cypher_result.stdout.strip()}</span>\"</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span>\n    parser = argparse.ArgumentParser(\n        description=<span class=\"hljs-string\">\"Bulk-process text files: extract entities and create properly connected Neo4j graph\"</span>\n    )\n    parser.add_argument(\n        <span class=\"hljs-string\">\"--notes-dir\"</span>,\n        default=NOTES_DIR,\n        help=<span class=\"hljs-string\">\"Path to folder containing text files (default: %(default)s)\"</span>\n    )\n    parser.add_argument(\n        <span class=\"hljs-string\">\"--script\"</span>,\n        default=SEND_PROMPT_SCRIPT,\n        help=<span class=\"hljs-string\">\"Path to send_prompt.py (default: %(default)s)\"</span>\n    )\n    parser.add_argument(\n        <span class=\"hljs-string\">\"--run-script\"</span>,\n        default=RUN_CYPHER_SCRIPT,\n        help=<span class=\"hljs-string\">\"Path to run_cypher.py (default: %(default)s)\"</span>\n    )\n    args = parser.parse_args()\n\n    <span class=\"hljs-keyword\">for</span> fname <span class=\"hljs-keyword\">in</span> sorted(os.listdir(args.notes_dir)):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> fname.lower().endswith(<span class=\"hljs-string\">\".txt\"</span>):\n            <span class=\"hljs-keyword\">continue</span>\n\n        path = os.path.join(args.notes_dir, fname)\n        print(<span class=\"hljs-string\">f\"--- Processing <span class=\"hljs-subst\">{fname}</span> ---\"</span>)\n\n        process_file(path, args.script, args.run_script)\n        print()  <span class=\"hljs-comment\"># blank line between files</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    main()\n</code></pre>\n<p>Save the script, then clear out the database once more before testing.</p>\n<pre><code class=\"lang-plaintext\">MATCH (n) DETACH DELETE n\n</code></pre>\n<p>Then retest:</p>\n<pre><code class=\"lang-python\">python bulk_process.py\n</code></pre>\n<p>Refresh Neo4j and you should see a new set of connected nodes based on your input documents. To view all the nodes and relationships at once, run:</p>\n<pre><code class=\"lang-plaintext\">MATCH (n)\nOPTIONAL MATCH (n)-[r]-&gt;(m)\nRETURN n, r, m\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1745149748625/16a7bebb-0fff-4069-a38e-40193b3ef6a7.png\" alt class=\"image--center mx-auto\" /></p>\n<p>And there you have it! You can now extract entities and relationships, generate Cypher queries and run them in bulk, based on a folder of text files. This will generate a collection of connected nodes based on the schema defined in your <code>send_prompt.py</code> script.</p>\n<p>Crafting an appropriate schema for your input data is one of the most important steps to generating a quality knowledge graph. Be sure to create a well-defined schema that accurately represents your data before bulk-processing your files.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Knowledge graphs are amazing tools for visualizing data and performing complex queries to uncover new insights about relationships. They excel at tasks in fraud detection, recommendation engines, social networks, and RAG. Building a knowledge graph is as easy as running a few Cypher queries, but generating those queries from data can be challenging. This guide has shown one way you can generate these queries locally using a text-to-cypher query from Hugging Face.</p>\n<p>Special thanks to Jason Koo from Neo4j for this excellent <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=9pdxSlxfqNY\">video tutorial</a> on using a Hugging Face model in Ollama.</p>\n<h3 id=\"heading-whats-next\">What’s Next?</h3>\n<p>From here you could connect the Neo4j database to an AI assistant or agent to perform RAG, or use the graph to discover relationships and communities of nodes that emerge as the bulk data is processed.</p>\n","contentMarkdown":"Knowledge graphs, also known as semantic networks, are a specialized application of graph databases used to store information about entities (person, location, organization, etc) and their relationships. They allow you to explore your data with an interactive network graph, and perform complex queries that would be difficult or impossible with SQL. Knowledge graphs are often used in fraud detection, social networks, recommendation engines, and RAG (retrieval-augmented generation).\n\nTraditionally, building a knowledge graph has involved extensive work in preprocessing the input data, carefully extracting and labeling entities and relationships based on an ontology, or schema that defines the types of data to extract. But LLMs have enabled this process to be automated, allowing large datasets to be processed into knowledge graphs quickly and easily.\n\nIn this guide, we’ll be building a knowledge graph locally using a text-to-cypher model from Hugging Face, Neo4j to store and display the graph data, and Python to interact with the model and Neo4j API. This tutorial is for Mac, but Docker, Ollama and Python can all be used on Windows or Linux as well.\n\n**This guide will cover:**\n\n* Deploying Neo4j locally with Docker\n    \n* Downloading a model from HuggingFace and creating a Modelfile for Ollama\n    \n* Running the model with Ollama\n    \n* Prompting the model from a Python script\n    \n* Bulk processing local files into a knowledge graph\n    \n\n**Let’s get started!**\n\n## Deploying Neo4j locally with Docker\n\nInstall Docker, then open it up and enter Neo4j in the search bar. Click **Run** on the top result with the ‘Docker Official Image’ badge.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745074175948/5aa90e2a-f7da-4322-93af-a34f400912ac.png align=\"center\")\n\nYou should see the image download and the container start up. Select the container and click the link or open [`http://localhost:7474/`](http://localhost:7474/) in the browser.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745074423486/7991504d-3cca-4bae-a841-6cdb3eff37d3.png align=\"center\")\n\nNext you should see a login screen for Neo4j. The user name and password are both `neo4j`. There’s also a preview of their newer browser tool (shown below). You may see an older login screen first, then an option to try the new browser. Login on the first screen, set a new password, then choose the option to try the new browser.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745074507506/d7ecad0a-2508-4c86-adfa-964280d88daf.png align=\"center\")\n\n**Note**: The browser UI serves on port 7474, but it connects to the Neo4j database instance on port 7687.\n\nOnce logged in, you’ll see a command line input to run Cypher queries, similar to SQL queries, to search and manage data in the graph. Paste in the following query and run it.\n\n```plaintext\nCREATE \n  (sisko:Character {name: \"Benjamin Sisko\", rank: \"Captain\", species: \"Human\"}),\n  (kira:Character {name: \"Kira Nerys\", rank: \"Major\", species: \"Bajoran\"}),\n  (odo:Character {name: \"Odo\", rank: \"Constable\", species: \"Changeling\"}),\n  (jake:Character {name: \"Jake Sisko\", rank: \"Civilian\", species: \"Human\"}),\n  (nog:Character {name: \"Nog\", rank: \"Ensign\", species: \"Ferengi\"}),\n\n  (kira)-[:SERVES_WITH]->(sisko),\n  (odo)-[:SERVES_WITH]->(sisko),\n  (jake)-[:RELATED_TO]->(sisko),\n\n  (nog)-[:FRIEND_OF]->(jake)\n```\n\n**Run** the query, then click the **(\\*)** button under Relationships to view the graph.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745074934768/5161b219-a6c5-4267-8f09-a9d660a0a115.png align=\"center\")\n\nOk, we have Neo4j running locally and can create a graph. Next we need a way to generate Cypher queries. You could just ask ChatGPT, but there are several fine-tuned models on Hugging Face that are made for text-to-cypher generation. We’ll use Ollama to run one of these models locally so there’s no subscription cost, no internet required (after download), and no privacy or security concerns with sending data to a 3rd party.\n\nBut first, let’s clear out the test query we ran earlier. Run the following command to purge the database.\n\n```plaintext\nMATCH (n)\nDETACH DELETE n\n```\n\n## Installing Ollama and Downloading a Model\n\nNext, download and install [Ollama](https://ollama.com/), then run it. You should see a Llama icon in the menu bar once it’s running. The only option is `quit Ollama`. Everything else is done through the terminal.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745077078924/66ffc603-dcd5-41f5-aec6-7d888943231c.png align=\"center\")\n\nNow we’ll download one of the models hosted by Ollama to test it out before trying the model from Hugging Face. This will create a Modelfile that we can use as a template, and edit it to run the Hugging Face model in Ollama.\n\nRun the following command:\n\n```bash\nollama run llama3.2\n```\n\nYou’ll see several files download, then a message from the model asking you to send a message.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745077883623/f60d33c8-0a75-48fd-96a5-186232576d99.png align=\"center\")\n\nYou should be able to chat with the Llama3.2 model from the terminal now. Enter a prompt to test it out.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745077987624/b288fb35-f349-4630-8ab6-bfc171166db7.png align=\"center\")\n\nNow type `/bye` to exit the model and return to the terminal.\n\nNext, we need to copy the existing Modelfile to use as a template.\n\nRun the following command:\n\n```bash\nollama show --modelfile llama3.2\n```\n\nScroll up and find the line that starts with `FROM /Users/{YOUR_USER_NAME}/.ollama/models/blobs`\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745078413277/037d5316-3fff-4049-a464-d60a51d6eebc.png align=\"center\")\n\nThis contains the blob reference that will be used in the next section to build our own Modelfile. Copy this line to a new text file. Then save the file in a new folder to use for this project. Name the file Modelfile (no extension) and save it to the new folder. For this guide, I’m naming my folder **Neo4j**.\n\n## Downloading a model from Hugging Face and creating a Modelfile for Ollama\n\nNext, we’ll be using the [neo4j/text2cypher-gemma-2-9b-it-finetuned-2024v1](https://huggingface.co/neo4j/text2cypher-gemma-2-9b-it-finetuned-2024v1) model from Hugging Face, and cloning the repo locally. Start by opening the new Neo4j folder in the terminal.\n\nHugging Face suggests using [Git Large File Storage (LFS)](https://git-lfs.com/) to clone the repo and minimize the download size by keeping larger files on the server. You can install it with `brew install git-lfs` if you have [Homebrew](https://brew.sh/) installed, or download the installer from their [website](https://git-lfs.com/).\n\nOnce **git-lfs** is installed, run:\n\n```bash\ngit lfs install\n\ngit clone https://huggingface.co/neo4j/text2cypher-gemma-2-9b-it-finetuned-2024v1\n```\n\nYou should see the repo downloaded as a new folder in the current directory.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745078920274/5988fc13-7c57-4130-88a5-0e38f27dc819.png align=\"center\")\n\nNext, we need to update the Modelfile to tell Ollama how to build and serve our model, since this is a Hugging Face model, and not one hosted by Ollama.\n\nKeep the `FROM /Users/…` line at the top, and then add the remaining text like the sample below, then save the Modelfile.\n\n```plaintext\nFROM /Users/greenflux/.ollama/models/blobs/sha256-YOUR-SHA-KEY\nTEMPLATE \"{{ if .System }}<|start_header_id|>system<|end_header_id|>\n\n{{ .System }}<|eot_id|>{{ end }}{{ if .Prompt }}<|start_header_id|>user<|end_header_id|>\n\n{{ .Prompt }}<|eot_id|>{{ end }}<|start_header_id|>assistant<|end_header_id|>\n\n{{ .Response }}<|eot_id|>\"\nPARAMETER stop <|start_header_id|>\nPARAMETER stop <|end_header_id|>\nPARAMETER stop <|eot_id|>\n```\n\nOk, we have Ollama downloaded and running, the HF model cloned locally, and a Modelfile to tell Ollama how to use it. We’re now ready to run the model.\n\n## Running the model with Ollama\n\nNext, run:\n\n```plaintext\nollama create text2cypher -f Modelfile\n```\n\nThis tells Ollama to create a new model named *text2cypher*, using the settings in our Modelfile. You should see a few operations in the terminal, followed by a success message.\n\nNext, run:\n\n```plaintext\nollama run text2cypher\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745079420160/2947dbdd-a9d2-4e6a-845d-d4e9a55110e3.png align=\"center\")\n\nYou should see the `Send a message` prompt again, but this time we’re using the text2cypher model from Hugging Face. This model is fine-tuned to create Cypher queries. It works best when you provide it with the schema of your knowledge graph so that the generated query is limited to the entities and relationships you want in your graph.\n\nWhen building a new graph, you can decide on your schema first, then provide that with the prompt to generate a CREATE query to insert the new data. And to search an existing graph, just provide it with the schema and a text description of the search.\n\nHere are a prompt you can try out:\n\n```plaintext\nNode types:\n- Character(name, rank, species)\n- Station(name, location)\n- Relationships:\n    - ASSIGNED_TO (Character → Station)\n    - ALLIES_WITH (Character ↔ Character)\n\nWrite a Cypher query to create the following data:\n- Commander Benjamin Sisko, a Human, is assigned to Deep Space Nine (orbiting Bajor).\n- Major Kira Nerys, a Bajoran, is also assigned to Deep Space Nine.\n- Odo, a Changeling, serves as chief of security on the station.\n- Jadzia Dax, a Trill, is friends with Sisko and works as the station's science officer.\n- Quark, a Ferengi, is not part of the crew but owns a bar on the station and is friends with Odo.\n```\n\nThis tells the model what schema to use, then provides a few lines of text data to extract entities and relationships from. The response should be a Cypher CREATE query like this:\n\n```plaintext\nCREATE (s:Character {name: \"Benjamin Sisko\", rank: \"Commander\", species: \"Human\"})\nCREATE (d:Station {name: \"Deep Space Nine\", location: \"orbiting Bajor\"})\nCREATE (s)-[:ASSIGNED_TO]->(d)\n\nCREATE (k:Character {name: \"Kira Nerys\", rank: \"Major\", species: \"Bajoran\"})\nCREATE (k)-[:ASSIGNED_TO]->(d)\n\nCREATE (o:Character {name: \"Odo\", rank: \"Chief of Security\", species: \"Changeling\"})\nCREATE (o)-[:ASSIGNED_TO]->(d)\n\nCREATE (j:Character {name: \"Jadzia Dax\", rank: \"Science Officer\", species: \"Trill\"})\nCREATE (j)-[:ALLIES_WITH]->(s)\nCREATE (s)-[:ALLIES_WITH]->(o)\n\nCREATE (q:Character {name: \"Quark\", rank: \"\", species: \"Ferengi\"})\nCREATE (q)-[:OWNS_BAR_ON]->(d)\nCREATE (o)-[:ALLIES_WITH]->(q)\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745080054466/96de170b-6fbb-48f3-a3c4-94f21583fb5f.png align=\"center\")\n\nNow go back to Neo4j and run the query. Then click the (\\*) again to view the new graph.\n\n**Note**: You may have to remove the inline `//comments` for the query to run.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745080361233/6cfbc00e-5e63-4a9b-bb61-80466f1ef0a7.png align=\"center\")\n\nOk, now we’re able to generate Cypher queries from a text prompt. Lastly, let’s write a Python script to bulk process text files into Cypher queries and insert the data into our graph.\n\n## Prompting the model from a Python script\n\nNext, open up your favorite text editor or IDE and create a python script to send prompts to Ollama. This script takes a text parameter for the prompt and will return the LLM response in the terminal.\n\n```python\nimport requests\nimport argparse\n\n# Static schema\nschema = \"\"\"\nNode types:\n- Character(name, rank, species)\n- Ship(name, class)\n- Relationships:\n    - SERVES_ON (Character → Ship)\n    - FRIENDS_WITH (Character ↔ Character)\n\"\"\"\n\n# Parse CLI arguments\nparser = argparse.ArgumentParser(description=\"Send prompt to Ollama text2cypher model\")\nparser.add_argument(\"prompt\", type=str, help=\"Prompt text to send (wrap in quotes)\")\nargs = parser.parse_args()\n\n# Ollama local model endpoint\nOLLAMA_URL = \"http://localhost:11434/api/generate\"\nMODEL_NAME = \"text2cypher\"\n\n# Build request payload\npayload = {\n    \"model\": MODEL_NAME,\n    \"prompt\": f\"{schema}\\n\\nQuestion: {args.prompt}\\n\\nReturn only a valid Cypher query.\",\n    \"stream\": False\n}\n\n# Send request\nresponse = requests.post(OLLAMA_URL, json=payload)\nresponse.raise_for_status()\n\n# Print result\ncypher = response.json().get(\"response\")\nprint(\"Generated Cypher Query:\\n\", cypher)\n```\n\nSave the script to the Neo4j folder and name it *send\\_prompt.py*. Then create a virtual environment and run it.\n\n```bash\npython3 -m venv venv\n```\n\n```bash\nsource venv/bin/activate\n```\n\n```bash\npip install requests\n```\n\nYou should now be able to prompt the text2cypher model from the terminal using:\n\n```bash\npython3 send_prompt.py \"Create nodes for Captain Jean-Luc Picard (Human), Lieutenant Worf (Klingon), and Counselor Deanna Troi (Betazoid). All of them serve on the USS Enterprise (Galaxy-class). Worf and Troi are friends.\"\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745085175389/4d0faa99-9bf0-442d-bd12-8842fb07dd41.png align=\"center\")\n\nAlright, the Python script can return a Cypher query. Now let’s update it to run that query in Neo4j.\n\n## Bulk processing local files into a knowledge graph\n\nStart out by creating a new script called run\\_cypher.py in the Neo4j folder. Paste in the following script and save. Be sure to update it with your password at the top of the script.\n\n```python\n# run_cypher.py\nimport argparse\nfrom neo4j import GraphDatabase\n\n# --- Configuration ---\nNEO4J_URI = \"bolt://localhost:7687\"\nNEO4J_USER = \"neo4j\"\nNEO4J_PASSWORD = \"YOUR_PASSWORD\"\n\n# --- Parse CLI Argument ---\nparser = argparse.ArgumentParser(description=\"Run a Cypher query on Neo4j\")\nparser.add_argument(\"query\", type=str, help=\"Cypher query to run (wrap in quotes)\")\nargs = parser.parse_args()\ncypher_query = args.query.strip()\n\n# --- Run Cypher Query ---\ndef run_query(query):\n    driver = GraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USER, NEO4J_PASSWORD))\n    with driver.session(database=\"neo4j\") as session:\n        try:\n            result = session.run(query)\n            # Collect results first before consuming\n            records = list(result)\n            summary = result.consume()\n            print(\"Query executed. Stats:\", summary.counters)\n            for record in records:\n                print(record.data())\n        except Exception as e:\n            print(\"Cypher execution error:\", str(e))\n    driver.close()\n\nrun_query(cypher_query)\n```\n\nNext, install the Neo4j driver:\n\n```bash\npip install neo4j\n```\n\nThen run the script with a prompt containing a Cypher query.\n\n```bash\npython run_cypher.py \"CREATE (sisko:Character {name: 'Benjamin Sisko', rank: 'Captain', species: 'Human'}), (kira:Character {name: 'Kira Nerys', rank: 'Colonel', species: 'Bajoran'}), (bashir:Character {name: 'Julian Bashir', rank: 'Doctor', species: 'Human'}), (defiant:Ship {name: 'USS Defiant', class: 'Defiant-class'}), (sisko)-[:SERVES_ON]->(defiant), (kira)-[:SERVES_ON]->(defiant), (bashir)-[:SERVES_ON]->(defiant), (sisko)-[:FRIENDS_WITH]->(kira), (bashir)-[:FRIENDS_WITH]->(sisko)\"\n```\n\nRefresh the Neo4j browser, and you should see the new nodes created.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745087413634/4dbea19f-51e9-4d4f-9f92-71fe3a7ca24f.png align=\"center\")\n\nNow delete all the nodes one last time before the bulk upload.\n\n```plaintext\nMATCH (n)\nDETACH DELETE n\n```\n\n### Bulk Processing Text Files\n\nOk, we’re almost there! Lastly, we need a script to process a folder of text files, and call both of these scripts to generate a cypher then run it. For this example, I’m using 3 text files located in a *Notes* folder, inside the neo4j folder.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745087720620/06e4cbc9-80aa-4721-a222-6314cff5727a.png align=\"center\")\n\nHere’s the files I used, in case you want to test with the same input data.\n\n**prompt1.txt**\n\n```plaintext\nCaptain Benjamin Sisko entered the operations center on Deep Space Nine and found Major Kira Nerys consulting with Constable Odo. The captain outlined a new security protocol and asked Kira to oversee its implementation. Odo adjusted his uniform and nodded as he scanned incoming reports. Kira offered suggestions for patrol routes while Odo confirmed gate readings. By the end of the briefing, all three had agreed on the plan to increase boarding inspections and monitor cargo manifests more closely.\n```\n\n**prompt2.txt**\n\n```plaintext\nLater that morning, Kira Nerys joined Science Officer Jadzia Dax in the lab for an experimental sensor test. Dr Julian Bashir arrived with new calibration data from Starfleet Medical. As Jadzia calibrated the particle analyzer, Kira reviewed station logs for unusual energy signatures. Julian smiled at their progress and noted that the anomaly readings matched a pattern he had seen during his medical travels. Together they prepared to present their findings to Captain Sisko before the next scheduled docking.\n```\n\n**prompt3.txt**\n\n```plaintext\nThat evening, Jadzia Dax walked through the promenade to visit the bar run by Quark. She found Nog polishing glasses behind the counter. Quark greeted her with a nod and gestured toward a table near the entrance. Nog filled a fresh glass of synthehol while Jadzia described the sensor anomaly discovered earlier. Quark leaned forward, offering to check his Ferengi data logs for any related transactions. Nog made a note to share the information with Dr Bashir first thing tomorrow.\n```\n\nCreate one last script to loop over the Notes folder. This script will call the `send_prompt.py` and `run_cypher.py` scripts for each file in the Notes folder.\n\n**Note**: I had to do a bit of cleanup on the response to get only the valid Cypher CREATE queries. The model was wrapping the response with ` ``` `, but not consistently. And occasionally it would add extra text at the beginning, like `Generated Cypher Query:`. So the script is a little long on the text parsing, but the main logic for looping and running the other scripts is pretty straight-forward.\n\n```python\n#!/usr/bin/env python3\nimport os\nimport re\nimport subprocess\nimport argparse\n\n# Configuration\nNOTES_DIR = \"Notes\"         # directory containing .txt files\nSEND_PROMPT_SCRIPT = \"send_prompt.py\"\nRUN_CYPHER_SCRIPT = \"run_cypher.py\"\n\ndef extract_character_ship_info(output):\n    \"\"\"Extract Character and Ship information from the output.\"\"\"\n    characters = []\n    ships = []\n    relationships = []\n    in_code_block = False\n    \n    for line in output.strip().splitlines():\n        line = line.strip()\n        \n        # Handle code blocks and filtering\n        if line.startswith(\"```\"):\n            in_code_block = not in_code_block\n            continue\n        if line.lower().startswith(\"here are\") or not line or not line.upper().startswith(\"CREATE \"):\n            continue\n        \n        # Ensure statement ends with semicolon\n        if not line.endswith(\";\"):\n            line += \";\"\n            \n        # Extract character creation\n        character_match = re.search(r'CREATE\\s+\\((\\w+):Character\\s+\\{(.+?)\\}\\)', line)\n        if character_match:\n            alias = character_match.group(1)\n            props_str = character_match.group(2)\n            \n            # Extract properties\n            name_match = re.search(r'name:\\s*\"([^\"]+)\"', props_str)\n            rank_match = re.search(r'rank:\\s*\"([^\"]*)\"', props_str)\n            species_match = re.search(r'species:\\s*\"([^\"]+)\"', props_str)\n            \n            if name_match:\n                name = name_match.group(1)\n                rank = rank_match.group(1) if rank_match else \"\"\n                species = species_match.group(1) if species_match else \"Unknown\"\n                \n                characters.append({\n                    \"alias\": alias,\n                    \"name\": name,\n                    \"rank\": rank,\n                    \"species\": species\n                })\n            continue\n                \n        # Extract ship creation\n        ship_match = re.search(r'CREATE\\s+\\((\\w+):Ship\\s+\\{(.+?)\\}\\)', line)\n        if ship_match:\n            alias = ship_match.group(1)\n            props_str = ship_match.group(2)\n            \n            # Extract properties\n            name_match = re.search(r'name:\\s*\"([^\"]+)\"', props_str)\n            class_match = re.search(r'class:\\s*\"([^\"]*)\"', props_str)\n            \n            if name_match:\n                name = name_match.group(1)\n                ship_class = class_match.group(1) if class_match else \"Unknown\"\n                \n                ships.append({\n                    \"alias\": alias,\n                    \"name\": name,\n                    \"class\": ship_class\n                })\n            continue\n        \n        # Extract relationships\n        rel_match = re.search(r'CREATE\\s+\\((\\w+)\\)-\\[:(\\w+)\\]->\\((\\w+)\\)', line)\n        if rel_match:\n            source_alias = rel_match.group(1)\n            rel_type = rel_match.group(2)\n            target_alias = rel_match.group(3)\n            \n            if rel_type in [\"SERVES_ON\", \"FRIENDS_WITH\", \"OWNED_BY\"]:\n                relationships.append({\n                    \"source\": source_alias,\n                    \"type\": rel_type,\n                    \"target\": target_alias\n                })\n    \n    return characters, ships, relationships\n\ndef process_file(file_path, send_script, run_script):\n    \"\"\"Process a single text file, extract entities and create database entries.\"\"\"\n    # Read the prompt file\n    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n        prompt = f.read().strip()\n    \n    # Generate Cypher from text using send_prompt.py\n    result = subprocess.run(\n        [\"python3\", send_script, prompt],\n        capture_output=True,\n        text=True\n    )\n    \n    if result.returncode != 0:\n        print(f\"[Error] {result.stderr.strip()}\")\n        return\n    \n    # Extract entity information\n    characters, ships, relationships = extract_character_ship_info(result.stdout)\n    \n    # Create Characters\n    if characters:\n        print(f\"Creating {len(characters)} Character nodes:\")\n        for char in characters:\n            # MERGE ensures we don't create duplicates\n            cypher = f\"\"\"\n            MERGE (c:Character {{name: \"{char['name']}\"}})\n            ON CREATE SET \n                c.species = \"{char['species']}\",\n                c.rank = \"{char['rank']}\"\n            RETURN c\n            \"\"\"\n            \n            print(f\"Creating character: {char['name']}\")\n            cypher_result = subprocess.run(\n                [\"python3\", run_script, cypher],\n                capture_output=True,\n                text=True\n            )\n            \n            if \"error\" in cypher_result.stdout.lower() or \"error\" in cypher_result.stderr.lower():\n                print(f\"[Error] {cypher_result.stderr.strip() or cypher_result.stdout.strip()}\")\n    \n    # Create Ships\n    if ships:\n        print(f\"Creating {len(ships)} Ship nodes:\")\n        for ship in ships:\n            # MERGE ensures we don't create duplicates\n            cypher = f\"\"\"\n            MERGE (s:Ship {{name: \"{ship['name']}\"}})\n            ON CREATE SET \n                s.class = \"{ship['class']}\"\n            RETURN s\n            \"\"\"\n            \n            print(f\"Creating ship: {ship['name']}\")\n            cypher_result = subprocess.run(\n                [\"python3\", run_script, cypher],\n                capture_output=True,\n                text=True\n            )\n            \n            if \"error\" in cypher_result.stdout.lower() or \"error\" in cypher_result.stderr.lower():\n                print(f\"[Error] {cypher_result.stderr.strip() or cypher_result.stdout.strip()}\")\n    \n    # Create Relationships\n    if relationships:\n        print(f\"Creating {len(relationships)} relationships:\")\n        for rel in relationships:\n            # Find the actual character/ship entities from the lists\n            source_type = \"Character\"  # Default assumption\n            source_name = None\n            \n            # Look for source in characters\n            for char in characters:\n                if char[\"alias\"] == rel[\"source\"]:\n                    source_name = char[\"name\"]\n                    break\n            \n            # If not found in characters, check ships\n            if not source_name:\n                for ship in ships:\n                    if ship[\"alias\"] == rel[\"source\"]:\n                        source_type = \"Ship\"\n                        source_name = ship[\"name\"]\n                        break\n            \n            # If still not found, skip this relationship\n            if not source_name:\n                print(f\"Skipping relationship: source alias '{rel['source']}' not found\")\n                continue\n            \n            # Now find the target\n            target_type = \"Character\"  # Default assumption \n            target_name = None\n            \n            # For SERVES_ON, target should be a Ship\n            if rel[\"type\"] == \"SERVES_ON\":\n                target_type = \"Ship\"\n                for ship in ships:\n                    if ship[\"alias\"] == rel[\"target\"]:\n                        target_name = ship[\"name\"]\n                        break\n            else:\n                # For other relationships, look for target in characters\n                for char in characters:\n                    if char[\"alias\"] == rel[\"target\"]:\n                        target_name = char[\"name\"]\n                        break\n            \n            # If target not found, skip\n            if not target_name:\n                print(f\"Skipping relationship: target alias '{rel['target']}' not found\")\n                continue\n            \n            # Create the relationship using MATCH to find existing nodes\n            cypher = f\"\"\"\n            MATCH (a:{source_type} {{name: \"{source_name}\"}})\n            MATCH (b:{target_type} {{name: \"{target_name}\"}})\n            MERGE (a)-[r:{rel['type']}]->(b)\n            RETURN a, r, b\n            \"\"\"\n            \n            print(f\"Creating relationship: {source_name} -[{rel['type']}]-> {target_name}\")\n            cypher_result = subprocess.run(\n                [\"python3\", run_script, cypher],\n                capture_output=True,\n                text=True\n            )\n            \n            if \"error\" in cypher_result.stdout.lower() or \"error\" in cypher_result.stderr.lower():\n                print(f\"[Error] {cypher_result.stderr.strip() or cypher_result.stdout.strip()}\")\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description=\"Bulk-process text files: extract entities and create properly connected Neo4j graph\"\n    )\n    parser.add_argument(\n        \"--notes-dir\",\n        default=NOTES_DIR,\n        help=\"Path to folder containing text files (default: %(default)s)\"\n    )\n    parser.add_argument(\n        \"--script\",\n        default=SEND_PROMPT_SCRIPT,\n        help=\"Path to send_prompt.py (default: %(default)s)\"\n    )\n    parser.add_argument(\n        \"--run-script\",\n        default=RUN_CYPHER_SCRIPT,\n        help=\"Path to run_cypher.py (default: %(default)s)\"\n    )\n    args = parser.parse_args()\n\n    for fname in sorted(os.listdir(args.notes_dir)):\n        if not fname.lower().endswith(\".txt\"):\n            continue\n        \n        path = os.path.join(args.notes_dir, fname)\n        print(f\"--- Processing {fname} ---\")\n        \n        process_file(path, args.script, args.run_script)\n        print()  # blank line between files\n\nif __name__ == \"__main__\":\n    main()\n```\n\nSave the script, then clear out the database once more before testing.\n\n```plaintext\nMATCH (n) DETACH DELETE n\n```\n\nThen retest:\n\n```python\npython bulk_process.py\n```\n\nRefresh Neo4j and you should see a new set of connected nodes based on your input documents. To view all the nodes and relationships at once, run:\n\n```plaintext\nMATCH (n)\nOPTIONAL MATCH (n)-[r]->(m)\nRETURN n, r, m\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1745149748625/16a7bebb-0fff-4069-a38e-40193b3ef6a7.png align=\"center\")\n\nAnd there you have it! You can now extract entities and relationships, generate Cypher queries and run them in bulk, based on a folder of text files. This will generate a collection of connected nodes based on the schema defined in your `send_prompt.py` script.\n\nCrafting an appropriate schema for your input data is one of the most important steps to generating a quality knowledge graph. Be sure to create a well-defined schema that accurately represents your data before bulk-processing your files.\n\n## Conclusion\n\nKnowledge graphs are amazing tools for visualizing data and performing complex queries to uncover new insights about relationships. They excel at tasks in fraud detection, recommendation engines, social networks, and RAG. Building a knowledge graph is as easy as running a few Cypher queries, but generating those queries from data can be challenging. This guide has shown one way you can generate these queries locally using a text-to-cypher query from Hugging Face.\n\nSpecial thanks to Jason Koo from Neo4j for this excellent [video tutorial](https://www.youtube.com/watch?v=9pdxSlxfqNY) on using a Hugging Face model in Ollama.\n\n### What’s Next?\n\nFrom here you could connect the Neo4j database to an AI assistant or agent to perform RAG, or use the graph to discover relationships and communities of nodes that emerge as the bulk data is processed.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1745228584010/fca4d5d3-a89d-4467-9b81-ba978113fb87.png","brief":"Knowledge graphs, also known as semantic networks, are a specialized application of graph databases used to store information about entities (person, location, organization, etc) and their relationships. They allow you to explore your data with an in...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":16,"draft":"6803afd2b538339ebce934b2","tags":["56744722958ef13879b94e4b","58b96527be993da9e4853150","63c1667e09eddfeb66db5ebb","56744721958ef13879b94d67","56744723958ef13879b95342","62f244a4408d676b1b589b55","635ad52efe8087002dee4707","5e844d758570b09f3cace381","576a1d6e13cc2eb2d90e2383","62ec5d9ef583cc2636e5492c","6547328115caa6554c5d5bc0","59f01ec6df239c392dee763c"],"publication":"60771c264155da32fc83ad6e","metaTitle":"Create Local Knowledge Graph with Neo4j & Ollama","metaDescription":"Learn to build and query a local knowledge graph using Neo4j, Docker, Ollama, and a text-to-Cypher model from Hugging Face","isNewsletterActivated":true,"coAuthors":[],"dateFeatured":"2025-04-22T11:28:48.054Z","badges":[{"badgeId":"5f741eac07891b4f5b9ec8cd","name":"postFeaturedHN","_id":"68077d70ffdf1edd519f60f2"}],"contributors":[{"user":"5f98534c6ea7602886a16bd1","stamp":"cmb4ifj4p08a9bfnvacklc9vd","_id":"6833dbae5c379a824d93c8e1"},{"user":"62ee4d471e1353355ad337bb","stamp":"cmb1u5bvi06k815nv1a0e3u9y","_id":"682b0f770d8b53b6aa69fefd"},{"_id":"682b0f770d8b53b6aa69fef5","user":"6809bef24515e96adafcb14f","stamp":"cm9uvcon2000209jr4d080tgt"},{"_id":"682b0f770d8b53b6aa69fef6","user":"67fa210007c86d832de50667","stamp":"cm9tcop5f001l09ld9caxfpqj"}],"lastActivity":"2025-05-26T10:19:35.524Z","__v":3,"answeredByTarget":false,"autoGeneratedCover":"","bookmarkedIn":[],"downvotedBy":[],"downvotes":0,"duplicatePosts":[],"followers":[],"hasPolls":false,"hasReward":false,"inviters":[],"isAnonymous":false,"pollOptions":[],"questionReplies":[],"reactionsByCurrentUser":[],"responses":[{"contentMarkdown":"This is EXACTLY what i was looking for, even though i didn’t know it!\n\nThank you so much for putting this out there when you did! i will pay it forward once i finish the project I’m working on by posting an article of my own and linking back to this one — thanks 🙏 ","content":"<p>This is EXACTLY what i was looking for, even though i didn’t know it!</p>\n<p>Thank you so much for putting this out there when you did! i will pay it forward once i finish the project I’m working on by posting an article of my own and linking back to this one — thanks 🙏 </p>\n","author":"5f98534c6ea7602886a16bd1","post":"680617ce149b5afce9abae94","popularity":7538.1742,"isActive":true,"stamp":"cmb4ifj4p08a9bfnvacklc9vd","upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"source":"blogs","score":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"reactionsByCurrentUser":[],"_id":"6833dbae5c379a824d93c8df","replies":[],"dateAdded":"2025-05-26T03:10:38.235Z","badgesAwarded":[],"__v":0},{"contentMarkdown":"Dkkdngjf","content":"<p>Dkkdngjf</p>\n","author":"62ee4d471e1353355ad337bb","post":"680617ce149b5afce9abae94","popularity":7534.5804,"isActive":true,"stamp":"cmb1u5bvi06k815nv1a0e3u9y","upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"source":"blogs","score":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"reactionsByCurrentUser":[],"_id":"683163f7df53b30f1af46301","replies":[],"dateAdded":"2025-05-24T06:15:19.135Z","badgesAwarded":[],"__v":0},{"contentMarkdown":"Nnfnsnfjdjc","content":"<p>Nnfnsnfjdjc</p>\n","author":"62ee4d471e1353355ad337bb","post":"680617ce149b5afce9abae94","popularity":7525.3616,"isActive":true,"stamp":"cmauz5p8p01ltg3nvg9zx76rq","upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"source":"blogs","score":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"reactionsByCurrentUser":[],"_id":"682b0f770d8b53b6aa69fefb","replies":[],"dateAdded":"2025-05-19T11:01:11.307Z","badgesAwarded":[],"__v":0}],"similarPostIds":[],"sourcedFromGithub":false,"toc":[],"totalPollVotes":0,"untaggedFrom":[],"upvotedBy":[],"upvotes":0,"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"680617ce149b5afce9abae94"},{"reward":{"type":"xlm"},"commentMetadata":{"qualityCommentCharLength":0,"qualityCommentCount":0,"totalCommentCount":4,"lastCommentAddedDate":"2025-04-07T11:34:01.274Z"},"githubAsSourceMeta":null,"_id":"67f27e0437f71dd50937ab42","createdAt":"2025-04-06T13:13:40.169Z","updatedAt":"2025-04-08T16:09:17.470Z","views":256,"isActive":true,"hasLatex":true,"popularity":7444.3206,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":2,"replyCount":2,"isFeatured":true,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":22,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Markdown Editor and Knowledge Graph Notes App with Vis.js in FileMaker Pro","subtitle":"A Star Trek Themed Editor Inspired by Obsidian","cuid":"cm95nyfyf000u09jp6w2133gy","dateAdded":"2025-04-06T13:13:40.167Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"markdown-editor-and-knowledge-graph-notes-app-with-visjs-in-filemaker-pro","content":"<p>Markdown is used widely in programming, documentation, content creation, GitHub, and lots of other areas in tech. One of the most popular Markdown editors is Obsidian, a note taking app with an interesting graph view that shows how all of your notes are connected.</p>\n<p><img src=\"https://obsidian.md/images/screenshot-1.0-hero-combo.png\" alt=\"Obsidian\" /></p>\n<p>The graph view is interactive and allows you to navigate through notes and see how they are connected to other records.</p>\n<p>In this guide, I’ll show how to build a Markdown editor in FileMaker Pro, and generate an interactive network graph of the notes to explore your data.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Building a Markdown Editor in a Web Viewer with Marked.js</p>\n</li>\n<li><p>Adding support for syntax highlighting code blocks with Prism.js</p>\n</li>\n<li><p>Building JSON to feed the graph view</p>\n</li>\n<li><p>Building the graph view with Vis.js</p>\n</li>\n</ul>\n<p><em>Here’s a quick preview of the finished app</em></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743928386754/ad050eb7-0ccf-4ba6-a519-9f305cca2b66.png\" alt class=\"image--center mx-auto\" /></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743928389807/1ff06725-4565-4cfb-add3-d43d48df466f.png\" alt class=\"image--center mx-auto\" /></p>\n<p>At first I was just going to build a basic Markdown editor and I needed some mock data. I had ChatGPT generate some Captain’s Log entries from Star Trek, and then I got a bit carried away and decided to recreate the LCARS display! 🖖</p>\n<p>Then I thought the network graph from Obsidian could work well with it, and look kind of like a system of planets. This was a bit more than I originally planned on doing for this Markdown editor tutorial, but it sounded like a fun challenge. Now that I have it working, I wanted to share a guide on how to build your own.</p>\n<p><strong>Ready to dive in? <em>Let’s get started!</em></strong></p>\n<p>(<em>Wanna skip the tutorial, and just copy the finished app?</em> 👉 <a target=\"_blank\" href=\"https://github.com/GreenFluxLLC/FileMaker-Experiments\">GitHub Repo</a>)</p>\n<h2 id=\"heading-building-a-markdown-editor-with-markedjs\">Building a Markdown Editor with Marked.js</h2>\n<p>Building a Markdown editor from scratch may sound complex, but the <a target=\"_blank\" href=\"https://www.jsdelivr.com/package/npm/marked\">Marked.js</a> library makes it quite easy to set up. Just import the library and select an element, then set the innerHTML to <code>marked.parse()</code>, passing in your Markdown text.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743929430781/b416458b-b3fa-4b95-94a3-accbad53c43f.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Marked.js displays the compiled Markdown, given an input of raw Markdown text. To build an editor, you need an input or text area to feed it.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743929822377/c481a03e-7008-4be0-a71b-ed1360380a29.png\" alt class=\"image--center mx-auto\" /></p>\n<p>First let’s set up a basic web viewer in FileMaker with Marked.js. There are lots of ways to provide the HTML to the web viewer, like entering it directly in the web viewer source field, storing it in a text field, or using a text layout object. I prefer to use the layout object method, as it avoids the issues with quotes when entering directly in the web viewer source, and avoids creating new fields.</p>\n<p>Paste the following code into a new text object, off to the side of the layout where it won’t appear on the screen. Name the object <code>webviewerCode</code> so we can reference it in the next step.</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Marked.js Live Preview<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-family</span>: sans-serif; <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-attribute\">gap</span>: <span class=\"hljs-number\">2rem</span>; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">1rem</span>; }\n    <span class=\"hljs-selector-tag\">textarea</span> { <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">45%</span>; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">90vh</span>; <span class=\"hljs-attribute\">font-family</span>: monospace; }\n    <span class=\"hljs-selector-id\">#preview</span> { <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">45%</span>; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">90vh</span>; <span class=\"hljs-attribute\">overflow-y</span>: auto; <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">1rem</span>; }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"input\"</span>&gt;</span># Sample Markdown\n\n- **Bold item**\n- _Italic item_\n- [Link](https://example.com)\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"preview\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'input'</span>)\n    <span class=\"hljs-keyword\">const</span> preview = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'preview'</span>)\n\n    <span class=\"hljs-keyword\">const</span> renderMarkdown = <span class=\"hljs-function\">() =&gt;</span> {\n      preview.innerHTML = marked.parse(input.value)\n    }\n\n    input.addEventListener(<span class=\"hljs-string\">'input'</span>, renderMarkdown)\n    renderMarkdown() <span class=\"hljs-comment\">// Initial render</span>\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>Then add a web viewer and set the source to:</p>\n<pre><code class=\"lang-plaintext\">GetLayoutObjectAttribute ( \"webviewerCode\"; \"content\" )\n</code></pre>\n<p>You should now see a text area for the input and a live preview of the Markdown.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743930664181/641c8fe8-7f51-433b-b277-fd3896c8ccaf.png\" alt class=\"image--center mx-auto\" /></p>\n<h3 id=\"heading-preloading-the-editor-content-from-fmp-records\">Preloading the Editor Content from FMP Records</h3>\n<p>Next we want to populate the editor from field data in FileMaker. In my case I’m using a <code>notes</code> table with a <code>body</code> field. Update the webviewerCode text object to insert a placeholder that can be used to insert the body.</p>\n<pre><code class=\"lang-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"input\"</span>&gt;</span>{MARKDOWN_TEXT}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span>\n</code></pre>\n<p>Then update the web viewer source to insert the body field.</p>\n<pre><code class=\"lang-plaintext\">Substitute ( \n\n  GetLayoutObjectAttribute ( \"webviewerCode\"; \"content\" );  // source text\n  \"{MARKDOWN_TEXT}\";  //  search value\n  notes::body         //  replace value\n\n )\n</code></pre>\n<p>You should now be able to view Markdown from the <code>notes::body</code> field. You can also edit the Markdown and see it update in real-time on the preview pane. But there’s no way to save it yet!</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743931647809/dcdd8a0c-d745-409c-a97a-7550b4888e57.png\" alt class=\"image--center mx-auto\" /></p>\n<h3 id=\"heading-saving-the-markdown\">Saving the Markdown</h3>\n<p>Next, add a <strong>Save</strong> button to the HTML in the <code>webviewerCode</code> object, and set it to run a FileMaker script called <em>Save Note</em>, which we’ll create in the next step.</p>\n<pre><code class=\"lang-xml\">   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"saveMarkdown()\"</span>&gt;</span>Save<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'input'</span>)\n    <span class=\"hljs-keyword\">const</span> preview = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'preview'</span>)\n\n    <span class=\"hljs-keyword\">const</span> renderMarkdown = <span class=\"hljs-function\">() =&gt;</span> {\n      preview.innerHTML = marked.parse(input.value)\n    }\n\n    <span class=\"hljs-keyword\">const</span> saveMarkdown = <span class=\"hljs-function\">() =&gt;</span> {\n      FileMaker.PerformScript(<span class=\"hljs-string\">\"Save Note\"</span>, input.value)\n    }\n\n    input.addEventListener(<span class=\"hljs-string\">'input'</span>, renderMarkdown)\n    renderMarkdown() <span class=\"hljs-comment\">// Initial render</span>\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Then create the <em>Save Note</em> script in FileMaker Pro.</p>\n<pre><code class=\"lang-plaintext\">Set Variable [ $markdown; Value:Get(ScriptParameter) ]\nSet Field [ notes::body; $markdown ]\n</code></pre>\n<p>Return to Browse Mode and test it out! You should now be able to save the note.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743932595390/452f80cc-f46a-4d7c-9d43-d96db74628d8.gif\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-adding-syntax-highlighting-with-prismjs\">Adding syntax highlighting with Prism.js</h2>\n<p>Next we’ll add <a target=\"_blank\" href=\"https://www.jsdelivr.com/package/npm/prismjs\">Prism.js</a> for syntax highlighting of code blocks. Import the library and use the <code>Prism.highlightAll()</code> method to automatically detect and highlight all code blocks on the page. Here’s an updated version of the complete HTML so far:</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Marked.js Live Preview<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.css\"</span> /&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-family</span>: sans-serif; <span class=\"hljs-attribute\">display</span>: flex; <span class=\"hljs-attribute\">gap</span>: <span class=\"hljs-number\">2rem</span>; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">1rem</span>; }\n    <span class=\"hljs-selector-tag\">textarea</span> { <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">45%</span>; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">90vh</span>; <span class=\"hljs-attribute\">font-family</span>: monospace; }\n    <span class=\"hljs-selector-id\">#preview</span> { <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">45%</span>; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">90vh</span>; <span class=\"hljs-attribute\">overflow-y</span>: auto; <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">1rem</span>; }\n    <span class=\"hljs-selector-tag\">pre</span> { <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#f5f5f5</span>; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-attribute\">overflow-x</span>: auto; }\n    <span class=\"hljs-selector-tag\">code</span> { <span class=\"hljs-attribute\">font-family</span>: monospace; }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"input\"</span>&gt;</span>{MARKDOWN_TEXT}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"preview\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"saveMarkdown()\"</span>&gt;</span>Save<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'input'</span>)\n    <span class=\"hljs-keyword\">const</span> preview = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'preview'</span>)\n\n    <span class=\"hljs-keyword\">const</span> renderMarkdown = <span class=\"hljs-function\">() =&gt;</span> {\n      preview.innerHTML = marked.parse(input.value)\n      Prism.highlightAll()\n    }\n\n    <span class=\"hljs-keyword\">const</span> saveMarkdown = <span class=\"hljs-function\">() =&gt;</span> {\n      FileMaker.PerformScript(<span class=\"hljs-string\">\"Save Note\"</span>, input.value)\n    }\n\n    input.addEventListener(<span class=\"hljs-string\">'input'</span>, renderMarkdown)\n    renderMarkdown()\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>Now enter some Markdown with a code block. Include the language to ensure the correct formatting is applied.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743933188159/55960a60-2f12-43c6-a4c2-8750e54e4c08.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, you can preload the editor, save the current value, and display syntax highlighting. The basics are working. From here you can use your framework and libraries of choice style the UI.</p>\n<p>Here’s a more complete version using Vue3, with separate modes for Full Editor, Full Preview, and Split Screen.</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Markdown Editor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- Vue &amp; Marked --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/vue@3.2.37/dist/vue.global.prod.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/marked@4.0.16/lib/marked.esm.js\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- Prism.js (Dark Theme) --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.css\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-tag\">body</span> {\n      <span class=\"hljs-attribute\">font-family</span>: Arial, sans-serif;\n      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#000</span>;\n    }\n    *, *<span class=\"hljs-selector-pseudo\">::before</span>, *<span class=\"hljs-selector-pseudo\">::after</span> {\n      <span class=\"hljs-attribute\">box-sizing</span>: border-box;\n    }\n    <span class=\"hljs-selector-class\">.toolbar</span> {\n      <span class=\"hljs-attribute\">display</span>: flex;\n      <span class=\"hljs-attribute\">justify-content</span>: center;\n      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#222</span>;\n      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n      <span class=\"hljs-attribute\">gap</span>: <span class=\"hljs-number\">10px</span>;\n    }\n    <span class=\"hljs-selector-class\">.toolbar</span> <span class=\"hljs-selector-tag\">button</span> {\n      <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#000</span>;\n      <span class=\"hljs-attribute\">border</span>: none;\n      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n      <span class=\"hljs-attribute\">font-weight</span>: bold;\n      <span class=\"hljs-attribute\">cursor</span>: pointer;\n    }\n    <span class=\"hljs-selector-class\">.toolbar</span> <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:nth-child(1)</span> { <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#9944ff</span>; }\n    <span class=\"hljs-selector-class\">.toolbar</span> <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:nth-child(2)</span> { <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#dd4445</span>; }\n    <span class=\"hljs-selector-class\">.toolbar</span> <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:nth-child(3)</span> { <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#7687fe</span>; }\n    <span class=\"hljs-selector-class\">.toolbar</span> <span class=\"hljs-selector-tag\">button</span><span class=\"hljs-selector-pseudo\">:nth-child(4)</span> { <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#ff7706</span>; }\n    <span class=\"hljs-selector-class\">.editor-container</span> {\n      <span class=\"hljs-attribute\">display</span>: flex;\n      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-built_in\">calc</span>(<span class=\"hljs-number\">100vh</span> - <span class=\"hljs-number\">50px</span>);\n    }\n    <span class=\"hljs-selector-class\">.editor-pane</span>, <span class=\"hljs-selector-class\">.preview-pane</span> {\n      <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n      <span class=\"hljs-attribute\">overflow-y</span>: auto;\n      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#121212</span>;\n    }\n    <span class=\"hljs-comment\">/* Preserve Prism token colors */</span>\n    <span class=\"hljs-selector-class\">.preview-pane</span> <span class=\"hljs-selector-pseudo\">:not(pre)</span><span class=\"hljs-selector-pseudo\">:not(code)</span> {\n      <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#f0f0f0</span>;\n    }\n    <span class=\"hljs-selector-class\">.editor-pane</span> {\n      <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#333</span>;\n    }\n    <span class=\"hljs-selector-tag\">textarea</span> {\n      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1rem</span>;\n      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n      <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#1e1e1e</span>;\n      <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#fff</span>;\n      <span class=\"hljs-attribute\">border</span>: none;\n      <span class=\"hljs-attribute\">resize</span>: none;\n    }\n    <span class=\"hljs-selector-tag\">pre</span> {\n      <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#1e1e1e</span>;\n      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n      <span class=\"hljs-attribute\">overflow-x</span>: auto;\n    }\n    <span class=\"hljs-selector-class\">.preview-pane</span> <span class=\"hljs-selector-tag\">ul</span>,\n    <span class=\"hljs-selector-class\">.preview-pane</span> <span class=\"hljs-selector-tag\">ol</span> {\n      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">1em</span> <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-attribute\">padding-left</span>: <span class=\"hljs-number\">40px</span>;\n    }\n    <span class=\"hljs-selector-class\">.preview-pane</span> <span class=\"hljs-selector-tag\">ul</span> {\n      <span class=\"hljs-attribute\">list-style-type</span>: disc;\n    }\n    <span class=\"hljs-selector-class\">.preview-pane</span> <span class=\"hljs-selector-tag\">ol</span> {\n      <span class=\"hljs-attribute\">list-style-type</span>: decimal;\n    }\n    <span class=\"hljs-selector-class\">.editor-container</span><span class=\"hljs-selector-class\">.editor</span> <span class=\"hljs-selector-class\">.preview-pane</span> {\n      <span class=\"hljs-attribute\">display</span>: none;\n    }\n    <span class=\"hljs-selector-class\">.editor-container</span><span class=\"hljs-selector-class\">.preview</span> <span class=\"hljs-selector-class\">.editor-pane</span> {\n      <span class=\"hljs-attribute\">display</span>: none;\n    }\n    <span class=\"hljs-selector-class\">.editor-container</span><span class=\"hljs-selector-class\">.split</span> <span class=\"hljs-selector-class\">.editor-pane</span>,\n    <span class=\"hljs-selector-class\">.editor-container</span><span class=\"hljs-selector-class\">.split</span> <span class=\"hljs-selector-class\">.preview-pane</span> {\n      <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>;\n    }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"toolbar\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"toggleView('editor')\"</span>&gt;</span>Full Editor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"toggleView('preview')\"</span>&gt;</span>Full Preview<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"toggleView('split')\"</span>&gt;</span>Split Screen<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"saveMarkdown\"</span>&gt;</span>Save<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"editor-container\"</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"viewMode\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"viewMode !== 'preview'\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"editor-pane\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"markdown\"</span> @<span class=\"hljs-attr\">input</span>=<span class=\"hljs-string\">\"renderMarkdown\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"viewMode !== 'editor'\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"preview-pane\"</span> <span class=\"hljs-attr\">v-html</span>=<span class=\"hljs-string\">\"compiledMarkdown\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">import</span> { marked } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://cdn.jsdelivr.net/npm/marked@4.0.16/lib/marked.esm.js'</span>;\n    <span class=\"hljs-keyword\">import</span> { createApp, ref, watch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://cdn.jsdelivr.net/npm/vue@3.2.37/dist/vue.esm-browser.prod.js'</span>;\n\n    <span class=\"hljs-keyword\">const</span> app = createApp({\n      setup() {\n        <span class=\"hljs-keyword\">const</span> initialMarkdown = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'initial-markdown-content'</span>).textContent;\n        <span class=\"hljs-keyword\">const</span> markdown = ref(initialMarkdown);\n        <span class=\"hljs-keyword\">const</span> compiledMarkdown = ref(<span class=\"hljs-string\">''</span>);\n        <span class=\"hljs-keyword\">const</span> viewMode = ref(<span class=\"hljs-string\">'split'</span>);\n\n        <span class=\"hljs-keyword\">const</span> renderMarkdown = <span class=\"hljs-function\">() =&gt;</span> {\n          compiledMarkdown.value = marked(markdown.value, {\n            <span class=\"hljs-attr\">breaks</span>: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-attr\">gfm</span>: <span class=\"hljs-literal\">true</span>\n          });\n          <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n            Prism.highlightAll();\n          }, <span class=\"hljs-number\">0</span>);\n        };\n\n        <span class=\"hljs-keyword\">const</span> toggleView = <span class=\"hljs-function\">(<span class=\"hljs-params\">mode</span>) =&gt;</span> {\n          viewMode.value = mode;\n          <span class=\"hljs-comment\">// Re-apply syntax highlighting when view mode changes</span>\n          <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n            Prism.highlightAll();\n          }, <span class=\"hljs-number\">10</span>);\n        };\n\n        <span class=\"hljs-keyword\">const</span> saveMarkdown = <span class=\"hljs-function\">() =&gt;</span> {\n          FileMaker.PerformScript(<span class=\"hljs-string\">\"Save Note\"</span>, markdown.value);\n        };\n\n        watch(markdown, renderMarkdown, { <span class=\"hljs-attr\">immediate</span>: <span class=\"hljs-literal\">true</span> });\n\n        <span class=\"hljs-comment\">// Also watch viewMode changes to reapply highlighting</span>\n        watch(viewMode, <span class=\"hljs-function\">() =&gt;</span> {\n          <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n            Prism.highlightAll();\n          }, <span class=\"hljs-number\">10</span>);\n        });\n\n        <span class=\"hljs-keyword\">return</span> {\n          markdown,\n          compiledMarkdown,\n          viewMode,\n          toggleView,\n          saveMarkdown,\n          renderMarkdown\n        };\n      }\n    });\n\n    <span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">'DOMContentLoaded'</span>, <span class=\"hljs-function\">() =&gt;</span> {\n      app.mount(<span class=\"hljs-string\">'#app'</span>);\n    });\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- Hidden element with markdown content --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"initial-markdown-content\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display: none;\"</span>&gt;</span>{MARKDOWN_TEXT}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743934534329/d077f23e-80f6-4cb4-bed5-ab22624973f0.gif\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, on to the graph view!</p>\n<h2 id=\"heading-building-json-for-the-graph-view\">Building JSON for the graph view</h2>\n<p>With the Markdown editor, we created an HTML doc and merged in the Markdown text using a placeholder and the <code>Substitute()</code> function. For the graph view, we’ll use the same approach, but we need to merge in JSON data to feed the graph. If your file is hosted on FileMaker server, I highly recommend using the FileMaker Data API to fetch your records as JSON. This is much easier than using a script or calculation, and it’s more efficient because the server handles the load and it does it in a single request, instead of looping through records.</p>\n<p>However, in my case, I’m building this file locally and I wanted others to be able to test it without hosting the file. So we’re gonna do it the hard way with a script.</p>\n<p>Create a new script called Build JSON. Then use a <code>While()</code> loop and <code>ExecuteSQL()</code> to convert your notes into a JSON array.</p>\n<pre><code class=\"lang-plaintext\">Set Variable [ $$noteJson; \n  Value: While (\n    [\n      ~delim = \"|\" ;\n      ~sql = \"SELECT \\\"id\\\", \\\"title\\\", \\\"tags\\\", \\\"project\\\", \\\"created_by\\\" FROM \\\"notes\\\"\" ;\n      ~result = ExecuteSQL ( ~sql ; ~delim; ¶ ) ;\n      ~rowCount = ValueCount ( ~result ) ;\n      ~i = 0 ;\n      ~output = JSONSetElement ( \"\" ; \"\" ; \"[]\" ; JSONString )\n    ] ;\n\n    ~i &lt; ~rowCount ;\n\n    [\n      ~row = GetValue ( ~result ; ~i + 1 ) ;\n      ~fields = Substitute ( ~row ; ~delim ; \"¶\" ) ;\n      ~id = GetValue ( ~fields ; 1 ) ;\n      ~title = GetValue ( ~fields ; 2 ) ;\n      ~tags = GetValue ( ~fields ; 3 ) ;\n      ~project = GetValue ( ~fields ; 4 ) ;\n      ~created_by = GetValue ( ~fields ; 5 ) ;\n\n      ~json = JSONSetElement ( \"{}\" ;\n        [ \"id\" ; ~id ; JSONString ] ;\n        [ \"title\" ; ~title ; JSONString ] ;\n        [ \"tags\" ; ~tags ; JSONString ] ;\n        [ \"project\" ; ~project ; JSONString ] ;\n        [ \"created_by\" ; ~created_by ; JSONString ]\n      ) ;\n\n      ~output = JSONSetElement ( ~output ; \"[\" &amp; ~i &amp; \"]\" ; ~json ; JSONObject ) ;\n      ~i = ~i + 1\n    ] ;\n\n    ~output\n  ) \n]\n\n// Optional: Show result\n// Show Custom Dialog [ Message: $$noteJson; Default Button: “OK”, Commit: “Yes”; Button 2: “Cancel”, Commit: “No” ]\n\nSet Web Viewer [ Object Name: \"webviewer\"; Action: Reload ]\n</code></pre>\n<p>This will save the JSON to a global <code>$$notesJson</code> variable that we can merge into the new web viewer for the graph view. Set this script to run <em>On Record Load</em>, so that the graph view can update whenever records are navigated.</p>\n<p>Alternatively, you can call the FileMaker Data API in your script to get the JSON, then set the global variable.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743935361003/ee0670bd-cfa9-4b5e-acbb-51ebc1d413b7.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-building-the-graph-view-with-visjs\">Building the graph view with Vis.js</h2>\n<p>Next, add a new web viewer, and a text object to store the HTML. Link the web viewer to display the text object content like before, using <code>Get(LayoutObjectAttribute)</code>. Then enter the following code in the text object:</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Basic VisJS Network Example<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-tag\">body</span> {\n      <span class=\"hljs-attribute\">font-family</span>: sans-serif;\n      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n    }\n\n    <span class=\"hljs-selector-id\">#network</span> {\n      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">600px</span>;\n      <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n    }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"network\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-comment\">// Create mock data directly</span>\n    <span class=\"hljs-keyword\">const</span> nodes = <span class=\"hljs-keyword\">new</span> vis.DataSet([\n      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'Node 1'</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#4169E1'</span> },\n      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'Node 2'</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#B8860B'</span> },\n      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'Node 3'</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#3CB371'</span> },\n      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'Node 4'</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#C71585'</span> },\n      { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'Node 5'</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#4169E1'</span> }\n    ]);\n\n    <span class=\"hljs-keyword\">const</span> edges = <span class=\"hljs-keyword\">new</span> vis.DataSet([\n      { <span class=\"hljs-attr\">from</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">to</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'connects to'</span> },\n      { <span class=\"hljs-attr\">from</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">to</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'relates to'</span> },\n      { <span class=\"hljs-attr\">from</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">to</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'depends on'</span> },\n      { <span class=\"hljs-attr\">from</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">to</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'references'</span> },\n      { <span class=\"hljs-attr\">from</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">to</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'links to'</span> }\n    ]);\n\n    <span class=\"hljs-keyword\">const</span> data = {\n      <span class=\"hljs-attr\">nodes</span>: nodes,\n      <span class=\"hljs-attr\">edges</span>: edges\n    };\n\n    <span class=\"hljs-keyword\">const</span> options = {\n      <span class=\"hljs-attr\">nodes</span>: {\n        <span class=\"hljs-attr\">shape</span>: <span class=\"hljs-string\">'dot'</span>,\n        <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">16</span>,\n        <span class=\"hljs-attr\">font</span>: { <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">14</span> }\n      },\n      <span class=\"hljs-attr\">edges</span>: {\n        <span class=\"hljs-attr\">arrows</span>: <span class=\"hljs-string\">'to'</span>,\n        <span class=\"hljs-attr\">font</span>: {\n          <span class=\"hljs-attr\">align</span>: <span class=\"hljs-string\">'middle'</span>\n        }\n      },\n      <span class=\"hljs-attr\">physics</span>: {\n        <span class=\"hljs-attr\">stabilization</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">barnesHut</span>: {\n          <span class=\"hljs-attr\">gravitationalConstant</span>: <span class=\"hljs-number\">-8000</span>,\n          <span class=\"hljs-attr\">springLength</span>: <span class=\"hljs-number\">150</span>,\n          <span class=\"hljs-attr\">springConstant</span>: <span class=\"hljs-number\">0.04</span>\n        }\n      },\n      <span class=\"hljs-attr\">interaction</span>: {\n        <span class=\"hljs-attr\">hover</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">tooltipDelay</span>: <span class=\"hljs-number\">200</span>\n      }\n    };\n\n    <span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'network'</span>);\n    <span class=\"hljs-keyword\">const</span> network = <span class=\"hljs-keyword\">new</span> vis.Network(container, data, options);\n\n    <span class=\"hljs-comment\">// Handle window resize</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resizeNetwork</span>(<span class=\"hljs-params\"></span>) </span>{\n      network.fit();\n    }\n\n    <span class=\"hljs-comment\">// Initial sizing</span>\n    resizeNetwork();\n\n    <span class=\"hljs-comment\">// Add resize event listener</span>\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'resize'</span>, resizeNetwork);\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>This should give you a hard-coded graph with a few nodes connected.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743936036905/77923483-5690-4aa3-a1d8-04e5705b638b.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Notice how the JSON is structured to feed the graph. The nodes have an <code>id</code>, <code>label</code> and <code>color</code>, and the edges have a <code>to</code>, <code>from</code>, and <code>label</code>. But the data we want to graph is in a different format, with JSON describing each note. We can merge in the notes JSON the same way as before, then map over it with JavaScript to create the nodes and edges data.</p>\n<p>Update the web viewer source to merge in the <code>$$notesJson</code> variable:</p>\n<pre><code class=\"lang-plaintext\">Substitute ( \n\n  GetLayoutObjectAttribute ( \"webviewerCode\"; \"content\" );\n  \"NOTE_JSON\";\n  $$noteJson\n\n )\n</code></pre>\n<p>Then update the text object:</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Basic VisJS Network Example<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-tag\">body</span> {\n      <span class=\"hljs-attribute\">font-family</span>: sans-serif;\n    }\n\n    <span class=\"hljs-selector-id\">#network</span> {\n      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">600px</span>;\n      <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n    }\n\n    <span class=\"hljs-selector-class\">.legend</span> {\n      <span class=\"hljs-attribute\">position</span>: absolute;\n      <span class=\"hljs-attribute\">bottom</span>: <span class=\"hljs-number\">20px</span>;\n      <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">20px</span>;\n      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>);\n      <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n      <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;\n      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n    }\n\n    <span class=\"hljs-selector-class\">.legend-title</span> {\n      <span class=\"hljs-attribute\">font-weight</span>: bold;\n      <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">5px</span>;\n      <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n      <span class=\"hljs-attribute\">padding-bottom</span>: <span class=\"hljs-number\">5px</span>;\n    }\n\n    <span class=\"hljs-selector-class\">.legend-item</span> {\n      <span class=\"hljs-attribute\">display</span>: flex;\n      <span class=\"hljs-attribute\">align-items</span>: center;\n      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-selector-class\">.legend-color</span> {\n      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">15px</span>;\n      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">15px</span>;\n      <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">10px</span>;\n      <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">3px</span>;\n    }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"network\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-title\"</span>&gt;</span>Node Types<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-item\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-color\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background-color: #B8860B;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Captain's Log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-item\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-color\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background-color: #4169E1;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Captain<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-item\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-color\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background-color: #3CB371;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Project<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-item\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-color\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background-color: #C71585;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Tag<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">const</span> sampleLogs = {NOTE_JSON};\n\n    <span class=\"hljs-keyword\">const</span> logs = sampleLogs;\n    <span class=\"hljs-keyword\">const</span> nodes = [];\n    <span class=\"hljs-keyword\">const</span> edges = [];\n    <span class=\"hljs-keyword\">const</span> nodeSet = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n\n    <span class=\"hljs-comment\">// Function to handle tags that might be arrays or semicolon-separated strings</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">processTags</span>(<span class=\"hljs-params\">tags</span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(tags)) {\n        <span class=\"hljs-keyword\">return</span> tags;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> tags === <span class=\"hljs-string\">'string'</span>) {\n        <span class=\"hljs-keyword\">return</span> tags.split(<span class=\"hljs-string\">';'</span>).map(<span class=\"hljs-function\"><span class=\"hljs-params\">tag</span> =&gt;</span> tag.trim()).filter(<span class=\"hljs-function\"><span class=\"hljs-params\">tag</span> =&gt;</span> tag !== <span class=\"hljs-string\">''</span>);\n      }\n      <span class=\"hljs-keyword\">return</span> [];\n    }\n\n    logs.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">log, i</span>) =&gt;</span> {\n      <span class=\"hljs-comment\">// Use log.id if available, otherwise use index</span>\n      <span class=\"hljs-keyword\">const</span> logId = <span class=\"hljs-string\">`log-<span class=\"hljs-subst\">${log.id || i}</span>`</span>;\n\n      <span class=\"hljs-comment\">// Add the log node</span>\n      nodes.push({\n        <span class=\"hljs-attr\">id</span>: logId,\n        <span class=\"hljs-attr\">label</span>: log.title,\n        <span class=\"hljs-attr\">shape</span>: <span class=\"hljs-string\">'box'</span>,\n        <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">'log'</span>,\n        <span class=\"hljs-attr\">title</span>: log.title <span class=\"hljs-comment\">// Tooltip on hover</span>\n      });\n\n      <span class=\"hljs-comment\">// Add captain nodes with prefix to prevent collisions with other node types</span>\n      <span class=\"hljs-keyword\">const</span> captainId = <span class=\"hljs-string\">`captain-<span class=\"hljs-subst\">${log.created_by}</span>`</span>;\n      <span class=\"hljs-keyword\">if</span> (!nodeSet.has(captainId)) {\n        nodes.push({\n          <span class=\"hljs-attr\">id</span>: captainId,\n          <span class=\"hljs-attr\">label</span>: log.created_by,\n          <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">'captain'</span>,\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">`Captain: <span class=\"hljs-subst\">${log.created_by}</span>`</span>\n        });\n        nodeSet.add(captainId);\n      }\n      edges.push({ <span class=\"hljs-attr\">from</span>: logId, <span class=\"hljs-attr\">to</span>: captainId, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'author'</span> });\n\n      <span class=\"hljs-comment\">// Add project nodes with prefix</span>\n      <span class=\"hljs-keyword\">const</span> projectId = <span class=\"hljs-string\">`project-<span class=\"hljs-subst\">${log.project}</span>`</span>;\n      <span class=\"hljs-keyword\">if</span> (!nodeSet.has(projectId)) {\n        nodes.push({\n          <span class=\"hljs-attr\">id</span>: projectId,\n          <span class=\"hljs-attr\">label</span>: log.project,\n          <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">'project'</span>,\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">`Project: <span class=\"hljs-subst\">${log.project}</span>`</span>\n        });\n        nodeSet.add(projectId);\n      }\n      edges.push({ <span class=\"hljs-attr\">from</span>: logId, <span class=\"hljs-attr\">to</span>: projectId, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'project'</span> });\n\n      <span class=\"hljs-comment\">// Process tags that might be arrays or semicolon-separated strings</span>\n      <span class=\"hljs-keyword\">const</span> tagArray = processTags(log.tags);\n\n      tagArray.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">tag</span> =&gt;</span> {\n        <span class=\"hljs-comment\">// Add tag nodes with prefix</span>\n        <span class=\"hljs-keyword\">const</span> tagId = <span class=\"hljs-string\">`tag-<span class=\"hljs-subst\">${tag}</span>`</span>;\n        <span class=\"hljs-keyword\">if</span> (!nodeSet.has(tagId)) {\n          nodes.push({\n            <span class=\"hljs-attr\">id</span>: tagId,\n            <span class=\"hljs-attr\">label</span>: tag,\n            <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">'tag'</span>,\n            <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">`Tag: <span class=\"hljs-subst\">${tag}</span>`</span>\n          });\n          nodeSet.add(tagId);\n        }\n        edges.push({ <span class=\"hljs-attr\">from</span>: logId, <span class=\"hljs-attr\">to</span>: tagId, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'tag'</span> });\n      });\n    });\n\n    <span class=\"hljs-keyword\">const</span> data = {\n      <span class=\"hljs-attr\">nodes</span>: <span class=\"hljs-keyword\">new</span> vis.DataSet(nodes),\n      <span class=\"hljs-attr\">edges</span>: <span class=\"hljs-keyword\">new</span> vis.DataSet(edges)\n    };\n\n    <span class=\"hljs-keyword\">const</span> options = {\n      <span class=\"hljs-attr\">nodes</span>: {\n        <span class=\"hljs-attr\">shape</span>: <span class=\"hljs-string\">'dot'</span>,\n        <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">16</span>,\n        <span class=\"hljs-attr\">font</span>: { <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">14</span> }\n      },\n      <span class=\"hljs-attr\">edges</span>: {\n        <span class=\"hljs-attr\">arrows</span>: <span class=\"hljs-string\">'to'</span>,\n        <span class=\"hljs-attr\">font</span>: {\n          <span class=\"hljs-attr\">align</span>: <span class=\"hljs-string\">'middle'</span>\n        }\n      },\n      <span class=\"hljs-attr\">groups</span>: {\n        <span class=\"hljs-attr\">log</span>: { <span class=\"hljs-attr\">shape</span>: <span class=\"hljs-string\">'box'</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#B8860B'</span> },\n        <span class=\"hljs-attr\">captain</span>: { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#4169E1'</span> },\n        <span class=\"hljs-attr\">project</span>: { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#3CB371'</span> },\n        <span class=\"hljs-attr\">tag</span>: { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#C71585'</span> }\n      },\n      <span class=\"hljs-attr\">physics</span>: {\n        <span class=\"hljs-attr\">stabilization</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">barnesHut</span>: {\n          <span class=\"hljs-attr\">gravitationalConstant</span>: <span class=\"hljs-number\">-8000</span>,\n          <span class=\"hljs-attr\">springLength</span>: <span class=\"hljs-number\">150</span>,\n          <span class=\"hljs-attr\">springConstant</span>: <span class=\"hljs-number\">0.04</span>\n        }\n      },\n      <span class=\"hljs-attr\">interaction</span>: {\n        <span class=\"hljs-attr\">hover</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">tooltipDelay</span>: <span class=\"hljs-number\">200</span>\n      }\n    };\n\n    <span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'network'</span>);\n    <span class=\"hljs-keyword\">const</span> network = <span class=\"hljs-keyword\">new</span> vis.Network(container, data, options);\n\n    <span class=\"hljs-comment\">// Handle window resize</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resizeNetwork</span>(<span class=\"hljs-params\"></span>) </span>{\n      network.fit();\n    }\n\n    <span class=\"hljs-comment\">// Initial sizing</span>\n    resizeNetwork();\n\n    <span class=\"hljs-comment\">// Add resize event listener</span>\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'resize'</span>, resizeNetwork);\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>This should give you a network graph based on your actual notes:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743937127498/0fcbb096-7330-4ea1-be54-51f5c392d857.png\" alt class=\"image--center mx-auto\" /></p>\n<p>There’s a bit of JavaScript involved here, and it will be different depending on your field names and how you want to structure the relationships. Just take a sample of your source JSON and the nodes/edges JSON from the hard-coded example, and ask ChatGPT to write a JavaScript function to create the JSON to feed the graph.</p>\n<p>Next, we can add a click event to the notes nodes to navigate to that record in FileMaker:</p>\n<pre><code class=\"lang-javascript\">    <span class=\"hljs-comment\">// Handle node selection</span>\n    network.on(<span class=\"hljs-string\">\"selectNode\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">params</span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (params.nodes.length === <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">const</span> nodeId = params.nodes[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-keyword\">const</span> selectedNode = nodes.find(<span class=\"hljs-function\"><span class=\"hljs-params\">node</span> =&gt;</span> node.id === nodeId);\n\n        <span class=\"hljs-keyword\">if</span> (selectedNode &amp;&amp; selectedNode.group === <span class=\"hljs-string\">'log'</span>) {\n          <span class=\"hljs-comment\">// For log nodes, extract the log ID from the node ID</span>\n          <span class=\"hljs-keyword\">const</span> logIdMatch = nodeId.match(<span class=\"hljs-regexp\">/log-(\\d+)/</span>);\n          <span class=\"hljs-keyword\">if</span> (logIdMatch &amp;&amp; logIdMatch[<span class=\"hljs-number\">1</span>]) {\n            <span class=\"hljs-keyword\">const</span> logId = logIdMatch[<span class=\"hljs-number\">1</span>];\n\n\n            <span class=\"hljs-comment\">// Call FileMaker script with the log ID</span>\n            FileMaker.PerformScript(<span class=\"hljs-string\">\"Select Record\"</span>, logId);\n          }\n        }\n      }\n    });\n</code></pre>\n<p>And add a <em>Select Record</em> script to call when clicking a note:</p>\n<pre><code class=\"lang-plaintext\">Set Variable [ $id; Value:Get(ScriptParameter) ]\nPerform Find [ Specified Find Requests: Find Records; Criteria: notes::id: “$id” ]\n</code></pre>\n<p>Now select a note and you should see FileMaker navigate to that record.</p>\n<p>Here’s the final HTML with some extra CSS to add a gradient and some stars to the background:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1743941065406/6fb9d0bc-9472-43ab-9e5f-2d41986de7bf.gif\" alt class=\"image--center mx-auto\" /></p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Star Trek Captains' Logs Graph<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-tag\">html</span>, <span class=\"hljs-selector-tag\">body</span> {\n      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">font-family</span>: sans-serif;\n      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#050811</span>;\n      <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#e1e6f0</span>;\n      <span class=\"hljs-attribute\">overflow</span>: hidden;\n      <span class=\"hljs-attribute\">position</span>: fixed;\n    }\n\n    <span class=\"hljs-selector-id\">#network</span> {\n      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100vh</span>;\n      <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#212941</span>;\n      <span class=\"hljs-attribute\">position</span>: relative;\n      <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">10</span>;\n      <span class=\"hljs-attribute\">overflow</span>: hidden;\n    }\n\n    <span class=\"hljs-comment\">/* Space background with stars and galaxies */</span>\n    <span class=\"hljs-selector-tag\">body</span><span class=\"hljs-selector-pseudo\">::before</span> {\n      <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">\"\"</span>;\n      <span class=\"hljs-attribute\">position</span>: fixed;\n      <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">background-image</span>: \n        <span class=\"hljs-built_in\">radial-gradient</span>(circle at <span class=\"hljs-number\">20%</span> <span class=\"hljs-number\">35%</span>, rgba(<span class=\"hljs-number\">81</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">157</span>, <span class=\"hljs-number\">0.15</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">50%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(circle at <span class=\"hljs-number\">75%</span> <span class=\"hljs-number\">44%</span>, rgba(<span class=\"hljs-number\">124</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-number\">214</span>, <span class=\"hljs-number\">0.1</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">40%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(circle at <span class=\"hljs-number\">30%</span> <span class=\"hljs-number\">70%</span>, rgba(<span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">216</span>, <span class=\"hljs-number\">0.15</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">45%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(circle at <span class=\"hljs-number\">50%</span> <span class=\"hljs-number\">80%</span>, rgba(<span class=\"hljs-number\">49</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">204</span>, <span class=\"hljs-number\">0.1</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">30%</span>);\n      <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-comment\">/* Star layers with different animations */</span>\n    <span class=\"hljs-selector-class\">.stars</span> {\n      <span class=\"hljs-attribute\">position</span>: fixed;\n      <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">pointer-events</span>: none;\n      <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">5</span>;\n    }\n\n    <span class=\"hljs-selector-class\">.stars-small</span> {\n      <span class=\"hljs-attribute\">background-image</span>: \n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">5%</span> <span class=\"hljs-number\">10%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.9</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">15%</span> <span class=\"hljs-number\">25%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">30%</span> <span class=\"hljs-number\">65%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">37%</span> <span class=\"hljs-number\">22%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">55%</span> <span class=\"hljs-number\">30%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.9</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">75%</span> <span class=\"hljs-number\">55%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">82%</span> <span class=\"hljs-number\">3%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">85%</span> <span class=\"hljs-number\">85%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">95%</span> <span class=\"hljs-number\">45%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">42%</span> <span class=\"hljs-number\">79%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">23%</span> <span class=\"hljs-number\">53%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">63%</span> <span class=\"hljs-number\">76%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.9</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">68%</span> <span class=\"hljs-number\">58%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">74%</span> <span class=\"hljs-number\">92%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">19%</span> <span class=\"hljs-number\">38%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.9</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">26%</span> <span class=\"hljs-number\">89%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> at <span class=\"hljs-number\">8%</span> <span class=\"hljs-number\">76%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>);\n      <span class=\"hljs-attribute\">animation</span>: stars-move-<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">150s</span> linear infinite;\n    }\n\n    <span class=\"hljs-selector-class\">.stars-medium</span> {\n      <span class=\"hljs-attribute\">background-image</span>: \n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1.5px</span> <span class=\"hljs-number\">1.5px</span> at <span class=\"hljs-number\">12%</span> <span class=\"hljs-number\">15%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.9</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1.5px</span> <span class=\"hljs-number\">1.5px</span> at <span class=\"hljs-number\">27%</span> <span class=\"hljs-number\">38%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1.5px</span> <span class=\"hljs-number\">1.5px</span> at <span class=\"hljs-number\">43%</span> <span class=\"hljs-number\">59%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1.5px</span> <span class=\"hljs-number\">1.5px</span> at <span class=\"hljs-number\">48%</span> <span class=\"hljs-number\">42%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.9</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1.5px</span> <span class=\"hljs-number\">1.5px</span> at <span class=\"hljs-number\">58%</span> <span class=\"hljs-number\">12%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1.5px</span> <span class=\"hljs-number\">1.5px</span> at <span class=\"hljs-number\">73%</span> <span class=\"hljs-number\">25%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1.5px</span> <span class=\"hljs-number\">1.5px</span> at <span class=\"hljs-number\">88%</span> <span class=\"hljs-number\">54%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.9</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1.5px</span> <span class=\"hljs-number\">1.5px</span> at <span class=\"hljs-number\">94%</span> <span class=\"hljs-number\">77%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1.5px</span> <span class=\"hljs-number\">1.5px</span> at <span class=\"hljs-number\">83%</span> <span class=\"hljs-number\">93%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1.5px</span> <span class=\"hljs-number\">1.5px</span> at <span class=\"hljs-number\">32%</span> <span class=\"hljs-number\">82%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1.5px</span> <span class=\"hljs-number\">1.5px</span> at <span class=\"hljs-number\">17%</span> <span class=\"hljs-number\">67%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1.5px</span> <span class=\"hljs-number\">1.5px</span> at <span class=\"hljs-number\">71%</span> <span class=\"hljs-number\">33%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">1.5px</span> <span class=\"hljs-number\">1.5px</span> at <span class=\"hljs-number\">63%</span> <span class=\"hljs-number\">64%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.9</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>);\n      <span class=\"hljs-attribute\">animation</span>: stars-move-<span class=\"hljs-number\">2</span> <span class=\"hljs-number\">120s</span> linear infinite;\n    }\n\n    <span class=\"hljs-selector-class\">.stars-large</span> {\n      <span class=\"hljs-attribute\">background-image</span>: \n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> at <span class=\"hljs-number\">20%</span> <span class=\"hljs-number\">30%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.9</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> at <span class=\"hljs-number\">40%</span> <span class=\"hljs-number\">70%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> at <span class=\"hljs-number\">60%</span> <span class=\"hljs-number\">20%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> at <span class=\"hljs-number\">70%</span> <span class=\"hljs-number\">90%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.9</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> at <span class=\"hljs-number\">90%</span> <span class=\"hljs-number\">40%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> at <span class=\"hljs-number\">10%</span> <span class=\"hljs-number\">60%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> at <span class=\"hljs-number\">30%</span> <span class=\"hljs-number\">95%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.9</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> at <span class=\"hljs-number\">85%</span> <span class=\"hljs-number\">15%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> at <span class=\"hljs-number\">55%</span> <span class=\"hljs-number\">55%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>);\n      <span class=\"hljs-attribute\">animation</span>: stars-move-<span class=\"hljs-number\">3</span> <span class=\"hljs-number\">80s</span> linear infinite;\n    }\n\n    <span class=\"hljs-comment\">/* Bright \"twinkle\" stars */</span>\n    <span class=\"hljs-selector-class\">.stars-twinkle</span> {\n      <span class=\"hljs-attribute\">background-image</span>: \n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2.5px</span> <span class=\"hljs-number\">2.5px</span> at <span class=\"hljs-number\">15%</span> <span class=\"hljs-number\">23%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.9</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2.5px</span> <span class=\"hljs-number\">2.5px</span> at <span class=\"hljs-number\">36%</span> <span class=\"hljs-number\">45%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2.5px</span> <span class=\"hljs-number\">2.5px</span> at <span class=\"hljs-number\">58%</span> <span class=\"hljs-number\">16%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2.5px</span> <span class=\"hljs-number\">2.5px</span> at <span class=\"hljs-number\">76%</span> <span class=\"hljs-number\">62%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.9</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2.5px</span> <span class=\"hljs-number\">2.5px</span> at <span class=\"hljs-number\">33%</span> <span class=\"hljs-number\">86%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2.5px</span> <span class=\"hljs-number\">2.5px</span> at <span class=\"hljs-number\">88%</span> <span class=\"hljs-number\">33%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>);\n      <span class=\"hljs-attribute\">animation</span>: stars-twinkle <span class=\"hljs-number\">10s</span> ease-in-out infinite;\n    }\n\n    <span class=\"hljs-comment\">/* Colorful distant stars */</span>\n    <span class=\"hljs-selector-class\">.stars-color</span> {\n      <span class=\"hljs-attribute\">background-image</span>: \n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> at <span class=\"hljs-number\">25%</span> <span class=\"hljs-number\">40%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">204</span>, <span class=\"hljs-number\">204</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> at <span class=\"hljs-number\">45%</span> <span class=\"hljs-number\">20%</span>, rgba(<span class=\"hljs-number\">204</span>, <span class=\"hljs-number\">204</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> at <span class=\"hljs-number\">65%</span> <span class=\"hljs-number\">45%</span>, rgba(<span class=\"hljs-number\">204</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">204</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> at <span class=\"hljs-number\">85%</span> <span class=\"hljs-number\">75%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">204</span>, <span class=\"hljs-number\">0.8</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>),\n        <span class=\"hljs-built_in\">radial-gradient</span>(<span class=\"hljs-number\">2px</span> <span class=\"hljs-number\">2px</span> at <span class=\"hljs-number\">22%</span> <span class=\"hljs-number\">75%</span>, rgba(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">204</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.7</span>) <span class=\"hljs-number\">0%</span>, transparent <span class=\"hljs-number\">100%</span>);\n      <span class=\"hljs-attribute\">animation</span>: stars-move-<span class=\"hljs-number\">4</span> <span class=\"hljs-number\">180s</span> linear infinite;\n    }\n\n    <span class=\"hljs-keyword\">@keyframes</span> stars-move-<span class=\"hljs-number\">1</span> {\n      0% { <span class=\"hljs-attribute\">background-position</span>: <span class=\"hljs-number\">0%</span> <span class=\"hljs-number\">0%</span>; }\n      100% { <span class=\"hljs-attribute\">background-position</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">100%</span>; }\n    }\n\n    <span class=\"hljs-keyword\">@keyframes</span> stars-move-<span class=\"hljs-number\">2</span> {\n      0% { <span class=\"hljs-attribute\">background-position</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">0%</span>; }\n      100% { <span class=\"hljs-attribute\">background-position</span>: <span class=\"hljs-number\">0%</span> <span class=\"hljs-number\">100%</span>; }\n    }\n\n    <span class=\"hljs-keyword\">@keyframes</span> stars-move-<span class=\"hljs-number\">3</span> {\n      0% { <span class=\"hljs-attribute\">background-position</span>: <span class=\"hljs-number\">50%</span> <span class=\"hljs-number\">0%</span>; }\n      100% { <span class=\"hljs-attribute\">background-position</span>: <span class=\"hljs-number\">50%</span> <span class=\"hljs-number\">100%</span>; }\n    }\n\n    <span class=\"hljs-keyword\">@keyframes</span> stars-move-<span class=\"hljs-number\">4</span> {\n      0% { <span class=\"hljs-attribute\">background-position</span>: <span class=\"hljs-number\">0%</span> <span class=\"hljs-number\">50%</span>; }\n      100% { <span class=\"hljs-attribute\">background-position</span>: <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">50%</span>; }\n    }\n\n    <span class=\"hljs-keyword\">@keyframes</span> stars-twinkle {\n      0%, 100% { <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0.2</span>; }\n      50% { <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0.9</span>; }\n    }\n\n    <span class=\"hljs-comment\">/* Legend styles */</span>\n    <span class=\"hljs-selector-class\">.legend</span> {\n      <span class=\"hljs-attribute\">position</span>: absolute;\n      <span class=\"hljs-attribute\">bottom</span>: <span class=\"hljs-number\">20px</span>;\n      <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">20px</span>;\n      <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">0.8</span>);\n      <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#212941</span>;\n      <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">5px</span>;\n      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n      <span class=\"hljs-attribute\">color</span>: white;\n      <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">100</span>;\n      <span class=\"hljs-attribute\">box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">10px</span> <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.5</span>);\n    }\n\n    <span class=\"hljs-selector-class\">.legend-title</span> {\n      <span class=\"hljs-attribute\">font-weight</span>: bold;\n      <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">5px</span>;\n      <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#3A4366</span>;\n      <span class=\"hljs-attribute\">padding-bottom</span>: <span class=\"hljs-number\">5px</span>;\n    }\n\n    <span class=\"hljs-selector-class\">.legend-item</span> {\n      <span class=\"hljs-attribute\">display</span>: flex;\n      <span class=\"hljs-attribute\">align-items</span>: center;\n      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-selector-class\">.legend-color</span> {\n      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">15px</span>;\n      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">15px</span>;\n      <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">10px</span>;\n      <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">3px</span>;\n    }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"network\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n  <span class=\"hljs-comment\">&lt;!-- Star layers --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"stars stars-small\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"stars stars-medium\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"stars stars-large\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"stars stars-twinkle\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"stars stars-color\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-title\"</span>&gt;</span>Node Types<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-item\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-color\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background-color: #B8860B;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Captain's Log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-item\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-color\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background-color: #4169E1;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Captain<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-item\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-color\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background-color: #3CB371;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Project<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-item\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"legend-color\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background-color: #C71585;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Tag<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-comment\">// Get input data from FileMaker or use sample data</span>\n    <span class=\"hljs-keyword\">let</span> logs = NOTE_JSON;\n\n    <span class=\"hljs-comment\">// Handle FileMaker data if available</span>\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-comment\">// FileMaker WebViewer will set this variable</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> FileMakerData !== <span class=\"hljs-string\">'undefined'</span> &amp;&amp; FileMakerData) {\n        logs = <span class=\"hljs-built_in\">JSON</span>.parse(FileMakerData);\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Using FileMaker data:\"</span>, logs);\n      }\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n      <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">\"Error parsing FileMaker JSON data:\"</span>, e);\n      alert(<span class=\"hljs-string\">\"Error parsing data from FileMaker: \"</span> + e.message);\n    }\n\n    <span class=\"hljs-keyword\">const</span> nodes = [];\n    <span class=\"hljs-keyword\">const</span> edges = [];\n    <span class=\"hljs-keyword\">const</span> nodeSet = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n\n    <span class=\"hljs-comment\">// Function to handle tags that might be arrays or semicolon-separated strings</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">processTags</span>(<span class=\"hljs-params\">tags</span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(tags)) {\n        <span class=\"hljs-keyword\">return</span> tags;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> tags === <span class=\"hljs-string\">'string'</span>) {\n        <span class=\"hljs-keyword\">return</span> tags.split(<span class=\"hljs-string\">';'</span>).map(<span class=\"hljs-function\"><span class=\"hljs-params\">tag</span> =&gt;</span> tag.trim()).filter(<span class=\"hljs-function\"><span class=\"hljs-params\">tag</span> =&gt;</span> tag !== <span class=\"hljs-string\">''</span>);\n      }\n      <span class=\"hljs-keyword\">return</span> [];\n    }\n\n    logs.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">log, i</span>) =&gt;</span> {\n      <span class=\"hljs-comment\">// Use log.id if available, otherwise use index</span>\n      <span class=\"hljs-keyword\">const</span> logId = <span class=\"hljs-string\">`log-<span class=\"hljs-subst\">${log.id || i}</span>`</span>;\n\n      <span class=\"hljs-comment\">// Add the log node</span>\n      nodes.push({ \n        <span class=\"hljs-attr\">id</span>: logId, \n        <span class=\"hljs-attr\">label</span>: log.title, \n        <span class=\"hljs-attr\">shape</span>: <span class=\"hljs-string\">'box'</span>, \n        <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">'log'</span>,\n        <span class=\"hljs-attr\">title</span>: log.title <span class=\"hljs-comment\">// Tooltip on hover</span>\n      });\n\n      <span class=\"hljs-comment\">// Add captain nodes with prefix to prevent collisions with other node types</span>\n      <span class=\"hljs-keyword\">const</span> captainId = <span class=\"hljs-string\">`captain-<span class=\"hljs-subst\">${log.created_by}</span>`</span>;\n      <span class=\"hljs-keyword\">if</span> (!nodeSet.has(captainId)) {\n        nodes.push({ \n          <span class=\"hljs-attr\">id</span>: captainId, \n          <span class=\"hljs-attr\">label</span>: log.created_by, \n          <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">'captain'</span>,\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">`Captain: <span class=\"hljs-subst\">${log.created_by}</span>`</span>\n        });\n        nodeSet.add(captainId);\n      }\n      edges.push({ <span class=\"hljs-attr\">from</span>: logId, <span class=\"hljs-attr\">to</span>: captainId, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'author'</span> });\n\n      <span class=\"hljs-comment\">// Add project nodes with prefix</span>\n      <span class=\"hljs-keyword\">const</span> projectId = <span class=\"hljs-string\">`project-<span class=\"hljs-subst\">${log.project}</span>`</span>;\n      <span class=\"hljs-keyword\">if</span> (!nodeSet.has(projectId)) {\n        nodes.push({ \n          <span class=\"hljs-attr\">id</span>: projectId, \n          <span class=\"hljs-attr\">label</span>: log.project, \n          <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">'project'</span>,\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">`Project: <span class=\"hljs-subst\">${log.project}</span>`</span>\n        });\n        nodeSet.add(projectId);\n      }\n      edges.push({ <span class=\"hljs-attr\">from</span>: logId, <span class=\"hljs-attr\">to</span>: projectId, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'project'</span> });\n\n      <span class=\"hljs-comment\">// Process tags that might be arrays or semicolon-separated strings</span>\n      <span class=\"hljs-keyword\">const</span> tagArray = processTags(log.tags);\n\n      tagArray.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">tag</span> =&gt;</span> {\n        <span class=\"hljs-comment\">// Add tag nodes with prefix</span>\n        <span class=\"hljs-keyword\">const</span> tagId = <span class=\"hljs-string\">`tag-<span class=\"hljs-subst\">${tag}</span>`</span>;\n        <span class=\"hljs-keyword\">if</span> (!nodeSet.has(tagId)) {\n          nodes.push({ \n            <span class=\"hljs-attr\">id</span>: tagId, \n            <span class=\"hljs-attr\">label</span>: tag, \n            <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">'tag'</span>,\n            <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">`Tag: <span class=\"hljs-subst\">${tag}</span>`</span>\n          });\n          nodeSet.add(tagId);\n        }\n        edges.push({ <span class=\"hljs-attr\">from</span>: logId, <span class=\"hljs-attr\">to</span>: tagId, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">'tag'</span> });\n      });\n    });\n\n    <span class=\"hljs-keyword\">const</span> data = {\n      <span class=\"hljs-attr\">nodes</span>: <span class=\"hljs-keyword\">new</span> vis.DataSet(nodes),\n      <span class=\"hljs-attr\">edges</span>: <span class=\"hljs-keyword\">new</span> vis.DataSet(edges)\n    };\n\n    <span class=\"hljs-keyword\">const</span> options = {\n      <span class=\"hljs-attr\">nodes</span>: {\n        <span class=\"hljs-attr\">shape</span>: <span class=\"hljs-string\">'dot'</span>,\n        <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">16</span>,\n        <span class=\"hljs-attr\">font</span>: { <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">14</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#FFFFFF'</span> }\n      },\n      <span class=\"hljs-attr\">edges</span>: {\n        <span class=\"hljs-attr\">arrows</span>: <span class=\"hljs-string\">'to'</span>,\n        <span class=\"hljs-attr\">font</span>: { \n          <span class=\"hljs-attr\">align</span>: <span class=\"hljs-string\">'middle'</span>, \n          <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#FFFFFF'</span>,\n          <span class=\"hljs-attr\">strokeWidth</span>: <span class=\"hljs-number\">0</span>,\n          <span class=\"hljs-attr\">background</span>: {\n            <span class=\"hljs-attr\">enabled</span>: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'rgba(10, 14, 23, 0.7)'</span>,\n            <span class=\"hljs-attr\">size</span>: <span class=\"hljs-number\">5</span>\n          }\n        },\n        <span class=\"hljs-attr\">color</span>: { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#3A4366'</span>, <span class=\"hljs-attr\">hover</span>: <span class=\"hljs-string\">'#5A6386'</span> }\n      },\n      <span class=\"hljs-attr\">groups</span>: {\n        <span class=\"hljs-attr\">log</span>: { <span class=\"hljs-attr\">shape</span>: <span class=\"hljs-string\">'box'</span>, <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#B8860B'</span>, <span class=\"hljs-attr\">font</span>: { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#FFFFFF'</span> } },\n        <span class=\"hljs-attr\">captain</span>: { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#4169E1'</span>, <span class=\"hljs-attr\">font</span>: { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#FFFFFF'</span> } },\n        <span class=\"hljs-attr\">project</span>: { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#3CB371'</span>, <span class=\"hljs-attr\">font</span>: { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#FFFFFF'</span> } },\n        <span class=\"hljs-attr\">tag</span>: { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#C71585'</span>, <span class=\"hljs-attr\">font</span>: { <span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">'#FFFFFF'</span> } }\n      },\n      <span class=\"hljs-attr\">physics</span>: {\n        <span class=\"hljs-attr\">stabilization</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">barnesHut</span>: {\n          <span class=\"hljs-attr\">gravitationalConstant</span>: <span class=\"hljs-number\">-8000</span>,\n          <span class=\"hljs-attr\">springLength</span>: <span class=\"hljs-number\">150</span>,\n          <span class=\"hljs-attr\">springConstant</span>: <span class=\"hljs-number\">0.04</span>\n        }\n      },\n      <span class=\"hljs-attr\">interaction</span>: {\n        <span class=\"hljs-attr\">hover</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">tooltipDelay</span>: <span class=\"hljs-number\">200</span>\n      }\n    };\n\n    <span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'network'</span>);\n    <span class=\"hljs-keyword\">const</span> network = <span class=\"hljs-keyword\">new</span> vis.Network(container, data, options);\n\n    <span class=\"hljs-comment\">// Handle window resize</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resizeNetwork</span>(<span class=\"hljs-params\"></span>) </span>{\n      network.setSize(<span class=\"hljs-string\">'100%'</span>, <span class=\"hljs-built_in\">window</span>.innerHeight + <span class=\"hljs-string\">'px'</span>);\n      network.fit({\n        <span class=\"hljs-attr\">animation</span>: {\n          <span class=\"hljs-attr\">duration</span>: <span class=\"hljs-number\">500</span>,\n          <span class=\"hljs-attr\">easingFunction</span>: <span class=\"hljs-string\">'easeInOutQuad'</span>\n        }\n      });\n    }\n\n    <span class=\"hljs-comment\">// Initial sizing</span>\n    resizeNetwork();\n\n    <span class=\"hljs-comment\">// Add resize event listener</span>\n    <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'resize'</span>, resizeNetwork);\n\n    <span class=\"hljs-comment\">// Handle node selection</span>\n    network.on(<span class=\"hljs-string\">\"selectNode\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">params</span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (params.nodes.length === <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">const</span> nodeId = params.nodes[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-keyword\">const</span> selectedNode = nodes.find(<span class=\"hljs-function\"><span class=\"hljs-params\">node</span> =&gt;</span> node.id === nodeId);\n\n        <span class=\"hljs-keyword\">if</span> (selectedNode &amp;&amp; selectedNode.group === <span class=\"hljs-string\">'log'</span>) {\n          <span class=\"hljs-comment\">// For log nodes, extract the log ID from the node ID</span>\n          <span class=\"hljs-keyword\">const</span> logIdMatch = nodeId.match(<span class=\"hljs-regexp\">/log-(\\d+)/</span>);\n          <span class=\"hljs-keyword\">if</span> (logIdMatch &amp;&amp; logIdMatch[<span class=\"hljs-number\">1</span>]) {\n            <span class=\"hljs-keyword\">const</span> logId = logIdMatch[<span class=\"hljs-number\">1</span>];\n\n\n            <span class=\"hljs-comment\">// Call FileMaker script with the log ID</span>\n            FileMaker.PerformScript(<span class=\"hljs-string\">\"Select Record\"</span>, logId);\n          }\n        }\n      }\n    });\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>This should give you a good starting point for building your own network graph and markdown editor. From here you can update the logic based on your fields and create edges (relationships) using backlinks, like in Obsidian, or create a knowledge graph using <a target=\"_blank\" href=\"https://blog.greenflux.us/named-entity-recognition-with-bert-and-hugging-face\">NER (named-entity recognition)</a>.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Web viewers in FileMaker Pro are a great way to extend the platform and add new features like a Markdown editor and network graph. Like all the other apps in my <a target=\"_blank\" href=\"https://github.com/GreenFluxLLC/FileMaker-Experiments\">FileMaker-Experiments</a> repository, this app is meant to be a proof-of-concept and a starting point, not a complete app. There’s a lot more you could do from here, like outputting the Markdown to PDF, sending it as an email, or adding hover effects and popups to the network graph. Feel free to copy the app and modify for your own use case.</p>\n","contentMarkdown":"Markdown is used widely in programming, documentation, content creation, GitHub, and lots of other areas in tech. One of the most popular Markdown editors is Obsidian, a note taking app with an interesting graph view that shows how all of your notes are connected.\n\n![Obsidian](https://obsidian.md/images/screenshot-1.0-hero-combo.png align=\"left\")\n\nThe graph view is interactive and allows you to navigate through notes and see how they are connected to other records.\n\nIn this guide, I’ll show how to build a Markdown editor in FileMaker Pro, and generate an interactive network graph of the notes to explore your data.\n\n**This guide will cover:**\n\n* Building a Markdown Editor in a Web Viewer with Marked.js\n    \n* Adding support for syntax highlighting code blocks with Prism.js\n    \n* Building JSON to feed the graph view\n    \n* Building the graph view with Vis.js\n    \n\n*Here’s a quick preview of the finished app*\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1743928386754/ad050eb7-0ccf-4ba6-a519-9f305cca2b66.png align=\"center\")\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1743928389807/1ff06725-4565-4cfb-add3-d43d48df466f.png align=\"center\")\n\nAt first I was just going to build a basic Markdown editor and I needed some mock data. I had ChatGPT generate some Captain’s Log entries from Star Trek, and then I got a bit carried away and decided to recreate the LCARS display! 🖖\n\nThen I thought the network graph from Obsidian could work well with it, and look kind of like a system of planets. This was a bit more than I originally planned on doing for this Markdown editor tutorial, but it sounded like a fun challenge. Now that I have it working, I wanted to share a guide on how to build your own.\n\n**Ready to dive in? *Let’s get started!***\n\n(*Wanna skip the tutorial, and just copy the finished app?* 👉 [GitHub Repo](https://github.com/GreenFluxLLC/FileMaker-Experiments))\n\n## Building a Markdown Editor with Marked.js\n\nBuilding a Markdown editor from scratch may sound complex, but the [Marked.js](https://www.jsdelivr.com/package/npm/marked) library makes it quite easy to set up. Just import the library and select an element, then set the innerHTML to `marked.parse()`, passing in your Markdown text.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1743929430781/b416458b-b3fa-4b95-94a3-accbad53c43f.png align=\"center\")\n\nMarked.js displays the compiled Markdown, given an input of raw Markdown text. To build an editor, you need an input or text area to feed it.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1743929822377/c481a03e-7008-4be0-a71b-ed1360380a29.png align=\"center\")\n\nFirst let’s set up a basic web viewer in FileMaker with Marked.js. There are lots of ways to provide the HTML to the web viewer, like entering it directly in the web viewer source field, storing it in a text field, or using a text layout object. I prefer to use the layout object method, as it avoids the issues with quotes when entering directly in the web viewer source, and avoids creating new fields.\n\nPaste the following code into a new text object, off to the side of the layout where it won’t appear on the screen. Name the object `webviewerCode` so we can reference it in the next step.\n\n```xml\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Marked.js Live Preview</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"></script>\n  <style>\n    body { font-family: sans-serif; display: flex; gap: 2rem; padding: 1rem; }\n    textarea { width: 45%; height: 90vh; font-family: monospace; }\n    #preview { width: 45%; height: 90vh; overflow-y: auto; border: 1px solid #ccc; padding: 1rem; }\n  </style>\n</head>\n<body>\n  <textarea id=\"input\"># Sample Markdown\n\n- **Bold item**\n- _Italic item_\n- [Link](https://example.com)\n\n</textarea>\n\n  <div id=\"preview\"></div>\n\n  <script>\n    const input = document.getElementById('input')\n    const preview = document.getElementById('preview')\n\n    const renderMarkdown = () => {\n      preview.innerHTML = marked.parse(input.value)\n    }\n\n    input.addEventListener('input', renderMarkdown)\n    renderMarkdown() // Initial render\n  </script>\n</body>\n</html>\n```\n\nThen add a web viewer and set the source to:\n\n```plaintext\nGetLayoutObjectAttribute ( \"webviewerCode\"; \"content\" )\n```\n\nYou should now see a text area for the input and a live preview of the Markdown.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1743930664181/641c8fe8-7f51-433b-b277-fd3896c8ccaf.png align=\"center\")\n\n### Preloading the Editor Content from FMP Records\n\nNext we want to populate the editor from field data in FileMaker. In my case I’m using a `notes` table with a `body` field. Update the webviewerCode text object to insert a placeholder that can be used to insert the body.\n\n```xml\n  <textarea id=\"input\">{MARKDOWN_TEXT}</textarea>\n```\n\nThen update the web viewer source to insert the body field.\n\n```plaintext\nSubstitute ( \n\n  GetLayoutObjectAttribute ( \"webviewerCode\"; \"content\" );  // source text\n  \"{MARKDOWN_TEXT}\";  //  search value\n  notes::body         //  replace value\n\n )\n```\n\nYou should now be able to view Markdown from the `notes::body` field. You can also edit the Markdown and see it update in real-time on the preview pane. But there’s no way to save it yet!\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1743931647809/dcdd8a0c-d745-409c-a97a-7550b4888e57.png align=\"center\")\n\n### Saving the Markdown\n\nNext, add a **Save** button to the HTML in the `webviewerCode` object, and set it to run a FileMaker script called *Save Note*, which we’ll create in the next step.\n\n```xml\n   <button onclick=\"saveMarkdown()\">Save</button>\n\n  <script>\n    const input = document.getElementById('input')\n    const preview = document.getElementById('preview')\n\n    const renderMarkdown = () => {\n      preview.innerHTML = marked.parse(input.value)\n    }\n\n    const saveMarkdown = () => {\n      FileMaker.PerformScript(\"Save Note\", input.value)\n    }\n\n    input.addEventListener('input', renderMarkdown)\n    renderMarkdown() // Initial render\n  </script>\n```\n\nThen create the *Save Note* script in FileMaker Pro.\n\n```plaintext\nSet Variable [ $markdown; Value:Get(ScriptParameter) ]\nSet Field [ notes::body; $markdown ]\n```\n\nReturn to Browse Mode and test it out! You should now be able to save the note.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1743932595390/452f80cc-f46a-4d7c-9d43-d96db74628d8.gif align=\"center\")\n\n## Adding syntax highlighting with Prism.js\n\nNext we’ll add [Prism.js](https://www.jsdelivr.com/package/npm/prismjs) for syntax highlighting of code blocks. Import the library and use the `Prism.highlightAll()` method to automatically detect and highlight all code blocks on the page. Here’s an updated version of the complete HTML so far:\n\n```xml\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Marked.js Live Preview</title>\n\n  <script src=\"https://cdn.jsdelivr.net/npm/marked/marked.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.css\" />\n\n  <style>\n    body { font-family: sans-serif; display: flex; gap: 2rem; padding: 1rem; }\n    textarea { width: 45%; height: 90vh; font-family: monospace; }\n    #preview { width: 45%; height: 90vh; overflow-y: auto; border: 1px solid #ccc; padding: 1rem; }\n    pre { background: #f5f5f5; padding: 10px; overflow-x: auto; }\n    code { font-family: monospace; }\n  </style>\n</head>\n<body>\n  <textarea id=\"input\">{MARKDOWN_TEXT}</textarea>\n\n  <div id=\"preview\"></div>\n\n  <button onclick=\"saveMarkdown()\">Save</button>\n\n  <script>\n    const input = document.getElementById('input')\n    const preview = document.getElementById('preview')\n\n    const renderMarkdown = () => {\n      preview.innerHTML = marked.parse(input.value)\n      Prism.highlightAll()\n    }\n\n    const saveMarkdown = () => {\n      FileMaker.PerformScript(\"Save Note\", input.value)\n    }\n\n    input.addEventListener('input', renderMarkdown)\n    renderMarkdown()\n  </script>\n</body>\n</html>\n```\n\nNow enter some Markdown with a code block. Include the language to ensure the correct formatting is applied.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1743933188159/55960a60-2f12-43c6-a4c2-8750e54e4c08.png align=\"center\")\n\nOk, you can preload the editor, save the current value, and display syntax highlighting. The basics are working. From here you can use your framework and libraries of choice style the UI.\n\nHere’s a more complete version using Vue3, with separate modes for Full Editor, Full Preview, and Split Screen.\n\n```xml\n<!DOCTYPE html><html lang=\"en\"><head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>Markdown Editor</title>\n  <!-- Vue & Marked -->\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@3.2.37/dist/vue.global.prod.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/marked@4.0.16/lib/marked.esm.js\" type=\"module\"></script>\n  <!-- Prism.js (Dark Theme) -->\n  <script src=\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.min.js\"></script>\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.css\">\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      margin: 0;\n      padding: 0;\n      background-color: #000;\n    }\n    *, *::before, *::after {\n      box-sizing: border-box;\n    }\n    .toolbar {\n      display: flex;\n      justify-content: center;\n      background-color: #222;\n      padding: 10px;\n      gap: 10px;\n    }\n    .toolbar button {\n      color: #000;\n      border: none;\n      padding: 10px;\n      font-weight: bold;\n      cursor: pointer;\n    }\n    .toolbar button:nth-child(1) { background: #9944ff; }\n    .toolbar button:nth-child(2) { background: #dd4445; }\n    .toolbar button:nth-child(3) { background: #7687fe; }\n    .toolbar button:nth-child(4) { background: #ff7706; }\n    .editor-container {\n      display: flex;\n      width: 100%;\n      height: calc(100vh - 50px);\n    }\n    .editor-pane, .preview-pane {\n      flex: 1;\n      padding: 20px;\n      overflow-y: auto;\n      background-color: #121212;\n    }\n    /* Preserve Prism token colors */\n    .preview-pane :not(pre):not(code) {\n      color: #f0f0f0;\n    }\n    .editor-pane {\n      border-right: 1px solid #333;\n    }\n    textarea {\n      width: 100%;\n      height: 100%;\n      font-size: 1rem;\n      padding: 10px;\n      background: #1e1e1e;\n      color: #fff;\n      border: none;\n      resize: none;\n    }\n    pre {\n      background: #1e1e1e;\n      padding: 10px;\n      overflow-x: auto;\n    }\n    .preview-pane ul,\n    .preview-pane ol {\n      margin: 1em 0;\n      padding-left: 40px;\n    }\n    .preview-pane ul {\n      list-style-type: disc;\n    }\n    .preview-pane ol {\n      list-style-type: decimal;\n    }\n    .editor-container.editor .preview-pane {\n      display: none;\n    }\n    .editor-container.preview .editor-pane {\n      display: none;\n    }\n    .editor-container.split .editor-pane,\n    .editor-container.split .preview-pane {\n      flex: 1;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"app\">\n    <div class=\"toolbar\">\n      <button @click=\"toggleView('editor')\">Full Editor</button>\n      <button @click=\"toggleView('preview')\">Full Preview</button>\n      <button @click=\"toggleView('split')\">Split Screen</button>\n      <button @click=\"saveMarkdown\">Save</button>\n    </div>\n    <div class=\"editor-container\" :class=\"viewMode\">\n      <div v-if=\"viewMode !== 'preview'\" class=\"editor-pane\">\n        <textarea v-model=\"markdown\" @input=\"renderMarkdown\"></textarea>\n      </div>\n      <div v-if=\"viewMode !== 'editor'\" class=\"preview-pane\" v-html=\"compiledMarkdown\"></div>\n    </div>\n  </div>\n  <script type=\"module\">\n    import { marked } from 'https://cdn.jsdelivr.net/npm/marked@4.0.16/lib/marked.esm.js';\n    import { createApp, ref, watch } from 'https://cdn.jsdelivr.net/npm/vue@3.2.37/dist/vue.esm-browser.prod.js';\n\n    const app = createApp({\n      setup() {\n        const initialMarkdown = document.getElementById('initial-markdown-content').textContent;\n        const markdown = ref(initialMarkdown);\n        const compiledMarkdown = ref('');\n        const viewMode = ref('split');\n\n        const renderMarkdown = () => {\n          compiledMarkdown.value = marked(markdown.value, {\n            breaks: true,\n            gfm: true\n          });\n          setTimeout(() => {\n            Prism.highlightAll();\n          }, 0);\n        };\n\n        const toggleView = (mode) => {\n          viewMode.value = mode;\n          // Re-apply syntax highlighting when view mode changes\n          setTimeout(() => {\n            Prism.highlightAll();\n          }, 10);\n        };\n\n        const saveMarkdown = () => {\n          FileMaker.PerformScript(\"Save Note\", markdown.value);\n        };\n\n        watch(markdown, renderMarkdown, { immediate: true });\n        \n        // Also watch viewMode changes to reapply highlighting\n        watch(viewMode, () => {\n          setTimeout(() => {\n            Prism.highlightAll();\n          }, 10);\n        });\n\n        return {\n          markdown,\n          compiledMarkdown,\n          viewMode,\n          toggleView,\n          saveMarkdown,\n          renderMarkdown\n        };\n      }\n    });\n\n    document.addEventListener('DOMContentLoaded', () => {\n      app.mount('#app');\n    });\n  </script>\n  <!-- Hidden element with markdown content -->\n  <div id=\"initial-markdown-content\" style=\"display: none;\">{MARKDOWN_TEXT}</div>\n</body>\n</html>\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1743934534329/d077f23e-80f6-4cb4-bed5-ab22624973f0.gif align=\"center\")\n\nOk, on to the graph view!\n\n## Building JSON for the graph view\n\nWith the Markdown editor, we created an HTML doc and merged in the Markdown text using a placeholder and the `Substitute()` function. For the graph view, we’ll use the same approach, but we need to merge in JSON data to feed the graph. If your file is hosted on FileMaker server, I highly recommend using the FileMaker Data API to fetch your records as JSON. This is much easier than using a script or calculation, and it’s more efficient because the server handles the load and it does it in a single request, instead of looping through records.\n\nHowever, in my case, I’m building this file locally and I wanted others to be able to test it without hosting the file. So we’re gonna do it the hard way with a script.\n\nCreate a new script called Build JSON. Then use a `While()` loop and `ExecuteSQL()` to convert your notes into a JSON array.\n\n```plaintext\nSet Variable [ $$noteJson; \n  Value: While (\n    [\n      ~delim = \"|\" ;\n      ~sql = \"SELECT \\\"id\\\", \\\"title\\\", \\\"tags\\\", \\\"project\\\", \\\"created_by\\\" FROM \\\"notes\\\"\" ;\n      ~result = ExecuteSQL ( ~sql ; ~delim; ¶ ) ;\n      ~rowCount = ValueCount ( ~result ) ;\n      ~i = 0 ;\n      ~output = JSONSetElement ( \"\" ; \"\" ; \"[]\" ; JSONString )\n    ] ;\n    \n    ~i < ~rowCount ;\n    \n    [\n      ~row = GetValue ( ~result ; ~i + 1 ) ;\n      ~fields = Substitute ( ~row ; ~delim ; \"¶\" ) ;\n      ~id = GetValue ( ~fields ; 1 ) ;\n      ~title = GetValue ( ~fields ; 2 ) ;\n      ~tags = GetValue ( ~fields ; 3 ) ;\n      ~project = GetValue ( ~fields ; 4 ) ;\n      ~created_by = GetValue ( ~fields ; 5 ) ;\n      \n      ~json = JSONSetElement ( \"{}\" ;\n        [ \"id\" ; ~id ; JSONString ] ;\n        [ \"title\" ; ~title ; JSONString ] ;\n        [ \"tags\" ; ~tags ; JSONString ] ;\n        [ \"project\" ; ~project ; JSONString ] ;\n        [ \"created_by\" ; ~created_by ; JSONString ]\n      ) ;\n      \n      ~output = JSONSetElement ( ~output ; \"[\" & ~i & \"]\" ; ~json ; JSONObject ) ;\n      ~i = ~i + 1\n    ] ;\n    \n    ~output\n  ) \n]\n\n// Optional: Show result\n// Show Custom Dialog [ Message: $$noteJson; Default Button: “OK”, Commit: “Yes”; Button 2: “Cancel”, Commit: “No” ]\n\nSet Web Viewer [ Object Name: \"webviewer\"; Action: Reload ]\n```\n\nThis will save the JSON to a global `$$notesJson` variable that we can merge into the new web viewer for the graph view. Set this script to run *On Record Load*, so that the graph view can update whenever records are navigated.\n\nAlternatively, you can call the FileMaker Data API in your script to get the JSON, then set the global variable.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1743935361003/ee0670bd-cfa9-4b5e-acbb-51ebc1d413b7.png align=\"center\")\n\n## Building the graph view with Vis.js\n\nNext, add a new web viewer, and a text object to store the HTML. Link the web viewer to display the text object content like before, using `Get(LayoutObjectAttribute)`. Then enter the following code in the text object:\n\n```xml\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Basic VisJS Network Example</title>\n  <script src=\"https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.js\"></script>\n  <style>\n    body {\n      font-family: sans-serif;\n      margin: 0;\n      padding: 20px;\n    }\n    \n    #network {\n      width: 100%;\n      height: 600px;\n      border: 1px solid #ccc;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"network\"></div>\n  \n  <script>\n    // Create mock data directly\n    const nodes = new vis.DataSet([\n      { id: 1, label: 'Node 1', color: '#4169E1' },\n      { id: 2, label: 'Node 2', color: '#B8860B' },\n      { id: 3, label: 'Node 3', color: '#3CB371' },\n      { id: 4, label: 'Node 4', color: '#C71585' },\n      { id: 5, label: 'Node 5', color: '#4169E1' }\n    ]);\n\n    const edges = new vis.DataSet([\n      { from: 1, to: 3, label: 'connects to' },\n      { from: 1, to: 2, label: 'relates to' },\n      { from: 2, to: 4, label: 'depends on' },\n      { from: 2, to: 5, label: 'references' },\n      { from: 3, to: 5, label: 'links to' }\n    ]);\n    \n    const data = {\n      nodes: nodes,\n      edges: edges\n    };\n    \n    const options = {\n      nodes: {\n        shape: 'dot',\n        size: 16,\n        font: { size: 14 }\n      },\n      edges: {\n        arrows: 'to',\n        font: {\n          align: 'middle'\n        }\n      },\n      physics: {\n        stabilization: true,\n        barnesHut: {\n          gravitationalConstant: -8000,\n          springLength: 150,\n          springConstant: 0.04\n        }\n      },\n      interaction: {\n        hover: true,\n        tooltipDelay: 200\n      }\n    };\n    \n    const container = document.getElementById('network');\n    const network = new vis.Network(container, data, options);\n    \n    // Handle window resize\n    function resizeNetwork() {\n      network.fit();\n    }\n    \n    // Initial sizing\n    resizeNetwork();\n    \n    // Add resize event listener\n    window.addEventListener('resize', resizeNetwork);\n  </script>\n</body>\n</html>\n```\n\nThis should give you a hard-coded graph with a few nodes connected.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1743936036905/77923483-5690-4aa3-a1d8-04e5705b638b.png align=\"center\")\n\nNotice how the JSON is structured to feed the graph. The nodes have an `id`, `label` and `color`, and the edges have a `to`, `from`, and `label`. But the data we want to graph is in a different format, with JSON describing each note. We can merge in the notes JSON the same way as before, then map over it with JavaScript to create the nodes and edges data.\n\nUpdate the web viewer source to merge in the `$$notesJson` variable:\n\n```plaintext\nSubstitute ( \n\n  GetLayoutObjectAttribute ( \"webviewerCode\"; \"content\" );\n  \"NOTE_JSON\";\n  $$noteJson\n\n )\n```\n\nThen update the text object:\n\n```xml\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Basic VisJS Network Example</title>\n  <script src=\"https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.js\"></script>\n  <style>\n    body {\n      font-family: sans-serif;\n    }\n    \n    #network {\n      width: 100%;\n      height: 600px;\n      border: 1px solid #ccc;\n    }\n    \n    .legend {\n      position: absolute;\n      bottom: 20px;\n      right: 20px;\n      background-color: rgba(255, 255, 255, 0.8);\n      border: 1px solid #ccc;\n      border-radius: 5px;\n      padding: 10px;\n    }\n    \n    .legend-title {\n      font-weight: bold;\n      margin-bottom: 5px;\n      border-bottom: 1px solid #ccc;\n      padding-bottom: 5px;\n    }\n    \n    .legend-item {\n      display: flex;\n      align-items: center;\n      margin: 5px 0;\n    }\n    \n    .legend-color {\n      width: 15px;\n      height: 15px;\n      margin-right: 10px;\n      border-radius: 3px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"network\"></div>\n  \n  <div class=\"legend\">\n    <div class=\"legend-title\">Node Types</div>\n    <div class=\"legend-item\">\n      <div class=\"legend-color\" style=\"background-color: #B8860B;\"></div>\n      <div>Captain's Log</div>\n    </div>\n    <div class=\"legend-item\">\n      <div class=\"legend-color\" style=\"background-color: #4169E1;\"></div>\n      <div>Captain</div>\n    </div>\n    <div class=\"legend-item\">\n      <div class=\"legend-color\" style=\"background-color: #3CB371;\"></div>\n      <div>Project</div>\n    </div>\n    <div class=\"legend-item\">\n      <div class=\"legend-color\" style=\"background-color: #C71585;\"></div>\n      <div>Tag</div>\n    </div>\n  </div>\n  \n  <script>\n    const sampleLogs = {NOTE_JSON};\n    \n    const logs = sampleLogs;\n    const nodes = [];\n    const edges = [];\n    const nodeSet = new Set();\n    \n    // Function to handle tags that might be arrays or semicolon-separated strings\n    function processTags(tags) {\n      if (Array.isArray(tags)) {\n        return tags;\n      } else if (typeof tags === 'string') {\n        return tags.split(';').map(tag => tag.trim()).filter(tag => tag !== '');\n      }\n      return [];\n    }\n    \n    logs.forEach((log, i) => {\n      // Use log.id if available, otherwise use index\n      const logId = `log-${log.id || i}`;\n      \n      // Add the log node\n      nodes.push({\n        id: logId,\n        label: log.title,\n        shape: 'box',\n        group: 'log',\n        title: log.title // Tooltip on hover\n      });\n      \n      // Add captain nodes with prefix to prevent collisions with other node types\n      const captainId = `captain-${log.created_by}`;\n      if (!nodeSet.has(captainId)) {\n        nodes.push({\n          id: captainId,\n          label: log.created_by,\n          group: 'captain',\n          title: `Captain: ${log.created_by}`\n        });\n        nodeSet.add(captainId);\n      }\n      edges.push({ from: logId, to: captainId, label: 'author' });\n      \n      // Add project nodes with prefix\n      const projectId = `project-${log.project}`;\n      if (!nodeSet.has(projectId)) {\n        nodes.push({\n          id: projectId,\n          label: log.project,\n          group: 'project',\n          title: `Project: ${log.project}`\n        });\n        nodeSet.add(projectId);\n      }\n      edges.push({ from: logId, to: projectId, label: 'project' });\n      \n      // Process tags that might be arrays or semicolon-separated strings\n      const tagArray = processTags(log.tags);\n      \n      tagArray.forEach(tag => {\n        // Add tag nodes with prefix\n        const tagId = `tag-${tag}`;\n        if (!nodeSet.has(tagId)) {\n          nodes.push({\n            id: tagId,\n            label: tag,\n            group: 'tag',\n            title: `Tag: ${tag}`\n          });\n          nodeSet.add(tagId);\n        }\n        edges.push({ from: logId, to: tagId, label: 'tag' });\n      });\n    });\n    \n    const data = {\n      nodes: new vis.DataSet(nodes),\n      edges: new vis.DataSet(edges)\n    };\n    \n    const options = {\n      nodes: {\n        shape: 'dot',\n        size: 16,\n        font: { size: 14 }\n      },\n      edges: {\n        arrows: 'to',\n        font: {\n          align: 'middle'\n        }\n      },\n      groups: {\n        log: { shape: 'box', color: '#B8860B' },\n        captain: { color: '#4169E1' },\n        project: { color: '#3CB371' },\n        tag: { color: '#C71585' }\n      },\n      physics: {\n        stabilization: true,\n        barnesHut: {\n          gravitationalConstant: -8000,\n          springLength: 150,\n          springConstant: 0.04\n        }\n      },\n      interaction: {\n        hover: true,\n        tooltipDelay: 200\n      }\n    };\n    \n    const container = document.getElementById('network');\n    const network = new vis.Network(container, data, options);\n    \n    // Handle window resize\n    function resizeNetwork() {\n      network.fit();\n    }\n    \n    // Initial sizing\n    resizeNetwork();\n    \n    // Add resize event listener\n    window.addEventListener('resize', resizeNetwork);\n  </script>\n</body>\n</html>\n```\n\nThis should give you a network graph based on your actual notes:\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1743937127498/0fcbb096-7330-4ea1-be54-51f5c392d857.png align=\"center\")\n\nThere’s a bit of JavaScript involved here, and it will be different depending on your field names and how you want to structure the relationships. Just take a sample of your source JSON and the nodes/edges JSON from the hard-coded example, and ask ChatGPT to write a JavaScript function to create the JSON to feed the graph.\n\nNext, we can add a click event to the notes nodes to navigate to that record in FileMaker:\n\n```javascript\n    // Handle node selection\n    network.on(\"selectNode\", function(params) {\n      if (params.nodes.length === 1) {\n        const nodeId = params.nodes[0];\n        const selectedNode = nodes.find(node => node.id === nodeId);\n        \n        if (selectedNode && selectedNode.group === 'log') {\n          // For log nodes, extract the log ID from the node ID\n          const logIdMatch = nodeId.match(/log-(\\d+)/);\n          if (logIdMatch && logIdMatch[1]) {\n            const logId = logIdMatch[1];\n\n            \n            // Call FileMaker script with the log ID\n            FileMaker.PerformScript(\"Select Record\", logId);\n          }\n        }\n      }\n    });\n```\n\nAnd add a *Select Record* script to call when clicking a note:\n\n```plaintext\nSet Variable [ $id; Value:Get(ScriptParameter) ]\nPerform Find [ Specified Find Requests: Find Records; Criteria: notes::id: “$id” ]\n```\n\nNow select a note and you should see FileMaker navigate to that record.\n\nHere’s the final HTML with some extra CSS to add a gradient and some stars to the background:\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1743941065406/6fb9d0bc-9472-43ab-9e5f-2d41986de7bf.gif align=\"center\")\n\n```xml\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Star Trek Captains' Logs Graph</title>\n  <script src=\"https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.js\"></script>\n  <style>\n    html, body {\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      width: 100%;\n      font-family: sans-serif;\n      background-color: #050811;\n      color: #e1e6f0;\n      overflow: hidden;\n      position: fixed;\n    }\n    \n    #network {\n      width: 100%;\n      height: 100vh;\n      border: 1px solid #212941;\n      position: relative;\n      z-index: 10;\n      overflow: hidden;\n    }\n    \n    /* Space background with stars and galaxies */\n    body::before {\n      content: \"\";\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-image: \n        radial-gradient(circle at 20% 35%, rgba(81, 56, 157, 0.15) 0%, transparent 50%),\n        radial-gradient(circle at 75% 44%, rgba(124, 85, 214, 0.1) 0%, transparent 40%),\n        radial-gradient(circle at 30% 70%, rgba(29, 78, 216, 0.15) 0%, transparent 45%),\n        radial-gradient(circle at 50% 80%, rgba(49, 78, 204, 0.1) 0%, transparent 30%);\n      z-index: 1;\n    }\n    \n    /* Star layers with different animations */\n    .stars {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n      z-index: 5;\n    }\n    \n    .stars-small {\n      background-image: \n        radial-gradient(1px 1px at 5% 10%, rgba(255, 255, 255, 0.9) 0%, transparent 100%),\n        radial-gradient(1px 1px at 15% 25%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(1px 1px at 30% 65%, rgba(255, 255, 255, 0.7) 0%, transparent 100%),\n        radial-gradient(1px 1px at 37% 22%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(1px 1px at 55% 30%, rgba(255, 255, 255, 0.9) 0%, transparent 100%),\n        radial-gradient(1px 1px at 75% 55%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(1px 1px at 82% 3%, rgba(255, 255, 255, 0.7) 0%, transparent 100%),\n        radial-gradient(1px 1px at 85% 85%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(1px 1px at 95% 45%, rgba(255, 255, 255, 0.7) 0%, transparent 100%),\n        radial-gradient(1px 1px at 42% 79%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(1px 1px at 23% 53%, rgba(255, 255, 255, 0.7) 0%, transparent 100%),\n        radial-gradient(1px 1px at 63% 76%, rgba(255, 255, 255, 0.9) 0%, transparent 100%),\n        radial-gradient(1px 1px at 68% 58%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(1px 1px at 74% 92%, rgba(255, 255, 255, 0.7) 0%, transparent 100%),\n        radial-gradient(1px 1px at 19% 38%, rgba(255, 255, 255, 0.9) 0%, transparent 100%),\n        radial-gradient(1px 1px at 26% 89%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(1px 1px at 8% 76%, rgba(255, 255, 255, 0.7) 0%, transparent 100%);\n      animation: stars-move-1 150s linear infinite;\n    }\n    \n    .stars-medium {\n      background-image: \n        radial-gradient(1.5px 1.5px at 12% 15%, rgba(255, 255, 255, 0.9) 0%, transparent 100%),\n        radial-gradient(1.5px 1.5px at 27% 38%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(1.5px 1.5px at 43% 59%, rgba(255, 255, 255, 0.7) 0%, transparent 100%),\n        radial-gradient(1.5px 1.5px at 48% 42%, rgba(255, 255, 255, 0.9) 0%, transparent 100%),\n        radial-gradient(1.5px 1.5px at 58% 12%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(1.5px 1.5px at 73% 25%, rgba(255, 255, 255, 0.7) 0%, transparent 100%),\n        radial-gradient(1.5px 1.5px at 88% 54%, rgba(255, 255, 255, 0.9) 0%, transparent 100%),\n        radial-gradient(1.5px 1.5px at 94% 77%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(1.5px 1.5px at 83% 93%, rgba(255, 255, 255, 0.7) 0%, transparent 100%),\n        radial-gradient(1.5px 1.5px at 32% 82%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(1.5px 1.5px at 17% 67%, rgba(255, 255, 255, 0.7) 0%, transparent 100%),\n        radial-gradient(1.5px 1.5px at 71% 33%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(1.5px 1.5px at 63% 64%, rgba(255, 255, 255, 0.9) 0%, transparent 100%);\n      animation: stars-move-2 120s linear infinite;\n    }\n    \n    .stars-large {\n      background-image: \n        radial-gradient(2px 2px at 20% 30%, rgba(255, 255, 255, 0.9) 0%, transparent 100%),\n        radial-gradient(2px 2px at 40% 70%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(2px 2px at 60% 20%, rgba(255, 255, 255, 0.7) 0%, transparent 100%),\n        radial-gradient(2px 2px at 70% 90%, rgba(255, 255, 255, 0.9) 0%, transparent 100%),\n        radial-gradient(2px 2px at 90% 40%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(2px 2px at 10% 60%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(2px 2px at 30% 95%, rgba(255, 255, 255, 0.9) 0%, transparent 100%),\n        radial-gradient(2px 2px at 85% 15%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(2px 2px at 55% 55%, rgba(255, 255, 255, 0.7) 0%, transparent 100%);\n      animation: stars-move-3 80s linear infinite;\n    }\n    \n    /* Bright \"twinkle\" stars */\n    .stars-twinkle {\n      background-image: \n        radial-gradient(2.5px 2.5px at 15% 23%, rgba(255, 255, 255, 0.9) 0%, transparent 100%),\n        radial-gradient(2.5px 2.5px at 36% 45%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(2.5px 2.5px at 58% 16%, rgba(255, 255, 255, 0.7) 0%, transparent 100%),\n        radial-gradient(2.5px 2.5px at 76% 62%, rgba(255, 255, 255, 0.9) 0%, transparent 100%),\n        radial-gradient(2.5px 2.5px at 33% 86%, rgba(255, 255, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(2.5px 2.5px at 88% 33%, rgba(255, 255, 255, 0.7) 0%, transparent 100%);\n      animation: stars-twinkle 10s ease-in-out infinite;\n    }\n    \n    /* Colorful distant stars */\n    .stars-color {\n      background-image: \n        radial-gradient(2px 2px at 25% 40%, rgba(255, 204, 204, 0.8) 0%, transparent 100%),\n        radial-gradient(2px 2px at 45% 20%, rgba(204, 204, 255, 0.8) 0%, transparent 100%),\n        radial-gradient(2px 2px at 65% 45%, rgba(204, 255, 204, 0.7) 0%, transparent 100%),\n        radial-gradient(2px 2px at 85% 75%, rgba(255, 255, 204, 0.8) 0%, transparent 100%),\n        radial-gradient(2px 2px at 22% 75%, rgba(255, 204, 255, 0.7) 0%, transparent 100%);\n      animation: stars-move-4 180s linear infinite;\n    }\n    \n    @keyframes stars-move-1 {\n      0% { background-position: 0% 0%; }\n      100% { background-position: 100% 100%; }\n    }\n    \n    @keyframes stars-move-2 {\n      0% { background-position: 100% 0%; }\n      100% { background-position: 0% 100%; }\n    }\n    \n    @keyframes stars-move-3 {\n      0% { background-position: 50% 0%; }\n      100% { background-position: 50% 100%; }\n    }\n    \n    @keyframes stars-move-4 {\n      0% { background-position: 0% 50%; }\n      100% { background-position: 100% 50%; }\n    }\n    \n    @keyframes stars-twinkle {\n      0%, 100% { opacity: 0.2; }\n      50% { opacity: 0.9; }\n    }\n    \n    /* Legend styles */\n    .legend {\n      position: absolute;\n      bottom: 20px;\n      right: 20px;\n      background-color: rgba(10, 14, 23, 0.8);\n      border: 1px solid #212941;\n      border-radius: 5px;\n      padding: 10px;\n      color: white;\n      z-index: 100;\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\n    }\n    \n    .legend-title {\n      font-weight: bold;\n      margin-bottom: 5px;\n      border-bottom: 1px solid #3A4366;\n      padding-bottom: 5px;\n    }\n    \n    .legend-item {\n      display: flex;\n      align-items: center;\n      margin: 5px 0;\n    }\n    \n    .legend-color {\n      width: 15px;\n      height: 15px;\n      margin-right: 10px;\n      border-radius: 3px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"network\"></div>\n  \n  <!-- Star layers -->\n  <div class=\"stars stars-small\"></div>\n  <div class=\"stars stars-medium\"></div>\n  <div class=\"stars stars-large\"></div>\n  <div class=\"stars stars-twinkle\"></div>\n  <div class=\"stars stars-color\"></div>\n  \n  <div class=\"legend\">\n    <div class=\"legend-title\">Node Types</div>\n    <div class=\"legend-item\">\n      <div class=\"legend-color\" style=\"background-color: #B8860B;\"></div>\n      <div>Captain's Log</div>\n    </div>\n    <div class=\"legend-item\">\n      <div class=\"legend-color\" style=\"background-color: #4169E1;\"></div>\n      <div>Captain</div>\n    </div>\n    <div class=\"legend-item\">\n      <div class=\"legend-color\" style=\"background-color: #3CB371;\"></div>\n      <div>Project</div>\n    </div>\n    <div class=\"legend-item\">\n      <div class=\"legend-color\" style=\"background-color: #C71585;\"></div>\n      <div>Tag</div>\n    </div>\n  </div>\n  <script>\n    // Get input data from FileMaker or use sample data\n    let logs = NOTE_JSON;\n    \n    // Handle FileMaker data if available\n    try {\n      // FileMaker WebViewer will set this variable\n      if (typeof FileMakerData !== 'undefined' && FileMakerData) {\n        logs = JSON.parse(FileMakerData);\n        console.log(\"Using FileMaker data:\", logs);\n      }\n    } catch (e) {\n      console.error(\"Error parsing FileMaker JSON data:\", e);\n      alert(\"Error parsing data from FileMaker: \" + e.message);\n    }\n\n    const nodes = [];\n    const edges = [];\n    const nodeSet = new Set();\n\n    // Function to handle tags that might be arrays or semicolon-separated strings\n    function processTags(tags) {\n      if (Array.isArray(tags)) {\n        return tags;\n      } else if (typeof tags === 'string') {\n        return tags.split(';').map(tag => tag.trim()).filter(tag => tag !== '');\n      }\n      return [];\n    }\n\n    logs.forEach((log, i) => {\n      // Use log.id if available, otherwise use index\n      const logId = `log-${log.id || i}`;\n      \n      // Add the log node\n      nodes.push({ \n        id: logId, \n        label: log.title, \n        shape: 'box', \n        group: 'log',\n        title: log.title // Tooltip on hover\n      });\n      \n      // Add captain nodes with prefix to prevent collisions with other node types\n      const captainId = `captain-${log.created_by}`;\n      if (!nodeSet.has(captainId)) {\n        nodes.push({ \n          id: captainId, \n          label: log.created_by, \n          group: 'captain',\n          title: `Captain: ${log.created_by}`\n        });\n        nodeSet.add(captainId);\n      }\n      edges.push({ from: logId, to: captainId, label: 'author' });\n\n      // Add project nodes with prefix\n      const projectId = `project-${log.project}`;\n      if (!nodeSet.has(projectId)) {\n        nodes.push({ \n          id: projectId, \n          label: log.project, \n          group: 'project',\n          title: `Project: ${log.project}`\n        });\n        nodeSet.add(projectId);\n      }\n      edges.push({ from: logId, to: projectId, label: 'project' });\n\n      // Process tags that might be arrays or semicolon-separated strings\n      const tagArray = processTags(log.tags);\n      \n      tagArray.forEach(tag => {\n        // Add tag nodes with prefix\n        const tagId = `tag-${tag}`;\n        if (!nodeSet.has(tagId)) {\n          nodes.push({ \n            id: tagId, \n            label: tag, \n            group: 'tag',\n            title: `Tag: ${tag}`\n          });\n          nodeSet.add(tagId);\n        }\n        edges.push({ from: logId, to: tagId, label: 'tag' });\n      });\n    });\n\n    const data = {\n      nodes: new vis.DataSet(nodes),\n      edges: new vis.DataSet(edges)\n    };\n\n    const options = {\n      nodes: {\n        shape: 'dot',\n        size: 16,\n        font: { size: 14, color: '#FFFFFF' }\n      },\n      edges: {\n        arrows: 'to',\n        font: { \n          align: 'middle', \n          color: '#FFFFFF',\n          strokeWidth: 0,\n          background: {\n            enabled: true,\n            color: 'rgba(10, 14, 23, 0.7)',\n            size: 5\n          }\n        },\n        color: { color: '#3A4366', hover: '#5A6386' }\n      },\n      groups: {\n        log: { shape: 'box', color: '#B8860B', font: { color: '#FFFFFF' } },\n        captain: { color: '#4169E1', font: { color: '#FFFFFF' } },\n        project: { color: '#3CB371', font: { color: '#FFFFFF' } },\n        tag: { color: '#C71585', font: { color: '#FFFFFF' } }\n      },\n      physics: {\n        stabilization: true,\n        barnesHut: {\n          gravitationalConstant: -8000,\n          springLength: 150,\n          springConstant: 0.04\n        }\n      },\n      interaction: {\n        hover: true,\n        tooltipDelay: 200\n      }\n    };\n\n    const container = document.getElementById('network');\n    const network = new vis.Network(container, data, options);\n\n    // Handle window resize\n    function resizeNetwork() {\n      network.setSize('100%', window.innerHeight + 'px');\n      network.fit({\n        animation: {\n          duration: 500,\n          easingFunction: 'easeInOutQuad'\n        }\n      });\n    }\n\n    // Initial sizing\n    resizeNetwork();\n    \n    // Add resize event listener\n    window.addEventListener('resize', resizeNetwork);\n    \n    // Handle node selection\n    network.on(\"selectNode\", function(params) {\n      if (params.nodes.length === 1) {\n        const nodeId = params.nodes[0];\n        const selectedNode = nodes.find(node => node.id === nodeId);\n        \n        if (selectedNode && selectedNode.group === 'log') {\n          // For log nodes, extract the log ID from the node ID\n          const logIdMatch = nodeId.match(/log-(\\d+)/);\n          if (logIdMatch && logIdMatch[1]) {\n            const logId = logIdMatch[1];\n\n            \n            // Call FileMaker script with the log ID\n            FileMaker.PerformScript(\"Select Record\", logId);\n          }\n        }\n      }\n    });\n  </script>\n</body>\n</html>\n```\n\nThis should give you a good starting point for building your own network graph and markdown editor. From here you can update the logic based on your fields and create edges (relationships) using backlinks, like in Obsidian, or create a knowledge graph using [NER (named-entity recognition)](https://blog.greenflux.us/named-entity-recognition-with-bert-and-hugging-face).\n\n## Conclusion\n\nWeb viewers in FileMaker Pro are a great way to extend the platform and add new features like a Markdown editor and network graph. Like all the other apps in my [FileMaker-Experiments](https://github.com/GreenFluxLLC/FileMaker-Experiments) repository, this app is meant to be a proof-of-concept and a starting point, not a complete app. There’s a lot more you could do from here, like outputting the Markdown to PDF, sending it as an email, or adding hover effects and popups to the network graph. Feel free to copy the app and modify for your own use case.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1743943953030/28d5d78e-d931-41eb-91c2-bcc71617e1fd.png","brief":"Markdown is used widely in programming, documentation, content creation, GitHub, and lots of other areas in tech. One of the most popular Markdown editors is Obsidian, a note taking app with an interesting graph view that shows how all of your notes ...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":22,"draft":"67f108542723e5a5dc02c335","tags":["63c1667e09eddfeb66db5ebb","62ec5d9ef583cc2636e5492c","6483259e8a9f5d9098c40f65","66ae6b4aa3a2a11383215a48","56744722958ef13879b950b2","56744721958ef13879b94cad","59e9a521780072396324fd73"],"publication":"60771c264155da32fc83ad6e","metaTitle":"Vis.js Knowledge Graph in FileMaker","metaDescription":"Build a Markdown editor and interactive knowledge graph in FileMaker Pro using Vis.js, Marked.js, and Prism.js. Explore data with a network view","series":"67d61af88a2ed4175bcf3b13","isNewsletterActivated":true,"coAuthors":[],"dateFeatured":"2025-04-07T09:31:02.948Z","badges":[{"badgeId":"5f741eac07891b4f5b9ec8cd","name":"postFeaturedHN","_id":"67f39b56de0291e1cf2eb62c"}],"__v":2,"answeredByTarget":false,"autoGeneratedCover":"","bookmarkedIn":[],"contributors":[{"user":"639588ce9fa713176ab9dde6","stamp":"cm982mjts05hofjnv6tt5dxr3","_id":"67f4b6a7e9fb5c5867c90d38"},{"_id":"67f4b6a7e9fb5c5867c90d30","user":"67f43346fe1f9dcac7274912","stamp":"cm97iycpj000209l8guh72xlg"},{"user":"66f1635aa5ec0dcadb1486de","stamp":"cm96zu5a0008pevnv2oeo4y1w","_id":"67f3b82902ac113c5f29647d"}],"downvotedBy":[],"downvotes":0,"duplicatePosts":[],"followers":[],"hasPolls":false,"hasReward":false,"inviters":[],"isAnonymous":false,"lastActivity":"2025-04-08T16:09:17.467Z","pollOptions":[],"questionReplies":[],"reactionsByCurrentUser":[],"responses":[{"contentMarkdown":"Nice content ","content":"<p>Nice content </p>\n","author":"639588ce9fa713176ab9dde6","post":"67f27e0437f71dd50937ab42","popularity":7446.2131,"isActive":true,"stamp":"cm982mjts05hofjnv6tt5dxr3","upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"source":"blogs","score":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"reactionsByCurrentUser":[],"_id":"67f4b6a7e9fb5c5867c90d36","replies":[],"dateAdded":"2025-04-08T05:39:51.905Z","badgesAwarded":[],"__v":0},{"contentMarkdown":"Fantastic content! Thanks for sharing! ","content":"<p>Fantastic content! Thanks for sharing! </p>\n","author":"66f1635aa5ec0dcadb1486de","post":"67f27e0437f71dd50937ab42","popularity":7444.7654,"isActive":true,"stamp":"cm96zu5a0008pevnv2oeo4y1w","upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"source":"blogs","score":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"reactionsByCurrentUser":[],"_id":"67f3b82902ac113c5f29647b","replies":[],"dateAdded":"2025-04-07T11:34:01.274Z","badgesAwarded":[],"__v":0}],"similarPostIds":[],"sourcedFromGithub":false,"toc":[],"totalPollVotes":0,"untaggedFrom":[],"upvotedBy":[],"upvotes":0,"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"67f27e0437f71dd50937ab42"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"67deb3525d13e1fb09a71c21","createdAt":"2025-03-22T12:55:46.930Z","updatedAt":"2025-03-22T12:55:46.930Z","views":330,"isActive":true,"hasLatex":false,"popularity":7414.1544,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Replacing Google Forms with CloudFlare Pages & Apps Script","subtitle":"Building a free web site contact form with no Google branding","cuid":"cm8k7pnu9000q09l4epekhhj0","dateAdded":"2025-03-22T12:55:46.929Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"replacing-google-forms-with-cloudflare-pages-and-apps-script","content":"<p>Google Forms is the most obvious choice when you need a simple public form to collect information into a spreadsheet. You can share a link to the form, or embed the form directly in your website. The Google branding will be displayed though, which is not ideal when embedding on a business website. There are other form solutions, but they also tend to include branding on the free plan.</p>\n<p>So what do you do if you want a free solution, with no intrusive branding? Or you want to add your own custom branding? It’s actually pretty easy to set up for free using Google Apps Scripts and CloudFlare Pages. You could also use GitHub Pages, or any other free hosting for simple web apps, but I went with CloudFlare Pages because you can connect a domain for free. And it’s the registrar that I use for all my domains, so this makes it easy to deploy sites for free and connect my domain all from the same platform.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Saving data to Google Sheets from Apps Script</p>\n</li>\n<li><p>Publishing a Google Apps Script as a web app</p>\n</li>\n<li><p>Building a simple web form with HTML</p>\n</li>\n<li><p>Deploying the form with CloudFlare Pages</p>\n</li>\n</ul>\n<p><strong>Let’s get started!</strong></p>\n<h2 id=\"heading-saving-data-to-google-sheets-from-apps-script\">Saving data to Google Sheets from Apps Script</h2>\n<p>We’ll be creating a new web form to replace Google Forms, but we still need a way to save that data to Google Sheets. Google Apps Scripts works great for simple automations like this in your Google Workspace.</p>\n<p>Start out by creating a new spreadsheet, and add columns for your form. Or you can build on top of an existing spreadsheet that’s already connected to a form.</p>\n<table><tbody><tr><td><p><strong>timestamp</strong></p></td><td><p><strong>name</strong></p></td><td><p><strong>email</strong></p></td><td><p><strong>phone</strong></p></td><td><p><strong>service</strong></p></td><td><p><strong>message</strong></p></td></tr></tbody></table>\n\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742641656697/08ec3180-7bbe-4468-9e03-85c6b8af4b3e.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Then go to <strong>Extensions &gt; Apps Script</strong> and paste in the following code:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doPost</span>(<span class=\"hljs-params\">e</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(<span class=\"hljs-string\">\"Sheet1\"</span>);\n\n  <span class=\"hljs-keyword\">const</span> fields = [<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"email\"</span>, <span class=\"hljs-string\">\"phone\"</span>, <span class=\"hljs-string\">\"service\"</span>, <span class=\"hljs-string\">\"message\"</span>];\n\n  <span class=\"hljs-keyword\">const</span> row = [\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(),\n    ...fields.map(<span class=\"hljs-function\"><span class=\"hljs-params\">field</span> =&gt;</span> e.parameter[field] || <span class=\"hljs-string\">\"\"</span>)\n  ];\n\n  sheet.appendRow(row);\n\n  <span class=\"hljs-keyword\">return</span> ContentService\n          .createTextOutput()\n          .setMimeType(ContentService.MimeType.JSON);\n}\n</code></pre>\n<p>This extracts data from the <code>doPost()</code> event’s parameters, and saves it as a new row to the sheet. To keep the script simple, I’m assuming the order of fields array matches the destination sheet. But you could match up the names dynamically with a little more JavaScript.</p>\n<p>Click <strong>Save</strong>, then run the <code>doPost</code> function. On the first run, you’ll be prompted to approve the permissions for the script to edit your Google Sheet. Approve the permissions, and the script should run. However, there’s no form data being sent in, so the script will fail. Ignore the error for now. It should work fine when triggered by a form submission.</p>\n<h2 id=\"heading-publishing-a-google-apps-script-as-a-web-app\">Publishing a Google Apps Script as a web app</h2>\n<p>Next, click <strong>Deploy &gt; New Deployment</strong>. Then set the type to <strong>Web app</strong> and enter a description. Set the <em>Who has access</em> field to <strong>Anyone</strong>. Then click <strong>Deploy</strong>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742641991201/bb6170ce-a297-45f3-8e94-40d3e7fffe40.png\" alt class=\"image--center mx-auto\" /></p>\n<p>The next screen should provide the web app URL. Leave this open so we can copy it in the next section.</p>\n<h2 id=\"heading-building-a-simple-web-form-with-html\">Building a simple web form with HTML</h2>\n<p>Next, create a ‘website’ folder on your local machine, and add an <code>index.html</code> file, using your favorite text editor.</p>\n<p>Set the contents to:</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Contact Us<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-family</span>: Arial, sans-serif; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>; }\n    <span class=\"hljs-selector-tag\">form</span> { <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">600px</span>; <span class=\"hljs-attribute\">margin</span>: auto; }\n    <span class=\"hljs-selector-tag\">input</span>, <span class=\"hljs-selector-tag\">select</span>, <span class=\"hljs-selector-tag\">textarea</span> { <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>; <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">8px</span>; <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">10px</span>; <span class=\"hljs-attribute\">box-sizing</span>: border-box; }\n    <span class=\"hljs-selector-tag\">button</span> { <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">20px</span>; }\n    <span class=\"hljs-selector-class\">.message</span> { <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">20px</span>; <span class=\"hljs-attribute\">font-weight</span>: bold; }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"contactForm\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Contact Us<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"name\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Name\"</span> <span class=\"hljs-attr\">required</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Email\"</span> <span class=\"hljs-attr\">required</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"tel\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"phone\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Phone\"</span> <span class=\"hljs-attr\">required</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"service\"</span> <span class=\"hljs-attr\">required</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">disabled</span> <span class=\"hljs-attr\">selected</span>&gt;</span>Select Service<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Inspection\"</span>&gt;</span>Inspection<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Repair\"</span>&gt;</span>Repair<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"New Construction\"</span>&gt;</span>New Construction<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"Other\"</span>&gt;</span>Other<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"message\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Message\"</span> <span class=\"hljs-attr\">required</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span>Send<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"responseMessage\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"message\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>This creates a simple contact form with a dropdown to select a service.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742643355090/843d7d34-a3b1-48c6-b0d6-c5aedb7a2201.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Update the fields as needed for your use case. Just make sure to update the script in the HTML to send the right field names that match your spreadsheet column names.</p>\n<p>Then add this script right before the closing body tag:</p>\n<pre><code class=\"lang-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"contactForm\"</span>).addEventListener(<span class=\"hljs-string\">\"submit\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n      e.preventDefault();\n      <span class=\"hljs-keyword\">const</span> form = e.target;\n\n      <span class=\"hljs-comment\">// Build URL-encoded form data</span>\n      <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">new</span> URLSearchParams();\n      data.append(<span class=\"hljs-string\">\"name\"</span>, form.name.value);\n      data.append(<span class=\"hljs-string\">\"email\"</span>, form.email.value);\n      data.append(<span class=\"hljs-string\">\"phone\"</span>, form.phone.value);\n      data.append(<span class=\"hljs-string\">\"service\"</span>, form.service.value);\n      data.append(<span class=\"hljs-string\">\"message\"</span>, form.message.value);\n\n      <span class=\"hljs-comment\">// Send POST request with URL-encoded data</span>\n      fetch(SCRIPT_URL, {\n        <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"POST\"</span>,\n        <span class=\"hljs-attr\">body</span>: data\n      })\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (response.ok) {\n          <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"responseMessage\"</span>).textContent = <span class=\"hljs-string\">\"Thank you! Your message has been sent.\"</span>;\n          form.reset();\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"Network response was not ok.\"</span>);\n        }\n      })\n      .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> {\n        <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"responseMessage\"</span>).textContent = <span class=\"hljs-string\">\"Error: Your message could not be sent.\"</span>;\n      });\n    });\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Replace <code>SCRIPT_URL</code> with the web app URL from the last step. Then save the HTML file.</p>\n<p>This script extracts the form data and constructs a set of URL encoded key/value pairs, then sends an HTTP POST request to the Google Apps Script web app with the form data.</p>\n<p>You can open the file locally in the browser and test it out if you want. It should save a new row to the sheet. But the form isn’t available on the web yet, so let’s get it published, then test it out from the web.</p>\n<h2 id=\"heading-deploying-the-form-with-cloudflare-pages\">Deploying the form with CloudFlare Pages</h2>\n<p>Now go to your CloudFlare dashboard, and open the <strong>Workers &amp; Pages</strong> section. Click <strong>Create</strong>, then select <strong>Pages</strong>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742642471887/26255597-c35b-45cc-b217-5db286a17f8a.png\" alt class=\"image--center mx-auto\" /></p>\n<p>On the next screen, click <strong>Upload Assets</strong>. Give the project a name, and select your website folder to upload. Then click <strong>Deploy site</strong>!</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742642699121/bb8488c2-7ff0-4bda-9226-570e104608b8.png\" alt class=\"image--center mx-auto\" /></p>\n<p><strong>Now test it out!</strong> The next screen should show your new project URL for CloudFlare Pages. Submit a test form and check the spreadsheet for a response.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742642980801/572ee086-62a9-4041-9684-c069fe33a309.png\" alt class=\"image--center mx-auto\" /></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742642985284/347714f8-ef8c-47ff-a832-9cff382fc569.png\" alt class=\"image--center mx-auto\" /></p>\n<h3 id=\"heading-deploy-with-github\">Deploy With GitHub</h3>\n<p>You can also create a GitHub repo for the website folder, then connect CloudFlare Pages to the repo to auto-deploy your site when the repo is updated. If you decide to use a UI framework that requires a build-step, you can configure CloudFlare Pages to run a specific build and deploy command for you. This way you can develop the site locally, push changes to GitHub, and CloudFlare will rebuild the site and update the live deployed version automatically.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>CloudFlare Pages is a great options for hosting custom web applications for free, and it can easily be combined with Google Apps Script to replace Google Forms. This allow you to create public forms that save data to Google Sheets, without the Google branding being shown in your form. You can also include your own branding on the form and connect a domain for free, or embed the form in your own website.</p>\n","contentMarkdown":"Google Forms is the most obvious choice when you need a simple public form to collect information into a spreadsheet. You can share a link to the form, or embed the form directly in your website. The Google branding will be displayed though, which is not ideal when embedding on a business website. There are other form solutions, but they also tend to include branding on the free plan.\n\nSo what do you do if you want a free solution, with no intrusive branding? Or you want to add your own custom branding? It’s actually pretty easy to set up for free using Google Apps Scripts and CloudFlare Pages. You could also use GitHub Pages, or any other free hosting for simple web apps, but I went with CloudFlare Pages because you can connect a domain for free. And it’s the registrar that I use for all my domains, so this makes it easy to deploy sites for free and connect my domain all from the same platform.\n\n**This guide will cover:**\n\n* Saving data to Google Sheets from Apps Script\n    \n* Publishing a Google Apps Script as a web app\n    \n* Building a simple web form with HTML\n    \n* Deploying the form with CloudFlare Pages\n    \n\n**Let’s get started!**\n\n## Saving data to Google Sheets from Apps Script\n\nWe’ll be creating a new web form to replace Google Forms, but we still need a way to save that data to Google Sheets. Google Apps Scripts works great for simple automations like this in your Google Workspace.\n\nStart out by creating a new spreadsheet, and add columns for your form. Or you can build on top of an existing spreadsheet that’s already connected to a form.\n\n<table><tbody><tr><td colspan=\"1\" rowspan=\"1\"><p><strong>timestamp</strong></p></td><td colspan=\"1\" rowspan=\"1\"><p><strong>name</strong></p></td><td colspan=\"1\" rowspan=\"1\"><p><strong>email</strong></p></td><td colspan=\"1\" rowspan=\"1\"><p><strong>phone</strong></p></td><td colspan=\"1\" rowspan=\"1\"><p><strong>service</strong></p></td><td colspan=\"1\" rowspan=\"1\"><p><strong>message</strong></p></td></tr></tbody></table>\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1742641656697/08ec3180-7bbe-4468-9e03-85c6b8af4b3e.png align=\"center\")\n\nThen go to **Extensions &gt; Apps Script** and paste in the following code:\n\n```javascript\nfunction doPost(e) {\n  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(\"Sheet1\");\n\n  const fields = [\"name\", \"email\", \"phone\", \"service\", \"message\"];\n\n  const row = [\n    new Date(),\n    ...fields.map(field => e.parameter[field] || \"\")\n  ];\n\n  sheet.appendRow(row);\n\n  return ContentService\n          .createTextOutput()\n          .setMimeType(ContentService.MimeType.JSON);\n}\n```\n\nThis extracts data from the `doPost()` event’s parameters, and saves it as a new row to the sheet. To keep the script simple, I’m assuming the order of fields array matches the destination sheet. But you could match up the names dynamically with a little more JavaScript.\n\nClick **Save**, then run the `doPost` function. On the first run, you’ll be prompted to approve the permissions for the script to edit your Google Sheet. Approve the permissions, and the script should run. However, there’s no form data being sent in, so the script will fail. Ignore the error for now. It should work fine when triggered by a form submission.\n\n## Publishing a Google Apps Script as a web app\n\nNext, click **Deploy &gt; New Deployment**. Then set the type to **Web app** and enter a description. Set the *Who has access* field to **Anyone**. Then click **Deploy**.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1742641991201/bb6170ce-a297-45f3-8e94-40d3e7fffe40.png align=\"center\")\n\nThe next screen should provide the web app URL. Leave this open so we can copy it in the next section.\n\n## Building a simple web form with HTML\n\nNext, create a ‘website’ folder on your local machine, and add an `index.html` file, using your favorite text editor.\n\nSet the contents to:\n\n```xml\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Contact Us</title>\n  <style>\n    body { font-family: Arial, sans-serif; padding: 20px; }\n    form { max-width: 600px; margin: auto; }\n    input, select, textarea { width: 100%; padding: 8px; margin-bottom: 10px; box-sizing: border-box; }\n    button { padding: 10px 20px; }\n    .message { margin-top: 20px; font-weight: bold; }\n  </style>\n</head>\n<body>\n  <form id=\"contactForm\">\n    <h2>Contact Us</h2>\n    <input type=\"text\" name=\"name\" placeholder=\"Name\" required>\n    <input type=\"email\" name=\"email\" placeholder=\"Email\" required>\n    <input type=\"tel\" name=\"phone\" placeholder=\"Phone\" required>\n    <select name=\"service\" required>\n      <option value=\"\" disabled selected>Select Service</option>\n      <option value=\"Inspection\">Inspection</option>\n      <option value=\"Repair\">Repair</option>\n      <option value=\"New Construction\">New Construction</option>\n      <option value=\"Other\">Other</option>\n    </select>\n    <textarea name=\"message\" placeholder=\"Message\" required></textarea>\n    <button type=\"submit\">Send</button>\n    <div id=\"responseMessage\" class=\"message\"></div>\n  </form>\n</body>\n</html>\n```\n\nThis creates a simple contact form with a dropdown to select a service.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1742643355090/843d7d34-a3b1-48c6-b0d6-c5aedb7a2201.png align=\"center\")\n\nUpdate the fields as needed for your use case. Just make sure to update the script in the HTML to send the right field names that match your spreadsheet column names.\n\nThen add this script right before the closing body tag:\n\n```xml\n  <script>\n    document.getElementById(\"contactForm\").addEventListener(\"submit\", function(e) {\n      e.preventDefault();\n      const form = e.target;\n      \n      // Build URL-encoded form data\n      const data = new URLSearchParams();\n      data.append(\"name\", form.name.value);\n      data.append(\"email\", form.email.value);\n      data.append(\"phone\", form.phone.value);\n      data.append(\"service\", form.service.value);\n      data.append(\"message\", form.message.value);\n\n      // Send POST request with URL-encoded data\n      fetch(SCRIPT_URL, {\n        method: \"POST\",\n        body: data\n      })\n      .then(response => {\n        if (response.ok) {\n          document.getElementById(\"responseMessage\").textContent = \"Thank you! Your message has been sent.\";\n          form.reset();\n        } else {\n          throw new Error(\"Network response was not ok.\");\n        }\n      })\n      .catch(error => {\n        document.getElementById(\"responseMessage\").textContent = \"Error: Your message could not be sent.\";\n      });\n    });\n  </script>\n```\n\nReplace `SCRIPT_URL` with the web app URL from the last step. Then save the HTML file.\n\nThis script extracts the form data and constructs a set of URL encoded key/value pairs, then sends an HTTP POST request to the Google Apps Script web app with the form data.\n\nYou can open the file locally in the browser and test it out if you want. It should save a new row to the sheet. But the form isn’t available on the web yet, so let’s get it published, then test it out from the web.\n\n## Deploying the form with CloudFlare Pages\n\nNow go to your CloudFlare dashboard, and open the **Workers & Pages** section. Click **Create**, then select **Pages**.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1742642471887/26255597-c35b-45cc-b217-5db286a17f8a.png align=\"center\")\n\nOn the next screen, click **Upload Assets**. Give the project a name, and select your website folder to upload. Then click **Deploy site**!\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1742642699121/bb8488c2-7ff0-4bda-9226-570e104608b8.png align=\"center\")\n\n**Now test it out!** The next screen should show your new project URL for CloudFlare Pages. Submit a test form and check the spreadsheet for a response.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1742642980801/572ee086-62a9-4041-9684-c069fe33a309.png align=\"center\")\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1742642985284/347714f8-ef8c-47ff-a832-9cff382fc569.png align=\"center\")\n\n### Deploy With GitHub\n\nYou can also create a GitHub repo for the website folder, then connect CloudFlare Pages to the repo to auto-deploy your site when the repo is updated. If you decide to use a UI framework that requires a build-step, you can configure CloudFlare Pages to run a specific build and deploy command for you. This way you can develop the site locally, push changes to GitHub, and CloudFlare will rebuild the site and update the live deployed version automatically.\n\n## Conclusion\n\nCloudFlare Pages is a great options for hosting custom web applications for free, and it can easily be combined with Google Apps Script to replace Google Forms. This allow you to create public forms that save data to Google Sheets, without the Google branding being shown in your form. You can also include your own branding on the form and connect a domain for free, or embed the form in your own website.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1742646628689/7a040512-db77-44d7-92a0-3a9e4259b7d8.png","brief":"Google Forms is the most obvious choice when you need a simple public form to collect information into a spreadsheet. You can share a link to the form, or embed the form directly in your website. The Google branding will be displayed though, which is...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":6,"draft":"67de902d64d5993fbf52b23b","tags":["5e270f8a32d5fad159b76b9a","56e669b622f645300192ed17","5c6f595e26f2abb051ae7ca0","56744720958ef13879b947e6","5e536991205a551d167ee0ee","596f4fff107fab2733afd555"],"publication":"60771c264155da32fc83ad6e","metaDescription":"Create custom forms with CloudFlare Pages and Google Apps Script, replacing Google Forms for a free, brandable solution","series":"679fa03905414f167a095994","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"67deb3525d13e1fb09a71c21"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"67d7ac66dcf33753f930fd38","createdAt":"2025-03-17T05:00:22.522Z","updatedAt":"2025-03-17T05:00:22.522Z","views":152,"isActive":true,"hasLatex":false,"popularity":7403.9205,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Named Entity Recognition with BERT and Hugging Face 🤗","subtitle":"Extracting Object Data from Unstructured Text","cuid":"cm8clj0xj000409la9m3i3g3s","dateAdded":"2025-03-17T05:00:22.519Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"named-entity-recognition-with-bert-and-hugging-face","content":"<h2 id=\"heading-what-is-ner-named-entity-recognition\">What is NER (Named Entity Recognition)?</h2>\n<p><em>Named Entity Recognition</em> is a technique in Natural Language Processing (NLP), which involves identifying and classifying entities—such as names of people, organizations, locations, dates, and numerical values—within unstructured text. This process transforms raw text into structured data, enhancing information retrieval, content categorization, and the functionality of applications like email, document editors, search engines and chatbots. Once the structured data is extracted, it can be used to create tags, knowledge graphs, or metadata, or to trigger automations.</p>\n<p>In this guide, we’ll cover the basics of NER, and how to use it to extract structured data from your own documents. From there you can trigger automations based on the extracted data, update records with metadata, or send the data to a human-reviewer before triggering a workflow.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>History of NER and use cases</p>\n</li>\n<li><p>BERT Model for NER</p>\n</li>\n<li><p>Hugging Face Platform for Model Hosting</p>\n</li>\n<li><p>Connecting to Models in Hugging Face from Appsmith</p>\n</li>\n<li><p>Extracting Data from Local Files with NER/BERT</p>\n</li>\n</ul>\n<h2 id=\"heading-a-brief-history-of-ner\">A Brief History of NER</h2>\n<p>Rule-Based NER has been around since the <strong>1990’s</strong> with email applications and document editors detecting email addresses, names, dates, etc. These approaches use REGEX, dictionaries, and other text-parsing rules to match predefined patterns. Then in the <strong>2000’s</strong>, search engines like Google began to use machine-learning NER with knowledge graphs to store data extracted from web pages, and enhance search results. In the <strong>2010’s</strong> we saw Siri and Alexa using NER to interpret voice commands. And now in the <strong>2020’s</strong>, NER has become a key component of tagging, metadata, and Retrieval-Augmented Generation Pipelines.</p>\n<p>The tools for performing NER have advanced significantly with the rise of large language models and transformers. And with these new tools, you can automate NER tasks that enrich data in your RAG pipeline, generate knowledge graphs for GraphRAG, or power automations and agents.</p>\n<h2 id=\"heading-whos-bert\">Who’s BERT?</h2>\n<p>BERT, (Bidirectional Encoder Representations from Transformers), is an open-source machine learning framework for natural language processing developed by Google in 2018. Designed to help computers understand the meaning of ambiguous language in text by using surrounding text to establish context, BERT marked a significant advancement in NLP. Unlike traditional models that read text sequentially, BERT reads entire sequences of words simultaneously, allowing it to grasp context and nuance more effectively. This bidirectional approach enables BERT to achieve state-of-the-art performance on various NLP tasks, including Named Entity Recognition, by considering both preceding and following words in a sentence.</p>\n<h3 id=\"heading-fine-tuned-models-for-specialized-fields\">Fine-Tuned Models for Specialized Fields</h3>\n<p>Since BERT Is open-source, anyone can modify it and fine-tune a specialized version for specific domains. There are several popular variants already published, like:</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td><strong>Specialized Models</strong></td><td><strong>Reasoning</strong></td><td><strong>Domains</strong></td></tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>BioBERT</strong></td><td>Optimized for biomedical NER, clinical entities extraction.</td><td>Biomedical / Clinical</td></tr>\n<tr>\n<td><strong>SciBERT</strong></td><td>Optimized for extracting entities from scientific texts.</td><td>Scientific / Research Papers</td></tr>\n<tr>\n<td><strong>CamemBERT</strong></td><td>NER for French-language corpora.</td><td>General French NER</td></tr>\n<tr>\n<td><strong>LegalBERT</strong></td><td>Specialized for legal-domain entity extraction.</td><td>Legal texts</td></tr>\n<tr>\n<td><strong>mBERT</strong></td><td>Multilingual entity extraction across various languages.</td><td>Multilingual / Cross-lingual</td></tr>\n<tr>\n<td><strong>RoBERTa</strong></td><td>General-purpose, improved accuracy, robust for general NER.</td><td>General English</td></tr>\n</tbody>\n</table>\n</div><p>In this guide, I’ll be using <a target=\"_blank\" href=\"https://huggingface.co/dbmdz/bert-large-cased-finetuned-conll03-english\"><code>bert-large-cased-finetuned-conll03-english</code></a>, a model that’s fine-tuned for NER using the <a target=\"_blank\" href=\"https://huggingface.co/datasets/eriktks/conll2003\">conll2003</a> dataset.</p>\n<h2 id=\"heading-whats-hugging-facehttpshuggingfacecodbmdzbert-large-cased-finetuned-conll03-english\"><a target=\"_blank\" href=\"https://huggingface.co/dbmdz/bert-large-cased-finetuned-conll03-english\">What’s Hugging Face?</a></h2>\n<p><a target=\"_blank\" href=\"https://huggingface.co/dbmdz/bert-large-cased-finetuned-conll03-english\">​Hugging Face</a> is a popular open-source platform specializing in machine learning and natural language processing (NLP). Hugging Face enables developers to build, train, and deploy machine learning models easily, and in the cloud. Their Transformers library has become a standard in NLP tasks. In this guide, we’ll be using Hugging Face’s API to process text with the BERT model.</p>\n<h3 id=\"heading-creating-an-access-token\">Creating an Access Token</h3>\n<p>Start out by creating an account with Hugging Face, and then go to the <a target=\"_blank\" href=\"https://huggingface.co/settings/tokens\">Access Token page</a>. Create a new token, give it a name, and enable the options to <em>make calls to Inference providers and Endpoints.</em></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742036543027/f5ce84be-0e1a-4f86-bd8a-b3dc9a0d0318.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Scroll down and click <strong>Create token</strong>, then leave this page open so we can copy the token to Appsmith in the next section.</p>\n<h2 id=\"heading-connecting-to-hugging-face-models-from-appsmith\">Connecting to Hugging Face Models from Appsmith</h2>\n<p>Click the <strong>Query</strong> tab from the Appsmith editor and add a new REST API. Configure the API as follows:</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>Name</td><td>NER_BERT</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Method</td><td>POST</td></tr>\n<tr>\n<td>URL</td><td><a target=\"_blank\" href=\"https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english\">https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english</a></td></tr>\n<tr>\n<td>Body Type</td><td>JSON</td></tr>\n<tr>\n<td>Body</td><td>{{ { \"inputs\": \"Jesse and Mr. White went to the car wash.\" } }}</td></tr>\n<tr>\n<td>Header</td><td>Authorization: Bearer YOUR_API_TOKEN</td></tr>\n</tbody>\n</table>\n</div><p>Click <strong>RUN</strong> and you should get back a response from Hugging Face.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742037165541/1edfd8fa-7887-423f-ade9-e69680260236.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Notice the response structure. Each entity that was extracted has an <code>entity_group</code> (<code>PER</code> in this case, for Person), and a confidence score, along with the extract word and its start and end position. You’ll also see <code>ORG</code> used for organization, <code>LOC</code> for location, and <code>MISC</code> for miscellaneous. Other specialized models may have additional groups based on their specific domain and use case.</p>\n<h3 id=\"heading-saving-the-credentials-to-a-datasource\">Saving the Credentials to a Datasource</h3>\n<p>Next, click the <strong>Save URL</strong> button (below Run button), so we can move the API token to a secure datasource.</p>\n<p>Name the datasource, then change the <em>Authentication type</em> to <strong>Bearer Token</strong>. Then copy the bearer token to the encrypted <em>Bearer token</em> field with the green lock icon.</p>\n<p>Lastly, delete the original Authorization Header that was stored in plain text, then click <strong>Save</strong>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742037952832/1b6fafb0-c344-429e-bbc1-333331e2e9c8.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Retest the API. If everything is set up correctly, you should get back the same response as before, and the API token will no longer be stored in the API in plain text. This saves the credentials securely on your self-hosted Appsmith server (or the free cloud), and removes it from the app definition.</p>\n<h3 id=\"heading-building-the-ui-to-upload-files\">Building the UI to Upload Files</h3>\n<p>Lastly, we’ll add a UI to select files from the local file system, then send the data to Hugging Face/BERT. Click the UI tab and drag in a Text widget, Table widget and a FilePicker widget. Set the FilePicker’s data type to <code>Text</code>.</p>\n<p>Next, click the FilePicker and upload a local text or markdown file. In my case, I’m using markdown from a page of the Appsmith documentation on the OpenAI connector.</p>\n<p>With a file loaded in the FilePicker, update the Text widget content to display the file’s name, using the following binding:</p>\n<pre><code class=\"lang-json\">{{FilePicker1.files[0].name}}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742038453982/54ed237d-713e-42ed-a162-3a1f34a4fdcb.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Then go back to the <strong>Query</strong> tab, and update the API body to use the data from the FilePicker.</p>\n<pre><code class=\"lang-json\">{{ \n{\n    <span class=\"hljs-attr\">\"inputs\"</span>: FilePicker1.files[<span class=\"hljs-number\">0</span>].data\n}\n}}\n</code></pre>\n<p>You should see the file’s text inserted into the API body.</p>\n<p><strong><em>Note*</em></strong>: If the text still shows as Base64, you may have to refresh the page after changing the FilePicker data type from Base64 to Text.*</p>\n<p>Click <strong>Run</strong> and this time you should get back a new list of named entities, extracted from your text document.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742038904797/ed420d41-0762-4c3e-b8aa-9d577532e3cf.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Now go back to the <strong>UI</strong> tab, and set the Table widget to display this response data.</p>\n<pre><code class=\"lang-json\">{{NER_BERT.data}}\n</code></pre>\n<p>You can also set the FilePicker to run the NER_BERT query when a new file is uploaded, using the <code>onFileSelected</code> event.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1742039108379/dd8e7207-1890-4f95-86a5-a3c246c44ccc.png\" alt class=\"image--center mx-auto\" /></p>\n<p><strong>Deploy!</strong> 🚀</p>\n<p>Deploy the app and test it out! You should now be able to upload a local text or markdown file and extract named entities from the document. From here, you can integrate with any REST or GraphQL API, database, or S3 storage to save the response. Or you could query data from an API or database and use that as the input to perform NER, and enrich existing data.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Named Entity Recognition has a wide range of use cases, from tagging files and creating metadata, to automations and knowledge graphs for retrieval-augmented generation. The BERT series of models excels at NER, and Hugging Face makes it easy to integrate it into any app. From here you can save the data to any API or database, trigger automations, or send the data to a human reviewer before running a workflow.</p>\n","contentMarkdown":"## What is NER (Named Entity Recognition)?\n\n*Named Entity Recognition* is a technique in Natural Language Processing (NLP), which involves identifying and classifying entities—such as names of people, organizations, locations, dates, and numerical values—within unstructured text. This process transforms raw text into structured data, enhancing information retrieval, content categorization, and the functionality of applications like email, document editors, search engines and chatbots. Once the structured data is extracted, it can be used to create tags, knowledge graphs, or metadata, or to trigger automations.\n\nIn this guide, we’ll cover the basics of NER, and how to use it to extract structured data from your own documents. From there you can trigger automations based on the extracted data, update records with metadata, or send the data to a human-reviewer before triggering a workflow.\n\n**This guide will cover:**\n\n* History of NER and use cases\n    \n* BERT Model for NER\n    \n* Hugging Face Platform for Model Hosting\n    \n* Connecting to Models in Hugging Face from Appsmith\n    \n* Extracting Data from Local Files with NER/BERT\n    \n\n## A Brief History of NER\n\nRule-Based NER has been around since the **1990’s** with email applications and document editors detecting email addresses, names, dates, etc. These approaches use REGEX, dictionaries, and other text-parsing rules to match predefined patterns. Then in the **2000’s**, search engines like Google began to use machine-learning NER with knowledge graphs to store data extracted from web pages, and enhance search results. In the **2010’s** we saw Siri and Alexa using NER to interpret voice commands. And now in the **2020’s**, NER has become a key component of tagging, metadata, and Retrieval-Augmented Generation Pipelines.\n\nThe tools for performing NER have advanced significantly with the rise of large language models and transformers. And with these new tools, you can automate NER tasks that enrich data in your RAG pipeline, generate knowledge graphs for GraphRAG, or power automations and agents.\n\n## Who’s BERT?\n\nBERT, (Bidirectional Encoder Representations from Transformers), is an open-source machine learning framework for natural language processing developed by Google in 2018. Designed to help computers understand the meaning of ambiguous language in text by using surrounding text to establish context, BERT marked a significant advancement in NLP. Unlike traditional models that read text sequentially, BERT reads entire sequences of words simultaneously, allowing it to grasp context and nuance more effectively. This bidirectional approach enables BERT to achieve state-of-the-art performance on various NLP tasks, including Named Entity Recognition, by considering both preceding and following words in a sentence.\n\n### Fine-Tuned Models for Specialized Fields\n\nSince BERT Is open-source, anyone can modify it and fine-tune a specialized version for specific domains. There are several popular variants already published, like:\n\n| **Specialized Models** | **Reasoning** | **Domains** |\n| --- | --- | --- |\n| **BioBERT** | Optimized for biomedical NER, clinical entities extraction. | Biomedical / Clinical |\n| **SciBERT** | Optimized for extracting entities from scientific texts. | Scientific / Research Papers |\n| **CamemBERT** | NER for French-language corpora. | General French NER |\n| **LegalBERT** | Specialized for legal-domain entity extraction. | Legal texts |\n| **mBERT** | Multilingual entity extraction across various languages. | Multilingual / Cross-lingual |\n| **RoBERTa** | General-purpose, improved accuracy, robust for general NER. | General English |\n\nIn this guide, I’ll be using [`bert-large-cased-finetuned-conll03-english`](https://huggingface.co/dbmdz/bert-large-cased-finetuned-conll03-english), a model that’s fine-tuned for NER using the [conll2003](https://huggingface.co/datasets/eriktks/conll2003) dataset.\n\n## [What’s Hugging Face?](https://huggingface.co/dbmdz/bert-large-cased-finetuned-conll03-english)\n\n[​Hugging Face](https://huggingface.co/dbmdz/bert-large-cased-finetuned-conll03-english) is a popular open-source platform specializing in machine learning and natural language processing (NLP). Hugging Face enables developers to build, train, and deploy machine learning models easily, and in the cloud. Their Transformers library has become a standard in NLP tasks. In this guide, we’ll be using Hugging Face’s API to process text with the BERT model.\n\n### Creating an Access Token\n\nStart out by creating an account with Hugging Face, and then go to the [Access Token page](https://huggingface.co/settings/tokens). Create a new token, give it a name, and enable the options to *make calls to Inference providers and Endpoints.*\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1742036543027/f5ce84be-0e1a-4f86-bd8a-b3dc9a0d0318.png align=\"center\")\n\nScroll down and click **Create token**, then leave this page open so we can copy the token to Appsmith in the next section.\n\n## Connecting to Hugging Face Models from Appsmith\n\nClick the **Query** tab from the Appsmith editor and add a new REST API. Configure the API as follows:\n\n| Name | NER\\_BERT |\n| --- | --- |\n| Method | POST |\n| URL | [https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english](https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english) |\n| Body Type | JSON |\n| Body | {{ { \"inputs\": \"Jesse and Mr. White went to the car wash.\" } }} |\n| Header | Authorization: Bearer YOUR\\_API\\_TOKEN |\n\nClick **RUN** and you should get back a response from Hugging Face.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1742037165541/1edfd8fa-7887-423f-ade9-e69680260236.png align=\"center\")\n\nNotice the response structure. Each entity that was extracted has an `entity_group` (`PER` in this case, for Person), and a confidence score, along with the extract word and its start and end position. You’ll also see `ORG` used for organization, `LOC` for location, and `MISC` for miscellaneous. Other specialized models may have additional groups based on their specific domain and use case.\n\n### Saving the Credentials to a Datasource\n\nNext, click the **Save URL** button (below Run button), so we can move the API token to a secure datasource.\n\nName the datasource, then change the *Authentication type* to **Bearer Token**. Then copy the bearer token to the encrypted *Bearer token* field with the green lock icon.\n\nLastly, delete the original Authorization Header that was stored in plain text, then click **Save**.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1742037952832/1b6fafb0-c344-429e-bbc1-333331e2e9c8.png align=\"center\")\n\nRetest the API. If everything is set up correctly, you should get back the same response as before, and the API token will no longer be stored in the API in plain text. This saves the credentials securely on your self-hosted Appsmith server (or the free cloud), and removes it from the app definition.\n\n### Building the UI to Upload Files\n\nLastly, we’ll add a UI to select files from the local file system, then send the data to Hugging Face/BERT. Click the UI tab and drag in a Text widget, Table widget and a FilePicker widget. Set the FilePicker’s data type to `Text`.\n\nNext, click the FilePicker and upload a local text or markdown file. In my case, I’m using markdown from a page of the Appsmith documentation on the OpenAI connector.\n\nWith a file loaded in the FilePicker, update the Text widget content to display the file’s name, using the following binding:\n\n```json\n{{FilePicker1.files[0].name}}\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1742038453982/54ed237d-713e-42ed-a162-3a1f34a4fdcb.png align=\"center\")\n\nThen go back to the **Query** tab, and update the API body to use the data from the FilePicker.\n\n```json\n{{ \n{\n\t\"inputs\": FilePicker1.files[0].data\n}\n}}\n```\n\nYou should see the file’s text inserted into the API body.\n\n***Note****: If the text still shows as Base64, you may have to refresh the page after changing the FilePicker data type from Base64 to Text.*\n\nClick **Run** and this time you should get back a new list of named entities, extracted from your text document.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1742038904797/ed420d41-0762-4c3e-b8aa-9d577532e3cf.png align=\"center\")\n\nNow go back to the **UI** tab, and set the Table widget to display this response data.\n\n```json\n{{NER_BERT.data}}\n```\n\nYou can also set the FilePicker to run the NER\\_BERT query when a new file is uploaded, using the `onFileSelected` event.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1742039108379/dd8e7207-1890-4f95-86a5-a3c246c44ccc.png align=\"center\")\n\n**Deploy!** 🚀\n\nDeploy the app and test it out! You should now be able to upload a local text or markdown file and extract named entities from the document. From here, you can integrate with any REST or GraphQL API, database, or S3 storage to save the response. Or you could query data from an API or database and use that as the input to perform NER, and enrich existing data.\n\n## Conclusion\n\nNamed Entity Recognition has a wide range of use cases, from tagging files and creating metadata, to automations and knowledge graphs for retrieval-augmented generation. The BERT series of models excels at NER, and Hugging Face makes it easy to integrate it into any app. From here you can save the data to any API or database, trigger automations, or send the data to a human reviewer before running a workflow.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1742040197681/d61321ec-9deb-4d30-8bbd-09df008439fb.png","brief":"What is NER (Named Entity Recognition)?\nNamed Entity Recognition is a technique in Natural Language Processing (NLP), which involves identifying and classifying entities—such as names of people, organizations, locations, dates, and numerical values—w...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":6,"draft":"67d4d06bb14687dc4eb09a95","tags":["5992814f0bcf15061f141029","635fb8ecb09e815e60a566cc","573a8e38a5dc678fc9090d31","63b1e1e6d1e499a9b8578433","635ad52efe8087002dee4707","63c1667e09eddfeb66db5ebb","599281200bcf15061f141025","639b01f8d1e499a9b82e1b16","62f244a4408d676b1b589b55"],"publication":"60771c264155da32fc83ad6e","series":"67d765f0447947a764ae3d33","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"67d7ac66dcf33753f930fd38"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"67cf20173beec36e2700cb57","createdAt":"2025-03-10T17:23:35.194Z","updatedAt":"2025-03-16T00:33:33.411Z","views":331,"isActive":true,"hasLatex":false,"popularity":7391.4714,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"FileMaker Web Viewer Copilot with OpenAI Assistant and CodeMirror.js","subtitle":"Generate Custom UI Components With Plain Text Prompts","cuid":"cm83bzu6u000009lee1trh677","dateAdded":"2025-03-10T17:23:35.190Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"filemaker-web-viewer-copilot-with-openai-assistant-and-codemirrorjs","content":"<p>Web viewers in FileMaker Pro are a great way to extend the platform and create new UI components that would otherwise be impossible. The results can be extremely powerful, but working with web viewers and writing the code in FileMaker Pro can be a huge pain, due to the lack of a proper code editor with formatting and syntax highlighting. That’s what led me to build this <a target=\"_blank\" href=\"https://blog.greenflux.us/why-i-built-a-code-editor-inside-filemaker-pro\">CodeMirror Web Viewer app</a> last year, to simplify the process of writing and testing web viewer code. This app makes developing new web viewers much easier, by eliminating the need to copy/paste code into a separate code editor. However, I still found myself copy/pasting code in chatGPT for more advanced solutions.</p>\n<p>So I decided to take this a step further, and integrate the <a target=\"_blank\" href=\"https://blog.greenflux.us/why-i-built-a-code-editor-inside-filemaker-pro\">CodeMirror app</a> with the <a target=\"_blank\" href=\"https://blog.greenflux.us/chatfmp-filemaker-pro-starter-template-for-integrating-openai-assistants\">ChatFMP app</a> I made for integrating with an OpenAI Assistant. This enables you to describe the web viewer you want in plain English, and the assistant will return the code and generate a new UI component with a single prompt.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741547865130/ab132a25-08c7-410d-8193-d010d8cd5919.gif\" alt class=\"image--center mx-auto\" /></p>\n<p>In this guide, I’ll show how to integrate an OpenAI Assistant to FileMaker Pro to write HTML, and display the results in a web viewer. I’ll be skipping over some of the details from the original CodeMirror and ChatFMP apps, and focusing more on how the two have been integrated together. See the original tutorials for more details on building this from scratch, or just copy the finished app from the <a target=\"_blank\" href=\"https://github.com/GreenFluxLLC/FileMaker-Experiments\">GitHub Repo</a>.</p>\n<p><strong>This Guide will cover:</strong></p>\n<ul>\n<li><p>Creating an OpenAI Assistant to write HTML for FMP web viewers</p>\n</li>\n<li><p>Chatting with the Assistant from FileMaker Pro</p>\n</li>\n<li><p>Displaying the HTML from the assistant in a web viewer</p>\n</li>\n<li><p>Inserting data from FMP records into the new UI component</p>\n</li>\n</ul>\n<p><em>Let’s Get Started!</em></p>\n<h2 id=\"heading-creating-an-openai-assistant\">Creating an OpenAI Assistant</h2>\n<p>Start out by creating a new assistant from the <a target=\"_blank\" href=\"https://platform.openai.com/assistants\">OpenAI Dashboard</a>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741622288594/25f88dec-d3df-4a73-9f8a-53fa35bac4e5.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Note the Assistant ID under the name. You’ll need to copy this in a few steps.</p>\n<p>Name the assistant, and enter the following <strong>System instructions</strong>:</p>\n<pre><code class=\"lang-plaintext\">Your job is to write HTML docs to create UI components in a FileMaker web viewer, similar to an iframe. \nUse client side JS libraries when appropriate, and generate all code in a single HTML doc with style and script tags. \nDo not respond with any text before or after the HTML code. DO NOT wrap the code in back ticks \"```html\". Return only the HTML.\n</code></pre>\n<p>I’ve found that asking it to return only the HTML makes it easier to parse the response, and it is consistent in following these instructions. However, it still likes to wrap the code in backticks <code>``` </code>, and it tends to do so even when you ask it not to, depending on the model. So we’ll have to handle that in FMP when parsing the response.</p>\n<p>For the model, I would suggest trying <code>o3-mini</code> or <code>gpt-4o</code> first, but you should experiment with different models and see what works best for your use case.</p>\n<p>Next, head over to the <a target=\"_blank\" href=\"https://platform.openai.com/api-keys\">API Keys</a> section and create a new key.</p>\n<p>Then keep the dashboard open so we can copy the key and assistant ID in the next section.</p>\n<h2 id=\"heading-chatting-with-the-assistant\">Chatting with the Assistant</h2>\n<p>For this new Web Viewer Copilot app, I decided to build on top of a copy of the CodeMirror app because it already had most of the functionality I needed. If you want to follow along building on top of the same app, you can copy it from the repo, <a target=\"_blank\" href=\"https://github.com/GreenFluxLLC/FileMaker-Experiments/tree/main/CodeMirror\">here</a>. I’ll also be importing a custom function and scripts from the ChatFMP app (<a target=\"_blank\" href=\"https://github.com/GreenFluxLLC/FileMaker-Experiments/tree/main/ChatFMP\">repo</a>).</p>\n<p>Start out by opening the CodeMirror app and add 3 new text fields to the CodeMirror table: <code>thread_id</code>, <code>prompt</code>, and <code>response</code>.</p>\n<p>Then, make sure you have the ChatFMP saved somewhere locally so you can import from it.</p>\n<p>Go to <code>File&gt;Manage&gt;Custom Functions</code>, and click <strong>Import</strong>. Then select the ChatFMP app, and import the <code>curl</code> function.</p>\n<p>This is used in a few of the scripts we’ll be importing, so be sure to import the custom function first! Otherwise, you’ll see the code in the scripts commented out <code>/*…*/</code> and you’ll have to manually correct all of the bad references.</p>\n<p>The function is similar to using fetch in JavaScript, and simplifies the formatting for curl requests.</p>\n<p>Next, go to <code>Scripts&gt;Import</code>, and select the ChatFMP app. Import the <code>Create Thread</code> and <code>Add Message</code> scripts.</p>\n<p>The <em>Create Thread</em> script will start a new thread and save the ID, so that each record in the CodeMirror table can be its own conversation with the assistant, and a different web viewer code. And the <em>Add Message</em> script sends the value from the prompt field to the assistant, then saves the reply in the response field.</p>\n<p>In the ChatFMP scripts, the main table is called ChatFMP, but in this new app we’re working in the CodeMirror table. So there are a few places where the table reference needs updated before the scripts will work. Update all the table references, and the scripts should be ready to work in the new app.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741623373031/4e105eb2-39ac-440b-8ca8-a2c236422f78.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Next, update the <em>Create Thread</em> script to add your <code>assistant_id</code> and <code>API key</code>.</p>\n<p>Then add the <strong>prompt</strong> field to the UI, and add a script trigger to run the <em>Add Message</em> script when the field is saved.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741623559621/13655a44-d6df-4b13-b35a-cf69ff253ca8.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-displaying-the-response-in-a-web-viewer\">Displaying the response in a web viewer</h2>\n<p>Next, we’ll update the <em>Add Message</em> script to perform a few more actions once the response is received. Instead of displaying it directly, we want to remove the backticks <code>``` </code> and save the HTML to the <code>doc</code> field. This is the field that the web viewer on the right uses as its source.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741623795818/19ba76c1-b9c6-4e69-bb1c-9ca48fcb1b9e.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Here you can see the last few lines I added to parse the response and update the UI. To remove the backticks and html wrapper, use <code>Substitute()</code> on the <code>$last_message</code> variable.</p>\n<pre><code class=\"lang-plaintext\">Substitute ( $last_message ; \n\n  [ \"```html\n\" ; \"\" ];\n  [ \"```\" ; \"\" ]\n\n )\n</code></pre>\n<p>I had some issues getting the web viewer to refresh when the doc field was updated, so I’ve added a few extra steps to ensure it’s displaying the most recent value.</p>\n<h2 id=\"heading-testing-out-the-copilot\">Testing Out the Copilot</h2>\n<p><strong>Time to test it out!</strong> Try entering a prompt and see what kind of UI components you can build.</p>\n<p><em>Here are a few examples:</em></p>\n<p><strong>PROMPT</strong>: Calendar with week view, and mock data for 2nd week of March, 2025, using fullcalendar.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741624540797/866d5d9d-6bb5-4305-8cba-46f4908151d4.png\" alt class=\"image--center mx-auto\" /></p>\n<p><strong>PROMPT</strong>: Sankey chart for budget of a software company, using echarts</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741624393442/2d01c50f-139d-41db-85eb-d24658d46364.png\" alt class=\"image--center mx-auto\" /></p>\n<p><strong>PROMPT</strong>: radar map of support tickets using echarts</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741624499829/4a9ca919-5a75-43ab-be19-f326e71fcf0b.png\" alt class=\"image--center mx-auto\" /></p>\n<p><strong>PROMPT</strong>: organizational chart for manufacturing company, using the orgchart library</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1741624815352/47e2c6e6-dc1f-4020-a31a-1acc061f2309.png\" alt class=\"image--center mx-auto\" /></p>\n<p>All of these examples worked on the first try, except this last one. The code generated was using a bad link, so the script didn’t import. I found an updated link to a working CDN and provided it to the assistant, and it was able to generate a working org chart.</p>\n<p>Since each record is its own thread, you can ask for follow-up changes without having to re-enter the first prompt. The assistant will maintain context and message history, so you can ask for adjustments and iterate on the code.</p>\n<h2 id=\"heading-inserting-data-from-fmp-records\">Inserting data from FMP records</h2>\n<p>Ok, you’ve generated the perfect new UI component and now you want to tie in your data. This is where things get a little tricky, because every JavaScript library is going to have a different format for the data, and other parts of the code may have to be updated to reference the field names in your data. Some libraries like eCharts may just need an array of numbers inserted with <code>Substitute()</code>, and the rest can be hard-coded. Others, like this OrgChart library require a complex nested JSON structure.</p>\n<p>Then there’s the structure of your input data. Are you wanting to display a single record, a list of related records, summary data?</p>\n<p>There’s no straightforward answer here. It all depends on the shape of your data, and the format expected by the library. I would recommend using a combination of <code>Let</code>, <code>ExecuteSQL</code>, and FileMaker’s JSON functions to return a value as close as possible to the input data used in the HTML. Then use Substitute() to insert this into the Doc field. You can leave a placeholder in the HTML like <code>FMP_DATA</code>, and then replace it with your data.</p>\n<p>If you’re not able to construct the proper data structure using FMP functions, get as close as you can, then provide a sample of the data with your prompt. The assistant should be able to modify the code to accept your input data and transform it with JavaScript as needed, in order to be compatible with the particular JavaScript libraries used in your web viewer code.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Web Viewers in FileMaker are a flexible tool to solve a wide range of problems, but they come with their own set of challenges. Many of the formatting and validation issues can be solved using CodeMirror in a web viewer, but this still requires writing a lot of code manually. By integrating with an OpenAI Assistant, you can build a Web Viewer Copilot that writes code for you, generating new web viewers with a simple text prompt.</p>\n<h3 id=\"heading-inspiration\">Inspiration</h3>\n<p>I was inspired to write this tutorial after using the new Custom Widget Copilot in Appsmith. This native AI integration provides the same functionality out of the box, without having to create your own assistant and integrate it to the platform.</p>\n<p><strong>Check it out in action!</strong> <a target=\"_blank\" href=\"https://youtu.be/zBKeJf7a7dM\">https://youtu.be/zBKeJf7a7dM</a></p>\n<p><img src=\"https://i9.ytimg.com/vi_webp/zBKeJf7a7dM/maxresdefault.webp?v=678481c7&amp;sqp=CJC1vL4G&amp;rs=AOn4CLDf_pCA6d7To76hts-9oi7i1Fm2dA\" alt /></p>\n","contentMarkdown":"Web viewers in FileMaker Pro are a great way to extend the platform and create new UI components that would otherwise be impossible. The results can be extremely powerful, but working with web viewers and writing the code in FileMaker Pro can be a huge pain, due to the lack of a proper code editor with formatting and syntax highlighting. That’s what led me to build this [CodeMirror Web Viewer app](https://blog.greenflux.us/why-i-built-a-code-editor-inside-filemaker-pro) last year, to simplify the process of writing and testing web viewer code. This app makes developing new web viewers much easier, by eliminating the need to copy/paste code into a separate code editor. However, I still found myself copy/pasting code in chatGPT for more advanced solutions.\n\nSo I decided to take this a step further, and integrate the [CodeMirror app](https://blog.greenflux.us/why-i-built-a-code-editor-inside-filemaker-pro) with the [ChatFMP app](https://blog.greenflux.us/chatfmp-filemaker-pro-starter-template-for-integrating-openai-assistants) I made for integrating with an OpenAI Assistant. This enables you to describe the web viewer you want in plain English, and the assistant will return the code and generate a new UI component with a single prompt.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1741547865130/ab132a25-08c7-410d-8193-d010d8cd5919.gif align=\"center\")\n\nIn this guide, I’ll show how to integrate an OpenAI Assistant to FileMaker Pro to write HTML, and display the results in a web viewer. I’ll be skipping over some of the details from the original CodeMirror and ChatFMP apps, and focusing more on how the two have been integrated together. See the original tutorials for more details on building this from scratch, or just copy the finished app from the [GitHub Repo](https://github.com/GreenFluxLLC/FileMaker-Experiments).\n\n**This Guide will cover:**\n\n* Creating an OpenAI Assistant to write HTML for FMP web viewers\n    \n* Chatting with the Assistant from FileMaker Pro\n    \n* Displaying the HTML from the assistant in a web viewer\n    \n* Inserting data from FMP records into the new UI component\n    \n\n*Let’s Get Started!*\n\n## Creating an OpenAI Assistant\n\nStart out by creating a new assistant from the [OpenAI Dashboard](https://platform.openai.com/assistants).\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1741622288594/25f88dec-d3df-4a73-9f8a-53fa35bac4e5.png align=\"center\")\n\nNote the Assistant ID under the name. You’ll need to copy this in a few steps.\n\nName the assistant, and enter the following **System instructions**:\n\n```plaintext\nYour job is to write HTML docs to create UI components in a FileMaker web viewer, similar to an iframe. \nUse client side JS libraries when appropriate, and generate all code in a single HTML doc with style and script tags. \nDo not respond with any text before or after the HTML code. DO NOT wrap the code in back ticks \"```html\". Return only the HTML. \n```\n\nI’ve found that asking it to return only the HTML makes it easier to parse the response, and it is consistent in following these instructions. However, it still likes to wrap the code in backticks ` ``` `, and it tends to do so even when you ask it not to, depending on the model. So we’ll have to handle that in FMP when parsing the response.\n\nFor the model, I would suggest trying `o3-mini` or `gpt-4o` first, but you should experiment with different models and see what works best for your use case.\n\nNext, head over to the [API Keys](https://platform.openai.com/api-keys) section and create a new key.\n\nThen keep the dashboard open so we can copy the key and assistant ID in the next section.\n\n## Chatting with the Assistant\n\nFor this new Web Viewer Copilot app, I decided to build on top of a copy of the CodeMirror app because it already had most of the functionality I needed. If you want to follow along building on top of the same app, you can copy it from the repo, [here](https://github.com/GreenFluxLLC/FileMaker-Experiments/tree/main/CodeMirror). I’ll also be importing a custom function and scripts from the ChatFMP app ([repo](https://github.com/GreenFluxLLC/FileMaker-Experiments/tree/main/ChatFMP)).\n\nStart out by opening the CodeMirror app and add 3 new text fields to the CodeMirror table: `thread_id`, `prompt`, and `response`.\n\nThen, make sure you have the ChatFMP saved somewhere locally so you can import from it.\n\nGo to `File>Manage>Custom Functions`, and click **Import**. Then select the ChatFMP app, and import the `curl` function.\n\nThis is used in a few of the scripts we’ll be importing, so be sure to import the custom function first! Otherwise, you’ll see the code in the scripts commented out `/*…*/` and you’ll have to manually correct all of the bad references.\n\nThe function is similar to using fetch in JavaScript, and simplifies the formatting for curl requests.\n\nNext, go to `Scripts>Import`, and select the ChatFMP app. Import the `Create Thread` and `Add Message` scripts.\n\nThe *Create Thread* script will start a new thread and save the ID, so that each record in the CodeMirror table can be its own conversation with the assistant, and a different web viewer code. And the *Add Message* script sends the value from the prompt field to the assistant, then saves the reply in the response field.\n\nIn the ChatFMP scripts, the main table is called ChatFMP, but in this new app we’re working in the CodeMirror table. So there are a few places where the table reference needs updated before the scripts will work. Update all the table references, and the scripts should be ready to work in the new app.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1741623373031/4e105eb2-39ac-440b-8ca8-a2c236422f78.png align=\"center\")\n\nNext, update the *Create Thread* script to add your `assistant_id` and `API key`.\n\nThen add the **prompt** field to the UI, and add a script trigger to run the *Add Message* script when the field is saved.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1741623559621/13655a44-d6df-4b13-b35a-cf69ff253ca8.png align=\"center\")\n\n## Displaying the response in a web viewer\n\nNext, we’ll update the *Add Message* script to perform a few more actions once the response is received. Instead of displaying it directly, we want to remove the backticks ` ``` ` and save the HTML to the `doc` field. This is the field that the web viewer on the right uses as its source.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1741623795818/19ba76c1-b9c6-4e69-bb1c-9ca48fcb1b9e.png align=\"center\")\n\nHere you can see the last few lines I added to parse the response and update the UI. To remove the backticks and html wrapper, use `Substitute()` on the `$last_message` variable.\n\n```plaintext\nSubstitute ( $last_message ; \n\n  [ \"```html\n\" ; \"\" ];\n  [ \"```\" ; \"\" ]\n\n )\n```\n\nI had some issues getting the web viewer to refresh when the doc field was updated, so I’ve added a few extra steps to ensure it’s displaying the most recent value.\n\n## Testing Out the Copilot\n\n**Time to test it out!** Try entering a prompt and see what kind of UI components you can build.\n\n*Here are a few examples:*\n\n**PROMPT**: Calendar with week view, and mock data for 2nd week of March, 2025, using fullcalendar.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1741624540797/866d5d9d-6bb5-4305-8cba-46f4908151d4.png align=\"center\")\n\n**PROMPT**: Sankey chart for budget of a software company, using echarts\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1741624393442/2d01c50f-139d-41db-85eb-d24658d46364.png align=\"center\")\n\n**PROMPT**: radar map of support tickets using echarts\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1741624499829/4a9ca919-5a75-43ab-be19-f326e71fcf0b.png align=\"center\")\n\n**PROMPT**: organizational chart for manufacturing company, using the orgchart library\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1741624815352/47e2c6e6-dc1f-4020-a31a-1acc061f2309.png align=\"center\")\n\nAll of these examples worked on the first try, except this last one. The code generated was using a bad link, so the script didn’t import. I found an updated link to a working CDN and provided it to the assistant, and it was able to generate a working org chart.\n\nSince each record is its own thread, you can ask for follow-up changes without having to re-enter the first prompt. The assistant will maintain context and message history, so you can ask for adjustments and iterate on the code.\n\n## Inserting data from FMP records\n\nOk, you’ve generated the perfect new UI component and now you want to tie in your data. This is where things get a little tricky, because every JavaScript library is going to have a different format for the data, and other parts of the code may have to be updated to reference the field names in your data. Some libraries like eCharts may just need an array of numbers inserted with `Substitute()`, and the rest can be hard-coded. Others, like this OrgChart library require a complex nested JSON structure.\n\nThen there’s the structure of your input data. Are you wanting to display a single record, a list of related records, summary data?\n\nThere’s no straightforward answer here. It all depends on the shape of your data, and the format expected by the library. I would recommend using a combination of `Let`, `ExecuteSQL`, and FileMaker’s JSON functions to return a value as close as possible to the input data used in the HTML. Then use Substitute() to insert this into the Doc field. You can leave a placeholder in the HTML like `FMP_DATA`, and then replace it with your data.\n\nIf you’re not able to construct the proper data structure using FMP functions, get as close as you can, then provide a sample of the data with your prompt. The assistant should be able to modify the code to accept your input data and transform it with JavaScript as needed, in order to be compatible with the particular JavaScript libraries used in your web viewer code.\n\n## Conclusion\n\nWeb Viewers in FileMaker are a flexible tool to solve a wide range of problems, but they come with their own set of challenges. Many of the formatting and validation issues can be solved using CodeMirror in a web viewer, but this still requires writing a lot of code manually. By integrating with an OpenAI Assistant, you can build a Web Viewer Copilot that writes code for you, generating new web viewers with a simple text prompt.\n\n### Inspiration\n\nI was inspired to write this tutorial after using the new Custom Widget Copilot in Appsmith. This native AI integration provides the same functionality out of the box, without having to create your own assistant and integrate it to the platform.\n\n**Check it out in action!** [https://youtu.be/zBKeJf7a7dM](https://youtu.be/zBKeJf7a7dM)\n\n![](https://i9.ytimg.com/vi_webp/zBKeJf7a7dM/maxresdefault.webp?v=678481c7&sqp=CJC1vL4G&rs=AOn4CLDf_pCA6d7To76hts-9oi7i1Fm2dA align=\"left\")","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1741626218253/1869ad39-c19a-4f52-ba2d-2be50cab59b3.png","brief":"Web viewers in FileMaker Pro are a great way to extend the platform and create new UI components that would otherwise be impossible. The results can be extremely powerful, but working with web viewers and writing the code in FileMaker Pro can be a hu...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":8,"draft":"67cde1dd5c3a13dfe3e1087f","tags":["6483259e8a9f5d9098c40f65","66ae6b4aa3a2a11383215a48","5f1a7b4309e95d4d18c3b2ee","658315f87f2e4b55d0bba63f","647707c98a9f5d9098ffbafd"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"dateUpdated":"2025-03-16T00:33:33.411Z","hasCustomDate":false,"series":"67d61af88a2ed4175bcf3b13","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"67cf20173beec36e2700cb57"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"67abb5bf0dfaca9201ae8810","createdAt":"2025-02-11T20:40:31.322Z","updatedAt":"2025-02-14T04:54:04.344Z","views":104,"isActive":true,"hasLatex":false,"popularity":7341.1951,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":20,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"52 Weeks of Video Tutorials: What I Learned About Content Creation, Community, and Developer Relations","cuid":"cm70y53ko000e09lhb0g002ph","dateAdded":"2025-02-11T20:40:31.320Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"52-weeks-of-video-tutorials-what-i-learned-about-content-creation-community-and-developer-relations","content":"<p>Just over a year ago, I had no real experience in recording video tutorials, or in the editing or distribution process. I had experimented with a few, but never consistently, and I had no idea what I was doing on the editing side. After some encouragement from my supervisor at the time (thanks Ron!), I decided to start a weekly series, and challenge myself to produce one video a week for a full year. So at the beginning of 2024, the Appsmith <a target=\"_blank\" href=\"https://www.youtube.com/playlist?list=PLE_KXGiWfqwhADyWxNZJhwn7HF89KxiKB\"><em>Friday Tech Workshop</em></a> series was born. <code>#AppsmithFTW</code> 😉</p>\n<p>Last month marked a full year of weekly videos, with #52 added to the series! There were weeks were I barely finished recording in time, and few videos that definitely felt rushed, and not by best quality. But forcing myself to stick to one video a week helped me gain a deep understanding of the entire process in a short time. Below are my top learnings from the experience.</p>\n<h2 id=\"heading-plan-script-before-recording\">Plan Script Before Recording 📝</h2>\n<p>At first I was just winging it, and not writing out an actual script. I’d have some notes, and a finished copy of the app I was going to build, and then start recording. This led to a lot of retakes, which meant more editing to stitch it together later— and I was super-slow at editing at first. For most of these videos, I’d end up publishing a written version on our community portal anyway, so I just moved that to the first step. The <a target=\"_blank\" href=\"https://community.appsmith.com/a/josephappsmith\">tutorials</a> became my script, and actually came in handy during recording for copying code snippets!</p>\n<p>Once I started writing the tutorial version first, recording went SO much smoother, and I had way less editing to do. This one change saved me more time than anything else, and also improved the quality of the video content.</p>\n<h2 id=\"heading-capture-quality-matters\">Capture Quality Matters 🎥</h2>\n<p>There’s only so much you can do in editing to improve the audio and video quality. At first I was just using the built-in camera and mic on my laptop, and you can see a huge difference in quality between those earlier videos and the newer ones. Additionally, having a separate camera enables me to do different shots and angles that I couldn’t do with the laptop camera. I started doing a centered camera shot for the intros, and then move the camera to a side shot while coding.</p>\n<p>I don’t want to make this a post about recommending specific gear, so I’ll just say that I went with a newer USB-C mic, instead of the XLR ones that often require a preamp. The camera is an HD webcam made for streaming, and is also UBS-C. If you’re really interested, ask in the comments and I’d be glad to recommend them.</p>\n<p>Along with capture quality, is good lighting, regardless of the camera. This can make a huge difference on its own. I’m no expert here, but I know someone who is:</p>\n<p><a target=\"_blank\" href=\"https://www.youtube.com/watch?v=Q_Ui3nCVxbM\">Video Light: Go from AMATEUR to PRO with this Simple Setup Under $200</a></p>\n<h2 id=\"heading-editing-learn-the-keyboard-shortcuts\">Editing: Learn the Keyboard Shortcuts! ⌨</h2>\n<p>Ok, I avoided promoting anything specific when talking about hardware, but the editing software I use is free! DaVinci Resolve is an excellent video editor, and learning my way around the keyboard shortcuts has made the process much more efficient.</p>\n<p>The majority of the editing I do is just trimming out certain sections. It’s a lot of repetition, especially when only using the mouse. Often I have to zoom in/out on the audio to find exactly where I want to split the clip, then select it and click split. It’s way faster using keyboard shortcuts to zoom, and then another shortcut to split a clip at the current position. Then the mouse is only used to select the position, and everything else is keyboard shortcuts. I cut my editing time by 2-3x just by learning these keyboard shortcuts!</p>\n<h2 id=\"heading-structure-videos-for-more-engagement\">Structure Videos for More Engagement 👀</h2>\n<h3 id=\"heading-start-at-the-end\">Start at the End</h3>\n<p>Most viewers drop within the first 30 seconds of a video. Nobody is going to wait until the end of the video to see if they might be interested in the end result. Hook more viewers by demonstrating the value of your video from the start, and then backup and show how you got there. Like a Tarantino movie!</p>\n<h3 id=\"heading-tell-show-tell-loops\">“Tell, Show, Tell” Loops</h3>\n<p>For longer videos, it helps to break the topics up into “Tell, Show, Tell” loops. This is a technique used to reinforce learning and retention by outlining what will be taught, teaching it, and then restating what was presented. Not only does this help your audience learn, but it provides useful breakpoints in the video that can work as stand alone clips later.</p>\n<h2 id=\"heading-the-results\">The Results ✅</h2>\n<h3 id=\"heading-subscribers\">Subscribers</h3>\n<p>Fifty-two weeks later, and this one playlist has gained 3500 subscribers, and nearly 40k views! The videos with the highest subscriber rate tended to be JavaScript heavy. Additionally, 3 of the top 5 are on best practices and in-depth videos on Appsmith features. Some of these have relatively low viewership, but extremely high subscriber-to-viewer ratios. The top one here had only 289 views, but 203 of them subscribed! That’s <strong>70 percent of viewers</strong> who subscribed on that one video!</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1739301224219/0c86c4b1-99fb-4f04-b172-c07b628211d7.png\" alt class=\"image--center mx-auto\" /></p>\n<h3 id=\"heading-viewership\">Viewership</h3>\n<p>On the view count, the top performing videos all included technical content around some other tech, in addition to Appsmith: Zendesk, Leaflet.js, Google Sheets, and JSPDF. These range in skill level from beginner to advanced, and in duration from 30 to 60 minutes. The main commonality is that they aren’t just showing the Appsmith product, but an actual use case and solution that integrates with another product. This is a complete 180 from the high subscriber videos, which tend to be purely Appsmith focused.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1739301465702/3b1daa9a-6a6c-4c10-9307-9f5c442315d8.png\" alt class=\"image--center mx-auto\" /></p>\n<p>What I’ve learned here is that these are two totally different types of content, and for viewers at different stages of their Appsmith journey. There’s no one type of video that consistently does well on both metrics. Each type supports a different goal for the viewer, and if that content meets the goal, a different metric is affected. Now that I’ve seen this distinction, I decide on the audience ahead of time and focus on the metric I want to affect most with a certain video.</p>\n<h3 id=\"heading-learn-through-repetition-grow-through-collaboration\">Learn Through Repetition, Grow Through Collaboration</h3>\n<p>A lot of what I learned was through trail and error, and repetition. But all along the way, I had an expert video producer and DevRel wizard at my side to pick his brain. Huge shoutout and thank you to Kevin Blanco for pointing me in the right direction on the many occasions when I was lost! If you want to learn from a true expert, check out his newsletter on DevRel Videos (<a target=\"_blank\" href=\"https://www.linkedin.com/newsletters/devreel-%25F0%259F%258E%25AC-weekly-7275960551397109760/\">DevReel</a> 🎬) and his <a target=\"_blank\" href=\"https://www.youtube.com/@KevinBlancoZ\">YouTube channel</a>.</p>\n<h3 id=\"heading-whats-next\">What’s Next?</h3>\n<p>With the full year of videos complete, I’ve decided to take a break, and change up the format for the next series. Producing a weekly video was great for quickly learning all of the new skills involved, but it’s also very demanding and makes it hard to travel. This year I’ll be focusing more on quality, and applying everything I’ve learned over the last year to provide more valuable content for the <a target=\"_blank\" href=\"https://community.appsmith.com/\">Appsmith community</a>.</p>\n<p><strong>What kind of content would you like to see more of?</strong> <em>Drop a comment below and let us know!</em></p>\n","contentMarkdown":"Just over a year ago, I had no real experience in recording video tutorials, or in the editing or distribution process. I had experimented with a few, but never consistently, and I had no idea what I was doing on the editing side. After some encouragement from my supervisor at the time (thanks Ron!), I decided to start a weekly series, and challenge myself to produce one video a week for a full year. So at the beginning of 2024, the Appsmith [*Friday Tech Workshop*](https://www.youtube.com/playlist?list=PLE_KXGiWfqwhADyWxNZJhwn7HF89KxiKB) series was born. `#AppsmithFTW` 😉\n\nLast month marked a full year of weekly videos, with #52 added to the series! There were weeks were I barely finished recording in time, and few videos that definitely felt rushed, and not by best quality. But forcing myself to stick to one video a week helped me gain a deep understanding of the entire process in a short time. Below are my top learnings from the experience.\n\n## Plan Script Before Recording 📝\n\nAt first I was just winging it, and not writing out an actual script. I’d have some notes, and a finished copy of the app I was going to build, and then start recording. This led to a lot of retakes, which meant more editing to stitch it together later— and I was super-slow at editing at first. For most of these videos, I’d end up publishing a written version on our community portal anyway, so I just moved that to the first step. The [tutorials](https://community.appsmith.com/a/josephappsmith) became my script, and actually came in handy during recording for copying code snippets!\n\nOnce I started writing the tutorial version first, recording went SO much smoother, and I had way less editing to do. This one change saved me more time than anything else, and also improved the quality of the video content.\n\n## Capture Quality Matters 🎥\n\nThere’s only so much you can do in editing to improve the audio and video quality. At first I was just using the built-in camera and mic on my laptop, and you can see a huge difference in quality between those earlier videos and the newer ones. Additionally, having a separate camera enables me to do different shots and angles that I couldn’t do with the laptop camera. I started doing a centered camera shot for the intros, and then move the camera to a side shot while coding.\n\nI don’t want to make this a post about recommending specific gear, so I’ll just say that I went with a newer USB-C mic, instead of the XLR ones that often require a preamp. The camera is an HD webcam made for streaming, and is also UBS-C. If you’re really interested, ask in the comments and I’d be glad to recommend them.\n\nAlong with capture quality, is good lighting, regardless of the camera. This can make a huge difference on its own. I’m no expert here, but I know someone who is:\n\n[Video Light: Go from AMATEUR to PRO with this Simple Setup Under $200](https://www.youtube.com/watch?v=Q_Ui3nCVxbM)\n\n## Editing: Learn the Keyboard Shortcuts! ⌨\n\nOk, I avoided promoting anything specific when talking about hardware, but the editing software I use is free! DaVinci Resolve is an excellent video editor, and learning my way around the keyboard shortcuts has made the process much more efficient.\n\nThe majority of the editing I do is just trimming out certain sections. It’s a lot of repetition, especially when only using the mouse. Often I have to zoom in/out on the audio to find exactly where I want to split the clip, then select it and click split. It’s way faster using keyboard shortcuts to zoom, and then another shortcut to split a clip at the current position. Then the mouse is only used to select the position, and everything else is keyboard shortcuts. I cut my editing time by 2-3x just by learning these keyboard shortcuts!\n\n## Structure Videos for More Engagement 👀\n\n### Start at the End\n\nMost viewers drop within the first 30 seconds of a video. Nobody is going to wait until the end of the video to see if they might be interested in the end result. Hook more viewers by demonstrating the value of your video from the start, and then backup and show how you got there. Like a Tarantino movie!\n\n### “Tell, Show, Tell” Loops\n\nFor longer videos, it helps to break the topics up into “Tell, Show, Tell” loops. This is a technique used to reinforce learning and retention by outlining what will be taught, teaching it, and then restating what was presented. Not only does this help your audience learn, but it provides useful breakpoints in the video that can work as stand alone clips later.\n\n## The Results ✅\n\n### Subscribers\n\nFifty-two weeks later, and this one playlist has gained 3500 subscribers, and nearly 40k views! The videos with the highest subscriber rate tended to be JavaScript heavy. Additionally, 3 of the top 5 are on best practices and in-depth videos on Appsmith features. Some of these have relatively low viewership, but extremely high subscriber-to-viewer ratios. The top one here had only 289 views, but 203 of them subscribed! That’s **70 percent of viewers** who subscribed on that one video!\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1739301224219/0c86c4b1-99fb-4f04-b172-c07b628211d7.png align=\"center\")\n\n### Viewership\n\nOn the view count, the top performing videos all included technical content around some other tech, in addition to Appsmith: Zendesk, Leaflet.js, Google Sheets, and JSPDF. These range in skill level from beginner to advanced, and in duration from 30 to 60 minutes. The main commonality is that they aren’t just showing the Appsmith product, but an actual use case and solution that integrates with another product. This is a complete 180 from the high subscriber videos, which tend to be purely Appsmith focused.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1739301465702/3b1daa9a-6a6c-4c10-9307-9f5c442315d8.png align=\"center\")\n\nWhat I’ve learned here is that these are two totally different types of content, and for viewers at different stages of their Appsmith journey. There’s no one type of video that consistently does well on both metrics. Each type supports a different goal for the viewer, and if that content meets the goal, a different metric is affected. Now that I’ve seen this distinction, I decide on the audience ahead of time and focus on the metric I want to affect most with a certain video.\n\n### Learn Through Repetition, Grow Through Collaboration\n\nA lot of what I learned was through trail and error, and repetition. But all along the way, I had an expert video producer and DevRel wizard at my side to pick his brain. Huge shoutout and thank you to Kevin Blanco for pointing me in the right direction on the many occasions when I was lost! If you want to learn from a true expert, check out his newsletter on DevRel Videos ([DevReel](https://www.linkedin.com/newsletters/devreel-%25F0%259F%258E%25AC-weekly-7275960551397109760/) 🎬) and his [YouTube channel](https://www.youtube.com/@KevinBlancoZ).\n\n### What’s Next?\n\nWith the full year of videos complete, I’ve decided to take a break, and change up the format for the next series. Producing a weekly video was great for quickly learning all of the new skills involved, but it’s also very demanding and makes it hard to travel. This year I’ll be focusing more on quality, and applying everything I’ve learned over the last year to provide more valuable content for the [Appsmith community](https://community.appsmith.com/).\n\n**What kind of content would you like to see more of?** *Drop a comment below and let us know!*","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1739306260834/7f89b986-586f-4802-913d-2484e13ff5d4.png","brief":"Just over a year ago, I had no real experience in recording video tutorials, or in the editing or distribution process. I had experimented with a few, but never consistently, and I had no idea what I was doing on the editing side. After some encourag...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":6,"draft":"67ab84a3995522c3c65a2adb","tags":["5c0fce175858a0172a95f7c1","56744723958ef13879b954e9","56744720958ef13879b947ce","56ced112f0ec33085f1cc5ab","63e346678dd6c5e912645b1f","56744721958ef13879b94cad","5f8d585789e922309e012a00","57ebac0bd9b08ec06a77be05"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"bannerImageAttribution":"","bannerImagePhotographer":"","stickBannerToBottom":false,"isBannerAttributionHidden":false,"dateUpdated":"2025-02-11T20:41:02.816Z","hasCustomDate":false,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"67abb5bf0dfaca9201ae8810"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"67a7698d825b1f3a0c9b1908","createdAt":"2025-02-08T14:26:21.812Z","updatedAt":"2025-02-08T14:26:21.812Z","views":223,"isActive":true,"hasLatex":false,"popularity":7333.6351,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Anti-Spam Agent: OpenAI Assistant Email Filter Using Google Apps Script","subtitle":"A Timer-driven Inbox Defender Against Spam","cuid":"cm6wagdf3000009l968du0jb9","dateAdded":"2025-02-08T14:26:21.808Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"anti-spam-agent-openai-assistant-email-filter-using-google-apps-script","content":"<p>I get a LOT of spam email that make it passed Google’s spam detection, and I’m constantly marking emails as spam and blocking senders. It’s a never-ending battle. Most of them end with something like</p>\n<p><em>“if this isn’t for you, just reply STOP”.<br />“P.S. Not the right fit? Just reply “no,” and I’ll take you off my list.”<br />“Not relevant? Just reply 'all good' and I'll stop messaging :)”</em></p>\n<p><img src=\"https://i.kym-cdn.com/photos/images/newsfeed/001/535/091/d97.jpg\" alt=\"No, I Don't Think I Will | Know Your Meme\" /></p>\n<p>These spammers just want your help warming up their email account so they can send more spam. By replying, you’re just boosting their sender reputation, and helping them get passed more spam filters and land in more inboxes.</p>\n<p>Every time I mark a message as spam, I think of how much time I’ve spent so far, and how I could have automated this 10 times by now. It sounds like the perfect job for AI, but how do you go about implementing it? And more importantly, automating it?</p>\n<h2 id=\"heading-google-apps-script-openai-assistant-with-structured-outputs\">Google Apps Script + OpenAI Assistant with Structured Outputs</h2>\n<p>Cloud-hosted Large Language Model APIs like OpenAI Assistants are a great solution for processing unstructured data like emails. And the Structured Output feature ensures the LLM response conforms to a specific JSON structure, making it ideal for passing to regular JavaScript functions in Google Apps Script.</p>\n<p><em>In this guide, I’ll show how you can use</em> <strong><em>Google Apps Script + OpenAI Assistants</em></strong> <em>to:</em></p>\n<ul>\n<li><p>Create an OpenAI Assistant for scoring emails as spam on multiple metrics</p>\n</li>\n<li><p>Scan for unread emails in Apps Script</p>\n</li>\n<li><p>Skip emails from your contacts or coworkers</p>\n</li>\n<li><p>Skip threads you started, or threads you’ve already replied on</p>\n</li>\n<li><p>Send possible spam emails to the OpenAI Assistant to be scored</p>\n</li>\n<li><p>Move offending emails to spam</p>\n</li>\n<li><p>Run the script on a timer</p>\n</li>\n</ul>\n<h2 id=\"heading-creating-an-openai-assistant\">Creating an OpenAI Assistant</h2>\n<p>Start out by creating a new assistant from the <a target=\"_blank\" href=\"https://platform.openai.com/assistants\">OpenAI dashboard</a>, and entering instructions that describe the specific type of spam emails that tend to make it to your inbox. Here’s the instructions I’m using, but this should only be used as a starting point. Modify the instructions to describe the type of messages you’re trying to block.</p>\n<pre><code class=\"lang-markdown\">Your job is to scan emails and score them on various metrics to determine if they are a specific type of spam. The prompt will be a JSON object with senderDomain, senderName, subject, and body. Use these to generate the JSON spam scores. \nScore the email as described below, and reply with nothing but the scores. \n\nYou should return a structured JSON output with multiple scores, describing how spammy different aspects of the email are, in the following categories. When these conditions are fully met, the score should be 1.0 for that section. \n\n<span class=\"hljs-section\"># Sender</span>\n<span class=\"hljs-bullet\">-</span> Domain is not a private email provider like Gmail, Outlook, etc\n<span class=\"hljs-bullet\">-</span> Name is a private person (not general company address like info@, support@, etc)\n<span class=\"hljs-section\"># Subject</span>\n<span class=\"hljs-bullet\">-</span> Selling a product/service\n<span class=\"hljs-bullet\">-</span> Mentions funding or startups\n -Mentions me by name (Joseph Petty)\n<span class=\"hljs-section\"># Intro</span>\n -Mentioning the receiver is a founder, or employee of Appsmith\n -A question about a business problem or solution\n<span class=\"hljs-section\"># Body</span>\n -Plain text, no image and minimal or no bold/italics formatting\n -Offering a business solution or asking about a problem\n<span class=\"hljs-section\"># Unsubscribe</span>\n -No link provided to unsubscribe \n -No mention of how to unsubscribe at all \n<span class=\"hljs-section\"># Closing</span>\nSays to email back to unsubscribe, usually with something like:\n<span class=\"hljs-bullet\">-</span> If you’d like to unsubscribe, just reply ‘no thanks’\n -If this isn’t relevant, reply with unsubscribe\n -Reply with \"stop\" and I'll stop emailing you\n -P.S. Not the right fit? Just reply “no,” and I’ll take you off my list.\n -Not relevant? Just reply 'all good' and I'll stop messaging :)\n\nFor each section, return a number (0-1) for how spammy that aspect of the email is, based on these cold email approaches. Then return a final isSpam score (0-1) based on the weighted average of all other scores. Double the weight for the closing if they ask for a reply email in order to unsubscribe.\n</code></pre>\n<h2 id=\"heading-structured-outputs-with-jsonschema\">Structured Outputs with JSONSchema</h2>\n<p>Next, define a JSONSchema to ensure the model always replies with valid JSON that will work with the code in Apps Script.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1739023904349/5b8f4bd6-e687-4094-95db-53328f37e9a2.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Select <code>json_schema</code> for the <strong>response_format</strong>, then paste is this schema:</p>\n<pre><code class=\"lang-javascript\">{\n  <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"email_spam_scoring\"</span>,\n  <span class=\"hljs-string\">\"strict\"</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-string\">\"schema\"</span>: {\n    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"object\"</span>,\n    <span class=\"hljs-string\">\"properties\"</span>: {\n      <span class=\"hljs-string\">\"scores\"</span>: {\n        <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"object\"</span>,\n        <span class=\"hljs-string\">\"properties\"</span>: {\n          <span class=\"hljs-string\">\"sender\"</span>: {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"object\"</span>,\n            <span class=\"hljs-string\">\"properties\"</span>: {\n              <span class=\"hljs-string\">\"domain_private\"</span>: {\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Score indicating whether the domain is a private email provider.\"</span>\n              },\n              <span class=\"hljs-string\">\"name_personal\"</span>: {\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Score indicating whether the sender's name represents a private person.\"</span>\n              }\n            },\n            <span class=\"hljs-string\">\"required\"</span>: [\n              <span class=\"hljs-string\">\"domain_private\"</span>,\n              <span class=\"hljs-string\">\"name_personal\"</span>\n            ],\n            <span class=\"hljs-string\">\"additionalProperties\"</span>: <span class=\"hljs-literal\">false</span>\n          },\n          <span class=\"hljs-string\">\"subject\"</span>: {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"object\"</span>,\n            <span class=\"hljs-string\">\"properties\"</span>: {\n              <span class=\"hljs-string\">\"selling_product\"</span>: {\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Score indicating whether the subject references selling a product/service.\"</span>\n              },\n              <span class=\"hljs-string\">\"funding_startups\"</span>: {\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Score indicating whether the subject mentions funding or startups.\"</span>\n              },\n              <span class=\"hljs-string\">\"mentions_name\"</span>: {\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Score indicating whether the subject mentions the recipient's name.\"</span>\n              }\n            },\n            <span class=\"hljs-string\">\"required\"</span>: [\n              <span class=\"hljs-string\">\"selling_product\"</span>,\n              <span class=\"hljs-string\">\"funding_startups\"</span>,\n              <span class=\"hljs-string\">\"mentions_name\"</span>\n            ],\n            <span class=\"hljs-string\">\"additionalProperties\"</span>: <span class=\"hljs-literal\">false</span>\n          },\n          <span class=\"hljs-string\">\"intro\"</span>: {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"object\"</span>,\n            <span class=\"hljs-string\">\"properties\"</span>: {\n              <span class=\"hljs-string\">\"mentions_founder\"</span>: {\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Score indicating whether the intro mentions the receiver is a founder or employee.\"</span>\n              },\n              <span class=\"hljs-string\">\"business_question\"</span>: {\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Score indicating whether the intro contains a business problem or solution question.\"</span>\n              }\n            },\n            <span class=\"hljs-string\">\"required\"</span>: [\n              <span class=\"hljs-string\">\"mentions_founder\"</span>,\n              <span class=\"hljs-string\">\"business_question\"</span>\n            ],\n            <span class=\"hljs-string\">\"additionalProperties\"</span>: <span class=\"hljs-literal\">false</span>\n          },\n          <span class=\"hljs-string\">\"body\"</span>: {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"object\"</span>,\n            <span class=\"hljs-string\">\"properties\"</span>: {\n              <span class=\"hljs-string\">\"plain_text\"</span>: {\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Score indicating whether the body is plain text with minimal formatting.\"</span>\n              },\n              <span class=\"hljs-string\">\"business_solution\"</span>: {\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Score indicating whether the body offers a business solution or asks about a problem.\"</span>\n              }\n            },\n            <span class=\"hljs-string\">\"required\"</span>: [\n              <span class=\"hljs-string\">\"plain_text\"</span>,\n              <span class=\"hljs-string\">\"business_solution\"</span>\n            ],\n            <span class=\"hljs-string\">\"additionalProperties\"</span>: <span class=\"hljs-literal\">false</span>\n          },\n          <span class=\"hljs-string\">\"unsubscribe\"</span>: {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"object\"</span>,\n            <span class=\"hljs-string\">\"properties\"</span>: {\n              <span class=\"hljs-string\">\"no_link\"</span>: {\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Score indicating whether there is no link provided to unsubscribe.\"</span>\n              },\n              <span class=\"hljs-string\">\"no_mention\"</span>: {\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Score indicating if there's no mention of how to unsubscribe.\"</span>\n              }\n            },\n            <span class=\"hljs-string\">\"required\"</span>: [\n              <span class=\"hljs-string\">\"no_link\"</span>,\n              <span class=\"hljs-string\">\"no_mention\"</span>\n            ],\n            <span class=\"hljs-string\">\"additionalProperties\"</span>: <span class=\"hljs-literal\">false</span>\n          },\n          <span class=\"hljs-string\">\"closing\"</span>: {\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"object\"</span>,\n            <span class=\"hljs-string\">\"properties\"</span>: {\n              <span class=\"hljs-string\">\"email_reply_unsubscribe\"</span>: {\n                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Score indicating whether the closing contains instructions to email back to unsubscribe.\"</span>\n              }\n            },\n            <span class=\"hljs-string\">\"required\"</span>: [\n              <span class=\"hljs-string\">\"email_reply_unsubscribe\"</span>\n            ],\n            <span class=\"hljs-string\">\"additionalProperties\"</span>: <span class=\"hljs-literal\">false</span>\n          }\n        },\n        <span class=\"hljs-string\">\"required\"</span>: [\n          <span class=\"hljs-string\">\"sender\"</span>,\n          <span class=\"hljs-string\">\"subject\"</span>,\n          <span class=\"hljs-string\">\"intro\"</span>,\n          <span class=\"hljs-string\">\"body\"</span>,\n          <span class=\"hljs-string\">\"unsubscribe\"</span>,\n          <span class=\"hljs-string\">\"closing\"</span>\n        ],\n        <span class=\"hljs-string\">\"additionalProperties\"</span>: <span class=\"hljs-literal\">false</span>\n      },\n      <span class=\"hljs-string\">\"isSpam\"</span>: {\n        <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"number\"</span>,\n        <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"Final score indicating how spammy the email is.\"</span>\n      }\n    },\n    <span class=\"hljs-string\">\"required\"</span>: [\n      <span class=\"hljs-string\">\"scores\"</span>,\n      <span class=\"hljs-string\">\"isSpam\"</span>\n    ],\n    <span class=\"hljs-string\">\"additionalProperties\"</span>: <span class=\"hljs-literal\">false</span>\n  }\n}\n</code></pre>\n<p>You can also click the <strong>Generate</strong> tab, and describe the schema, and OpenAI will generate it. I generated this one by pasting in the Assistant’s instructions, then modifying a few values.</p>\n<p>Next, go to the API section of the dashboard and create a new key. Then keep this page open to copy the key, while you create a new Apps Script.</p>\n<h2 id=\"heading-processing-emails-and-contacts-in-apps-script\">Processing Emails and Contacts in Apps Script</h2>\n<p>Before we get to integrating with AI, let’s set up a basic script to loop through unread emails from the inbox and see if they are in our existing contacts, from a co-worker, or from a thread we have already replied to. This way we scan skip these emails and avoid calling the OpenAI API on every email.</p>\n<p>Start out by creating a <a target=\"_blank\" href=\"https://script.new\">new script</a>, the go to the services section and enable the <strong>Gmail API</strong> and the <strong>People API</strong>. Then name the script, and paste in the code below:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> MY_EMAIL = <span class=\"hljs-string\">'YOUR_WORK_EMAIL'</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isContactOrCoworker</span>(<span class=\"hljs-params\">email = <span class=\"hljs-string\">'EMAIL_TO_TEST'</span></span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!email) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">if</span> (MY_EMAIL.endsWith(<span class=\"hljs-string\">'@'</span> + email.split(<span class=\"hljs-string\">'@'</span>)[<span class=\"hljs-number\">1</span>]) &amp;&amp; email !== MY_EMAIL) {\n    Logger.log(<span class=\"hljs-string\">'Found coworker'</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  }\n  <span class=\"hljs-keyword\">const</span> results = (\n    People.People.searchContacts({ <span class=\"hljs-attr\">query</span>: email, <span class=\"hljs-attr\">readMask</span>: <span class=\"hljs-string\">'emailAddresses'</span> }).results || []\n  ).concat(\n    People.OtherContacts.search({ <span class=\"hljs-attr\">query</span>: email, <span class=\"hljs-attr\">readMask</span>: <span class=\"hljs-string\">'emailAddresses'</span> }).results || []\n  );\n  Logger.log(<span class=\"hljs-string\">`isContactOrCoworker() found <span class=\"hljs-subst\">${results.length}</span> matches for <span class=\"hljs-subst\">${email}</span>`</span>);\n  <span class=\"hljs-keyword\">return</span> !!results.length;\n}\n</code></pre>\n<p>Update the script with your email, and an email to test. Save the script, and click <strong>Run</strong>.</p>\n<p>You should be prompted to approve access to your email and contacts on the first run. This function will return <code>true</code> if the input email is a coworker (same domain), or is in your main Google Contacts, or Other Contacts. Test out a few different emails, using addresses from your contacts, coworker’s addresses, and a then a potential spam sender that isn’t a coworker or contact.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1739018298617/4c5b53ec-eb7f-4180-a6e5-d7d56651e8e0.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-scan-for-unread-emails-in-apps-script\">Scan for unread emails in Apps Script</h2>\n<p>Next, we can loop over unread emails in the inbox, and run this function on each one to see if it should be checked for spam. Additionally, each thread will be checked to see if <code>MY_EMAIL</code> is the sender on any of the thread’s messages, skipping threads that I started or already replied on.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkSpamEmails</span>(<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-comment\">// Fetch unread Gmail threads</span>\n  <span class=\"hljs-keyword\">const</span> gmailThreads = GmailApp.search(<span class=\"hljs-string\">'in:inbox is:unread'</span>);\n  Logger.log(<span class=\"hljs-string\">`Found <span class=\"hljs-subst\">${gmailThreads.length}</span> unread thread(s).`</span>);\n\n  gmailThreads.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">gmailThread, threadIndex</span>) =&gt;</span> {\n    Logger.log(<span class=\"hljs-string\">`---&gt; Gmail Thread #<span class=\"hljs-subst\">${threadIndex + <span class=\"hljs-number\">1</span>}</span>: \"<span class=\"hljs-subst\">${gmailThread.getFirstMessageSubject()}</span>\"`</span>)\n\n    <span class=\"hljs-comment\">// Skip if already replied, or if I started the thread</span>\n    <span class=\"hljs-keyword\">const</span> allThreadEmailAddresses = gmailThread.getMessages()\n    .map(<span class=\"hljs-function\"><span class=\"hljs-params\">msg</span> =&gt;</span> msg.getFrom().match(<span class=\"hljs-regexp\">/(?&lt;=&lt;).*?(?=&gt;)/</span>)[<span class=\"hljs-number\">0</span>]);\n    Logger.log(allThreadEmailAddresses);\n\n    <span class=\"hljs-keyword\">if</span>(allThreadEmailAddresses.includes(MY_EMAIL)){\n      Logger.log(<span class=\"hljs-string\">'Skipping thread. Already replied, or I started the thread.'</span>);\n      <span class=\"hljs-keyword\">return</span> \n    };\n\n    <span class=\"hljs-comment\">// Skip if any email on thread is coworker or contact</span>\n    <span class=\"hljs-keyword\">const</span> anyEmailIsCoworkerOrContact = allThreadEmailAddresses.find(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span>=&gt;</span>isContactOrCoworker(e))\n    <span class=\"hljs-keyword\">if</span>(anyEmailIsCoworkerOrContact){\n      Logger.log(<span class=\"hljs-string\">'At least one email is coworker or contact. Skipping thread.'</span>)\n      <span class=\"hljs-keyword\">return</span>\n    }\n    <span class=\"hljs-comment\">// Email is not from contact/coworker, I haven't replied, and didn't start thread</span>\n    Logger.log(<span class=\"hljs-string\">`Potential Spam found. Checking: <span class=\"hljs-subst\">${gmailThread.getFirstMessageSubject()}</span>`</span>)\n    <span class=\"hljs-comment\">// Check first message using OpenAI Assistant</span>\n\n  });\n}\n</code></pre>\n<p>Save the script again, and this time run the <code>checkSpamEmails()</code> function. You should get another prompt to approve the new permissions for reading emails. Then go through your spam, and mark a few as unread and <em>not spam</em> to move them to the inbox. Run the function again and you should see the list of emails being processed.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1739018668905/92c91293-cabf-4c43-8095-20763abeefe1.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-checking-emails-with-openai-assistant\">Checking emails with OpenAI Assistant</h2>\n<p>Next, we’ll write a separate function that sends a message to our assistant with the email to be scanned, and returns the spam score, in the structured JSON format that we defined earlier. First, we’ll just hard code some values to test a single email. Then that function can be called in the forEach loop of the <code>checkSpamEmails()</code> function.</p>\n<p>Start out by adding a few more variables to the top of the script.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> SPAM_THRESHOLD = <span class=\"hljs-number\">0.7</span>;\n<span class=\"hljs-keyword\">const</span> ASSISTANT_ID = <span class=\"hljs-string\">'YOUR_ASSISTANT_ID'</span>;\n<span class=\"hljs-keyword\">const</span> API_KEY = <span class=\"hljs-string\">'YOUR_OPENAI_API_KEY'</span>;\n</code></pre>\n<p>The spam threshold is the value we will use to trigger marking the email as spam, as scored by the assistant. This will let you tweak the ‘spammy-ness’ level of the filter, and avoid false positives that could mark an important email as spam.</p>\n<p>Then add a new function to call the OpenAI Assistant, using the ‘<a target=\"_blank\" href=\"https://platform.openai.com/docs/api-reference/runs/createThreadAndRun\">Create Thread and Run</a>’ method. This starts a new thread, adds the first message, and runs the thread, in one API.</p>\n<pre><code class=\"lang-javascript\">\n<span class=\"hljs-keyword\">const</span> mockPrompt = {\n        <span class=\"hljs-attr\">senderDomain</span>: <span class=\"hljs-string\">'spammer.com'</span>,\n        <span class=\"hljs-attr\">senderName</span>: <span class=\"hljs-string\">'Spammer'</span>,\n        <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">'Try our new AI Powered Coffee Maker! '</span>,\n        <span class=\"hljs-attr\">body</span>: <span class=\"hljs-string\">'if this isn’t for you, just reply STOP'</span>\n      };\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createRun</span>(<span class=\"hljs-params\">promptData=mockPrompt</span>) </span>{\n  <span class=\"hljs-keyword\">try</span> {\n    Logger.log(<span class=\"hljs-string\">'Creating run for spam check...'</span>);\n    <span class=\"hljs-keyword\">const</span> requestBody = {\n      <span class=\"hljs-attr\">assistant_id</span>: ASSISTANT_ID,\n      <span class=\"hljs-attr\">thread</span>: {\n        <span class=\"hljs-attr\">messages</span>: [\n          {\n            <span class=\"hljs-attr\">role</span>: <span class=\"hljs-string\">'user'</span>,\n            <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(promptData)\n          }\n        ]\n      }\n    };\n\n    <span class=\"hljs-keyword\">const</span> response = UrlFetchApp.fetch(<span class=\"hljs-string\">'https://api.openai.com/v1/threads/runs'</span>, {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'post'</span>,\n      <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-string\">'application/json'</span>,\n      <span class=\"hljs-attr\">headers</span>: {\n        <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${API_KEY}</span>`</span>,\n        <span class=\"hljs-string\">'OpenAI-Beta'</span>: <span class=\"hljs-string\">'assistants=v2'</span>\n      },\n      <span class=\"hljs-attr\">payload</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(requestBody),\n      <span class=\"hljs-attr\">muteHttpExceptions</span>: <span class=\"hljs-literal\">true</span>\n    });\n\n    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-built_in\">JSON</span>.parse(response.getContentText());\n    Logger.log(<span class=\"hljs-string\">'Create run response: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(data));\n\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">runId</span>: data.id || <span class=\"hljs-literal\">null</span>,          <span class=\"hljs-comment\">// e.g. \"run_abc123\"</span>\n      <span class=\"hljs-attr\">threadId</span>: data.thread_id || <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// e.g. \"thread_abc123\"</span>\n    };\n  } <span class=\"hljs-keyword\">catch</span> (err) {\n    Logger.log(<span class=\"hljs-string\">'Error while creating run: '</span> + err);\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">runId</span>: <span class=\"hljs-literal\">null</span>, <span class=\"hljs-attr\">threadId</span>: <span class=\"hljs-literal\">null</span> };\n  }\n}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1739020319786/e1e7aade-78ca-46b4-90c6-b04c868ca5f9.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Notice the <code>thread_id</code> in the reply. This is an async operation that takes several seconds to complete. So a second API must be called to get the reply message from the LLM, using the <code>thread_id</code>. Copy the ID from this response to use as a test in the next section. Then add a new function to <code>fetchAssistantMessage()</code></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fetchAssistantMessage</span>(<span class=\"hljs-params\">openAiThreadId=<span class=\"hljs-string\">'THREAD_ID'</span></span>) </span>{\n  Logger.log(<span class=\"hljs-string\">'Fetching final assistant message for OpenAI thread: '</span> + openAiThreadId);\n\n  <span class=\"hljs-keyword\">const</span> getMessagesUrl = <span class=\"hljs-string\">`https://api.openai.com/v1/threads/<span class=\"hljs-subst\">${openAiThreadId}</span>/messages`</span>;\n  <span class=\"hljs-keyword\">const</span> response = UrlFetchApp.fetch(getMessagesUrl, {\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'get'</span>,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${API_KEY}</span>`</span>,\n      <span class=\"hljs-string\">'OpenAI-Beta'</span>: <span class=\"hljs-string\">'assistants=v2'</span>\n    },\n    <span class=\"hljs-attr\">muteHttpExceptions</span>: <span class=\"hljs-literal\">true</span>\n  });\n\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-built_in\">JSON</span>.parse(response.getContentText());\n  Logger.log(<span class=\"hljs-string\">'Thread messages response: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(data));\n\n  <span class=\"hljs-keyword\">const</span> messages = data.data || data.messages || [];\n\n  <span class=\"hljs-comment\">// Find the last assistant message that has content</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = messages.length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n    <span class=\"hljs-keyword\">const</span> msg = messages[i];\n    <span class=\"hljs-keyword\">if</span> (msg.role === <span class=\"hljs-string\">'assistant'</span> &amp;&amp; msg.content &amp;&amp; msg.content.length &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-comment\">// Concatenate .text.value parts into a single string</span>\n      <span class=\"hljs-keyword\">let</span> combinedText = <span class=\"hljs-string\">''</span>;\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> segment <span class=\"hljs-keyword\">of</span> msg.content) {\n        <span class=\"hljs-keyword\">if</span> (segment.type === <span class=\"hljs-string\">'text'</span> &amp;&amp; segment.text &amp;&amp; segment.text.value) {\n          combinedText += segment.text.value;\n        }\n      }\n      Logger.log(<span class=\"hljs-string\">'Assistant raw text: '</span> + combinedText);\n      <span class=\"hljs-keyword\">return</span> combinedText; <span class=\"hljs-comment\">// Return the raw string</span>\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1739020797414/f1740697-56cc-4c53-a8bf-abd9b8ac59cb.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-checking-messages-on-async-loop\">Checking Messages On Async Loop</h2>\n<p>If you check for messages too soon, the LLM won’t be done replying yet. You can hard-code a longer wait period, but that isn’t a great user experience. Instead, it’s best to check on a loop, and exit the loop once the reply is complete. So we’ll use a wrapper function that creates a run, then checks for messages every few seconds until the LLM has finished responding.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createRunAndWaitForReply</span>(<span class=\"hljs-params\">promptData = mockPrompt</span>) </span>{\n  <span class=\"hljs-comment\">// Initiate a run</span>\n  <span class=\"hljs-keyword\">const</span> { runId, threadId } = createRun(promptData);\n  <span class=\"hljs-keyword\">if</span> (!runId || !threadId) {\n    Logger.log(<span class=\"hljs-string\">'Could not create run.'</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n  }\n\n  <span class=\"hljs-comment\">// Poll for a final assistant message</span>\n  <span class=\"hljs-keyword\">const</span> maxAttempts = <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-keyword\">const</span> waitMs = <span class=\"hljs-number\">3000</span>; <span class=\"hljs-comment\">// 3 seconds</span>\n  <span class=\"hljs-keyword\">let</span> assistantText = <span class=\"hljs-literal\">null</span>;\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> attempt = <span class=\"hljs-number\">1</span>; attempt &lt;= maxAttempts; attempt++) {\n    Utilities.sleep(waitMs);\n    assistantText = fetchAssistantMessage(threadId);\n    <span class=\"hljs-keyword\">if</span> (assistantText) {\n      Logger.log(<span class=\"hljs-string\">`Assistant replied on attempt #<span class=\"hljs-subst\">${attempt}</span>: <span class=\"hljs-subst\">${assistantText}</span>`</span>);\n      <span class=\"hljs-keyword\">return</span> assistantText;\n    }\n    Logger.log(<span class=\"hljs-string\">`No assistant reply yet. Attempt #<span class=\"hljs-subst\">${attempt}</span> of <span class=\"hljs-subst\">${maxAttempts}</span>...`</span>);\n  }\n\n  Logger.log(<span class=\"hljs-string\">'No assistant reply within max attempts.'</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>\n<p>Finally, this wrapper function can be called in the checkSpamEmail loop, on the emails that were not skipped due to being a contact, coworker, etc. Update the checkSpamEmail() function with:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkSpamEmails</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// Fetch unread Gmail threads</span>\n  <span class=\"hljs-keyword\">const</span> gmailThreads = GmailApp.search(<span class=\"hljs-string\">'in:inbox is:unread'</span>);\n  Logger.log(<span class=\"hljs-string\">`Found <span class=\"hljs-subst\">${gmailThreads.length}</span> unread thread(s).`</span>);\n\n  gmailThreads.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">gmailThread, threadIndex</span>) =&gt;</span> {\n    Logger.log(<span class=\"hljs-string\">`---&gt; Gmail Thread #<span class=\"hljs-subst\">${threadIndex + <span class=\"hljs-number\">1</span>}</span>: \"<span class=\"hljs-subst\">${gmailThread.getFirstMessageSubject()}</span>\"`</span>);\n\n    <span class=\"hljs-comment\">// Extract all sender email addresses in the thread</span>\n    <span class=\"hljs-keyword\">const</span> allThreadEmailAddresses = gmailThread.getMessages()\n      .map(<span class=\"hljs-function\"><span class=\"hljs-params\">msg</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> match = msg.getFrom().match(<span class=\"hljs-regexp\">/(?&lt;=&lt;).*?(?=&gt;)/</span>);\n        <span class=\"hljs-keyword\">return</span> match ? match[<span class=\"hljs-number\">0</span>] : <span class=\"hljs-literal\">null</span>;\n      })\n      .filter(<span class=\"hljs-built_in\">Boolean</span>);\n    Logger.log(allThreadEmailAddresses);\n\n    <span class=\"hljs-comment\">// Skip if I am among the senders</span>\n    <span class=\"hljs-keyword\">if</span> (allThreadEmailAddresses.includes(MY_EMAIL)) {\n      Logger.log(<span class=\"hljs-string\">'Skipping thread. Already replied or I started the thread.'</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// Skip if any sender is a coworker or contact</span>\n    <span class=\"hljs-keyword\">if</span> (allThreadEmailAddresses.some(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> isContactOrCoworker(e))) {\n      Logger.log(<span class=\"hljs-string\">'At least one email is coworker or contact. Skipping thread.'</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// Not a contact/coworker, and I haven't replied</span>\n    Logger.log(<span class=\"hljs-string\">`Potential Spam found. Checking: <span class=\"hljs-subst\">${gmailThread.getFirstMessageSubject()}</span>`</span>);\n\n    <span class=\"hljs-comment\">// Build the prompt from the first message</span>\n    <span class=\"hljs-keyword\">const</span> firstMessage = gmailThread.getMessages()[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">const</span> fromEmail = allThreadEmailAddresses[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">const</span> senderDomain = fromEmail.split(<span class=\"hljs-string\">'@'</span>)[<span class=\"hljs-number\">1</span>] || <span class=\"hljs-string\">''</span>;\n    <span class=\"hljs-keyword\">const</span> senderName = fromEmail.split(<span class=\"hljs-string\">'@'</span>)[<span class=\"hljs-number\">0</span>] || <span class=\"hljs-string\">''</span>;\n    <span class=\"hljs-keyword\">const</span> subject = gmailThread.getFirstMessageSubject();\n    <span class=\"hljs-keyword\">const</span> body = firstMessage.getPlainBody().slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1000</span>); <span class=\"hljs-comment\">// Example snippet</span>\n\n    <span class=\"hljs-keyword\">const</span> promptData = {\n      senderDomain,\n      senderName,\n      subject,\n      body,\n    };\n\n    <span class=\"hljs-comment\">// Create a run and wait for the assistant’s reply</span>\n    <span class=\"hljs-keyword\">const</span> assistantReply = createRunAndWaitForReply(promptData);\n    <span class=\"hljs-keyword\">if</span> (!assistantReply) {\n      Logger.log(<span class=\"hljs-string\">'No reply from assistant within the timeout.'</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    Logger.log(<span class=\"hljs-string\">`Assistant response:\\n<span class=\"hljs-subst\">${assistantReply}</span>`</span>);\n\n    <span class=\"hljs-comment\">// Example: parse the assistant's JSON content (e.g. {\"isSpam\":true,\"score\":0.95,\"reason\":\"...\"})</span>\n    <span class=\"hljs-comment\">// Adjust the parsing logic to fit your assistant's actual output format</span>\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> spamData = <span class=\"hljs-built_in\">JSON</span>.parse(assistantReply);\n      <span class=\"hljs-keyword\">if</span> (!!spamData.isSpam &amp;&amp; spamData.isSpam &gt;= SPAM_THRESHOLD) {\n        gmailThread.moveToSpam();\n        Logger.log(<span class=\"hljs-string\">'Thread moved to spam.'</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        Logger.log(<span class=\"hljs-string\">'Assistant indicates not spam or below threshold.'</span>);\n      }\n    } <span class=\"hljs-keyword\">catch</span> (parseErr) {\n      Logger.log(<span class=\"hljs-string\">'Error parsing assistant response as JSON:'</span>, parseErr);\n    }\n  });\n}\n</code></pre>\n<p>Now go through your spam messages and move a few more into the inbox. Make sure to mark them as 'not spam’, and unread.</p>\n<p>Run the script again, and hopefully you’ll see a few that get moved back to spam. If not, try adjusting the assistant’s instructions to better target the type of spam you’re receiving, and/or increase the threshold variable.</p>\n<h2 id=\"heading-run-the-script-on-a-timer\">Run the script on a timer</h2>\n<p>Once everything is working, you can set this script to run on a timer, and automatically move messages to spam when they make it passed Gmail’s spam filter.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1739024406766/5cf77574-1c1a-4b9e-a26a-4c114126d2ff.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-limitations\">Limitations</h2>\n<p>Depending on how many spam emails you get, you may start to run into usage limits, or quotas, on the Google APIs for Gmail and People (contacts). Once you start to hit those limits, you’ll have to migrate to using the REST API, which requires creating a project in Google and adding your credit card. At that point, you’ll have to write a LOT more code to handle constructing all the API calls, error checking, etc. So it makes more sense to switch platforms at this point, and using something like Appsmith to manage all the APIs and async JavaScript. But for lower volume, personal use, Apps Script works great and is free!</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Gmail’s built-in spam detection tends to miss a lot of emails that should be marked as spam. Using Google Apps Script and an OpenAI Assistant, you can score emails on various metrics and set a threshold to trigger sending emails to spam automatically. This free alternative to using Google’s REST API works well for small projects, but it has usage limits. For a more robust solution, consider using the REST API and another platform handle the logic.</p>\n<h2 id=\"heading-full-script\">Full Script</h2>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> MY_EMAIL = <span class=\"hljs-string\">'joseph@appsmith.com'</span>;\n<span class=\"hljs-keyword\">const</span> SPAM_THRESHOLD = <span class=\"hljs-number\">0.7</span>;\n<span class=\"hljs-keyword\">const</span> ASSISTANT_ID = <span class=\"hljs-string\">'ASSISTANT_ID'</span>;\n<span class=\"hljs-keyword\">const</span> API_KEY = <span class=\"hljs-string\">'API_KEY'</span>;\n\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isContactOrCoworker</span>(<span class=\"hljs-params\">email = <span class=\"hljs-string\">'TEST@SPAM.COM'</span></span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!email) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">if</span> (MY_EMAIL.endsWith(<span class=\"hljs-string\">'@'</span> + email.split(<span class=\"hljs-string\">'@'</span>)[<span class=\"hljs-number\">1</span>]) &amp;&amp; email !== MY_EMAIL) {\n    Logger.log(<span class=\"hljs-string\">'Found coworker'</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  }\n  <span class=\"hljs-keyword\">const</span> results = (\n    People.People.searchContacts({ <span class=\"hljs-attr\">query</span>: email, <span class=\"hljs-attr\">readMask</span>: <span class=\"hljs-string\">'emailAddresses'</span> }).results || []\n  ).concat(\n    People.OtherContacts.search({ <span class=\"hljs-attr\">query</span>: email, <span class=\"hljs-attr\">readMask</span>: <span class=\"hljs-string\">'emailAddresses'</span> }).results || []\n  );\n  Logger.log(<span class=\"hljs-string\">`isContactOrCoworker() found <span class=\"hljs-subst\">${results.length}</span> matches for <span class=\"hljs-subst\">${email}</span>`</span>);\n  <span class=\"hljs-keyword\">return</span> !!results.length;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkSpamEmails</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// Fetch unread Gmail threads</span>\n  <span class=\"hljs-keyword\">const</span> gmailThreads = GmailApp.search(<span class=\"hljs-string\">'in:inbox is:unread'</span>);\n  Logger.log(<span class=\"hljs-string\">`Found <span class=\"hljs-subst\">${gmailThreads.length}</span> unread thread(s).`</span>);\n\n  gmailThreads.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">gmailThread, threadIndex</span>) =&gt;</span> {\n    Logger.log(<span class=\"hljs-string\">`---&gt; Gmail Thread #<span class=\"hljs-subst\">${threadIndex + <span class=\"hljs-number\">1</span>}</span>: \"<span class=\"hljs-subst\">${gmailThread.getFirstMessageSubject()}</span>\"`</span>);\n\n    <span class=\"hljs-comment\">// Extract all sender email addresses in the thread</span>\n    <span class=\"hljs-keyword\">const</span> allThreadEmailAddresses = gmailThread.getMessages()\n      .map(<span class=\"hljs-function\"><span class=\"hljs-params\">msg</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> match = msg.getFrom().match(<span class=\"hljs-regexp\">/(?&lt;=&lt;).*?(?=&gt;)/</span>);\n        <span class=\"hljs-keyword\">return</span> match ? match[<span class=\"hljs-number\">0</span>] : <span class=\"hljs-literal\">null</span>;\n      })\n      .filter(<span class=\"hljs-built_in\">Boolean</span>);\n    Logger.log(allThreadEmailAddresses);\n\n    <span class=\"hljs-comment\">// Skip if I am among the senders</span>\n    <span class=\"hljs-keyword\">if</span> (allThreadEmailAddresses.includes(MY_EMAIL)) {\n      Logger.log(<span class=\"hljs-string\">'Skipping thread. Already replied or I started the thread.'</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// Skip if any sender is a coworker or contact</span>\n    <span class=\"hljs-keyword\">if</span> (allThreadEmailAddresses.some(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> isContactOrCoworker(e))) {\n      Logger.log(<span class=\"hljs-string\">'At least one email is coworker or contact. Skipping thread.'</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// Not a contact/coworker, and I haven't replied</span>\n    Logger.log(<span class=\"hljs-string\">`Potential Spam found. Checking: <span class=\"hljs-subst\">${gmailThread.getFirstMessageSubject()}</span>`</span>);\n\n    <span class=\"hljs-comment\">// Build the prompt from the first message</span>\n    <span class=\"hljs-keyword\">const</span> firstMessage = gmailThread.getMessages()[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">const</span> fromEmail = allThreadEmailAddresses[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">const</span> senderDomain = fromEmail.split(<span class=\"hljs-string\">'@'</span>)[<span class=\"hljs-number\">1</span>] || <span class=\"hljs-string\">''</span>;\n    <span class=\"hljs-keyword\">const</span> senderName = fromEmail.split(<span class=\"hljs-string\">'@'</span>)[<span class=\"hljs-number\">0</span>] || <span class=\"hljs-string\">''</span>;\n    <span class=\"hljs-keyword\">const</span> subject = gmailThread.getFirstMessageSubject();\n    <span class=\"hljs-keyword\">const</span> body = firstMessage.getPlainBody().slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1000</span>); <span class=\"hljs-comment\">// Example snippet</span>\n\n    <span class=\"hljs-keyword\">const</span> promptData = {\n      senderDomain,\n      senderName,\n      subject,\n      body,\n    };\n\n    <span class=\"hljs-comment\">// Create a run and wait for the assistant’s reply</span>\n    <span class=\"hljs-keyword\">const</span> assistantReply = createRunAndWaitForReply(promptData);\n    <span class=\"hljs-keyword\">if</span> (!assistantReply) {\n      Logger.log(<span class=\"hljs-string\">'No reply from assistant within the timeout.'</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    Logger.log(<span class=\"hljs-string\">`Assistant response:\\n<span class=\"hljs-subst\">${assistantReply}</span>`</span>);\n\n    <span class=\"hljs-comment\">// Example: parse the assistant's JSON content (e.g. {\"isSpam\":true,\"score\":0.95,\"reason\":\"...\"})</span>\n    <span class=\"hljs-comment\">// Adjust the parsing logic to fit your assistant's actual output format</span>\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> spamData = <span class=\"hljs-built_in\">JSON</span>.parse(assistantReply);\n      <span class=\"hljs-keyword\">if</span> (!!spamData.isSpam &amp;&amp; spamData.isSpam &gt;= SPAM_THRESHOLD) {\n        gmailThread.moveToSpam();\n        Logger.log(<span class=\"hljs-string\">'Thread moved to spam.'</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        Logger.log(<span class=\"hljs-string\">'Assistant indicates not spam or below threshold.'</span>);\n      }\n    } <span class=\"hljs-keyword\">catch</span> (parseErr) {\n      Logger.log(<span class=\"hljs-string\">'Error parsing assistant response as JSON:'</span>, parseErr);\n    }\n  });\n}\n\n\n<span class=\"hljs-keyword\">const</span> mockPrompt = {\n        <span class=\"hljs-attr\">senderDomain</span>: <span class=\"hljs-string\">'spammer.com'</span>,\n        <span class=\"hljs-attr\">senderName</span>: <span class=\"hljs-string\">'Spammer'</span>,\n        <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">'Try our new AI Powered Coffee Maker! '</span>,\n        <span class=\"hljs-attr\">body</span>: <span class=\"hljs-string\">'if this isn’t for you, just reply STOP'</span>\n      };\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createRun</span>(<span class=\"hljs-params\">promptData=mockPrompt</span>) </span>{\n  <span class=\"hljs-keyword\">try</span> {\n    Logger.log(<span class=\"hljs-string\">'Creating run for spam check...'</span>);\n    <span class=\"hljs-keyword\">const</span> requestBody = {\n      <span class=\"hljs-attr\">assistant_id</span>: ASSISTANT_ID,\n      <span class=\"hljs-attr\">thread</span>: {\n        <span class=\"hljs-attr\">messages</span>: [\n          {\n            <span class=\"hljs-attr\">role</span>: <span class=\"hljs-string\">'user'</span>,\n            <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(promptData)\n          }\n        ]\n      }\n    };\n\n    <span class=\"hljs-keyword\">const</span> response = UrlFetchApp.fetch(<span class=\"hljs-string\">'https://api.openai.com/v1/threads/runs'</span>, {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'post'</span>,\n      <span class=\"hljs-attr\">contentType</span>: <span class=\"hljs-string\">'application/json'</span>,\n      <span class=\"hljs-attr\">headers</span>: {\n        <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${API_KEY}</span>`</span>,\n        <span class=\"hljs-string\">'OpenAI-Beta'</span>: <span class=\"hljs-string\">'assistants=v2'</span>\n      },\n      <span class=\"hljs-attr\">payload</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(requestBody),\n      <span class=\"hljs-attr\">muteHttpExceptions</span>: <span class=\"hljs-literal\">true</span>\n    });\n\n    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-built_in\">JSON</span>.parse(response.getContentText());\n    Logger.log(<span class=\"hljs-string\">'Create run response: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(data));\n\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">runId</span>: data.id || <span class=\"hljs-literal\">null</span>,          <span class=\"hljs-comment\">// e.g. \"run_abc123\"</span>\n      <span class=\"hljs-attr\">threadId</span>: data.thread_id || <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// e.g. \"thread_abc123\"</span>\n    };\n  } <span class=\"hljs-keyword\">catch</span> (err) {\n    Logger.log(<span class=\"hljs-string\">'Error while creating run: '</span> + err);\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">runId</span>: <span class=\"hljs-literal\">null</span>, <span class=\"hljs-attr\">threadId</span>: <span class=\"hljs-literal\">null</span> };\n  }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fetchAssistantMessage</span>(<span class=\"hljs-params\">openAiThreadId=<span class=\"hljs-string\">'thread_jTg2nGhtBvju7nYrSdhHrPDh'</span></span>) </span>{\n  Logger.log(<span class=\"hljs-string\">'Fetching final assistant message for OpenAI thread: '</span> + openAiThreadId);\n\n  <span class=\"hljs-keyword\">const</span> getMessagesUrl = <span class=\"hljs-string\">`https://api.openai.com/v1/threads/<span class=\"hljs-subst\">${openAiThreadId}</span>/messages`</span>;\n  <span class=\"hljs-keyword\">const</span> response = UrlFetchApp.fetch(getMessagesUrl, {\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'get'</span>,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${API_KEY}</span>`</span>,\n      <span class=\"hljs-string\">'OpenAI-Beta'</span>: <span class=\"hljs-string\">'assistants=v2'</span>\n    },\n    <span class=\"hljs-attr\">muteHttpExceptions</span>: <span class=\"hljs-literal\">true</span>\n  });\n\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-built_in\">JSON</span>.parse(response.getContentText());\n  Logger.log(<span class=\"hljs-string\">'Thread messages response: '</span> + <span class=\"hljs-built_in\">JSON</span>.stringify(data));\n\n  <span class=\"hljs-keyword\">const</span> messages = data.data || data.messages || [];\n\n  <span class=\"hljs-comment\">// Find the last assistant message that has content</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = messages.length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n    <span class=\"hljs-keyword\">const</span> msg = messages[i];\n    <span class=\"hljs-keyword\">if</span> (msg.role === <span class=\"hljs-string\">'assistant'</span> &amp;&amp; msg.content &amp;&amp; msg.content.length &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-comment\">// Concatenate .text.value parts into a single string</span>\n      <span class=\"hljs-keyword\">let</span> combinedText = <span class=\"hljs-string\">''</span>;\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> segment <span class=\"hljs-keyword\">of</span> msg.content) {\n        <span class=\"hljs-keyword\">if</span> (segment.type === <span class=\"hljs-string\">'text'</span> &amp;&amp; segment.text &amp;&amp; segment.text.value) {\n          combinedText += segment.text.value;\n        }\n      }\n      Logger.log(<span class=\"hljs-string\">'Assistant raw text: '</span> + combinedText);\n      <span class=\"hljs-keyword\">return</span> combinedText; <span class=\"hljs-comment\">// Return the raw string</span>\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createRunAndWaitForReply</span>(<span class=\"hljs-params\">promptData = mockPrompt</span>) </span>{\n  <span class=\"hljs-comment\">// Initiate a run</span>\n  <span class=\"hljs-keyword\">const</span> { runId, threadId } = createRun(promptData);\n  <span class=\"hljs-keyword\">if</span> (!runId || !threadId) {\n    Logger.log(<span class=\"hljs-string\">'Could not create run.'</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n  }\n\n  <span class=\"hljs-comment\">// Poll for a final assistant message</span>\n  <span class=\"hljs-keyword\">const</span> maxAttempts = <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-keyword\">const</span> waitMs = <span class=\"hljs-number\">3000</span>; <span class=\"hljs-comment\">// 3 seconds</span>\n  <span class=\"hljs-keyword\">let</span> assistantText = <span class=\"hljs-literal\">null</span>;\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> attempt = <span class=\"hljs-number\">1</span>; attempt &lt;= maxAttempts; attempt++) {\n    Utilities.sleep(waitMs);\n    assistantText = fetchAssistantMessage(threadId);\n    <span class=\"hljs-keyword\">if</span> (assistantText) {\n      Logger.log(<span class=\"hljs-string\">`Assistant replied on attempt #<span class=\"hljs-subst\">${attempt}</span>: <span class=\"hljs-subst\">${assistantText}</span>`</span>);\n      <span class=\"hljs-keyword\">return</span> assistantText;\n    }\n    Logger.log(<span class=\"hljs-string\">`No assistant reply yet. Attempt #<span class=\"hljs-subst\">${attempt}</span> of <span class=\"hljs-subst\">${maxAttempts}</span>...`</span>);\n  }\n\n  Logger.log(<span class=\"hljs-string\">'No assistant reply within max attempts.'</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>\n","contentMarkdown":"I get a LOT of spam email that make it passed Google’s spam detection, and I’m constantly marking emails as spam and blocking senders. It’s a never-ending battle. Most of them end with something like\n\n*“if this isn’t for you, just reply STOP”.  \n“P.S. Not the right fit? Just reply “no,” and I’ll take you off my list.”  \n“Not relevant? Just reply 'all good' and I'll stop messaging :)”*\n\n![No, I Don't Think I Will | Know Your Meme](https://i.kym-cdn.com/photos/images/newsfeed/001/535/091/d97.jpg align=\"left\")\n\nThese spammers just want your help warming up their email account so they can send more spam. By replying, you’re just boosting their sender reputation, and helping them get passed more spam filters and land in more inboxes.\n\nEvery time I mark a message as spam, I think of how much time I’ve spent so far, and how I could have automated this 10 times by now. It sounds like the perfect job for AI, but how do you go about implementing it? And more importantly, automating it?\n\n## Google Apps Script + OpenAI Assistant with Structured Outputs\n\nCloud-hosted Large Language Model APIs like OpenAI Assistants are a great solution for processing unstructured data like emails. And the Structured Output feature ensures the LLM response conforms to a specific JSON structure, making it ideal for passing to regular JavaScript functions in Google Apps Script.\n\n*In this guide, I’ll show how you can use* ***Google Apps Script + OpenAI Assistants*** *to:*\n\n* Create an OpenAI Assistant for scoring emails as spam on multiple metrics\n    \n* Scan for unread emails in Apps Script\n    \n* Skip emails from your contacts or coworkers\n    \n* Skip threads you started, or threads you’ve already replied on\n    \n* Send possible spam emails to the OpenAI Assistant to be scored\n    \n* Move offending emails to spam\n    \n* Run the script on a timer\n    \n\n## Creating an OpenAI Assistant\n\nStart out by creating a new assistant from the [OpenAI dashboard](https://platform.openai.com/assistants), and entering instructions that describe the specific type of spam emails that tend to make it to your inbox. Here’s the instructions I’m using, but this should only be used as a starting point. Modify the instructions to describe the type of messages you’re trying to block.\n\n```markdown\nYour job is to scan emails and score them on various metrics to determine if they are a specific type of spam. The prompt will be a JSON object with senderDomain, senderName, subject, and body. Use these to generate the JSON spam scores. \nScore the email as described below, and reply with nothing but the scores. \n\nYou should return a structured JSON output with multiple scores, describing how spammy different aspects of the email are, in the following categories. When these conditions are fully met, the score should be 1.0 for that section. \n\n# Sender\n- Domain is not a private email provider like Gmail, Outlook, etc\n- Name is a private person (not general company address like info@, support@, etc)\n# Subject\n- Selling a product/service\n- Mentions funding or startups\n -Mentions me by name (Joseph Petty)\n# Intro\n -Mentioning the receiver is a founder, or employee of Appsmith\n -A question about a business problem or solution\n# Body\n -Plain text, no image and minimal or no bold/italics formatting\n -Offering a business solution or asking about a problem\n# Unsubscribe\n -No link provided to unsubscribe \n -No mention of how to unsubscribe at all \n# Closing\nSays to email back to unsubscribe, usually with something like:\n- If you’d like to unsubscribe, just reply ‘no thanks’\n -If this isn’t relevant, reply with unsubscribe\n -Reply with \"stop\" and I'll stop emailing you\n -P.S. Not the right fit? Just reply “no,” and I’ll take you off my list.\n -Not relevant? Just reply 'all good' and I'll stop messaging :)\n\nFor each section, return a number (0-1) for how spammy that aspect of the email is, based on these cold email approaches. Then return a final isSpam score (0-1) based on the weighted average of all other scores. Double the weight for the closing if they ask for a reply email in order to unsubscribe. \n```\n\n## Structured Outputs with JSONSchema\n\nNext, define a JSONSchema to ensure the model always replies with valid JSON that will work with the code in Apps Script.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1739023904349/5b8f4bd6-e687-4094-95db-53328f37e9a2.png align=\"center\")\n\nSelect `json_schema` for the **response\\_format**, then paste is this schema:\n\n```javascript\n{\n  \"name\": \"email_spam_scoring\",\n  \"strict\": true,\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"scores\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"sender\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"domain_private\": {\n                \"type\": \"number\",\n                \"description\": \"Score indicating whether the domain is a private email provider.\"\n              },\n              \"name_personal\": {\n                \"type\": \"number\",\n                \"description\": \"Score indicating whether the sender's name represents a private person.\"\n              }\n            },\n            \"required\": [\n              \"domain_private\",\n              \"name_personal\"\n            ],\n            \"additionalProperties\": false\n          },\n          \"subject\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"selling_product\": {\n                \"type\": \"number\",\n                \"description\": \"Score indicating whether the subject references selling a product/service.\"\n              },\n              \"funding_startups\": {\n                \"type\": \"number\",\n                \"description\": \"Score indicating whether the subject mentions funding or startups.\"\n              },\n              \"mentions_name\": {\n                \"type\": \"number\",\n                \"description\": \"Score indicating whether the subject mentions the recipient's name.\"\n              }\n            },\n            \"required\": [\n              \"selling_product\",\n              \"funding_startups\",\n              \"mentions_name\"\n            ],\n            \"additionalProperties\": false\n          },\n          \"intro\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"mentions_founder\": {\n                \"type\": \"number\",\n                \"description\": \"Score indicating whether the intro mentions the receiver is a founder or employee.\"\n              },\n              \"business_question\": {\n                \"type\": \"number\",\n                \"description\": \"Score indicating whether the intro contains a business problem or solution question.\"\n              }\n            },\n            \"required\": [\n              \"mentions_founder\",\n              \"business_question\"\n            ],\n            \"additionalProperties\": false\n          },\n          \"body\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"plain_text\": {\n                \"type\": \"number\",\n                \"description\": \"Score indicating whether the body is plain text with minimal formatting.\"\n              },\n              \"business_solution\": {\n                \"type\": \"number\",\n                \"description\": \"Score indicating whether the body offers a business solution or asks about a problem.\"\n              }\n            },\n            \"required\": [\n              \"plain_text\",\n              \"business_solution\"\n            ],\n            \"additionalProperties\": false\n          },\n          \"unsubscribe\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"no_link\": {\n                \"type\": \"number\",\n                \"description\": \"Score indicating whether there is no link provided to unsubscribe.\"\n              },\n              \"no_mention\": {\n                \"type\": \"number\",\n                \"description\": \"Score indicating if there's no mention of how to unsubscribe.\"\n              }\n            },\n            \"required\": [\n              \"no_link\",\n              \"no_mention\"\n            ],\n            \"additionalProperties\": false\n          },\n          \"closing\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"email_reply_unsubscribe\": {\n                \"type\": \"number\",\n                \"description\": \"Score indicating whether the closing contains instructions to email back to unsubscribe.\"\n              }\n            },\n            \"required\": [\n              \"email_reply_unsubscribe\"\n            ],\n            \"additionalProperties\": false\n          }\n        },\n        \"required\": [\n          \"sender\",\n          \"subject\",\n          \"intro\",\n          \"body\",\n          \"unsubscribe\",\n          \"closing\"\n        ],\n        \"additionalProperties\": false\n      },\n      \"isSpam\": {\n        \"type\": \"number\",\n        \"description\": \"Final score indicating how spammy the email is.\"\n      }\n    },\n    \"required\": [\n      \"scores\",\n      \"isSpam\"\n    ],\n    \"additionalProperties\": false\n  }\n}\n```\n\nYou can also click the **Generate** tab, and describe the schema, and OpenAI will generate it. I generated this one by pasting in the Assistant’s instructions, then modifying a few values.\n\nNext, go to the API section of the dashboard and create a new key. Then keep this page open to copy the key, while you create a new Apps Script.\n\n## Processing Emails and Contacts in Apps Script\n\nBefore we get to integrating with AI, let’s set up a basic script to loop through unread emails from the inbox and see if they are in our existing contacts, from a co-worker, or from a thread we have already replied to. This way we scan skip these emails and avoid calling the OpenAI API on every email.\n\nStart out by creating a [new script](https://script.new), the go to the services section and enable the **Gmail API** and the **People API**. Then name the script, and paste in the code below:\n\n```javascript\nconst MY_EMAIL = 'YOUR_WORK_EMAIL';\n\nfunction isContactOrCoworker(email = 'EMAIL_TO_TEST') {\n  if (!email) return false;\n  if (MY_EMAIL.endsWith('@' + email.split('@')[1]) && email !== MY_EMAIL) {\n    Logger.log('Found coworker');\n    return true;\n  }\n  const results = (\n    People.People.searchContacts({ query: email, readMask: 'emailAddresses' }).results || []\n  ).concat(\n    People.OtherContacts.search({ query: email, readMask: 'emailAddresses' }).results || []\n  );\n  Logger.log(`isContactOrCoworker() found ${results.length} matches for ${email}`);\n  return !!results.length;\n}\n```\n\nUpdate the script with your email, and an email to test. Save the script, and click **Run**.\n\nYou should be prompted to approve access to your email and contacts on the first run. This function will return `true` if the input email is a coworker (same domain), or is in your main Google Contacts, or Other Contacts. Test out a few different emails, using addresses from your contacts, coworker’s addresses, and a then a potential spam sender that isn’t a coworker or contact.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1739018298617/4c5b53ec-eb7f-4180-a6e5-d7d56651e8e0.png align=\"center\")\n\n## Scan for unread emails in Apps Script\n\nNext, we can loop over unread emails in the inbox, and run this function on each one to see if it should be checked for spam. Additionally, each thread will be checked to see if `MY_EMAIL` is the sender on any of the thread’s messages, skipping threads that I started or already replied on.\n\n```javascript\nfunction checkSpamEmails() {\n\n  // Fetch unread Gmail threads\n  const gmailThreads = GmailApp.search('in:inbox is:unread');\n  Logger.log(`Found ${gmailThreads.length} unread thread(s).`);\n  \n  gmailThreads.forEach((gmailThread, threadIndex) => {\n    Logger.log(`---> Gmail Thread #${threadIndex + 1}: \"${gmailThread.getFirstMessageSubject()}\"`)\n    \n    // Skip if already replied, or if I started the thread\n    const allThreadEmailAddresses = gmailThread.getMessages()\n    .map(msg => msg.getFrom().match(/(?<=<).*?(?=>)/)[0]);\n    Logger.log(allThreadEmailAddresses);\n\n    if(allThreadEmailAddresses.includes(MY_EMAIL)){\n      Logger.log('Skipping thread. Already replied, or I started the thread.');\n      return \n    };\n\n    // Skip if any email on thread is coworker or contact\n    const anyEmailIsCoworkerOrContact = allThreadEmailAddresses.find(e=>isContactOrCoworker(e))\n    if(anyEmailIsCoworkerOrContact){\n      Logger.log('At least one email is coworker or contact. Skipping thread.')\n      return\n    }\n    // Email is not from contact/coworker, I haven't replied, and didn't start thread\n    Logger.log(`Potential Spam found. Checking: ${gmailThread.getFirstMessageSubject()}`)\n    // Check first message using OpenAI Assistant\n    \n  });\n}\n```\n\nSave the script again, and this time run the `checkSpamEmails()` function. You should get another prompt to approve the new permissions for reading emails. Then go through your spam, and mark a few as unread and *not spam* to move them to the inbox. Run the function again and you should see the list of emails being processed.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1739018668905/92c91293-cabf-4c43-8095-20763abeefe1.png align=\"center\")\n\n## Checking emails with OpenAI Assistant\n\nNext, we’ll write a separate function that sends a message to our assistant with the email to be scanned, and returns the spam score, in the structured JSON format that we defined earlier. First, we’ll just hard code some values to test a single email. Then that function can be called in the forEach loop of the `checkSpamEmails()` function.\n\nStart out by adding a few more variables to the top of the script.\n\n```javascript\nconst SPAM_THRESHOLD = 0.7;\nconst ASSISTANT_ID = 'YOUR_ASSISTANT_ID';\nconst API_KEY = 'YOUR_OPENAI_API_KEY';\n```\n\nThe spam threshold is the value we will use to trigger marking the email as spam, as scored by the assistant. This will let you tweak the ‘spammy-ness’ level of the filter, and avoid false positives that could mark an important email as spam.\n\nThen add a new function to call the OpenAI Assistant, using the ‘[Create Thread and Run](https://platform.openai.com/docs/api-reference/runs/createThreadAndRun)’ method. This starts a new thread, adds the first message, and runs the thread, in one API.\n\n```javascript\n\nconst mockPrompt = {\n        senderDomain: 'spammer.com',\n        senderName: 'Spammer',\n        subject: 'Try our new AI Powered Coffee Maker! ',\n        body: 'if this isn’t for you, just reply STOP'\n      };\n\nfunction createRun(promptData=mockPrompt) {\n  try {\n    Logger.log('Creating run for spam check...');\n    const requestBody = {\n      assistant_id: ASSISTANT_ID,\n      thread: {\n        messages: [\n          {\n            role: 'user',\n            content: JSON.stringify(promptData)\n          }\n        ]\n      }\n    };\n\n    const response = UrlFetchApp.fetch('https://api.openai.com/v1/threads/runs', {\n      method: 'post',\n      contentType: 'application/json',\n      headers: {\n        Authorization: `Bearer ${API_KEY}`,\n        'OpenAI-Beta': 'assistants=v2'\n      },\n      payload: JSON.stringify(requestBody),\n      muteHttpExceptions: true\n    });\n\n    const data = JSON.parse(response.getContentText());\n    Logger.log('Create run response: ' + JSON.stringify(data));\n\n    return {\n      runId: data.id || null,          // e.g. \"run_abc123\"\n      threadId: data.thread_id || null // e.g. \"thread_abc123\"\n    };\n  } catch (err) {\n    Logger.log('Error while creating run: ' + err);\n    return { runId: null, threadId: null };\n  }\n}\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1739020319786/e1e7aade-78ca-46b4-90c6-b04c868ca5f9.png align=\"center\")\n\nNotice the `thread_id` in the reply. This is an async operation that takes several seconds to complete. So a second API must be called to get the reply message from the LLM, using the `thread_id`. Copy the ID from this response to use as a test in the next section. Then add a new function to `fetchAssistantMessage()`\n\n```javascript\nfunction fetchAssistantMessage(openAiThreadId='THREAD_ID') {\n  Logger.log('Fetching final assistant message for OpenAI thread: ' + openAiThreadId);\n\n  const getMessagesUrl = `https://api.openai.com/v1/threads/${openAiThreadId}/messages`;\n  const response = UrlFetchApp.fetch(getMessagesUrl, {\n    method: 'get',\n    headers: {\n      Authorization: `Bearer ${API_KEY}`,\n      'OpenAI-Beta': 'assistants=v2'\n    },\n    muteHttpExceptions: true\n  });\n\n  const data = JSON.parse(response.getContentText());\n  Logger.log('Thread messages response: ' + JSON.stringify(data));\n\n  const messages = data.data || data.messages || [];\n\n  // Find the last assistant message that has content\n  for (let i = messages.length - 1; i >= 0; i--) {\n    const msg = messages[i];\n    if (msg.role === 'assistant' && msg.content && msg.content.length > 0) {\n      // Concatenate .text.value parts into a single string\n      let combinedText = '';\n      for (const segment of msg.content) {\n        if (segment.type === 'text' && segment.text && segment.text.value) {\n          combinedText += segment.text.value;\n        }\n      }\n      Logger.log('Assistant raw text: ' + combinedText);\n      return combinedText; // Return the raw string\n    }\n  }\n  return null;\n}\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1739020797414/f1740697-56cc-4c53-a8bf-abd9b8ac59cb.png align=\"center\")\n\n## Checking Messages On Async Loop\n\nIf you check for messages too soon, the LLM won’t be done replying yet. You can hard-code a longer wait period, but that isn’t a great user experience. Instead, it’s best to check on a loop, and exit the loop once the reply is complete. So we’ll use a wrapper function that creates a run, then checks for messages every few seconds until the LLM has finished responding.\n\n```javascript\nfunction createRunAndWaitForReply(promptData = mockPrompt) {\n  // Initiate a run\n  const { runId, threadId } = createRun(promptData);\n  if (!runId || !threadId) {\n    Logger.log('Could not create run.');\n    return null;\n  }\n\n  // Poll for a final assistant message\n  const maxAttempts = 10;\n  const waitMs = 3000; // 3 seconds\n  let assistantText = null;\n\n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    Utilities.sleep(waitMs);\n    assistantText = fetchAssistantMessage(threadId);\n    if (assistantText) {\n      Logger.log(`Assistant replied on attempt #${attempt}: ${assistantText}`);\n      return assistantText;\n    }\n    Logger.log(`No assistant reply yet. Attempt #${attempt} of ${maxAttempts}...`);\n  }\n\n  Logger.log('No assistant reply within max attempts.');\n  return null;\n}\n```\n\nFinally, this wrapper function can be called in the checkSpamEmail loop, on the emails that were not skipped due to being a contact, coworker, etc. Update the checkSpamEmail() function with:\n\n```javascript\nfunction checkSpamEmails() {\n  // Fetch unread Gmail threads\n  const gmailThreads = GmailApp.search('in:inbox is:unread');\n  Logger.log(`Found ${gmailThreads.length} unread thread(s).`);\n  \n  gmailThreads.forEach((gmailThread, threadIndex) => {\n    Logger.log(`---> Gmail Thread #${threadIndex + 1}: \"${gmailThread.getFirstMessageSubject()}\"`);\n    \n    // Extract all sender email addresses in the thread\n    const allThreadEmailAddresses = gmailThread.getMessages()\n      .map(msg => {\n        const match = msg.getFrom().match(/(?<=<).*?(?=>)/);\n        return match ? match[0] : null;\n      })\n      .filter(Boolean);\n    Logger.log(allThreadEmailAddresses);\n\n    // Skip if I am among the senders\n    if (allThreadEmailAddresses.includes(MY_EMAIL)) {\n      Logger.log('Skipping thread. Already replied or I started the thread.');\n      return;\n    }\n\n    // Skip if any sender is a coworker or contact\n    if (allThreadEmailAddresses.some(e => isContactOrCoworker(e))) {\n      Logger.log('At least one email is coworker or contact. Skipping thread.');\n      return;\n    }\n\n    // Not a contact/coworker, and I haven't replied\n    Logger.log(`Potential Spam found. Checking: ${gmailThread.getFirstMessageSubject()}`);\n\n    // Build the prompt from the first message\n    const firstMessage = gmailThread.getMessages()[0];\n    const fromEmail = allThreadEmailAddresses[0];\n    const senderDomain = fromEmail.split('@')[1] || '';\n    const senderName = fromEmail.split('@')[0] || '';\n    const subject = gmailThread.getFirstMessageSubject();\n    const body = firstMessage.getPlainBody().slice(0, 1000); // Example snippet\n\n    const promptData = {\n      senderDomain,\n      senderName,\n      subject,\n      body,\n    };\n\n    // Create a run and wait for the assistant’s reply\n    const assistantReply = createRunAndWaitForReply(promptData);\n    if (!assistantReply) {\n      Logger.log('No reply from assistant within the timeout.');\n      return;\n    }\n\n    Logger.log(`Assistant response:\\n${assistantReply}`);\n\n    // Example: parse the assistant's JSON content (e.g. {\"isSpam\":true,\"score\":0.95,\"reason\":\"...\"})\n    // Adjust the parsing logic to fit your assistant's actual output format\n    try {\n      const spamData = JSON.parse(assistantReply);\n      if (!!spamData.isSpam && spamData.isSpam >= SPAM_THRESHOLD) {\n        gmailThread.moveToSpam();\n        Logger.log('Thread moved to spam.');\n      } else {\n        Logger.log('Assistant indicates not spam or below threshold.');\n      }\n    } catch (parseErr) {\n      Logger.log('Error parsing assistant response as JSON:', parseErr);\n    }\n  });\n}\n```\n\nNow go through your spam messages and move a few more into the inbox. Make sure to mark them as 'not spam’, and unread.\n\nRun the script again, and hopefully you’ll see a few that get moved back to spam. If not, try adjusting the assistant’s instructions to better target the type of spam you’re receiving, and/or increase the threshold variable.\n\n## Run the script on a timer\n\nOnce everything is working, you can set this script to run on a timer, and automatically move messages to spam when they make it passed Gmail’s spam filter.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1739024406766/5cf77574-1c1a-4b9e-a26a-4c114126d2ff.png align=\"center\")\n\n## Limitations\n\nDepending on how many spam emails you get, you may start to run into usage limits, or quotas, on the Google APIs for Gmail and People (contacts). Once you start to hit those limits, you’ll have to migrate to using the REST API, which requires creating a project in Google and adding your credit card. At that point, you’ll have to write a LOT more code to handle constructing all the API calls, error checking, etc. So it makes more sense to switch platforms at this point, and using something like Appsmith to manage all the APIs and async JavaScript. But for lower volume, personal use, Apps Script works great and is free!\n\n## Conclusion\n\nGmail’s built-in spam detection tends to miss a lot of emails that should be marked as spam. Using Google Apps Script and an OpenAI Assistant, you can score emails on various metrics and set a threshold to trigger sending emails to spam automatically. This free alternative to using Google’s REST API works well for small projects, but it has usage limits. For a more robust solution, consider using the REST API and another platform handle the logic.\n\n## Full Script\n\n```javascript\nconst MY_EMAIL = 'joseph@appsmith.com';\nconst SPAM_THRESHOLD = 0.7;\nconst ASSISTANT_ID = 'ASSISTANT_ID';\nconst API_KEY = 'API_KEY';\n\n\n\nfunction isContactOrCoworker(email = 'TEST@SPAM.COM') {\n  if (!email) return false;\n  if (MY_EMAIL.endsWith('@' + email.split('@')[1]) && email !== MY_EMAIL) {\n    Logger.log('Found coworker');\n    return true;\n  }\n  const results = (\n    People.People.searchContacts({ query: email, readMask: 'emailAddresses' }).results || []\n  ).concat(\n    People.OtherContacts.search({ query: email, readMask: 'emailAddresses' }).results || []\n  );\n  Logger.log(`isContactOrCoworker() found ${results.length} matches for ${email}`);\n  return !!results.length;\n}\n\nfunction checkSpamEmails() {\n  // Fetch unread Gmail threads\n  const gmailThreads = GmailApp.search('in:inbox is:unread');\n  Logger.log(`Found ${gmailThreads.length} unread thread(s).`);\n  \n  gmailThreads.forEach((gmailThread, threadIndex) => {\n    Logger.log(`---> Gmail Thread #${threadIndex + 1}: \"${gmailThread.getFirstMessageSubject()}\"`);\n    \n    // Extract all sender email addresses in the thread\n    const allThreadEmailAddresses = gmailThread.getMessages()\n      .map(msg => {\n        const match = msg.getFrom().match(/(?<=<).*?(?=>)/);\n        return match ? match[0] : null;\n      })\n      .filter(Boolean);\n    Logger.log(allThreadEmailAddresses);\n\n    // Skip if I am among the senders\n    if (allThreadEmailAddresses.includes(MY_EMAIL)) {\n      Logger.log('Skipping thread. Already replied or I started the thread.');\n      return;\n    }\n\n    // Skip if any sender is a coworker or contact\n    if (allThreadEmailAddresses.some(e => isContactOrCoworker(e))) {\n      Logger.log('At least one email is coworker or contact. Skipping thread.');\n      return;\n    }\n\n    // Not a contact/coworker, and I haven't replied\n    Logger.log(`Potential Spam found. Checking: ${gmailThread.getFirstMessageSubject()}`);\n\n    // Build the prompt from the first message\n    const firstMessage = gmailThread.getMessages()[0];\n    const fromEmail = allThreadEmailAddresses[0];\n    const senderDomain = fromEmail.split('@')[1] || '';\n    const senderName = fromEmail.split('@')[0] || '';\n    const subject = gmailThread.getFirstMessageSubject();\n    const body = firstMessage.getPlainBody().slice(0, 1000); // Example snippet\n\n    const promptData = {\n      senderDomain,\n      senderName,\n      subject,\n      body,\n    };\n\n    // Create a run and wait for the assistant’s reply\n    const assistantReply = createRunAndWaitForReply(promptData);\n    if (!assistantReply) {\n      Logger.log('No reply from assistant within the timeout.');\n      return;\n    }\n\n    Logger.log(`Assistant response:\\n${assistantReply}`);\n\n    // Example: parse the assistant's JSON content (e.g. {\"isSpam\":true,\"score\":0.95,\"reason\":\"...\"})\n    // Adjust the parsing logic to fit your assistant's actual output format\n    try {\n      const spamData = JSON.parse(assistantReply);\n      if (!!spamData.isSpam && spamData.isSpam >= SPAM_THRESHOLD) {\n        gmailThread.moveToSpam();\n        Logger.log('Thread moved to spam.');\n      } else {\n        Logger.log('Assistant indicates not spam or below threshold.');\n      }\n    } catch (parseErr) {\n      Logger.log('Error parsing assistant response as JSON:', parseErr);\n    }\n  });\n}\n\n\nconst mockPrompt = {\n        senderDomain: 'spammer.com',\n        senderName: 'Spammer',\n        subject: 'Try our new AI Powered Coffee Maker! ',\n        body: 'if this isn’t for you, just reply STOP'\n      };\n\nfunction createRun(promptData=mockPrompt) {\n  try {\n    Logger.log('Creating run for spam check...');\n    const requestBody = {\n      assistant_id: ASSISTANT_ID,\n      thread: {\n        messages: [\n          {\n            role: 'user',\n            content: JSON.stringify(promptData)\n          }\n        ]\n      }\n    };\n\n    const response = UrlFetchApp.fetch('https://api.openai.com/v1/threads/runs', {\n      method: 'post',\n      contentType: 'application/json',\n      headers: {\n        Authorization: `Bearer ${API_KEY}`,\n        'OpenAI-Beta': 'assistants=v2'\n      },\n      payload: JSON.stringify(requestBody),\n      muteHttpExceptions: true\n    });\n\n    const data = JSON.parse(response.getContentText());\n    Logger.log('Create run response: ' + JSON.stringify(data));\n\n    return {\n      runId: data.id || null,          // e.g. \"run_abc123\"\n      threadId: data.thread_id || null // e.g. \"thread_abc123\"\n    };\n  } catch (err) {\n    Logger.log('Error while creating run: ' + err);\n    return { runId: null, threadId: null };\n  }\n}\n\nfunction fetchAssistantMessage(openAiThreadId='thread_jTg2nGhtBvju7nYrSdhHrPDh') {\n  Logger.log('Fetching final assistant message for OpenAI thread: ' + openAiThreadId);\n\n  const getMessagesUrl = `https://api.openai.com/v1/threads/${openAiThreadId}/messages`;\n  const response = UrlFetchApp.fetch(getMessagesUrl, {\n    method: 'get',\n    headers: {\n      Authorization: `Bearer ${API_KEY}`,\n      'OpenAI-Beta': 'assistants=v2'\n    },\n    muteHttpExceptions: true\n  });\n\n  const data = JSON.parse(response.getContentText());\n  Logger.log('Thread messages response: ' + JSON.stringify(data));\n\n  const messages = data.data || data.messages || [];\n\n  // Find the last assistant message that has content\n  for (let i = messages.length - 1; i >= 0; i--) {\n    const msg = messages[i];\n    if (msg.role === 'assistant' && msg.content && msg.content.length > 0) {\n      // Concatenate .text.value parts into a single string\n      let combinedText = '';\n      for (const segment of msg.content) {\n        if (segment.type === 'text' && segment.text && segment.text.value) {\n          combinedText += segment.text.value;\n        }\n      }\n      Logger.log('Assistant raw text: ' + combinedText);\n      return combinedText; // Return the raw string\n    }\n  }\n  return null;\n}\n\nfunction createRunAndWaitForReply(promptData = mockPrompt) {\n  // Initiate a run\n  const { runId, threadId } = createRun(promptData);\n  if (!runId || !threadId) {\n    Logger.log('Could not create run.');\n    return null;\n  }\n\n  // Poll for a final assistant message\n  const maxAttempts = 10;\n  const waitMs = 3000; // 3 seconds\n  let assistantText = null;\n\n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    Utilities.sleep(waitMs);\n    assistantText = fetchAssistantMessage(threadId);\n    if (assistantText) {\n      Logger.log(`Assistant replied on attempt #${attempt}: ${assistantText}`);\n      return assistantText;\n    }\n    Logger.log(`No assistant reply yet. Attempt #${attempt} of ${maxAttempts}...`);\n  }\n\n  Logger.log('No assistant reply within max attempts.');\n  return null;\n}\n```","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1739023382667/509f43ca-6a3c-4629-8f9d-afafa28d7a56.png","brief":"I get a LOT of spam email that make it passed Google’s spam detection, and I’m constantly marking emails as spam and blocking senders. It’s a never-ending battle. Most of them end with something like\n“if this isn’t for you, just reply STOP”.“P.S. Not...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":16,"draft":"67a6b57adc0ec00b73a8bd5c","tags":["5e270f8a32d5fad159b76b9a","5f1a7b4309e95d4d18c3b2ee","6691697ffec78851ae7c0df8","5a723c7b9cc7099e7dbf3213","58596eaaeb509c3ba23d4c87","56b1208d04f0061506b360ff","56744721958ef13879b94cad"],"publication":"60771c264155da32fc83ad6e","series":"679fa03905414f167a095994","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"67a7698d825b1f3a0c9b1908"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"67a0db0cef571eb503fedd7b","createdAt":"2025-02-03T15:04:44.140Z","updatedAt":"2025-02-03T15:04:44.140Z","views":53,"isActive":true,"hasLatex":false,"popularity":7324.0863,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Export & Sync All Images from a Google Doc to Drive Folder using Apps Script","subtitle":"Easily extract all images from a doc and sync with matching folder","cuid":"cm6p6mgkp000909jsfy7pgqnp","dateAdded":"2025-02-03T15:04:44.138Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"export-sync-all-images-from-a-google-doc-to-drive-folder-using-apps-script","content":"<p>Adding images to a Google Doc is no problem, but getting them back out can be a pain. I’ve written about this before with <a target=\"_blank\" href=\"https://community.appsmith.com/content/guide/five-ways-extract-all-images-google-doc\">Five Ways to Extract All Images From a Google Doc</a>, and more recently, with <a target=\"_blank\" href=\"https://blog.greenflux.us/extracting-all-images-from-a-google-doc-using-python\">this</a> method using Python in Google Colab. However, all of those previous methods assumed you are working with a single folder or doc, and didn’t account for existing backup images from a previous run. Not ideal for running on a timer.</p>\n<p>In this post, I’m sharing an updated version of the original Apps Script solution from the ‘Five Ways’ post, and adding some logic to handle running it on a timer. Here’s what all the script does:</p>\n<ul>\n<li><p>Scan for all Google Docs within a folder, and optionally scan subfolders</p>\n</li>\n<li><p>Filter the list for all docs updated within the last 5 minutes</p>\n</li>\n<li><p>Loop through each doc, and save images to a folder with matching name</p>\n</li>\n<li><p>Skip existing images that have already been extracted</p>\n</li>\n<li><p>Remove backup of images that have been removed from the doc</p>\n</li>\n<li><p>Rename the backup folder if the doc name changes</p>\n</li>\n</ul>\n<p>With these changes, the script can be run on a timer, and automatically keep a folder of images synced with each source doc.</p>\n<h2 id=\"heading-creating-the-script\">Creating the Script</h2>\n<p>Start out by creating a new Apps Script by going to <a target=\"_blank\" href=\"https://script.new\">script.new</a>, or from the <a target=\"_blank\" href=\"https://script.google.com/home\">Apps Script Projects</a> page. Name the script, then paste in this code:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">extractImagesFromDocs</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// Configurable variables</span>\n  <span class=\"hljs-keyword\">const</span> ROOT_FOLDER_ID = <span class=\"hljs-string\">'YOUR_FOLDER_ID'</span>; <span class=\"hljs-comment\">// Set the main folder ID</span>\n  <span class=\"hljs-keyword\">const</span> CHECK_SUBFOLDERS = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// Set to true to include subfolders</span>\n  <span class=\"hljs-keyword\">const</span> TIME_THRESHOLD = <span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>; <span class=\"hljs-comment\">// Last modified threshold (5 minutes)</span>\n\n  Logger.log(<span class=\"hljs-string\">\"Starting extractImagesFromDocs...\"</span>);\n\n  <span class=\"hljs-keyword\">const</span> docs = getRecentDocs(ROOT_FOLDER_ID, CHECK_SUBFOLDERS, TIME_THRESHOLD);\n  Logger.log(<span class=\"hljs-string\">`Found <span class=\"hljs-subst\">${docs.length}</span> recent Google Docs.`</span>);\n\n  docs.forEach(processDocument);\n}\n\n<span class=\"hljs-comment\">/**\n * Get all recently modified Google Docs from a folder (and optionally subfolders)\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getRecentDocs</span>(<span class=\"hljs-params\">folderId, includeSubfolders, timeThreshold</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> rootFolder = DriveApp.getFolderById(folderId);\n  <span class=\"hljs-keyword\">const</span> docs = [];\n  <span class=\"hljs-keyword\">const</span> now = <span class=\"hljs-built_in\">Date</span>.now();\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">scanFolder</span>(<span class=\"hljs-params\">folder</span>) </span>{\n    Logger.log(<span class=\"hljs-string\">`Scanning folder: <span class=\"hljs-subst\">${folder.getName()}</span>`</span>);\n    <span class=\"hljs-keyword\">const</span> files = folder.getFilesByType(MimeType.GOOGLE_DOCS);\n\n    <span class=\"hljs-keyword\">while</span> (files.hasNext()) {\n      <span class=\"hljs-keyword\">const</span> file = files.next();\n      Logger.log(<span class=\"hljs-string\">`Checking file: <span class=\"hljs-subst\">${file.getName()}</span> (Last updated: <span class=\"hljs-subst\">${file.getLastUpdated()}</span>)`</span>);\n\n      <span class=\"hljs-keyword\">if</span> (now - file.getLastUpdated().getTime() &lt;= timeThreshold) {\n        Logger.log(<span class=\"hljs-string\">`File selected: <span class=\"hljs-subst\">${file.getName()}</span> (ID: <span class=\"hljs-subst\">${file.getId()}</span>)`</span>);\n        docs.push(file);\n      }\n    }\n\n    <span class=\"hljs-keyword\">if</span> (includeSubfolders) {\n      <span class=\"hljs-keyword\">const</span> subfolders = folder.getFolders();\n      <span class=\"hljs-keyword\">while</span> (subfolders.hasNext()) {\n        scanFolder(subfolders.next());\n      }\n    }\n  }\n\n  scanFolder(rootFolder);\n  <span class=\"hljs-keyword\">return</span> docs;\n}\n\n<span class=\"hljs-comment\">/**\n * Process a Google Document: extract images and sync them with Drive\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">processDocument</span>(<span class=\"hljs-params\">file</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> docId = file.getId();\n  <span class=\"hljs-keyword\">const</span> docName = file.getName();\n  <span class=\"hljs-keyword\">const</span> parentFolder = file.getParents().next();\n\n  Logger.log(<span class=\"hljs-string\">`Processing document: <span class=\"hljs-subst\">${docName}</span> (ID: <span class=\"hljs-subst\">${docId}</span>)`</span>);\n\n  <span class=\"hljs-comment\">// Ensure the folder is correctly named (rename if necessary)</span>\n  <span class=\"hljs-keyword\">const</span> folderName = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${docName}</span>_<span class=\"hljs-subst\">${docId}</span>`</span>;\n  <span class=\"hljs-keyword\">let</span> imageFolder = findFolderByDocId(parentFolder, docId);\n\n  <span class=\"hljs-keyword\">if</span> (imageFolder) {\n    <span class=\"hljs-keyword\">if</span> (imageFolder.getName() !== folderName) {\n      Logger.log(<span class=\"hljs-string\">`Renaming folder: <span class=\"hljs-subst\">${imageFolder.getName()}</span> → <span class=\"hljs-subst\">${folderName}</span>`</span>);\n      imageFolder.setName(folderName);\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    Logger.log(<span class=\"hljs-string\">`Creating new folder for document: <span class=\"hljs-subst\">${folderName}</span>`</span>);\n    imageFolder = parentFolder.createFolder(folderName);\n  }\n\n  <span class=\"hljs-keyword\">const</span> existingImages = getExistingImages(imageFolder);\n  <span class=\"hljs-keyword\">const</span> docImages = DocumentApp.openById(docId).getBody().getImages();\n  <span class=\"hljs-keyword\">const</span> newImageNames = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n\n  Logger.log(<span class=\"hljs-string\">`Found <span class=\"hljs-subst\">${docImages.length}</span> images in document: <span class=\"hljs-subst\">${docName}</span>`</span>);\n\n  <span class=\"hljs-comment\">// Extract and save new images</span>\n  docImages.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">img, idx</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> imgName = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${docName}</span>_<span class=\"hljs-subst\">${idx + <span class=\"hljs-number\">1</span>}</span>.png`</span>;\n    newImageNames.add(imgName);\n\n    <span class=\"hljs-keyword\">if</span> (!existingImages.has(imgName)) {\n      Logger.log(<span class=\"hljs-string\">`Saving new image: <span class=\"hljs-subst\">${imgName}</span>`</span>);\n      imageFolder.createFile(img.getAs(<span class=\"hljs-string\">'image/png'</span>).setName(imgName));\n    } <span class=\"hljs-keyword\">else</span> {\n      Logger.log(<span class=\"hljs-string\">`Skipping existing image: <span class=\"hljs-subst\">${imgName}</span>`</span>);\n    }\n  });\n\n  <span class=\"hljs-comment\">// Remove images that no longer exist in the document</span>\n  existingImages.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">fileId, name</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (!newImageNames.has(name)) {\n      Logger.log(<span class=\"hljs-string\">`Deleting removed image: <span class=\"hljs-subst\">${name}</span>`</span>);\n      DriveApp.getFileById(fileId).setTrashed(<span class=\"hljs-literal\">true</span>);\n    }\n  });\n\n  Logger.log(<span class=\"hljs-string\">`Processing complete for document: <span class=\"hljs-subst\">${docName}</span>`</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * Find an existing folder based on the document ID in its name\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findFolderByDocId</span>(<span class=\"hljs-params\">parentFolder, docId</span>) </span>{\n  Logger.log(<span class=\"hljs-string\">`Searching for folder with doc ID: <span class=\"hljs-subst\">${docId}</span>`</span>);\n  <span class=\"hljs-keyword\">const</span> folders = parentFolder.getFolders();\n\n  <span class=\"hljs-keyword\">while</span> (folders.hasNext()) {\n    <span class=\"hljs-keyword\">const</span> folder = folders.next();\n    <span class=\"hljs-keyword\">if</span> (folder.getName().endsWith(<span class=\"hljs-string\">`_<span class=\"hljs-subst\">${docId}</span>`</span>)) {\n      Logger.log(<span class=\"hljs-string\">`Found matching folder: <span class=\"hljs-subst\">${folder.getName()}</span>`</span>);\n      <span class=\"hljs-keyword\">return</span> folder;\n    }\n  }\n\n  Logger.log(<span class=\"hljs-string\">`No matching folder found for doc ID: <span class=\"hljs-subst\">${docId}</span>`</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Get a list of existing images in a folder\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getExistingImages</span>(<span class=\"hljs-params\">folder</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> images = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\n  <span class=\"hljs-keyword\">const</span> files = folder.getFiles();\n\n  Logger.log(<span class=\"hljs-string\">`Checking existing images in folder: <span class=\"hljs-subst\">${folder.getName()}</span>`</span>);\n\n  <span class=\"hljs-keyword\">while</span> (files.hasNext()) {\n    <span class=\"hljs-keyword\">const</span> file = files.next();\n    <span class=\"hljs-keyword\">if</span> (file.getMimeType().startsWith(<span class=\"hljs-string\">'image/'</span>)) {\n      images.set(file.getName(), file.getId());\n      Logger.log(<span class=\"hljs-string\">`Found existing image: <span class=\"hljs-subst\">${file.getName()}</span>`</span>);\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> images;\n}\n</code></pre>\n<p>Add your folder ID to the top of the script, and optionally enable the subfolder scanning. Then make sure you have a Google Doc in that folder, ready to test.</p>\n<p>Save the script, and then run the <code>extractImagesFromDocs()</code> function. You should be prompted to approve the script permissions on the first run.</p>\n<h2 id=\"heading-running-the-script-on-a-timer\">Running the Script on a Timer</h2>\n<p>Next, create a new timer for the script and set it to run every 5 minutes, or every minute if you want the images quicker. Just make sure the timer duration is less than or equal to the time filter in the script.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1738347232162/35d91547-550a-4c95-ade5-8f0043580b4f.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-testing-the-script\">Testing the Script</h2>\n<p>Now try adding a few images to one of the Google Docs in your source folder. Then either wait for timer, or run the script manually. You should see a new folder in the same directory as the doc, with all of the images backed up.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1738347436492/7bef7ce1-81f6-422d-bc0c-de44da748b1a.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Try adding a few more images to the doc, and remove one of the originals. When the script runs again, it will add the new images and delete any that were removed from the doc. You can also rename the doc and the folder name will change to match. The source doc’s ID is in the folder name to help find it and keep it in sync when the doc name changes.</p>\n<h2 id=\"heading-whats-next\">What’s Next?</h2>\n<p>I thought about adding logic to cover more edge cases, like deleting the whole folder if the doc is deleted, or moving the image folder if the the source doc is moved. There’s a lot more that could be added, but I decided to stop here and just focus on the image extraction.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Apps Script is a great tool for automating work tasks in Google Docs. This script can aid teams that draft content in Google Docs, and need to extract the images later. By adding conditional logic, the script can be set up to run on a timer and skip docs that have already been processed. This makes the script more performant and helps avoid hitting usage quotas.</p>\n<p><em>How are you using Apps Script in your daily work?</em> If you’re looking for more low code content, or want to share your own, join us on Daily.dev in the <a target=\"_blank\" href=\"https://dly.to/SGjNAKXF8ru\">Low Code Devs</a> Squad!</p>\n","contentMarkdown":"Adding images to a Google Doc is no problem, but getting them back out can be a pain. I’ve written about this before with [Five Ways to Extract All Images From a Google Doc](https://community.appsmith.com/content/guide/five-ways-extract-all-images-google-doc), and more recently, with [this](https://blog.greenflux.us/extracting-all-images-from-a-google-doc-using-python) method using Python in Google Colab. However, all of those previous methods assumed you are working with a single folder or doc, and didn’t account for existing backup images from a previous run. Not ideal for running on a timer.\n\nIn this post, I’m sharing an updated version of the original Apps Script solution from the ‘Five Ways’ post, and adding some logic to handle running it on a timer. Here’s what all the script does:\n\n* Scan for all Google Docs within a folder, and optionally scan subfolders\n    \n* Filter the list for all docs updated within the last 5 minutes\n    \n* Loop through each doc, and save images to a folder with matching name\n    \n* Skip existing images that have already been extracted\n    \n* Remove backup of images that have been removed from the doc\n    \n* Rename the backup folder if the doc name changes\n    \n\nWith these changes, the script can be run on a timer, and automatically keep a folder of images synced with each source doc.\n\n## Creating the Script\n\nStart out by creating a new Apps Script by going to [script.new](https://script.new), or from the [Apps Script Projects](https://script.google.com/home) page. Name the script, then paste in this code:\n\n```javascript\nfunction extractImagesFromDocs() {\n  // Configurable variables\n  const ROOT_FOLDER_ID = 'YOUR_FOLDER_ID'; // Set the main folder ID\n  const CHECK_SUBFOLDERS = false; // Set to true to include subfolders\n  const TIME_THRESHOLD = 5 * 60 * 1000; // Last modified threshold (5 minutes)\n\n  Logger.log(\"Starting extractImagesFromDocs...\");\n  \n  const docs = getRecentDocs(ROOT_FOLDER_ID, CHECK_SUBFOLDERS, TIME_THRESHOLD);\n  Logger.log(`Found ${docs.length} recent Google Docs.`);\n\n  docs.forEach(processDocument);\n}\n\n/**\n * Get all recently modified Google Docs from a folder (and optionally subfolders)\n */\nfunction getRecentDocs(folderId, includeSubfolders, timeThreshold) {\n  const rootFolder = DriveApp.getFolderById(folderId);\n  const docs = [];\n  const now = Date.now();\n\n  function scanFolder(folder) {\n    Logger.log(`Scanning folder: ${folder.getName()}`);\n    const files = folder.getFilesByType(MimeType.GOOGLE_DOCS);\n\n    while (files.hasNext()) {\n      const file = files.next();\n      Logger.log(`Checking file: ${file.getName()} (Last updated: ${file.getLastUpdated()})`);\n      \n      if (now - file.getLastUpdated().getTime() <= timeThreshold) {\n        Logger.log(`File selected: ${file.getName()} (ID: ${file.getId()})`);\n        docs.push(file);\n      }\n    }\n\n    if (includeSubfolders) {\n      const subfolders = folder.getFolders();\n      while (subfolders.hasNext()) {\n        scanFolder(subfolders.next());\n      }\n    }\n  }\n\n  scanFolder(rootFolder);\n  return docs;\n}\n\n/**\n * Process a Google Document: extract images and sync them with Drive\n */\nfunction processDocument(file) {\n  const docId = file.getId();\n  const docName = file.getName();\n  const parentFolder = file.getParents().next();\n\n  Logger.log(`Processing document: ${docName} (ID: ${docId})`);\n\n  // Ensure the folder is correctly named (rename if necessary)\n  const folderName = `${docName}_${docId}`;\n  let imageFolder = findFolderByDocId(parentFolder, docId);\n\n  if (imageFolder) {\n    if (imageFolder.getName() !== folderName) {\n      Logger.log(`Renaming folder: ${imageFolder.getName()} → ${folderName}`);\n      imageFolder.setName(folderName);\n    }\n  } else {\n    Logger.log(`Creating new folder for document: ${folderName}`);\n    imageFolder = parentFolder.createFolder(folderName);\n  }\n\n  const existingImages = getExistingImages(imageFolder);\n  const docImages = DocumentApp.openById(docId).getBody().getImages();\n  const newImageNames = new Set();\n\n  Logger.log(`Found ${docImages.length} images in document: ${docName}`);\n\n  // Extract and save new images\n  docImages.forEach((img, idx) => {\n    const imgName = `${docName}_${idx + 1}.png`;\n    newImageNames.add(imgName);\n    \n    if (!existingImages.has(imgName)) {\n      Logger.log(`Saving new image: ${imgName}`);\n      imageFolder.createFile(img.getAs('image/png').setName(imgName));\n    } else {\n      Logger.log(`Skipping existing image: ${imgName}`);\n    }\n  });\n\n  // Remove images that no longer exist in the document\n  existingImages.forEach((fileId, name) => {\n    if (!newImageNames.has(name)) {\n      Logger.log(`Deleting removed image: ${name}`);\n      DriveApp.getFileById(fileId).setTrashed(true);\n    }\n  });\n\n  Logger.log(`Processing complete for document: ${docName}`);\n}\n\n/**\n * Find an existing folder based on the document ID in its name\n */\nfunction findFolderByDocId(parentFolder, docId) {\n  Logger.log(`Searching for folder with doc ID: ${docId}`);\n  const folders = parentFolder.getFolders();\n  \n  while (folders.hasNext()) {\n    const folder = folders.next();\n    if (folder.getName().endsWith(`_${docId}`)) {\n      Logger.log(`Found matching folder: ${folder.getName()}`);\n      return folder;\n    }\n  }\n\n  Logger.log(`No matching folder found for doc ID: ${docId}`);\n  return null;\n}\n\n/**\n * Get a list of existing images in a folder\n */\nfunction getExistingImages(folder) {\n  const images = new Map();\n  const files = folder.getFiles();\n\n  Logger.log(`Checking existing images in folder: ${folder.getName()}`);\n\n  while (files.hasNext()) {\n    const file = files.next();\n    if (file.getMimeType().startsWith('image/')) {\n      images.set(file.getName(), file.getId());\n      Logger.log(`Found existing image: ${file.getName()}`);\n    }\n  }\n\n  return images;\n}\n```\n\nAdd your folder ID to the top of the script, and optionally enable the subfolder scanning. Then make sure you have a Google Doc in that folder, ready to test.\n\nSave the script, and then run the `extractImagesFromDocs()` function. You should be prompted to approve the script permissions on the first run.\n\n## Running the Script on a Timer\n\nNext, create a new timer for the script and set it to run every 5 minutes, or every minute if you want the images quicker. Just make sure the timer duration is less than or equal to the time filter in the script.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1738347232162/35d91547-550a-4c95-ade5-8f0043580b4f.png align=\"center\")\n\n## Testing the Script\n\nNow try adding a few images to one of the Google Docs in your source folder. Then either wait for timer, or run the script manually. You should see a new folder in the same directory as the doc, with all of the images backed up.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1738347436492/7bef7ce1-81f6-422d-bc0c-de44da748b1a.png align=\"center\")\n\nTry adding a few more images to the doc, and remove one of the originals. When the script runs again, it will add the new images and delete any that were removed from the doc. You can also rename the doc and the folder name will change to match. The source doc’s ID is in the folder name to help find it and keep it in sync when the doc name changes.\n\n## What’s Next?\n\nI thought about adding logic to cover more edge cases, like deleting the whole folder if the doc is deleted, or moving the image folder if the the source doc is moved. There’s a lot more that could be added, but I decided to stop here and just focus on the image extraction.\n\n## Conclusion\n\nApps Script is a great tool for automating work tasks in Google Docs. This script can aid teams that draft content in Google Docs, and need to extract the images later. By adding conditional logic, the script can be set up to run on a timer and skip docs that have already been processed. This makes the script more performant and helps avoid hitting usage quotas.\n\n*How are you using Apps Script in your daily work?* If you’re looking for more low code content, or want to share your own, join us on Daily.dev in the [Low Code Devs](https://dly.to/SGjNAKXF8ru) Squad!","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1738348625546/f6f9e069-e701-4410-84f8-1a5911af3de9.png","brief":"Adding images to a Google Doc is no problem, but getting them back out can be a pain. I’ve written about this before with Five Ways to Extract All Images From a Google Doc, and more recently, with this method using Python in Google Colab. However, al...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":5,"draft":"679d0a6856ff42ca439310de","tags":["5e270f8a32d5fad159b76b9a","56744723958ef13879b95470","56744721958ef13879b94cad","641147fefe70c2c642f666d0","629d9e42b53317496bbdd9f6","5cf6188006c28b8d5cd3d862"],"publication":"60771c264155da32fc83ad6e","series":"679fa03905414f167a095994","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"67a0db0cef571eb503fedd7b"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"6790e86ca106fdd860a14d08","createdAt":"2025-01-22T12:45:32.801Z","updatedAt":"2025-01-22T15:49:01.625Z","views":627,"isActive":true,"hasLatex":false,"popularity":7300.8607,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":1,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Offline AI Chat with Local RAG from the Terminal","subtitle":"Retrieving Data from Markdown Files using Ollama on MacOS","cuid":"cm67wd8n4000109l77yppg22n","dateAdded":"2025-01-22T12:45:32.800Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"offline-ai-chat-with-local-rag-from-the-terminal","content":"<p>There are plenty of online AI services like ChatGPT that make it easy to chat with your documents, using Retrieval Augmented Generation (RAG) to improve the LLM response. But these all require sending your data to a 3rd party, and usually involve a subscription fee. If you’re just wanting to experiment, or working with sensitive data, paying for an online service may not be the best option. In cases like this, running the model locally can be more secure and cost effective. In this guide, I’ll show how you can use Ollama to run models locally with RAG and work completely offline.</p>\n<p>Ollama is an open source program for Windows, Mac and Linux, that makes it easy to download and run LLMs locally on your own hardware. Once installed, you can download various models, and begin chatting with them in the terminal, or integrate with the API.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Installing Ollama on MacOS</p>\n</li>\n<li><p>Downloading and prompting various models from the terminal</p>\n</li>\n<li><p>Extracting text from local markdown files for RAG</p>\n</li>\n<li><p>Sending the markdown with a prompt</p>\n</li>\n<li><p>Saving the LLM response to a new file</p>\n</li>\n<li><p>Chaining outputs to perform retrieval, prompting, and saving response in one command</p>\n</li>\n</ul>\n<p>For this guide I’ll be using a folder of markdown notes created with Obsidian, but you can use this same technique with any local documents. For models, I’ll be testing the new <code>DeepSeek-r1:1.5b</code> model, and <code>llama3.2:1b</code>— both small enough to run locally without a high-end GPU.</p>\n<h2 id=\"heading-installing-ollama-on-macos\">Installing Ollama on MacOS</h2>\n<p>Start out by downloading Ollama and installing it.</p>\n<p><a target=\"_blank\" href=\"https://ollama.com/download\"><strong>https://ollama.com/download</strong></a></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1729380535005/1c86f951-2e50-4d0a-a5e3-faf03d073ccf.png?auto=compress,format&amp;format=webp\" alt /></p>\n<p>Once the download finishes, move the <a target=\"_blank\" href=\"http://Ollama.app\"><code>Ollama.app</code></a> file to your <strong>Applications</strong> folder, then open it. Then click through the installer and approve the drive access. You’ll notice a new llama icon in the menu bar, with a single option to <em>Quit Ollama</em>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731150387579/b9ce4790-220e-4721-8346-8e4cbdd4d05c.png?auto=compress,format&amp;format=webp\" alt /></p>\n<p>There’s no other GUI— everything else is done from the terminal.</p>\n<h2 id=\"heading-downloading-and-prompting-models\">Downloading and Prompting Models</h2>\n<p>Next, open the terminal and run:</p>\n<pre><code class=\"lang-bash\">ollama run deepseek-r1:1.5b\n</code></pre>\n<p>This will download the smaller, 1.5 billion parameter DeepSeek model, then run it and let you begin prompting from the terminal. You’ll see several files download the first time running a model, but after that it should load quickly and be ready to start prompting.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1737545172767/3ceeb1c3-9682-433a-a5a4-ec221feb69e8.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Type any text prompt and hit enter. You’ll see the model begin responding with a stream of text wrapped in <code>&lt;think&gt;</code> tags. The r1 series are reasoning models, similar to OpenAI’s o1 model that uses a chain of thought before replying. However, unlike OpenAI’s model, DeekSeek actually returns that chain of thought in the response so you can see what reasoning was used.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1737545628278/cc55c717-7742-4fb1-b5d7-5ce19210563d.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Scroll down and you should see a closing <code>&lt;/think&gt;</code> tag, followed by the actual response from the LLM, after reasoning through the query.</p>\n<h3 id=\"heading-installing-other-models\">Installing other models</h3>\n<p>Type <code>/bye</code> to exit the chat and hit enter to return to the Mac terminal. Next we’ll run the Llama3.2:1b model. This time we’ll start up the model <em>and</em> provide an initial prompt. Just add a prompt wrapped in double-quotes, after the model name.</p>\n<pre><code class=\"lang-bash\">ollama run llama3.2:1b <span class=\"hljs-string\">\"How can I extract text from a markdown file from the terminal on mac?\"</span>\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1737546654300/5ba8f1fe-01f1-4773-8c3b-debb7b8587ad.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Type <code>/bye</code> again to return to the Mac terminal.</p>\n<h2 id=\"heading-extracting-text-from-local-markdown-files-for-rag\">Extracting text from local markdown files for RAG</h2>\n<p>Next we’ll pull text from a local markdown file. You’ll want to change to the directory containing your markdown file first, to make the terminal commands a little easier. In my case, the file is in iCloud, which can be a little tricky to find on Mac. To find it, enter:</p>\n<pre><code class=\"lang-bash\"><span class=\"hljs-built_in\">cd</span> ~/Library/Mobile\\ Documents/com\\~apple\\~CloudDocs\n</code></pre>\n<p>From there you should be able to use <code>ls</code> and <code>cd</code> to find the correct folder path to anything in iCloud.</p>\n<p>Once you’re in the right folder, run the following command, replacing FILENAME.md with your file and extension. You can use .txt or .md files easily without needing any other tools.</p>\n<pre><code class=\"lang-bash\">cat FILENAME.md\n</code></pre>\n<p>Use a backslash to escape any spaces in the filename, i.e. <code>cat To\\ Dos.md</code> . You should see the contents of the file returned in the terminal.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1737547942741/ae4fb16c-84a5-479d-9985-b2296df42a53.png\" alt class=\"image--center mx-auto\" /></p>\n<p>PDFs and CSV’s can also be done using other libraries, but that’s beyond the scope of this guide.</p>\n<h2 id=\"heading-sending-the-markdown-with-a-prompt\">Sending the markdown with a prompt</h2>\n<p>Next, we’ll pipe the output of the <code>cat</code> command to the <code>ollama run</code> command, in order to start the model with a prompt AND include data from the markdown file for retrieval augmented generation.</p>\n<p>Run the following command, inserting your filename:</p>\n<pre><code class=\"lang-bash\">cat To\\ Dos.md| ollama run llama3.2 <span class=\"hljs-string\">\"How do I do #5?\"</span>\n</code></pre>\n<p>This will read the contents of the <code>To Dos.md</code> file, and append it to the prompt string.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1737548341661/5e75f2c3-5866-407d-9511-9868d76ca1c9.png\" alt class=\"image--center mx-auto\" /></p>\n<p>This allows you to go from the Mac terminal, directly to a response from the LLM, using RAG with a local file.</p>\n<h2 id=\"heading-saving-the-llm-response-to-a-new-file\">Saving the LLM response to a new file</h2>\n<p>Lastly, we’ll save the output of the LLM to a new markdown file. This part is really complicated, so this might be a good time to take a break and grab a coffee. ☕️</p>\n<p><strong><em>Ok, ready for the hard part?</em></strong> Simply add <code>&gt; response.md</code> to the previous command! This will save the output to a new file in the same directory. <strong><em>It’s that easy!</em></strong></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1737548854983/9f0309f7-e9bd-4158-a127-9f2fb478713e.png\" alt class=\"image--center mx-auto\" /></p>\n<p>The really cool thing is that this completes the chain <em>(read file, send prompt, save response)</em>, and returns you right back to the Mac terminal so you can run the next file, or perform any other followup actions from the terminal. There’s no need to wait for the response to finish and type <code>/bye</code> to exit the LLM chat.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Ollama makes it easy to run models locally, enabling new use cases and avoiding the privacy concerns and cost associated with 3rd party AI services. Additionally, the models work completely offline, and many of the smaller models run great on standard hardware— without the need for an expensive GPU. This approach is great for hobby work or privacy conscious developers who want more control over their data.</p>\n","contentMarkdown":"There are plenty of online AI services like ChatGPT that make it easy to chat with your documents, using Retrieval Augmented Generation (RAG) to improve the LLM response. But these all require sending your data to a 3rd party, and usually involve a subscription fee. If you’re just wanting to experiment, or working with sensitive data, paying for an online service may not be the best option. In cases like this, running the model locally can be more secure and cost effective. In this guide, I’ll show how you can use Ollama to run models locally with RAG and work completely offline.\n\nOllama is an open source program for Windows, Mac and Linux, that makes it easy to download and run LLMs locally on your own hardware. Once installed, you can download various models, and begin chatting with them in the terminal, or integrate with the API.\n\n**This guide will cover:**\n\n* Installing Ollama on MacOS\n    \n* Downloading and prompting various models from the terminal\n    \n* Extracting text from local markdown files for RAG\n    \n* Sending the markdown with a prompt\n    \n* Saving the LLM response to a new file\n    \n* Chaining outputs to perform retrieval, prompting, and saving response in one command\n    \n\nFor this guide I’ll be using a folder of markdown notes created with Obsidian, but you can use this same technique with any local documents. For models, I’ll be testing the new `DeepSeek-r1:1.5b` model, and `llama3.2:1b`— both small enough to run locally without a high-end GPU.\n\n## Installing Ollama on MacOS\n\nStart out by downloading Ollama and installing it.\n\n[**https://ollama.com/download**](https://ollama.com/download)\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729380535005/1c86f951-2e50-4d0a-a5e3-faf03d073ccf.png?auto=compress,format&format=webp align=\"left\")\n\nOnce the download finishes, move the [`Ollama.app`](http://Ollama.app) file to your **Applications** folder, then open it. Then click through the installer and approve the drive access. You’ll notice a new llama icon in the menu bar, with a single option to *Quit Ollama*.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731150387579/b9ce4790-220e-4721-8346-8e4cbdd4d05c.png?auto=compress,format&format=webp align=\"left\")\n\nThere’s no other GUI— everything else is done from the terminal.\n\n## Downloading and Prompting Models\n\nNext, open the terminal and run:\n\n```bash\nollama run deepseek-r1:1.5b\n```\n\nThis will download the smaller, 1.5 billion parameter DeepSeek model, then run it and let you begin prompting from the terminal. You’ll see several files download the first time running a model, but after that it should load quickly and be ready to start prompting.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1737545172767/3ceeb1c3-9682-433a-a5a4-ec221feb69e8.png align=\"center\")\n\nType any text prompt and hit enter. You’ll see the model begin responding with a stream of text wrapped in `<think>` tags. The r1 series are reasoning models, similar to OpenAI’s o1 model that uses a chain of thought before replying. However, unlike OpenAI’s model, DeekSeek actually returns that chain of thought in the response so you can see what reasoning was used.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1737545628278/cc55c717-7742-4fb1-b5d7-5ce19210563d.png align=\"center\")\n\nScroll down and you should see a closing `</think>` tag, followed by the actual response from the LLM, after reasoning through the query.\n\n### Installing other models\n\nType `/bye` to exit the chat and hit enter to return to the Mac terminal. Next we’ll run the Llama3.2:1b model. This time we’ll start up the model *and* provide an initial prompt. Just add a prompt wrapped in double-quotes, after the model name.\n\n```bash\nollama run llama3.2:1b \"How can I extract text from a markdown file from the terminal on mac?\"\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1737546654300/5ba8f1fe-01f1-4773-8c3b-debb7b8587ad.png align=\"center\")\n\nType `/bye` again to return to the Mac terminal.\n\n## Extracting text from local markdown files for RAG\n\nNext we’ll pull text from a local markdown file. You’ll want to change to the directory containing your markdown file first, to make the terminal commands a little easier. In my case, the file is in iCloud, which can be a little tricky to find on Mac. To find it, enter:\n\n```bash\ncd ~/Library/Mobile\\ Documents/com\\~apple\\~CloudDocs\n```\n\nFrom there you should be able to use `ls` and `cd` to find the correct folder path to anything in iCloud.\n\nOnce you’re in the right folder, run the following command, replacing FILENAME.md with your file and extension. You can use .txt or .md files easily without needing any other tools.\n\n```bash\ncat FILENAME.md\n```\n\nUse a backslash to escape any spaces in the filename, i.e. `cat To\\ Dos.md` . You should see the contents of the file returned in the terminal.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1737547942741/ae4fb16c-84a5-479d-9985-b2296df42a53.png align=\"center\")\n\nPDFs and CSV’s can also be done using other libraries, but that’s beyond the scope of this guide.\n\n## Sending the markdown with a prompt\n\nNext, we’ll pipe the output of the `cat` command to the `ollama run` command, in order to start the model with a prompt AND include data from the markdown file for retrieval augmented generation.\n\nRun the following command, inserting your filename:\n\n```bash\ncat To\\ Dos.md| ollama run llama3.2 \"How do I do #5?\"\n```\n\nThis will read the contents of the `To Dos.md` file, and append it to the prompt string.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1737548341661/5e75f2c3-5866-407d-9511-9868d76ca1c9.png align=\"center\")\n\nThis allows you to go from the Mac terminal, directly to a response from the LLM, using RAG with a local file.\n\n## Saving the LLM response to a new file\n\nLastly, we’ll save the output of the LLM to a new markdown file. This part is really complicated, so this might be a good time to take a break and grab a coffee. ☕️\n\n***Ok, ready for the hard part?*** Simply add `> response.md` to the previous command! This will save the output to a new file in the same directory. ***It’s that easy!***\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1737548854983/9f0309f7-e9bd-4158-a127-9f2fb478713e.png align=\"center\")\n\nThe really cool thing is that this completes the chain *(read file, send prompt, save response)*, and returns you right back to the Mac terminal so you can run the next file, or perform any other followup actions from the terminal. There’s no need to wait for the response to finish and type `/bye` to exit the LLM chat.\n\n## Conclusion\n\nOllama makes it easy to run models locally, enabling new use cases and avoiding the privacy concerns and cost associated with 3rd party AI services. Additionally, the models work completely offline, and many of the smaller models run great on standard hardware— without the need for an expensive GPU. This approach is great for hobby work or privacy conscious developers who want more control over their data.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1737549463612/6905fc52-a1f4-4302-bbf4-3a36bcd1c1da.png","brief":"There are plenty of online AI services like ChatGPT that make it easy to chat with your documents, using Retrieval Augmented Generation (RAG) to improve the LLM response. But these all require sending your data to a 3rd party, and usually involve a s...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":5,"draft":"6790e683f0235bdd87b814c3","tags":["6547328115caa6554c5d5bc0","635ad52efe8087002dee4707","5f1a7b4309e95d4d18c3b2ee","6772942e924320961782a5e7","65102817dae1474f64f9c4f8","638180b71e50d717cb30e6a7","56744722958ef13879b950b2","576a1d6e13cc2eb2d90e2383"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"6790e86ca106fdd860a14d08"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"67718c8a02fcfaf986656c58","createdAt":"2024-12-29T17:53:14.475Z","updatedAt":"2024-12-29T17:53:14.475Z","views":126,"isActive":true,"hasLatex":false,"popularity":7255.191,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Becoming the Art: AI Powered Selfies with FLUX1 and Replicate.com","subtitle":"Fine-Tuning a Vision Model for Picture Perfect Results","cuid":"cm59wshre000f09k1ajlvce23","dateAdded":"2024-12-29T17:53:14.474Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"becoming-the-art-ai-powered-selfies-with-flux1-and-replicatecom","content":"<p>AI image generation has been around for a while now and become fairly accessible. You can ask ChatGPT or MidJourney to draw anything you can imagine, and they can create some pretty impressive results. But try getting it to draw a picture with your face or likeness, and suddenly the results aren’t so impressive. ChatGPT will let you upload a photo as an example, but the output image will only have a few similar characteristics at best. To get good, repeatable results, you have to fine-tune the model on a training set of images first.</p>\n<p>In this guide, I’ll show you how to train a vision model on your likeness, and start generating amazing hi-resolution images that actually look like you. I’ll be using the <a target=\"_blank\" href=\"https://replicate.com/ostris/flux-dev-lora-trainer/train\">flux-dev-lora-trainer</a> model, which is based on the FLUX.1 model from Black Forest Labs. For this guide, I’ll be running the training job and model using Replicate.com, but you could run the same model locally if you have sufficient hardware.</p>\n<p>But before we get into the details, let’s check out a few of the results! Here are a few samples that I made after training the model on only ten images of me.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1735490924979/349197b6-b045-48f6-9fb5-7ef2173c47af.png\" alt class=\"image--center mx-auto\" /></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1735490949822/d09c537e-9e24-4fa7-9e5c-5c93ec0cefc7.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Not bad for only 10 training images and a 20 minute training job! The images could be even better with more training data and higher settings for the various generation options.</p>\n<p><strong>Alright, let’s get to it!</strong></p>\n<p><strong>Note</strong>: Using Replicate.com to host the model does require adding a credit card. You can set a max billing amount to avoid any surprises. I am in no way affiliated with Replicate.com, and not using any referral links.</p>\n<h2 id=\"heading-creating-a-replicatecom-account\">Creating a Replicate.com Account</h2>\n<p>Start out by signing up for <a target=\"_blank\" href=\"https://replicate.com/\">Replicate.com</a> and adding a payment method. You can set a spend limit while you’re here, and Replicate will stop running your models when you hit the limit.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1735490477706/11499289-2f40-4f02-b221-8d084a94d52c.png\" alt class=\"image--center mx-auto\" /></p>\n<p>You’ll get an initial charge of $1.00 to verify the card, then a notification if/when you hit your spending limit. After initially training my model and several hours of prompting, I’m only at $7 USD, and very happy with the results!</p>\n<h2 id=\"heading-prepare-the-training-dataset\">Prepare the Training Dataset</h2>\n<p>Next, you’ll want to prepare at least 10 images to fine-tune the model. Be sure to crop out any other faces, and avoid images with writing. I found that text from clothing can appear in the generated images and look out of place, so ideally you should use pictures with no writing.</p>\n<p>Once you have your 10+ images cropped, compress them into a zip file to prepare for upload to the model. Do not add the images to a folder first, just zip all 10+ into a single zip file.</p>\n<h2 id=\"heading-training-the-model\">Training the Model</h2>\n<p>Next, we’ll add the model to our account and set up a training job. Start out by going to the search bar in Replicate.com and type: <code>ostris</code></p>\n<p>Then select the <strong>ostris/flux-dev-lora-trainer</strong> model.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1735491688078/c41dd352-c0b6-434b-b132-fcbbf6b8163b.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Next, scroll down to the <strong>Form</strong> section.</p>\n<p>In the <strong>Destination</strong> field, select <strong>+ create new model</strong>, then give it a name. Be sure to set the model to private unless you want others to use it.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1735491929637/3acf5a62-70ef-4ee2-b0a4-f36531b9976e.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Then add your zip file to the <code>input_images</code> field.</p>\n<p>Next, scroll down and set the <code>trigger_word</code> to your name, or other keyword. This will be used when prompting to tell the model to generate an image of you.</p>\n<h3 id=\"heading-other-settings\">Other Settings</h3>\n<p>You may also want to adjust the number of <code>steps</code> and <code>lora_rank</code> based on your desired results. I kept the default 1000 steps but increased the lora_rank to 32 for my test, and the results were fairly good quality without costing too much to train.</p>\n<p>Lastly, scroll down and click <strong>Create Training</strong>, to start the training job. Then grab a cup of coffee while the job finishes. ☕️</p>\n<p>In my case, the job took about 20 minutes. Yours may vary based on the number of images and settings used.</p>\n<h2 id=\"heading-generating-images\">Generating Images</h2>\n<p>Once the training job is complete, you can begin prompting by going to the <a target=\"_blank\" href=\"https://replicate.com/models\">Models</a> tab in your Dashboard and selecting the new model. In the prompt field, be sure to use the <code>trigger_word</code> to add yourself to the generated image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1735493222035/44dfdce8-059a-465b-a730-e32259ccdd7e.png\" alt class=\"image--center mx-auto\" /></p>\n<p>You can also adjust settings for the aspect ratio, size, and a ton of different options that affect the image style and quality. Try out the same prompt with different settings to see what kind of results you get. The <code>guideance_scale</code> setting can yield some particularly odd results when adjusted from the default value of 3.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1735494093702/24a47908-40db-4f97-bc74-f9e0e9278b04.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Training your own vision model would have been impossible for the average user just a few years ago. But now with hosted services like replicate.com, anyone can train their own model in minutes and start generating hi-resolution AI images based on their own likeness.</p>\n","contentMarkdown":"AI image generation has been around for a while now and become fairly accessible. You can ask ChatGPT or MidJourney to draw anything you can imagine, and they can create some pretty impressive results. But try getting it to draw a picture with your face or likeness, and suddenly the results aren’t so impressive. ChatGPT will let you upload a photo as an example, but the output image will only have a few similar characteristics at best. To get good, repeatable results, you have to fine-tune the model on a training set of images first.\n\nIn this guide, I’ll show you how to train a vision model on your likeness, and start generating amazing hi-resolution images that actually look like you. I’ll be using the [flux-dev-lora-trainer](https://replicate.com/ostris/flux-dev-lora-trainer/train) model, which is based on the FLUX.1 model from Black Forest Labs. For this guide, I’ll be running the training job and model using Replicate.com, but you could run the same model locally if you have sufficient hardware.\n\nBut before we get into the details, let’s check out a few of the results! Here are a few samples that I made after training the model on only ten images of me.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1735490924979/349197b6-b045-48f6-9fb5-7ef2173c47af.png align=\"center\")\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1735490949822/d09c537e-9e24-4fa7-9e5c-5c93ec0cefc7.png align=\"center\")\n\nNot bad for only 10 training images and a 20 minute training job! The images could be even better with more training data and higher settings for the various generation options.\n\n**Alright, let’s get to it!**\n\n**Note**: Using Replicate.com to host the model does require adding a credit card. You can set a max billing amount to avoid any surprises. I am in no way affiliated with Replicate.com, and not using any referral links.\n\n## Creating a Replicate.com Account\n\nStart out by signing up for [Replicate.com](https://replicate.com/) and adding a payment method. You can set a spend limit while you’re here, and Replicate will stop running your models when you hit the limit.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1735490477706/11499289-2f40-4f02-b221-8d084a94d52c.png align=\"center\")\n\nYou’ll get an initial charge of $1.00 to verify the card, then a notification if/when you hit your spending limit. After initially training my model and several hours of prompting, I’m only at $7 USD, and very happy with the results!\n\n## Prepare the Training Dataset\n\nNext, you’ll want to prepare at least 10 images to fine-tune the model. Be sure to crop out any other faces, and avoid images with writing. I found that text from clothing can appear in the generated images and look out of place, so ideally you should use pictures with no writing.\n\nOnce you have your 10+ images cropped, compress them into a zip file to prepare for upload to the model. Do not add the images to a folder first, just zip all 10+ into a single zip file.\n\n## Training the Model\n\nNext, we’ll add the model to our account and set up a training job. Start out by going to the search bar in Replicate.com and type: `ostris`\n\nThen select the **ostris/flux-dev-lora-trainer** model.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1735491688078/c41dd352-c0b6-434b-b132-fcbbf6b8163b.png align=\"center\")\n\nNext, scroll down to the **Form** section.\n\nIn the **Destination** field, select **\\+ create new model**, then give it a name. Be sure to set the model to private unless you want others to use it.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1735491929637/3acf5a62-70ef-4ee2-b0a4-f36531b9976e.png align=\"center\")\n\nThen add your zip file to the `input_images` field.\n\nNext, scroll down and set the `trigger_word` to your name, or other keyword. This will be used when prompting to tell the model to generate an image of you.\n\n### Other Settings\n\nYou may also want to adjust the number of `steps` and `lora_rank` based on your desired results. I kept the default 1000 steps but increased the lora\\_rank to 32 for my test, and the results were fairly good quality without costing too much to train.\n\nLastly, scroll down and click **Create Training**, to start the training job. Then grab a cup of coffee while the job finishes. ☕️\n\nIn my case, the job took about 20 minutes. Yours may vary based on the number of images and settings used.\n\n## Generating Images\n\nOnce the training job is complete, you can begin prompting by going to the [Models](https://replicate.com/models) tab in your Dashboard and selecting the new model. In the prompt field, be sure to use the `trigger_word` to add yourself to the generated image.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1735493222035/44dfdce8-059a-465b-a730-e32259ccdd7e.png align=\"center\")\n\nYou can also adjust settings for the aspect ratio, size, and a ton of different options that affect the image style and quality. Try out the same prompt with different settings to see what kind of results you get. The `guideance_scale` setting can yield some particularly odd results when adjusted from the default value of 3.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1735494093702/24a47908-40db-4f97-bc74-f9e0e9278b04.png align=\"center\")\n\n## Conclusion\n\nTraining your own vision model would have been impossible for the average user just a few years ago. But now with hosted services like replicate.com, anyone can train their own model in minutes and start generating hi-resolution AI images based on their own likeness.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1735491028325/408e37ef-be91-48b2-98cf-8f0d383f585f.png","brief":"AI image generation has been around for a while now and become fairly accessible. You can ask ChatGPT or MidJourney to draw anything you can imagine, and they can create some pretty impressive results. But try getting it to draw a picture with your f...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":4,"draft":"6771692fe025a6f7bb0cabed","tags":["56744721958ef13879b9488e","638180b71e50d717cb30e6a7","56744721958ef13879b94927","62f7e28f69fa1793160c36c1","62f23e08408d676b1b589a6e","649f135e3b5d276f9c1d1771"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"67718c8a02fcfaf986656c58"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"675d917920af6dbb59f28439","createdAt":"2024-12-14T14:08:57.342Z","updatedAt":"2025-03-16T00:32:14.899Z","views":192,"isActive":true,"hasLatex":false,"popularity":7226.0919,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"SQL to JSON in FileMaker using Papa Parse","subtitle":"Web Viewer solution for constructing JSON from ExecuteSQL","cuid":"cm4o96a63000209kyc71jc6a2","dateAdded":"2024-12-14T14:08:57.339Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"sql-to-json-in-filemaker-using-papa-parse","content":"<p>Recently I needed to upload some data from a local FileMaker database to a REST API as part of a migration. FileMaker’s Insert from Url script step uses curl requests for sending data to another API, and anyone who’s used it knows the struggle of escaping quotes and concatenating field names to build the JSON, one string at a time. FileMaker just wasn’t built with JSON in mind.</p>\n<p>But in version 16 they added several functions that made parsing and editing JSON much easier. However, this still requires building the JSON one field at a time, using <code>JSONSetElement()</code> for each field. It’s a step up from the old approach, but its still too verbose.</p>\n<p>Another approach is to use the FileMaker Data API, also added in version 16. This is a much better method for fetching data in JSON format, but it requires that the file be hosted with FileMaker Server. And my use case was working with a local file.</p>\n<p><strong><em>So now what?</em></strong></p>\n<p>Back to looping over the data with a script, or <code>while()</code> function? Setting each field, one step at a time to build the JSON?</p>\n<p>It probably would have worked fine, but it just felt so clunky. What if you need to do this for 20 different tables?! This could be just a few lines of code in JavaScript, but the JSON functions in FileMaker would require separate scripts or nested loops with complex logic to iterate over the column names of each field. And that doesn’t sound fun at all.</p>\n<p>I try to approach every programming problem from a re-usability standpoint, and use variables where possible to enable future application of the code for other use cases. I’d much rather spend a few hours building a dynamic tool, than hard-code something for my one-time use case, even if it takes longer to build. So that’s what I did.</p>\n<h2 id=\"heading-enter-the-web-viewer\">Enter the Web Viewer</h2>\n<p>This is a simple problem for JavaScript. Just import a CSV parsing library and feed it some data. All of the looping, header names, escaping quotes, and other nonsense is handled for you with a few config options. Here’s some data, give it back to me in JSON. It’s that simple. Well, except for that whole Web Viewer part.</p>\n<p>The trick is getting your data from FileMaker as comma separated values and passing that into the Web Viewer, and then getting the JSON back out. I knew I could do the conversion part with the Papa Parse JavaScript library, and that <code>FileMaker.PerformScript()</code> could be used to send data as a parameter to a FileMaker script. So I started with figuring out how to pass in the data.</p>\n<p>First I set up a basic Web Viewer using Papa Parse, with hard coded data. This is based on the example from the <a target=\"_blank\" href=\"https://www.papaparse.com/docs\">Papa Parse docs</a>.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>CSV to JSON Converter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"exportJson()\"</span>&gt;</span>Export JSON<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"results\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">const</span> csvData = <span class=\"hljs-string\">`field1,field2,field3\na,b,c\nd,e,f`</span>;\n\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convertCSVToJSON</span>(<span class=\"hljs-params\">csvData</span>) </span>{\n        <span class=\"hljs-keyword\">const</span> jsonData = Papa.parse(csvData, {\n          <span class=\"hljs-attr\">header</span>: <span class=\"hljs-literal\">true</span>,\n          <span class=\"hljs-attr\">skipEmptyLines</span>: <span class=\"hljs-literal\">true</span>\n        }).data;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">JSON</span>.stringify(jsonData, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-number\">2</span>);\n      }\n\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">exportJson</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">const</span> jsonData = convertCSVToJSON(csvData);\n        <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'results'</span>).textContent = jsonData;\n        FileMaker.PerformScript(<span class=\"hljs-string\">\"Process_JSON_from_Webviewer\"</span>, jsonData); \n      }\n\n      <span class=\"hljs-built_in\">window</span>.onload = exportJson;\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>I saved this value into a new field, <code>tasks::Webviewer</code> , and then set the Web Viewer’s source to this field.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734184200793/c6c0304f-58cc-416b-aba4-48cca85dd03f.png\" alt class=\"image--center mx-auto\" /></p>\n<p>This imports the Papa Parse library, and passes it a string that is a valid CSV body:</p>\n<pre><code class=\"lang-bash\">field1,field2,field3\na,b,c\nd,e,f\n</code></pre>\n<p>This worked and displayed the resulting JSON. The next step was to get the records I wanted to upload as a CSV string… which isn’t much different than the result from the FileMaker <code>ExecuteSQL()</code> return value, if you use the right field and row separators!</p>\n<h2 id=\"heading-inserting-the-csv-data-to-the-web-viewer\">Inserting the CSV Data to the Web Viewer</h2>\n<p>I started by adding a placeholder <code>CSV_DATA</code> to my WebViewerSource HTML, instead of the hard coded data. Then, instead of displaying the HTML doc from the WebViewerSource field directly, I used <code>SUBSTITUTE()</code> to swap in the real CSV data, generated using ExecuteSQL.</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>CSV to JSON Converter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"exportJson()\"</span>&gt;</span>Export JSON<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"results\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">const</span> csvData = <span class=\"hljs-string\">`CSV_DATA`</span>;\n\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convertCSVToJSON</span>(<span class=\"hljs-params\">csvData</span>) </span>{\n        <span class=\"hljs-keyword\">const</span> jsonData = Papa.parse(csvData, {\n          <span class=\"hljs-attr\">header</span>: <span class=\"hljs-literal\">true</span>,\n          <span class=\"hljs-attr\">skipEmptyLines</span>: <span class=\"hljs-literal\">true</span>\n        }).data;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">JSON</span>.stringify(jsonData, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-number\">2</span>);\n      }\n\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">exportJson</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">const</span> jsonData = convertCSVToJSON(csvData);\n        <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'results'</span>).textContent = jsonData;\n        FileMaker.PerformScript(<span class=\"hljs-string\">\"Process_JSON_from_Webviewer\"</span>, jsonData); \n      }\n\n      <span class=\"hljs-built_in\">window</span>.onload = exportJson;\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>Web Viewer source:</p>\n<pre><code class=\"lang-plaintext\">Let([\n\n    ~headers = \"title,status,start,end,progress\";     \n    ~sqlQuery = \"SELECT title, status, start, \\\"end\\\", progress FROM tasks\";    \n    ~rowData  = ExecuteSQL(~sqlQuery; \",\"; \"¶\");    \n    ~csvData  = ~headers &amp; \"¶\" &amp; ~rowData;    \n    ~htmlDoc  = tasks::Webviewer;    \n    ~result   = Substitute ( ~htmlDoc; \"CSV_DATA\"; ~csvData )\n\n    ];\n\n    ~result\n\n    )\n</code></pre>\n<p>In this case, I had to use escape quotes on the field name <code>end</code> because it’s an <a target=\"_blank\" href=\"https://community.appsmith.com/content/blog/sql-reserved-words\">SQL Reserved Word</a>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734185020917/229dbc45-6a6b-45ad-aaa1-d9126111e80a.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-extracting-the-json\">Extracting the JSON</h2>\n<p>Lastly, I added a script to be called from the Web Viewer, and receive the JSON as a parameter.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734184590248/48e842c9-7799-41a5-a5c7-759bcb6bcf69.png\" alt class=\"image--center mx-auto\" /></p>\n<p>The Web Viewer HTML calls this script and passes the JSON using the <code>exportJson</code> function:</p>\n<pre><code class=\"lang-javascript\">      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">exportJson</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">const</span> jsonData = convertCSVToJSON(csvData);\n        <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'results'</span>).textContent = jsonData;\n        FileMaker.PerformScript(<span class=\"hljs-string\">\"Process_JSON_from_Webviewer\"</span>, jsonData); \n      }\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1734184686277/fed26bf7-abd2-4877-9c0d-0e1730f7e6e4.png\" alt class=\"image--center mx-auto\" /></p>\n<p>From here, I was able to use the JSON in the body of a curl request and upload it directly to the API, without having to host the database on FileMaker Server, or build the JSON one field at a time. I’m still hard coding the header names instead of extracting them programmatically, but this allows for manually selecting which fields to send to the API.</p>\n<h3 id=\"heading-other-thoughts\">Other Thoughts</h3>\n<p>If you want, you can also copy the Papa Parse library into a text layout object, then extract it using <code>getLayoutObjectAttribute()</code>. Then merge in the script with <code>SUBSTITUTE()</code>, enabling it to run completely offline. In my case, I had internet access, but the file wasn’t on a server to allow using the Data API, so this approach worked perfectly.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>The trusty old Web Viewer came through once again. Whenever you hit the limits of the native FileMaker platform, chances are, you just need a web viewer, the right JS library, and a few lines of code. Now if they would only add <a target=\"_blank\" href=\"https://blog.greenflux.us/why-i-built-a-code-editor-inside-filemaker-pro\">syntax highlighting and formatting</a> to the web viewer source field.</p>\n","contentMarkdown":"Recently I needed to upload some data from a local FileMaker database to a REST API as part of a migration. FileMaker’s Insert from Url script step uses curl requests for sending data to another API, and anyone who’s used it knows the struggle of escaping quotes and concatenating field names to build the JSON, one string at a time. FileMaker just wasn’t built with JSON in mind.\n\nBut in version 16 they added several functions that made parsing and editing JSON much easier. However, this still requires building the JSON one field at a time, using `JSONSetElement()` for each field. It’s a step up from the old approach, but its still too verbose.\n\nAnother approach is to use the FileMaker Data API, also added in version 16. This is a much better method for fetching data in JSON format, but it requires that the file be hosted with FileMaker Server. And my use case was working with a local file.\n\n***So now what?***\n\nBack to looping over the data with a script, or `while()` function? Setting each field, one step at a time to build the JSON?\n\nIt probably would have worked fine, but it just felt so clunky. What if you need to do this for 20 different tables?! This could be just a few lines of code in JavaScript, but the JSON functions in FileMaker would require separate scripts or nested loops with complex logic to iterate over the column names of each field. And that doesn’t sound fun at all.\n\nI try to approach every programming problem from a re-usability standpoint, and use variables where possible to enable future application of the code for other use cases. I’d much rather spend a few hours building a dynamic tool, than hard-code something for my one-time use case, even if it takes longer to build. So that’s what I did.\n\n## Enter the Web Viewer\n\nThis is a simple problem for JavaScript. Just import a CSV parsing library and feed it some data. All of the looping, header names, escaping quotes, and other nonsense is handled for you with a few config options. Here’s some data, give it back to me in JSON. It’s that simple. Well, except for that whole Web Viewer part.\n\nThe trick is getting your data from FileMaker as comma separated values and passing that into the Web Viewer, and then getting the JSON back out. I knew I could do the conversion part with the Papa Parse JavaScript library, and that `FileMaker.PerformScript()` could be used to send data as a parameter to a FileMaker script. So I started with figuring out how to pass in the data.\n\nFirst I set up a basic Web Viewer using Papa Parse, with hard coded data. This is based on the example from the [Papa Parse docs](https://www.papaparse.com/docs).\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>CSV to JSON Converter</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js\"></script>\n  </head>\n  <body>\n    <button onclick=\"exportJson()\">Export JSON</button>\n    <pre><div id=\"results\"></div></pre>\n    <script>\n      const csvData = `field1,field2,field3\na,b,c\nd,e,f`;\n\n      function convertCSVToJSON(csvData) {\n        const jsonData = Papa.parse(csvData, {\n          header: true,\n          skipEmptyLines: true\n        }).data;\n        return JSON.stringify(jsonData, undefined, 2);\n      }\n\n      function exportJson() {\n        const jsonData = convertCSVToJSON(csvData);\n        document.getElementById('results').textContent = jsonData;\n        FileMaker.PerformScript(\"Process_JSON_from_Webviewer\", jsonData); \n      }\n\n      window.onload = exportJson;\n    </script>\n  </body>\n</html>\n```\n\nI saved this value into a new field, `tasks::Webviewer` , and then set the Web Viewer’s source to this field.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734184200793/c6c0304f-58cc-416b-aba4-48cca85dd03f.png align=\"center\")\n\nThis imports the Papa Parse library, and passes it a string that is a valid CSV body:\n\n```bash\nfield1,field2,field3\na,b,c\nd,e,f\n```\n\nThis worked and displayed the resulting JSON. The next step was to get the records I wanted to upload as a CSV string… which isn’t much different than the result from the FileMaker `ExecuteSQL()` return value, if you use the right field and row separators!\n\n## Inserting the CSV Data to the Web Viewer\n\nI started by adding a placeholder `CSV_DATA` to my WebViewerSource HTML, instead of the hard coded data. Then, instead of displaying the HTML doc from the WebViewerSource field directly, I used `SUBSTITUTE()` to swap in the real CSV data, generated using ExecuteSQL.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>CSV to JSON Converter</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js\"></script>\n  </head>\n  <body>\n    <button onclick=\"exportJson()\">Export JSON</button>\n    <pre><div id=\"results\"></div></pre>\n    <script>\n      const csvData = `CSV_DATA`;\n\n      function convertCSVToJSON(csvData) {\n        const jsonData = Papa.parse(csvData, {\n          header: true,\n          skipEmptyLines: true\n        }).data;\n        return JSON.stringify(jsonData, undefined, 2);\n      }\n\n      function exportJson() {\n        const jsonData = convertCSVToJSON(csvData);\n        document.getElementById('results').textContent = jsonData;\n        FileMaker.PerformScript(\"Process_JSON_from_Webviewer\", jsonData); \n      }\n\n      window.onload = exportJson;\n    </script>\n  </body>\n</html>\n```\n\nWeb Viewer source:\n\n```plaintext\nLet([\n\n    ~headers = \"title,status,start,end,progress\";     \n    ~sqlQuery = \"SELECT title, status, start, \\\"end\\\", progress FROM tasks\";    \n    ~rowData  = ExecuteSQL(~sqlQuery; \",\"; \"¶\");    \n    ~csvData  = ~headers & \"¶\" & ~rowData;    \n    ~htmlDoc  = tasks::Webviewer;    \n    ~result   = Substitute ( ~htmlDoc; \"CSV_DATA\"; ~csvData )\n    \n    ];\n    \n    ~result\n    \n    )\n```\n\nIn this case, I had to use escape quotes on the field name `end` because it’s an [SQL Reserved Word](https://community.appsmith.com/content/blog/sql-reserved-words).\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734185020917/229dbc45-6a6b-45ad-aaa1-d9126111e80a.png align=\"center\")\n\n## Extracting the JSON\n\nLastly, I added a script to be called from the Web Viewer, and receive the JSON as a parameter.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734184590248/48e842c9-7799-41a5-a5c7-759bcb6bcf69.png align=\"center\")\n\nThe Web Viewer HTML calls this script and passes the JSON using the `exportJson` function:\n\n```javascript\n      function exportJson() {\n        const jsonData = convertCSVToJSON(csvData);\n        document.getElementById('results').textContent = jsonData;\n        FileMaker.PerformScript(\"Process_JSON_from_Webviewer\", jsonData); \n      }\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1734184686277/fed26bf7-abd2-4877-9c0d-0e1730f7e6e4.png align=\"center\")\n\nFrom here, I was able to use the JSON in the body of a curl request and upload it directly to the API, without having to host the database on FileMaker Server, or build the JSON one field at a time. I’m still hard coding the header names instead of extracting them programmatically, but this allows for manually selecting which fields to send to the API.\n\n### Other Thoughts\n\nIf you want, you can also copy the Papa Parse library into a text layout object, then extract it using `getLayoutObjectAttribute()`. Then merge in the script with `SUBSTITUTE()`, enabling it to run completely offline. In my case, I had internet access, but the file wasn’t on a server to allow using the Data API, so this approach worked perfectly.\n\n## Conclusion\n\nThe trusty old Web Viewer came through once again. Whenever you hit the limits of the native FileMaker platform, chances are, you just need a web viewer, the right JS library, and a few lines of code. Now if they would only add [syntax highlighting and formatting](https://blog.greenflux.us/why-i-built-a-code-editor-inside-filemaker-pro) to the web viewer source field.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1734114855939/a74b4709-7620-4c9a-beba-20283491e12e.png","brief":"Recently I needed to upload some data from a local FileMaker database to a REST API as part of a migration. FileMaker’s Insert from Url script step uses curl requests for sending data to another API, and anyone who’s used it knows the struggle of esc...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":5,"draft":"675c79bf4a5db4f41b433893","tags":["6483259e8a9f5d9098c40f65","66ae6b4aa3a2a11383215a48","63eb9c9c8dd6c5e912b9157b","56744721958ef13879b94cad","56744723958ef13879b953ed"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"dateUpdated":"2025-03-16T00:32:14.899Z","hasCustomDate":false,"series":"67d61af88a2ed4175bcf3b13","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"675d917920af6dbb59f28439"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"67421ec68a1731e207981016","createdAt":"2024-11-23T18:28:22.684Z","updatedAt":"2024-11-23T18:28:22.684Z","views":197,"isActive":true,"hasLatex":true,"popularity":7186.1178,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Extracting All Images From A Google Doc Using Python","subtitle":"Using Google Colab for Bulk Image Extraction to Drive","cuid":"cm3ui70gr000i0ald4advbe0o","dateAdded":"2024-11-23T18:28:22.683Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"extracting-all-images-from-a-google-doc-using-python","content":"<p>Google makes it as easy as possible to add new images to a Google Doc, with options like drag-and-drop, paste from clipboard, insert from Drive/URL, etc. <em>But they make it surprisingly hard to get the images back out!</em> I’ve written about this before [<a target=\"_blank\" href=\"https://community.appsmith.com/content/guide/five-ways-extract-all-images-google-doc\">blog post</a>], but that was before I started learning Python. So I wanted to follow up with this new guide using Google Colab and the Drive Python SDK to add one more method to the list.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Connecting to Google Drive/Docs from Colab</p>\n</li>\n<li><p>Getting a Google Docs’ parent folder ID</p>\n</li>\n<li><p>Creating a new folder in the parent folder</p>\n</li>\n<li><p>Extracting URL for all images in the Google Doc</p>\n</li>\n<li><p>Downloading all images to a new folder in the parent folder</p>\n</li>\n</ul>\n<p>I’ve broken this down into separate functions to make it more modular, and easy to modify for other use cases.</p>\n<p><strong>Let’s get started! 🐍</strong></p>\n<h2 id=\"heading-connecting-to-google-drivedocs-from-colab\">Connecting to Google Drive/Docs from Colab</h2>\n<p>Start out by creating a new <a target=\"_blank\" href=\"https://colab.new\">Colab Notebook</a> and install the required libraries:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-comment\"># Install required libraries</span>\n!pip install --upgrade google-api-python-client oauth2client Pillow\n</code></pre>\n<p>Be sure to run this cell before continuing. Then add a new code cell to import the dependencies, and mount Google Drive.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> google.colab <span class=\"hljs-keyword\">import</span> auth, drive\n<span class=\"hljs-keyword\">from</span> googleapiclient.discovery <span class=\"hljs-keyword\">import</span> build\n<span class=\"hljs-keyword\">from</span> googleapiclient.http <span class=\"hljs-keyword\">import</span> MediaFileUpload\n<span class=\"hljs-keyword\">from</span> oauth2client.client <span class=\"hljs-keyword\">import</span> GoogleCredentials \n<span class=\"hljs-keyword\">from</span> google.colab <span class=\"hljs-keyword\">import</span> auth, drive\n<span class=\"hljs-keyword\">from</span> oauth2client.client <span class=\"hljs-keyword\">import</span> GoogleCredentials\n<span class=\"hljs-keyword\">import</span> io\n<span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">from</span> PIL <span class=\"hljs-keyword\">import</span> Image\n<span class=\"hljs-keyword\">from</span> io <span class=\"hljs-keyword\">import</span> BytesIO\n\nauth.authenticate_user()\ndrive.mount(<span class=\"hljs-string\">\"/content/drive\"</span>, force_remount=<span class=\"hljs-literal\">True</span>)\n</code></pre>\n<p>With the Drive mounted, we can now start using the Docs Service and Drive Service.</p>\n<pre><code class=\"lang-python\">credentials = GoogleCredentials.get_application_default()\ndocs_service = build(<span class=\"hljs-string\">'docs'</span>, <span class=\"hljs-string\">'v1'</span>, credentials=credentials)\ndrive_service = build(<span class=\"hljs-string\">'drive'</span>, <span class=\"hljs-string\">'v3'</span>, credentials=credentials)\nprint(drive_service.about().get(fields=<span class=\"hljs-string\">\"user\"</span>).execute())\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732383681241/b0a19394-423a-495f-b2ec-c1354c25c63b.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-getting-a-google-docs-parent-folder-id\">Getting a Google Docs’ Parent Folder ID</h2>\n<p>The first step is to get the parent folder’s ID, given a Google Doc ID. Then we can use this to create a new folder in the same directory in the next section.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_file_parent_folder</span>(<span class=\"hljs-params\">file_id</span>):</span>\n  file = drive_service.files().get(fileId=file_id, fields=<span class=\"hljs-string\">'parents'</span>).execute()\n  parent_id = file.get(<span class=\"hljs-string\">'parents'</span>, [<span class=\"hljs-literal\">None</span>])[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">return</span> parent_id\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n  file_id = <span class=\"hljs-string\">'GOOGLE_DOC_ID'</span>\n  parent_id = get_file_parent_folder(file_id=file_id)\n  print(parent_id)\n</code></pre>\n<p>Insert the Doc ID for one of your docs that contains multiple images, and run the cell. You should see the parent folder’s ID printed.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732383868972/03025f98-dd4b-4a5b-8f59-a5e53045e5c2.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-creating-a-new-folder-in-the-parent-folder\">Creating a New Folder in the Parent Folder</h2>\n<p>Next, we’ll add a function to create a new folder in that parent folder.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">create_folder_in_parent</span>(<span class=\"hljs-params\">folder_name, parent_id</span>):</span>\n    <span class=\"hljs-string\">\"\"\"Create a new folder in the specified parent folder.\"\"\"</span>\n    file_metadata = {\n        <span class=\"hljs-string\">'name'</span>: folder_name,\n        <span class=\"hljs-string\">'mimeType'</span>: <span class=\"hljs-string\">'application/vnd.google-apps.folder'</span>,\n        <span class=\"hljs-string\">'parents'</span>: [parent_id]\n    }\n    folder = drive_service.files().create(body=file_metadata, fields=<span class=\"hljs-string\">'id'</span>).execute()\n    <span class=\"hljs-keyword\">return</span> folder.get(<span class=\"hljs-string\">'id'</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    folder_name = <span class=\"hljs-string\">\"New Folder\"</span>\n    parent_id = <span class=\"hljs-string\">\"root\"</span>\n    new_folder_id = create_folder_in_parent(folder_name, parent_id)\n    print(new_folder_id)\n</code></pre>\n<p>Run this cell and you’ll see the new folder in the root of your Google Drive.</p>\n<h2 id=\"heading-extracting-urls-for-all-images-in-the-google-doc\">Extracting URLs for all images in the Google Doc</h2>\n<p>This is where things start to get tricky. I’ve split this logic up into separate functions because extracting the url’s is a bit complex on its own, before we even get to saving them to Drive.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_inline_image_urls</span>(<span class=\"hljs-params\">doc_id</span>):</span>\n    <span class=\"hljs-string\">\"\"\"\n    Extracts image URLs from a Google Doc.\n    Args:\n        doc_id (str): The Google Doc ID to extract images from\n    Returns:\n        tuple: (document_title, parent_id, list of tuples (object_id, image_url))\n    \"\"\"</span>\n    doc = docs_service.documents().get(documentId=doc_id, fields=<span class=\"hljs-string\">'*'</span>).execute()\n    document_title = doc.get(<span class=\"hljs-string\">'title'</span>, <span class=\"hljs-string\">'Untitled Document'</span>)\n    parent_id = get_file_parent_folder(doc_id) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">'root'</span>\n\n    image_urls = []\n    inline_objects = doc.get(<span class=\"hljs-string\">'inlineObjects'</span>, {})\n\n    <span class=\"hljs-keyword\">for</span> obj_id, obj <span class=\"hljs-keyword\">in</span> inline_objects.items():\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> all(key <span class=\"hljs-keyword\">in</span> obj.get(<span class=\"hljs-string\">'inlineObjectProperties'</span>, {}).get(<span class=\"hljs-string\">'embeddedObject'</span>, {})\n                  <span class=\"hljs-keyword\">for</span> key <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-string\">'imageProperties'</span>]):\n            <span class=\"hljs-keyword\">continue</span>\n\n        image_url = obj[<span class=\"hljs-string\">'inlineObjectProperties'</span>][<span class=\"hljs-string\">'embeddedObject'</span>][<span class=\"hljs-string\">'imageProperties'</span>].get(<span class=\"hljs-string\">'contentUri'</span>)\n        <span class=\"hljs-keyword\">if</span> image_url:\n            image_urls.append((obj_id, image_url))\n\n    <span class=\"hljs-keyword\">return</span> document_title, parent_id, image_urls\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    doc_id = <span class=\"hljs-string\">'GOOGLE_DOC_ID'</span>\n    print(get_inline_image_urls(doc_id))\n</code></pre>\n<p>This function loops over the inline objects in a Google Doc, which may or may not be images. It checks each one for an <code>image_url</code>, and if found, adds it to an array.</p>\n<p>Given a <code>Doc ID</code>, this function returns the <code>Title</code>, its <code>parent folder ID</code>, and an array of the inline images (<code>url</code> and <code>object ID</code>).</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732384459892/9b413511-9d61-4581-906e-9ff258199729.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-downloading-all-images\">Downloading all Images</h2>\n<p>Finally, with the list of url’s ready to download, we can loop over the array and add the images to a new folder in Drive.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">download_images_from_urls</span>(<span class=\"hljs-params\">document_title, parent_id, image_urls</span>):</span>\n    <span class=\"hljs-string\">\"\"\"\n    Downloads images from URLs, processes them, and saves them to a new folder in Google Drive.\n\n    Args:\n        document_title (str): Title of the document (used for folder naming)\n        parent_id (str): ID of the parent folder where to create the images folder\n        image_urls (list): List of tuples (object_id, image_url) to download\n\n    Returns:\n        tuple: (number of successful downloads, list of failed downloads)\n    \"\"\"</span>\n    folder_name = <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{document_title}</span>_images\"</span>\n    new_folder_id = create_folder_in_parent(folder_name, parent_id)\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> new_folder_id:\n        print(<span class=\"hljs-string\">\"Failed to create folder. Aborting.\"</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>, []\n\n    image_index = <span class=\"hljs-number\">0</span>\n    failed_images = []\n\n    <span class=\"hljs-keyword\">for</span> obj_id, image_url <span class=\"hljs-keyword\">in</span> image_urls:\n        <span class=\"hljs-keyword\">try</span>:\n            response = requests.get(image_url)\n            response.raise_for_status()\n            image = Image.open(io.BytesIO(response.content))\n\n            <span class=\"hljs-comment\"># Image processing logic with explicit MIME type handling</span>\n            <span class=\"hljs-keyword\">if</span> image.mode <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">'RGBA'</span>, <span class=\"hljs-string\">'LA'</span>, <span class=\"hljs-string\">'P'</span>):\n                save_format = <span class=\"hljs-string\">'PNG'</span>\n                file_ext = <span class=\"hljs-string\">'.png'</span>\n                mime_type = <span class=\"hljs-string\">'image/png'</span>\n            <span class=\"hljs-keyword\">else</span>:\n                save_format = <span class=\"hljs-string\">'JPEG'</span>\n                file_ext = <span class=\"hljs-string\">'.jpg'</span>\n                mime_type = <span class=\"hljs-string\">'image/jpeg'</span>\n                <span class=\"hljs-keyword\">if</span> image.mode == <span class=\"hljs-string\">'P'</span>:\n                    image = image.convert(<span class=\"hljs-string\">'RGB'</span>)\n\n            temp_path = <span class=\"hljs-string\">f\"/content/temp_image_<span class=\"hljs-subst\">{image_index}</span><span class=\"hljs-subst\">{file_ext}</span>\"</span>\n            image.save(temp_path, format=save_format)\n\n            file_metadata = {\n                <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">f\"image_<span class=\"hljs-subst\">{image_index}</span><span class=\"hljs-subst\">{file_ext}</span>\"</span>,\n                <span class=\"hljs-string\">'parents'</span>: [new_folder_id]\n            }\n\n            <span class=\"hljs-comment\"># Create MediaFileUpload</span>\n            media = MediaFileUpload(\n                temp_path,\n                mimetype=mime_type,\n                resumable=<span class=\"hljs-literal\">True</span>\n            )\n\n            drive_service.files().create(\n                body=file_metadata,\n                media_body=media,\n                fields=<span class=\"hljs-string\">'id'</span>\n            ).execute()\n\n            os.remove(temp_path)\n            print(<span class=\"hljs-string\">f\"Downloaded and uploaded image_<span class=\"hljs-subst\">{image_index}</span><span class=\"hljs-subst\">{file_ext}</span>\"</span>)\n            image_index += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">except</span> requests.exceptions.RequestException <span class=\"hljs-keyword\">as</span> e:\n            failed_images.append((obj_id, <span class=\"hljs-string\">f\"Network error: <span class=\"hljs-subst\">{str(e)}</span>\"</span>))\n        <span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n            failed_images.append((obj_id, <span class=\"hljs-string\">f\"Processing error: <span class=\"hljs-subst\">{str(e)}</span>\"</span>))\n\n    print(<span class=\"hljs-string\">f\"\\nDownloaded <span class=\"hljs-subst\">{image_index}</span> images to folder '<span class=\"hljs-subst\">{folder_name}</span>'\"</span>)\n\n    <span class=\"hljs-keyword\">if</span> failed_images:\n        print(<span class=\"hljs-string\">\"\\nFailed images:\"</span>)\n        <span class=\"hljs-keyword\">for</span> img_id, error <span class=\"hljs-keyword\">in</span> failed_images:\n            print(<span class=\"hljs-string\">f\"- <span class=\"hljs-subst\">{img_id}</span>: <span class=\"hljs-subst\">{error}</span>\"</span>)\n\n    <span class=\"hljs-keyword\">return</span> image_index, failed_images\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n  <span class=\"hljs-comment\"># Replace with your source doc ID to have images extracted</span>\n  doc_id = <span class=\"hljs-string\">'GOOGLE_DOC_ID'</span>\n  document_title, parent_id, image_urls = get_inline_image_urls(doc_id)\n  download_images_from_urls(document_title, parent_id, image_urls)\n</code></pre>\n<p><strong>Note</strong>: When uploading files to Drive, you can leave out the MIME type and Google will try to auto-detect it, but that results in multiple warnings in the console (one for every file). I’ve added a little logic to detect the type before uploading, so it can be set explicitly.</p>\n<p>Run the cell with your doc ID and you should see a new folder in the same folder as the original Google Doc, with all of the associated images in it.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732384815134/8e84c1db-db40-427f-be20-b7c97af6bb3c.png\" alt class=\"image--center mx-auto\" /></p>\n<p>If any of the images fail to download, you’ll see them logged along with the reason.</p>\n<p>In this case, I used a Google Doc storing a draft blog post on Image to <a target=\"_blank\" href=\"https://blog.greenflux.us/image-to-text-extraction-with-llama32-vision-and-python\">Text Extraction</a>. As you can see, the function created a folder with the same name as the Google Doc, and saved all the images.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1732384778284/14dd6e1a-663a-4eef-bd26-ff78e46de05c.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Google may not make it easy to extract all the images from Docs, but it turns out there are still quite a few ways to do it. Using Python in Google Colab is a great option, given the ease of authentication and access to Google Drive. From here you could even automate the process on a set of folders, or on a timer to monitor a folder for new files. Got an idea for another use case? Drop a comment below. Thanks for reading!</p>\n","contentMarkdown":"Google makes it as easy as possible to add new images to a Google Doc, with options like drag-and-drop, paste from clipboard, insert from Drive/URL, etc. *But they make it surprisingly hard to get the images back out!* I’ve written about this before \\[[blog post](https://community.appsmith.com/content/guide/five-ways-extract-all-images-google-doc)\\], but that was before I started learning Python. So I wanted to follow up with this new guide using Google Colab and the Drive Python SDK to add one more method to the list.\n\n**This guide will cover:**\n\n* Connecting to Google Drive/Docs from Colab\n    \n* Getting a Google Docs’ parent folder ID\n    \n* Creating a new folder in the parent folder\n    \n* Extracting URL for all images in the Google Doc\n    \n* Downloading all images to a new folder in the parent folder\n    \n\nI’ve broken this down into separate functions to make it more modular, and easy to modify for other use cases.\n\n**Let’s get started! 🐍**\n\n## Connecting to Google Drive/Docs from Colab\n\nStart out by creating a new [Colab Notebook](https://colab.new) and install the required libraries:\n\n```python\n# Install required libraries\n!pip install --upgrade google-api-python-client oauth2client Pillow\n```\n\nBe sure to run this cell before continuing. Then add a new code cell to import the dependencies, and mount Google Drive.\n\n```python\nfrom google.colab import auth, drive\nfrom googleapiclient.discovery import build\nfrom googleapiclient.http import MediaFileUpload\nfrom oauth2client.client import GoogleCredentials \nfrom google.colab import auth, drive\nfrom oauth2client.client import GoogleCredentials\nimport io\nimport os\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\n\nauth.authenticate_user()\ndrive.mount(\"/content/drive\", force_remount=True)\n```\n\nWith the Drive mounted, we can now start using the Docs Service and Drive Service.\n\n```python\ncredentials = GoogleCredentials.get_application_default()\ndocs_service = build('docs', 'v1', credentials=credentials)\ndrive_service = build('drive', 'v3', credentials=credentials)\nprint(drive_service.about().get(fields=\"user\").execute())\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732383681241/b0a19394-423a-495f-b2ec-c1354c25c63b.png align=\"center\")\n\n## Getting a Google Docs’ Parent Folder ID\n\nThe first step is to get the parent folder’s ID, given a Google Doc ID. Then we can use this to create a new folder in the same directory in the next section.\n\n```python\ndef get_file_parent_folder(file_id):\n  file = drive_service.files().get(fileId=file_id, fields='parents').execute()\n  parent_id = file.get('parents', [None])[0]\n  return parent_id\n\nif __name__ == '__main__':\n  file_id = 'GOOGLE_DOC_ID'\n  parent_id = get_file_parent_folder(file_id=file_id)\n  print(parent_id)\n```\n\nInsert the Doc ID for one of your docs that contains multiple images, and run the cell. You should see the parent folder’s ID printed.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732383868972/03025f98-dd4b-4a5b-8f59-a5e53045e5c2.png align=\"center\")\n\n## Creating a New Folder in the Parent Folder\n\nNext, we’ll add a function to create a new folder in that parent folder.\n\n```python\ndef create_folder_in_parent(folder_name, parent_id):\n    \"\"\"Create a new folder in the specified parent folder.\"\"\"\n    file_metadata = {\n        'name': folder_name,\n        'mimeType': 'application/vnd.google-apps.folder',\n        'parents': [parent_id]\n    }\n    folder = drive_service.files().create(body=file_metadata, fields='id').execute()\n    return folder.get('id')\n\nif __name__ == '__main__':\n    folder_name = \"New Folder\"\n    parent_id = \"root\"\n    new_folder_id = create_folder_in_parent(folder_name, parent_id)\n    print(new_folder_id)\n```\n\nRun this cell and you’ll see the new folder in the root of your Google Drive.\n\n## Extracting URLs for all images in the Google Doc\n\nThis is where things start to get tricky. I’ve split this logic up into separate functions because extracting the url’s is a bit complex on its own, before we even get to saving them to Drive.\n\n```python\ndef get_inline_image_urls(doc_id):\n    \"\"\"\n    Extracts image URLs from a Google Doc.\n    Args:\n        doc_id (str): The Google Doc ID to extract images from\n    Returns:\n        tuple: (document_title, parent_id, list of tuples (object_id, image_url))\n    \"\"\"\n    doc = docs_service.documents().get(documentId=doc_id, fields='*').execute()\n    document_title = doc.get('title', 'Untitled Document')\n    parent_id = get_file_parent_folder(doc_id) or 'root'\n\n    image_urls = []\n    inline_objects = doc.get('inlineObjects', {})\n\n    for obj_id, obj in inline_objects.items():\n        if not all(key in obj.get('inlineObjectProperties', {}).get('embeddedObject', {})\n                  for key in ['imageProperties']):\n            continue\n\n        image_url = obj['inlineObjectProperties']['embeddedObject']['imageProperties'].get('contentUri')\n        if image_url:\n            image_urls.append((obj_id, image_url))\n\n    return document_title, parent_id, image_urls\n\nif __name__ == '__main__':\n    doc_id = 'GOOGLE_DOC_ID'\n    print(get_inline_image_urls(doc_id))\n```\n\nThis function loops over the inline objects in a Google Doc, which may or may not be images. It checks each one for an `image_url`, and if found, adds it to an array.\n\nGiven a `Doc ID`, this function returns the `Title`, its `parent folder ID`, and an array of the inline images (`url` and `object ID`).\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732384459892/9b413511-9d61-4581-906e-9ff258199729.png align=\"center\")\n\n## Downloading all Images\n\nFinally, with the list of url’s ready to download, we can loop over the array and add the images to a new folder in Drive.\n\n```python\ndef download_images_from_urls(document_title, parent_id, image_urls):\n    \"\"\"\n    Downloads images from URLs, processes them, and saves them to a new folder in Google Drive.\n\n    Args:\n        document_title (str): Title of the document (used for folder naming)\n        parent_id (str): ID of the parent folder where to create the images folder\n        image_urls (list): List of tuples (object_id, image_url) to download\n\n    Returns:\n        tuple: (number of successful downloads, list of failed downloads)\n    \"\"\"\n    folder_name = f\"{document_title}_images\"\n    new_folder_id = create_folder_in_parent(folder_name, parent_id)\n\n    if not new_folder_id:\n        print(\"Failed to create folder. Aborting.\")\n        return 0, []\n\n    image_index = 0\n    failed_images = []\n\n    for obj_id, image_url in image_urls:\n        try:\n            response = requests.get(image_url)\n            response.raise_for_status()\n            image = Image.open(io.BytesIO(response.content))\n\n            # Image processing logic with explicit MIME type handling\n            if image.mode in ('RGBA', 'LA', 'P'):\n                save_format = 'PNG'\n                file_ext = '.png'\n                mime_type = 'image/png'\n            else:\n                save_format = 'JPEG'\n                file_ext = '.jpg'\n                mime_type = 'image/jpeg'\n                if image.mode == 'P':\n                    image = image.convert('RGB')\n\n            temp_path = f\"/content/temp_image_{image_index}{file_ext}\"\n            image.save(temp_path, format=save_format)\n\n            file_metadata = {\n                'name': f\"image_{image_index}{file_ext}\",\n                'parents': [new_folder_id]\n            }\n\n            # Create MediaFileUpload\n            media = MediaFileUpload(\n                temp_path,\n                mimetype=mime_type,\n                resumable=True\n            )\n\n            drive_service.files().create(\n                body=file_metadata,\n                media_body=media,\n                fields='id'\n            ).execute()\n\n            os.remove(temp_path)\n            print(f\"Downloaded and uploaded image_{image_index}{file_ext}\")\n            image_index += 1\n\n        except requests.exceptions.RequestException as e:\n            failed_images.append((obj_id, f\"Network error: {str(e)}\"))\n        except Exception as e:\n            failed_images.append((obj_id, f\"Processing error: {str(e)}\"))\n\n    print(f\"\\nDownloaded {image_index} images to folder '{folder_name}'\")\n\n    if failed_images:\n        print(\"\\nFailed images:\")\n        for img_id, error in failed_images:\n            print(f\"- {img_id}: {error}\")\n\n    return image_index, failed_images\n\nif __name__ == '__main__':\n  # Replace with your source doc ID to have images extracted\n  doc_id = 'GOOGLE_DOC_ID'\n  document_title, parent_id, image_urls = get_inline_image_urls(doc_id)\n  download_images_from_urls(document_title, parent_id, image_urls)\n```\n\n**Note**: When uploading files to Drive, you can leave out the MIME type and Google will try to auto-detect it, but that results in multiple warnings in the console (one for every file). I’ve added a little logic to detect the type before uploading, so it can be set explicitly.\n\nRun the cell with your doc ID and you should see a new folder in the same folder as the original Google Doc, with all of the associated images in it.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732384815134/8e84c1db-db40-427f-be20-b7c97af6bb3c.png align=\"center\")\n\nIf any of the images fail to download, you’ll see them logged along with the reason.\n\nIn this case, I used a Google Doc storing a draft blog post on Image to [Text Extraction](https://blog.greenflux.us/image-to-text-extraction-with-llama32-vision-and-python). As you can see, the function created a folder with the same name as the Google Doc, and saved all the images.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1732384778284/14dd6e1a-663a-4eef-bd26-ff78e46de05c.png align=\"center\")\n\n## Conclusion\n\nGoogle may not make it easy to extract all the images from Docs, but it turns out there are still quite a few ways to do it. Using Python in Google Colab is a great option, given the ease of authentication and access to Google Drive. From here you could even automate the process on a set of folders, or on a timer to monitor a folder for new files. Got an idea for another use case? Drop a comment below. Thanks for reading!","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1732386001496/a57750eb-da2c-4d2c-a2e3-b70dcdf76c27.png","brief":"Google makes it as easy as possible to add new images to a Google Doc, with options like drag-and-drop, paste from clipboard, insert from Drive/URL, etc. But they make it surprisingly hard to get the images back out! I’ve written about this before [b...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":6,"draft":"673fcef006e636f511cac713","tags":["56744721958ef13879b94d67","5fc49fb60a072175ef2ceb97","629d9e42b53317496bbdd9f6","56744720958ef13879b947ce","56744723958ef13879b95342"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"67421ec68a1731e207981016"},{"reward":{"type":"xlm"},"commentMetadata":{"qualityCommentCharLength":0,"qualityCommentCount":0,"totalCommentCount":2,"lastCommentAddedDate":"2024-11-19T16:57:41.401Z"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"673a71ceb64236b2077ec23b","createdAt":"2024-11-17T22:44:30.305Z","updatedAt":"2025-03-19T05:43:23.795Z","views":1038,"isActive":true,"hasLatex":true,"popularity":7176.2181,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":2,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":19,"totalReactionsByCurrentUser":0,"isPinnedToBlog":true,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Building an AI Chat with Google Docs Knowledge Base Using Colab + Pinecone","subtitle":"Retrieval Augmented Generation with Pinecone Assistants","cuid":"cm3m6pa72000109l49dk180fe","dateAdded":"2024-11-17T22:44:30.302Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"building-an-ai-chat-with-google-docs-knowledge-base-using-colab-pinecone","content":"<p>LLMs can be a huge productivity boost for work, but the output is only as good as the input. To get the best results, you often have to provide extra reference data to go with the query. This is know as RAG (Retrieval Augmented Generation), and can be in the form of documents, images, web searches, or function calling that returns API or SQL query responses.</p>\n<p>In this guide, I’ll be building a Chat Assistant with RAG using files from Google Docs as a knowledge base. We’ll set up a source folder with multiple docs to use as a reference, upload them to a Pinecone Assistant, and then chat with the docs using Python.</p>\n<p>Pinecone is a fully managed vector database that makes it easy to add vector search to production applications. They offer state-of-the-art vector search libraries, advanced features such as filtering, and distributed infrastructure to provide high performance and reliability at any scale.</p>\n<h2 id=\"heading-setup\">Setup</h2>\n<p>For this example, I’ve created a new Google Drive folder and included two Google Docs containing previous blog posts [<a target=\"_blank\" href=\"https://blog.greenflux.us/image-to-text-extraction-with-llama32-vision-and-python\">post 1</a>], [<a target=\"_blank\" href=\"https://blog.greenflux.us/building-a-data-driven-organizational-chart-in-apps-script\">post2</a>]. I’ll be asking the assistant specific questions from these blog posts. You can use whatever docs you want, but be sure to start out with only a few files until you have the script tested and working.</p>\n<p>Once you have the folder set up with a few docs, sign up for a free <a target=\"_blank\" href=\"https://app.pinecone.io/\">Pinecone</a> account and go to you dashboard. Select <strong>API Keys</strong> on the left side bar, and copy your key or create a new one.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731874861694/3c987041-c9fb-40ee-bdc0-f0bb78c4971c.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Then open up a new <a target=\"_blank\" href=\"https://colab.new\">Google Colab</a> project and save the key in the Secrets manager. Name the variable <code>PINECONE_API_KEY</code>, paste in the value, and then turn on the <em>Notebook access</em> setting to enable it.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731875020165/9fe2316c-0b08-4bf0-8a39-59b991c47474.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Next, add a new code block to install the required libraries, and run it.</p>\n<pre><code class=\"lang-python\">!pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib pinecone pinecone-plugin-assistant\n</code></pre>\n<p>Then add another code block to import the required libraries, and run it.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> io\n<span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> Dict, Any\n<span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">from</span> google.colab <span class=\"hljs-keyword\">import</span> auth\n<span class=\"hljs-keyword\">from</span> googleapiclient.discovery <span class=\"hljs-keyword\">import</span> build\n<span class=\"hljs-keyword\">from</span> googleapiclient.errors <span class=\"hljs-keyword\">import</span> HttpError\n<span class=\"hljs-keyword\">from</span> googleapiclient.http <span class=\"hljs-keyword\">import</span> MediaIoBaseDownload\n<span class=\"hljs-keyword\">from</span> pinecone <span class=\"hljs-keyword\">import</span> Pinecone\n<span class=\"hljs-keyword\">from</span> pinecone_plugins.assistant.models.chat <span class=\"hljs-keyword\">import</span> Message\n<span class=\"hljs-keyword\">from</span> google.colab <span class=\"hljs-keyword\">import</span> userdata\n\napi_key = userdata.get(<span class=\"hljs-string\">'PINECONE_API_KEY'</span>)\nassistant_name = <span class=\"hljs-string\">'gdocs-chat'</span>\nfolder_id = <span class=\"hljs-string\">'YOUR_FOLDER_ID'</span>\n</code></pre>\n<h2 id=\"heading-connecting-to-google-drive-and-pinecone\">Connecting to Google Drive and Pinecone</h2>\n<p>Now that everything is installed and imported, we can set up a new assistant, and a connection to Google Drive. This function will look for an existing Assistant by name, and create it if it doesn’t exist. This way you can choose an existing assistant or create a new one, and not need two different functions.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize_services</span>(<span class=\"hljs-params\">api_key: str, assistant_name: str</span>):</span>\n   <span class=\"hljs-string\">\"\"\"Initialize Google Drive and Pinecone services.\"\"\"</span>\n   <span class=\"hljs-comment\"># Initialize Google Drive service</span>\n   auth.authenticate_user()\n   drive_service = build(<span class=\"hljs-string\">'drive'</span>, <span class=\"hljs-string\">'v3'</span>)\n\n   <span class=\"hljs-comment\"># Initialize Pinecone</span>\n   pc = Pinecone(api_key=api_key)\n\n   <span class=\"hljs-keyword\">try</span>:\n       assistant = pc.assistant.Assistant(assistant_name)\n   <span class=\"hljs-keyword\">except</span> Exception:\n       <span class=\"hljs-comment\"># Create new assistant if it doesn't exist</span>\n       assistant = pc.assistant.create_assistant(\n           assistant_name=assistant_name,\n           instructions=<span class=\"hljs-string\">\"Answer directly and succinctly. Do not provide any additional information.\"</span>,\n           timeout=<span class=\"hljs-number\">60</span>\n       )\n\n   <span class=\"hljs-keyword\">return</span> drive_service, assistant\n\n<span class=\"hljs-comment\"># Initialize services and store the results</span>\n<span class=\"hljs-keyword\">try</span>:\n   drive_service, assistant = initialize_services(api_key, assistant_name)\n   print(<span class=\"hljs-string\">\"Services initialized successfully\"</span>)\n<span class=\"hljs-keyword\">except</span> Exception <span class=\"hljs-keyword\">as</span> e:\n   print(<span class=\"hljs-string\">f\"Error during initialization: <span class=\"hljs-subst\">{str(e)}</span>\"</span>)\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731875350430/43217513-5238-4c6f-a028-09a82c9ad6db.png\" alt class=\"image--center mx-auto\" /></p>\n<p>You should see the Services initialized successfully message. You can now connect to Google Drive and Pinecone.</p>\n<p>Head back to Pinecone and refresh the page. You should see the new Assistant in your account.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731876948524/e20f25b3-ffb6-43b6-bc45-cea9924a2824.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-looping-over-google-docs\">Looping Over Google Docs</h2>\n<p>Next, we need a function to list all the documents in a given folder ID, and store them as PDFs.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">list_docs_in_folder_as_pdfs</span>(<span class=\"hljs-params\">drive_service, folder_id: str</span>) -&gt; list:</span>\n    <span class=\"hljs-string\">\"\"\"Retrieve and export all documents from a Google Drive folder to PDFs.\"\"\"</span>\n    <span class=\"hljs-keyword\">try</span>:\n        results = drive_service.files().list(\n            q=<span class=\"hljs-string\">f\"'<span class=\"hljs-subst\">{folder_id}</span>' in parents and mimeType='application/vnd.google-apps.document'\"</span>,\n            spaces=<span class=\"hljs-string\">'drive'</span>,\n            fields=<span class=\"hljs-string\">'nextPageToken, files(id, name, mimeType)'</span>\n        ).execute()\n\n        pdf_documents = []\n        <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> results.get(<span class=\"hljs-string\">'files'</span>, []):\n            request = drive_service.files().export_media(\n                fileId=item[<span class=\"hljs-string\">'id'</span>],\n                mimeType=<span class=\"hljs-string\">'application/pdf'</span>\n            )\n            fh = io.BytesIO()\n            downloader = MediaIoBaseDownload(fh, request)\n\n            done = <span class=\"hljs-literal\">False</span>\n            <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> done:\n                status, done = downloader.next_chunk()\n\n            pdf_documents.append({\n                <span class=\"hljs-string\">'id'</span>: item[<span class=\"hljs-string\">'id'</span>],\n                <span class=\"hljs-string\">'name'</span>: item[<span class=\"hljs-string\">'name'</span>],\n                <span class=\"hljs-string\">'pdf_content'</span>: fh.getvalue()\n            })\n\n        <span class=\"hljs-keyword\">return</span> pdf_documents\n\n    <span class=\"hljs-keyword\">except</span> HttpError <span class=\"hljs-keyword\">as</span> error:\n        print(<span class=\"hljs-string\">f'An error occurred: <span class=\"hljs-subst\">{error}</span>'</span>)\n        <span class=\"hljs-keyword\">return</span> []\n</code></pre>\n<p>Lastly, we’ll need a function to upload an individual file to a Pinecone Assistant. Pinecone’s Getting Started docs have a great <a target=\"_blank\" href=\"https://docs.pinecone.io/guides/get-started/assistant-quickstart#4-upload-a-file-to-the-assistant\">example</a> on uploading a <em>local file</em> with Python, but in this case we need a way to upload a file from a variable— after retrieving it from Google Drive. This can be done using the <a target=\"_blank\" href=\"https://docs.pinecone.io/reference/api/assistant/create_file\">upload_file</a> method.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">upload_pdf_to_pinecone</span>(<span class=\"hljs-params\">\n    api_key: str,\n    assistant_name: str,\n    pdf_document: Dict[str, Any],\n    base_url: str = <span class=\"hljs-string\">\"https://prod-1-data.ke.pinecone.io\"</span>\n</span>) -&gt; dict:</span>\n    <span class=\"hljs-string\">\"\"\"Upload a PDF file to Pinecone from a Google Drive document export.\"\"\"</span>\n    url = <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{base_url}</span>/assistant/files/<span class=\"hljs-subst\">{assistant_name}</span>\"</span>\n    headers = {<span class=\"hljs-string\">\"Api-Key\"</span>: api_key}\n\n    file_obj = io.BytesIO(pdf_document[<span class=\"hljs-string\">'pdf_content'</span>])\n    filename = <span class=\"hljs-string\">f\"<span class=\"hljs-subst\">{pdf_document[<span class=\"hljs-string\">'name'</span>]}</span>.pdf\"</span>\n\n    <span class=\"hljs-keyword\">try</span>:\n        response = requests.post(\n            url,\n            headers=headers,\n            files={<span class=\"hljs-string\">'file'</span>: (filename, file_obj, <span class=\"hljs-string\">'application/pdf'</span>)}\n        )\n        response.raise_for_status()\n        <span class=\"hljs-keyword\">return</span> response.json()\n\n    <span class=\"hljs-keyword\">except</span> requests.RequestException <span class=\"hljs-keyword\">as</span> e:\n        print(<span class=\"hljs-string\">f\"Failed to upload PDF '<span class=\"hljs-subst\">{filename}</span>': <span class=\"hljs-subst\">{str(e)}</span>\"</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">finally</span>:\n        file_obj.close()\n</code></pre>\n<p>With each of the utility functions created, we can now loop over the files in a given folder, and upload them all to the Pinecone Assistant.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">upload_all_files</span>():</span>    \n    <span class=\"hljs-comment\"># Initialize services</span>\n    drive_service, assistant = initialize_services(api_key, assistant_name)\n\n    <span class=\"hljs-comment\"># Get all PDFs from the folder</span>\n    pdf_documents = list_docs_in_folder_as_pdfs(drive_service, folder_id)\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> pdf_documents:\n        print(<span class=\"hljs-string\">\"No documents found in the specified folder.\"</span>)\n        <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-comment\"># Upload all PDFs to Pinecone</span>\n    <span class=\"hljs-keyword\">for</span> pdf_doc <span class=\"hljs-keyword\">in</span> pdf_documents:\n        print(<span class=\"hljs-string\">f\"Uploading <span class=\"hljs-subst\">{pdf_doc[<span class=\"hljs-string\">'name'</span>]}</span>...\"</span>)\n        result = upload_pdf_to_pinecone(\n            api_key=api_key,\n            assistant_name=assistant_name,\n            pdf_document=pdf_doc\n        )\n        <span class=\"hljs-keyword\">if</span> result:\n            print(<span class=\"hljs-string\">f\"Successfully uploaded <span class=\"hljs-subst\">{pdf_doc[<span class=\"hljs-string\">'name'</span>]}</span>\"</span>)\n        time.sleep(<span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\"># Add a small delay between uploads</span>\n</code></pre>\n<h2 id=\"heading-chatting-with-the-assistant\">Chatting with the Assistant</h2>\n<p>Once the files are uploaded, we’ll need one more function to chat with the Assistant.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">chat_with_docs</span>(<span class=\"hljs-params\">message: str</span>):</span>\n    <span class=\"hljs-string\">\"\"\"Chat with the documents using the Pinecone assistant.\"\"\"</span>\n    pc = Pinecone(api_key=api_key)\n    assistant = pc.assistant.Assistant(assistant_name)\n\n    msg = Message(content=message)\n    resp = assistant.chat(messages=[msg])\n    print(<span class=\"hljs-string\">\"\\nResponse:\"</span>, resp.message.content)\n</code></pre>\n<p>Ok, with all of the pieces ready, we can now upload all the files from a folder and begin chatting!</p>\n<pre><code class=\"lang-python\">upload_all_files()  \nchat_with_docs(<span class=\"hljs-string\">\"what other type of work has greenflux done?\"</span>)\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731883325869/0f6a50a3-8564-4929-b4a4-3e9fca10ba94.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Look at that! The assistant answered with specific information from our Google Docs! Now you can chat with your own data using Google Docs as a knowledge base.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731877894189/529c957d-b24b-4117-8605-20d362bc8a89.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Pinecone’s Assistants make it easy to upload files for retrieval augmented generation, enabling chat apps with access to your data, and providing more accurate results that are specific to your use case. With just a few Python functions you can build a complete RAG chat app that’s grounded on your own Google Docs data.</p>\n","contentMarkdown":"LLMs can be a huge productivity boost for work, but the output is only as good as the input. To get the best results, you often have to provide extra reference data to go with the query. This is know as RAG (Retrieval Augmented Generation), and can be in the form of documents, images, web searches, or function calling that returns API or SQL query responses.\n\nIn this guide, I’ll be building a Chat Assistant with RAG using files from Google Docs as a knowledge base. We’ll set up a source folder with multiple docs to use as a reference, upload them to a Pinecone Assistant, and then chat with the docs using Python.\n\nPinecone is a fully managed vector database that makes it easy to add vector search to production applications. They offer state-of-the-art vector search libraries, advanced features such as filtering, and distributed infrastructure to provide high performance and reliability at any scale.\n\n## Setup\n\nFor this example, I’ve created a new Google Drive folder and included two Google Docs containing previous blog posts \\[[post 1](https://blog.greenflux.us/image-to-text-extraction-with-llama32-vision-and-python)\\], \\[[post2](https://blog.greenflux.us/building-a-data-driven-organizational-chart-in-apps-script)\\]. I’ll be asking the assistant specific questions from these blog posts. You can use whatever docs you want, but be sure to start out with only a few files until you have the script tested and working.\n\nOnce you have the folder set up with a few docs, sign up for a free [Pinecone](https://app.pinecone.io/) account and go to you dashboard. Select **API Keys** on the left side bar, and copy your key or create a new one.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731874861694/3c987041-c9fb-40ee-bdc0-f0bb78c4971c.png align=\"center\")\n\nThen open up a new [Google Colab](https://colab.new) project and save the key in the Secrets manager. Name the variable `PINECONE_API_KEY`, paste in the value, and then turn on the *Notebook access* setting to enable it.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731875020165/9fe2316c-0b08-4bf0-8a39-59b991c47474.png align=\"center\")\n\nNext, add a new code block to install the required libraries, and run it.\n\n```python\n!pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib pinecone pinecone-plugin-assistant\n```\n\nThen add another code block to import the required libraries, and run it.\n\n```python\nimport io\nimport time\nfrom typing import Dict, Any\nimport requests\nfrom google.colab import auth\nfrom googleapiclient.discovery import build\nfrom googleapiclient.errors import HttpError\nfrom googleapiclient.http import MediaIoBaseDownload\nfrom pinecone import Pinecone\nfrom pinecone_plugins.assistant.models.chat import Message\nfrom google.colab import userdata\n\napi_key = userdata.get('PINECONE_API_KEY')\nassistant_name = 'gdocs-chat'\nfolder_id = 'YOUR_FOLDER_ID'\n```\n\n## Connecting to Google Drive and Pinecone\n\nNow that everything is installed and imported, we can set up a new assistant, and a connection to Google Drive. This function will look for an existing Assistant by name, and create it if it doesn’t exist. This way you can choose an existing assistant or create a new one, and not need two different functions.\n\n```python\ndef initialize_services(api_key: str, assistant_name: str):\n   \"\"\"Initialize Google Drive and Pinecone services.\"\"\"\n   # Initialize Google Drive service\n   auth.authenticate_user()\n   drive_service = build('drive', 'v3')\n   \n   # Initialize Pinecone\n   pc = Pinecone(api_key=api_key)\n   \n   try:\n       assistant = pc.assistant.Assistant(assistant_name)\n   except Exception:\n       # Create new assistant if it doesn't exist\n       assistant = pc.assistant.create_assistant(\n           assistant_name=assistant_name,\n           instructions=\"Answer directly and succinctly. Do not provide any additional information.\",\n           timeout=60\n       )\n   \n   return drive_service, assistant\n\n# Initialize services and store the results\ntry:\n   drive_service, assistant = initialize_services(api_key, assistant_name)\n   print(\"Services initialized successfully\")\nexcept Exception as e:\n   print(f\"Error during initialization: {str(e)}\")\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731875350430/43217513-5238-4c6f-a028-09a82c9ad6db.png align=\"center\")\n\nYou should see the Services initialized successfully message. You can now connect to Google Drive and Pinecone.\n\nHead back to Pinecone and refresh the page. You should see the new Assistant in your account.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731876948524/e20f25b3-ffb6-43b6-bc45-cea9924a2824.png align=\"center\")\n\n## Looping Over Google Docs\n\nNext, we need a function to list all the documents in a given folder ID, and store them as PDFs.\n\n```python\ndef list_docs_in_folder_as_pdfs(drive_service, folder_id: str) -> list:\n    \"\"\"Retrieve and export all documents from a Google Drive folder to PDFs.\"\"\"\n    try:\n        results = drive_service.files().list(\n            q=f\"'{folder_id}' in parents and mimeType='application/vnd.google-apps.document'\",\n            spaces='drive',\n            fields='nextPageToken, files(id, name, mimeType)'\n        ).execute()\n        \n        pdf_documents = []\n        for item in results.get('files', []):\n            request = drive_service.files().export_media(\n                fileId=item['id'],\n                mimeType='application/pdf'\n            )\n            fh = io.BytesIO()\n            downloader = MediaIoBaseDownload(fh, request)\n            \n            done = False\n            while not done:\n                status, done = downloader.next_chunk()\n                \n            pdf_documents.append({\n                'id': item['id'],\n                'name': item['name'],\n                'pdf_content': fh.getvalue()\n            })\n        \n        return pdf_documents\n        \n    except HttpError as error:\n        print(f'An error occurred: {error}')\n        return []\n```\n\nLastly, we’ll need a function to upload an individual file to a Pinecone Assistant. Pinecone’s Getting Started docs have a great [example](https://docs.pinecone.io/guides/get-started/assistant-quickstart#4-upload-a-file-to-the-assistant) on uploading a *local file* with Python, but in this case we need a way to upload a file from a variable— after retrieving it from Google Drive. This can be done using the [upload\\_file](https://docs.pinecone.io/reference/api/assistant/create_file) method.\n\n```python\ndef upload_pdf_to_pinecone(\n    api_key: str,\n    assistant_name: str,\n    pdf_document: Dict[str, Any],\n    base_url: str = \"https://prod-1-data.ke.pinecone.io\"\n) -> dict:\n    \"\"\"Upload a PDF file to Pinecone from a Google Drive document export.\"\"\"\n    url = f\"{base_url}/assistant/files/{assistant_name}\"\n    headers = {\"Api-Key\": api_key}\n    \n    file_obj = io.BytesIO(pdf_document['pdf_content'])\n    filename = f\"{pdf_document['name']}.pdf\"\n    \n    try:\n        response = requests.post(\n            url,\n            headers=headers,\n            files={'file': (filename, file_obj, 'application/pdf')}\n        )\n        response.raise_for_status()\n        return response.json()\n        \n    except requests.RequestException as e:\n        print(f\"Failed to upload PDF '{filename}': {str(e)}\")\n        return None\n        \n    finally:\n        file_obj.close()\n```\n\nWith each of the utility functions created, we can now loop over the files in a given folder, and upload them all to the Pinecone Assistant.\n\n```python\ndef upload_all_files():    \n    # Initialize services\n    drive_service, assistant = initialize_services(api_key, assistant_name)\n    \n    # Get all PDFs from the folder\n    pdf_documents = list_docs_in_folder_as_pdfs(drive_service, folder_id)\n    \n    if not pdf_documents:\n        print(\"No documents found in the specified folder.\")\n        return\n    \n    # Upload all PDFs to Pinecone\n    for pdf_doc in pdf_documents:\n        print(f\"Uploading {pdf_doc['name']}...\")\n        result = upload_pdf_to_pinecone(\n            api_key=api_key,\n            assistant_name=assistant_name,\n            pdf_document=pdf_doc\n        )\n        if result:\n            print(f\"Successfully uploaded {pdf_doc['name']}\")\n        time.sleep(1)  # Add a small delay between uploads\n    \n```\n\n## Chatting with the Assistant\n\nOnce the files are uploaded, we’ll need one more function to chat with the Assistant.\n\n```python\ndef chat_with_docs(message: str):\n    \"\"\"Chat with the documents using the Pinecone assistant.\"\"\"\n    pc = Pinecone(api_key=api_key)\n    assistant = pc.assistant.Assistant(assistant_name)\n    \n    msg = Message(content=message)\n    resp = assistant.chat(messages=[msg])\n    print(\"\\nResponse:\", resp.message.content)\n```\n\nOk, with all of the pieces ready, we can now upload all the files from a folder and begin chatting!\n\n```python\nupload_all_files()  \nchat_with_docs(\"what other type of work has greenflux done?\")\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731883325869/0f6a50a3-8564-4929-b4a4-3e9fca10ba94.png align=\"center\")\n\nLook at that! The assistant answered with specific information from our Google Docs! Now you can chat with your own data using Google Docs as a knowledge base.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731877894189/529c957d-b24b-4117-8605-20d362bc8a89.png align=\"center\")\n\n## Conclusion\n\nPinecone’s Assistants make it easy to upload files for retrieval augmented generation, enabling chat apps with access to your data, and providing more accurate results that are specific to your use case. With just a few Python functions you can build a complete RAG chat app that’s grounded on your own Google Docs data.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1731882286675/30df4356-95c9-4fba-adf4-4102104bf6ae.png","brief":"LLMs can be a huge productivity boost for work, but the output is only as good as the input. To get the best results, you often have to provide extra reference data to go with the query. This is know as RAG (Retrieval Augmented Generation), and can b...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":5,"draft":"673a48586131aa5b8c182e58","tags":[],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"contributors":[{"_id":"686429d7dbf6bfe1b0c07132","user":"673d82e1fdceaa713dca30ef","stamp":"cm3pify50004c09ld5zl2d7t3"},{"_id":"686429d7dbf6bfe1b0c07133","user":"65e5e19aa204846125bab4af","stamp":"cm3op6za0000j09mc7ia3hwzz"}],"lastActivity":"2024-11-20T06:36:28.697Z","dateUpdated":"2024-11-20T11:34:51.329Z","pollOptions":[],"badges":[],"questionReplies":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"673a71ceb64236b2077ec23b"},{"reward":{"type":"xlm"},"commentMetadata":{"qualityCommentCharLength":226,"qualityCommentCount":2,"totalCommentCount":2,"lastCommentAddedDate":"2024-11-14T14:07:03.758Z"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"6731d5c18d33039a8b734c80","createdAt":"2024-11-11T10:00:33.250Z","updatedAt":"2024-11-20T11:34:51.335Z","views":4920,"isActive":true,"hasLatex":false,"popularity":7162.4007,"discussionScore":8.544620109547408,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":1,"replyCount":1,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":1,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Image-to-Text Extraction with Llama3.2-vision and Python","subtitle":"Local and Offline Image Processing Made Easy With Ollama","cuid":"cm3curq3k000609led422290y","dateAdded":"2024-11-11T10:00:33.249Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"image-to-text-extraction-with-llama32-vision-and-python","content":"<p>Generative AI for <em>image-to-text</em> has been out for a while now, so we’ve all seen how well it can extract text compared to traditional OCR (optical character recognition). Sure, it can hallucinate, but OCR isn’t perfect either. If you’re just looking to extract text from an image, AI a much better solution, especially when the structure of the text is different in each image.</p>\n<p>Web-based AI services can get expensive fast though, especially when uploading lots of image. Not to mention the privacy concerns your company may have about sending images to a 3rd party that might use them on training the model. Then there’s the whole VPC and firewall issue, if working in a larger enterprise. In cases like this, the best approach is to self-host and run an LLM locally to process the images within your own network.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Using Ollama to run the Llama3.2-vision model locally</p>\n</li>\n<li><p>Generating Text from Images via the terminal</p>\n</li>\n<li><p>Prompting the LLM from a Python script</p>\n</li>\n<li><p>Looping through images in a directory to output text</p>\n</li>\n</ul>\n<p><em>Let’s get prompting!</em> 🤖</p>\n<h2 id=\"heading-llama32-vision\">Llama3.2-vision</h2>\n<p>Released just last week, <a target=\"_blank\" href=\"https://ollama.com/library/llama3.2-vision\">Llama3.2-vision</a> is a collection of instruction-tuned image reasoning generative models in two different sizes:</p>\n<p><strong>11b</strong>: 11 billion parameters, 7.9Gb</p>\n<p><strong>90b</strong>: 90 billion parameters, 55Gb</p>\n<p>And the 11b model is light-weight enough to run on a regular desktop or laptop, completely offline, and with full image recognition capabilities! This model has been distilled to a manageable size to work on lower power hardware, and yet still has great accuracy and decent performance with minimal RAM or GPU.</p>\n<p>You’ll probably need at least 12Gb of RAM to have enough for the 7.9Gb model plus anything else running, but 16Gb is pretty common these days. For this guide, I’m running this on my M1 Macbook with 16Gb of RAM and it runs fine, although it could be a little faster.</p>\n<h2 id=\"heading-ollama-desktop-app\">Ollama Desktop App</h2>\n<p>The easiest way to get Llama3.2-vision running locally is Ollama, a desktop app for Mac, Windows and Linux, for downloading various models and run them locally on any hardware.</p>\n<p>Start out by <a target=\"_blank\" href=\"https://ollama.com/download\">downloading Ollama</a> for your OS. For this guide, I’ll be using MacOS, but most of the instructions should be the same for Windows or Linux, once you have Ollama running. Unzip the Ollama.app file, then drag it to your Applications folder to install it.</p>\n<h3 id=\"heading-running-a-model-in-ollama\">Running a model in Ollama</h3>\n<p>Once installed, open up the Ollama app and approve the permission request on first open. You’ll notice a new llama icon in the menu bar, with a single option to <em>Quit Ollama</em>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731150387579/b9ce4790-220e-4721-8346-8e4cbdd4d05c.png\" alt class=\"image--center mx-auto\" /></p>\n<p>There’s no other GUI— everything else is done from the terminal.</p>\n<p>Open up a terminal and run this command:</p>\n<pre><code class=\"lang-bash\">ollama run llama3.2-vision\n</code></pre>\n<p>The first time you run it, you’ll see several files download before the model starts up. The smaller 11b (8Gb) model will download by default.</p>\n<p>Once downloaded, the model will run automatically, and you’ll be presented with a prompt to start a chat.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731149542575/c6c0aa53-f869-41b4-9e01-e47e828c2f9b.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Next, try dragging an image into the terminal to add it’s path, then ask a question about the image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731149942930/2dc67951-b9da-4bf5-a3e5-5d6acace6a9d.png\" alt class=\"image--center mx-auto\" /></p>\n<p>It may run a little slow on older hardware, but the fact that this works locally and offline is still pretty impressive. And it’s free! So if you have a large amount of images to process, everything can be done on your own machine, with no worries about AI subscription costs, ISP data caps, or privacy and security.</p>\n<h2 id=\"heading-prompting-from-a-python-script\">Prompting From A Python Script</h2>\n<p>Next, fire up your favorite text editor or Python IDE. For this guide, I’ll be using Visual Studio Code.</p>\n<p>First, we’ll just write a simple script to send a test prompt to the LLM and print the response to the console.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">import</span> requests\n\nendpoint = <span class=\"hljs-string\">\"http://localhost:11434/api/chat\"</span>\nmodel = <span class=\"hljs-string\">\"llama3.2-vision\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">send_text_prompt</span>(<span class=\"hljs-params\">prompt</span>):</span>\n    payload = {\n        <span class=\"hljs-string\">\"model\"</span>: model,\n        <span class=\"hljs-string\">\"stream\"</span>: <span class=\"hljs-literal\">False</span>,\n        <span class=\"hljs-string\">\"messages\"</span>: [\n            {\n                <span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"user\"</span>,\n                <span class=\"hljs-string\">\"content\"</span>: prompt\n            }\n        ]\n    }\n\n    response = requests.post(endpoint, json=payload, headers={<span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"application/json\"</span>})\n    <span class=\"hljs-keyword\">return</span> response.json().get(<span class=\"hljs-string\">'message'</span>, {}).get(<span class=\"hljs-string\">'content'</span>, <span class=\"hljs-string\">'No response received'</span>)\n\nprompt = <span class=\"hljs-string\">\"What are the key components of a machine learning model?\"</span>\nresponse = send_text_prompt(prompt)\nprint(<span class=\"hljs-string\">\"Model Response:\"</span>, response)\n</code></pre>\n<p>Name the file <code>send_text_prompt.py</code>, and save it to a new folder where we can also add images for processing. Then, open up a new terminal window. Be sure to leave the first terminal window with Ollama open and running.</p>\n<p>Navigate to the new folder, set up a virtual environment, and install <code>requests</code>:</p>\n<pre><code class=\"lang-bash\">python3 -m venv env  \n\n<span class=\"hljs-built_in\">source</span> env/bin/activate\n\npip install requests\n</code></pre>\n<p>Then run the file:</p>\n<pre><code class=\"lang-bash\">python3 send_text_prompt.py\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731157088010/5c1878ef-cd5b-4da3-b6b9-40278308fcf1.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, we have a working Python script to call the LLM and get a response. Now to add image processing and loop through a batch of images.</p>\n<h2 id=\"heading-image-prompts-from-python\">Image Prompts From Python</h2>\n<p>Next, we’ll create a new script for image prompting. We’ll need a function to convert an image to base64, and another function to loop through all images in the current folder.</p>\n<p>Start out by adding a few images to the same folder as the python scripts. For this example, I’ll be using a screenshot from the Ollama GitHub repo that contains a table, and a hand-written note.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731159860619/11ba46a5-cc24-4988-a97a-c5802e39afbb.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Then create a new script named <code>image_to_text.py</code> with the following script:</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> pathlib <span class=\"hljs-keyword\">import</span> Path\n<span class=\"hljs-keyword\">import</span> base64\n<span class=\"hljs-keyword\">import</span> requests\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">encode_image_to_base64</span>(<span class=\"hljs-params\">image_path</span>):</span>\n    <span class=\"hljs-string\">\"\"\"Convert an image file to base64 string.\"\"\"</span>\n    <span class=\"hljs-keyword\">return</span> base64.b64encode(image_path.read_bytes()).decode(<span class=\"hljs-string\">'utf-8'</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">extract_text_from_image</span>(<span class=\"hljs-params\">image_path</span>):</span>\n    <span class=\"hljs-string\">\"\"\"Send image to local Llama API and get text description.\"\"\"</span>\n    base64_image = encode_image_to_base64(image_path)\n\n    payload = {\n        <span class=\"hljs-string\">\"model\"</span>: <span class=\"hljs-string\">\"llama3.2-vision\"</span>,\n        <span class=\"hljs-string\">\"stream\"</span>: <span class=\"hljs-literal\">False</span>,\n        <span class=\"hljs-string\">\"messages\"</span>: [\n            {\n                <span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"user\"</span>,\n                <span class=\"hljs-string\">\"content\"</span>: (\n                    <span class=\"hljs-string\">\"Extract all text from the image and return it as markdown.\\n\"</span>\n                    <span class=\"hljs-string\">\"Do not describe the image or add extra text.\\n\"</span>\n                    <span class=\"hljs-string\">\"Only return the text found in the image.\"</span>\n                ),\n                <span class=\"hljs-string\">\"images\"</span>: [base64_image]\n            }\n        ]\n    }\n\n    response = requests.post(\n        <span class=\"hljs-string\">\"http://localhost:11434/api/chat\"</span>,\n        json=payload,\n        headers={<span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"application/json\"</span>}\n    )\n\n    <span class=\"hljs-keyword\">return</span> response.json().get(<span class=\"hljs-string\">'message'</span>, {}).get(<span class=\"hljs-string\">'content'</span>, <span class=\"hljs-string\">'No text extracted'</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_directory</span>():</span>\n    <span class=\"hljs-string\">\"\"\"Process all images in current directory and create text files.\"\"\"</span>\n    <span class=\"hljs-keyword\">for</span> image_path <span class=\"hljs-keyword\">in</span> Path(<span class=\"hljs-string\">'.'</span>).glob(<span class=\"hljs-string\">'*'</span>):\n        <span class=\"hljs-keyword\">if</span> image_path.suffix.lower() <span class=\"hljs-keyword\">in</span> {<span class=\"hljs-string\">'.png'</span>, <span class=\"hljs-string\">'.jpg'</span>, <span class=\"hljs-string\">'.jpeg'</span>, <span class=\"hljs-string\">'.gif'</span>, <span class=\"hljs-string\">'.bmp'</span>, <span class=\"hljs-string\">'.webp'</span>}:\n            print(<span class=\"hljs-string\">f\"\\nProcessing <span class=\"hljs-subst\">{image_path}</span>...\"</span>)\n\n            text = extract_text_from_image(image_path)\n            image_path.with_suffix(<span class=\"hljs-string\">'.txt'</span>).write_text(text, encoding=<span class=\"hljs-string\">'utf-8'</span>)\n            print(<span class=\"hljs-string\">f\"Created <span class=\"hljs-subst\">{image_path.with_suffix(<span class=\"hljs-string\">'.txt'</span>)}</span>\"</span>)\n\nprocess_directory()\n</code></pre>\n<p>Save the script, and then test it out. It may take a few minutes, but you should end up seeing a new text file for each image in the directory.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731160437938/53ccfbd8-a7fb-45ce-a16f-b97f8ca58729.png\" alt class=\"image--center mx-auto\" /></p>\n<p>As you can see, the LLM was able to extract the table from the screenshot and save it as a Markdown table! It even got the hyperlink right! Here’s the exact Markdown, straight from the text file.</p>\n<hr />\n<p><strong>Model library</strong></p>\n<p>Ollama supports a list of models available on <a target=\"_blank\" href=\"http://ollama.com/library\">ollama.com/library</a>.</p>\n<p>Here are some example models that can be downloaded:</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>Model</td><td>Parameters</td><td>Size</td><td>Download</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Llama 3.2</td><td>3B</td><td>2.0GB</td><td>ollama run llama3.2</td></tr>\n<tr>\n<td>Llama 3.2</td><td>1B</td><td>1.3GB</td><td>ollama run llama3.2:1b</td></tr>\n<tr>\n<td>Llama 3.1</td><td>8B</td><td>4.7GB</td><td>ollama run llama3.1</td></tr>\n<tr>\n<td>Llama 3.1</td><td>70B</td><td>40GB</td><td>ollama run llama3.1:70b</td></tr>\n<tr>\n<td>Llama 3.1</td><td>405B</td><td>231GB</td><td>ollama run llama3.1:405b</td></tr>\n</tbody>\n</table>\n</div><p>To run and chat with <strong>Llama 3.2</strong>, use the command <code>ollama run llama3.2</code>.</p>\n<hr />\n<p>And here’s the text file from the notecard:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731160645184/84c23431-f7d3-409f-99cd-e2bef88e7e5d.png\" alt class=\"image--center mx-auto\" /></p>\n<p>It really is amazing that an LLM this powerful can now run on a ~5 year old laptop, completely local, with no internet required!</p>\n<h2 id=\"heading-finishing-touches\">Finishing Touches</h2>\n<p>Lastly, we can add in type safety and a class to define the config, so this script can be used on different directories with different setups.</p>\n<pre><code class=\"lang-python\"><span class=\"hljs-keyword\">from</span> pathlib <span class=\"hljs-keyword\">import</span> Path\n<span class=\"hljs-keyword\">from</span> dataclasses <span class=\"hljs-keyword\">import</span> dataclass\n<span class=\"hljs-keyword\">import</span> base64\n<span class=\"hljs-keyword\">import</span> requests\n\n<span class=\"hljs-meta\">@dataclass</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LlamaConfig</span>:</span>\n    <span class=\"hljs-string\">\"\"\"Configuration for Llama API.\"\"\"</span>\n    endpoint: str = <span class=\"hljs-string\">\"http://localhost:11434/api/chat\"</span>\n    model: str = <span class=\"hljs-string\">\"llama3.2-vision\"</span>\n    image_extensions: set[str] = frozenset({<span class=\"hljs-string\">'.png'</span>, <span class=\"hljs-string\">'.jpg'</span>, <span class=\"hljs-string\">'.jpeg'</span>, <span class=\"hljs-string\">'.gif'</span>, <span class=\"hljs-string\">'.bmp'</span>, <span class=\"hljs-string\">'.webp'</span>})\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">encode_image_to_base64</span>(<span class=\"hljs-params\">image_path: Path</span>) -&gt; str:</span>\n    <span class=\"hljs-string\">\"\"\"Convert an image file to base64 string.\"\"\"</span>\n    <span class=\"hljs-keyword\">return</span> base64.b64encode(image_path.read_bytes()).decode(<span class=\"hljs-string\">'utf-8'</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">extract_text_from_image</span>(<span class=\"hljs-params\">image_path: Path, config: LlamaConfig</span>) -&gt; str:</span>\n    <span class=\"hljs-string\">\"\"\"Send image to local Llama API and get text description.\"\"\"</span>\n    base64_image = encode_image_to_base64(image_path)\n\n    content = (\n        <span class=\"hljs-string\">\"Extract all text from the image and return it as markdown.\"</span>\n        <span class=\"hljs-string\">\"\\nDo not describe the image or add extra text. \"</span>\n        <span class=\"hljs-string\">\"\\nOnly return the text found in the image.\"</span>\n    )\n\n    payload = {\n        <span class=\"hljs-string\">\"model\"</span>: config.model,\n        <span class=\"hljs-string\">\"stream\"</span>: <span class=\"hljs-literal\">False</span>,\n        <span class=\"hljs-string\">\"messages\"</span>: [\n            {\n                <span class=\"hljs-string\">\"role\"</span>: <span class=\"hljs-string\">\"user\"</span>,\n                <span class=\"hljs-string\">\"content\"</span>: content,\n                <span class=\"hljs-string\">\"images\"</span>: [base64_image]\n            }\n        ]\n    }\n\n    response = requests.post(\n        config.endpoint,\n        json=payload,\n        headers={<span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"application/json\"</span>}\n    )\n\n    <span class=\"hljs-keyword\">return</span> response.json()[<span class=\"hljs-string\">'message'</span>].get(<span class=\"hljs-string\">'content'</span>, <span class=\"hljs-string\">'No text extracted'</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">process_directory</span>(<span class=\"hljs-params\">config: LlamaConfig</span>) -&gt; <span class=\"hljs-keyword\">None</span>:</span>\n    <span class=\"hljs-string\">\"\"\"Process all images in current directory and create text files.\"\"\"</span>\n    current_dir = Path(<span class=\"hljs-string\">'.'</span>)\n\n    <span class=\"hljs-keyword\">for</span> image_path <span class=\"hljs-keyword\">in</span> current_dir.glob(<span class=\"hljs-string\">'*'</span>):\n        <span class=\"hljs-keyword\">if</span> image_path.suffix.lower() <span class=\"hljs-keyword\">in</span> config.image_extensions:\n            print(<span class=\"hljs-string\">f\"\\nProcessing <span class=\"hljs-subst\">{image_path}</span>...\"</span>)\n\n            text = extract_text_from_image(image_path, config)\n            output_path = image_path.with_suffix(<span class=\"hljs-string\">'.txt'</span>)\n\n            output_path.write_text(text, encoding=<span class=\"hljs-string\">'utf-8'</span>)\n            print(<span class=\"hljs-string\">f\"Created <span class=\"hljs-subst\">{output_path}</span>\"</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>() -&gt; <span class=\"hljs-keyword\">None</span>:</span>\n    <span class=\"hljs-string\">\"\"\"Main entry point.\"\"\"</span>\n    config = LlamaConfig()\n    process_directory(config)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    main()\n</code></pre>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>With newer models like Llama3.2-vision, anyone can now run image-to-text LLMs locally and on regular consumer hardware, without the need for expensive GPUs. This opens up tons of new use cases, and avoids issues with privacy, security, and cost.</p>\n<h3 id=\"heading-whats-next\">What’s Next?</h3>\n<p>From here you could add path variable instead of only running on the current directory, use different prompts for different directories, or even build a GUI to select images and view the LLM response.</p>\n","contentMarkdown":"Generative AI for *image-to-text* has been out for a while now, so we’ve all seen how well it can extract text compared to traditional OCR (optical character recognition). Sure, it can hallucinate, but OCR isn’t perfect either. If you’re just looking to extract text from an image, AI a much better solution, especially when the structure of the text is different in each image.\n\nWeb-based AI services can get expensive fast though, especially when uploading lots of image. Not to mention the privacy concerns your company may have about sending images to a 3rd party that might use them on training the model. Then there’s the whole VPC and firewall issue, if working in a larger enterprise. In cases like this, the best approach is to self-host and run an LLM locally to process the images within your own network.\n\n**This guide will cover:**\n\n* Using Ollama to run the Llama3.2-vision model locally\n    \n* Generating Text from Images via the terminal\n    \n* Prompting the LLM from a Python script\n    \n* Looping through images in a directory to output text\n    \n\n*Let’s get prompting!* 🤖\n\n## Llama3.2-vision\n\nReleased just last week, [Llama3.2-vision](https://ollama.com/library/llama3.2-vision) is a collection of instruction-tuned image reasoning generative models in two different sizes:\n\n**11b**: 11 billion parameters, 7.9Gb\n\n**90b**: 90 billion parameters, 55Gb\n\nAnd the 11b model is light-weight enough to run on a regular desktop or laptop, completely offline, and with full image recognition capabilities! This model has been distilled to a manageable size to work on lower power hardware, and yet still has great accuracy and decent performance with minimal RAM or GPU.\n\nYou’ll probably need at least 12Gb of RAM to have enough for the 7.9Gb model plus anything else running, but 16Gb is pretty common these days. For this guide, I’m running this on my M1 Macbook with 16Gb of RAM and it runs fine, although it could be a little faster.\n\n## Ollama Desktop App\n\nThe easiest way to get Llama3.2-vision running locally is Ollama, a desktop app for Mac, Windows and Linux, for downloading various models and run them locally on any hardware.\n\nStart out by [downloading Ollama](https://ollama.com/download) for your OS. For this guide, I’ll be using MacOS, but most of the instructions should be the same for Windows or Linux, once you have Ollama running. Unzip the Ollama.app file, then drag it to your Applications folder to install it.\n\n### Running a model in Ollama\n\nOnce installed, open up the Ollama app and approve the permission request on first open. You’ll notice a new llama icon in the menu bar, with a single option to *Quit Ollama*.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731150387579/b9ce4790-220e-4721-8346-8e4cbdd4d05c.png align=\"center\")\n\nThere’s no other GUI— everything else is done from the terminal.\n\nOpen up a terminal and run this command:\n\n```bash\nollama run llama3.2-vision\n```\n\nThe first time you run it, you’ll see several files download before the model starts up. The smaller 11b (8Gb) model will download by default.\n\nOnce downloaded, the model will run automatically, and you’ll be presented with a prompt to start a chat.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731149542575/c6c0aa53-f869-41b4-9e01-e47e828c2f9b.png align=\"center\")\n\nNext, try dragging an image into the terminal to add it’s path, then ask a question about the image.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731149942930/2dc67951-b9da-4bf5-a3e5-5d6acace6a9d.png align=\"center\")\n\nIt may run a little slow on older hardware, but the fact that this works locally and offline is still pretty impressive. And it’s free! So if you have a large amount of images to process, everything can be done on your own machine, with no worries about AI subscription costs, ISP data caps, or privacy and security.\n\n## Prompting From A Python Script\n\nNext, fire up your favorite text editor or Python IDE. For this guide, I’ll be using Visual Studio Code.\n\nFirst, we’ll just write a simple script to send a test prompt to the LLM and print the response to the console.\n\n```python\nimport requests\n\nendpoint = \"http://localhost:11434/api/chat\"\nmodel = \"llama3.2-vision\"\n\ndef send_text_prompt(prompt):\n    payload = {\n        \"model\": model,\n        \"stream\": False,\n        \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": prompt\n            }\n        ]\n    }\n    \n    response = requests.post(endpoint, json=payload, headers={\"Content-Type\": \"application/json\"})\n    return response.json().get('message', {}).get('content', 'No response received')\n\nprompt = \"What are the key components of a machine learning model?\"\nresponse = send_text_prompt(prompt)\nprint(\"Model Response:\", response)\n```\n\nName the file `send_text_prompt.py`, and save it to a new folder where we can also add images for processing. Then, open up a new terminal window. Be sure to leave the first terminal window with Ollama open and running.\n\nNavigate to the new folder, set up a virtual environment, and install `requests`:\n\n```bash\npython3 -m venv env  \n\nsource env/bin/activate\n\npip install requests\n```\n\nThen run the file:\n\n```bash\npython3 send_text_prompt.py\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731157088010/5c1878ef-cd5b-4da3-b6b9-40278308fcf1.png align=\"center\")\n\nOk, we have a working Python script to call the LLM and get a response. Now to add image processing and loop through a batch of images.\n\n## Image Prompts From Python\n\nNext, we’ll create a new script for image prompting. We’ll need a function to convert an image to base64, and another function to loop through all images in the current folder.\n\nStart out by adding a few images to the same folder as the python scripts. For this example, I’ll be using a screenshot from the Ollama GitHub repo that contains a table, and a hand-written note.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731159860619/11ba46a5-cc24-4988-a97a-c5802e39afbb.png align=\"center\")\n\nThen create a new script named `image_to_text.py` with the following script:\n\n```python\nfrom pathlib import Path\nimport base64\nimport requests\n\ndef encode_image_to_base64(image_path):\n    \"\"\"Convert an image file to base64 string.\"\"\"\n    return base64.b64encode(image_path.read_bytes()).decode('utf-8')\n\ndef extract_text_from_image(image_path):\n    \"\"\"Send image to local Llama API and get text description.\"\"\"\n    base64_image = encode_image_to_base64(image_path)\n    \n    payload = {\n        \"model\": \"llama3.2-vision\",\n        \"stream\": False,\n        \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": (\n                    \"Extract all text from the image and return it as markdown.\\n\"\n                    \"Do not describe the image or add extra text.\\n\"\n                    \"Only return the text found in the image.\"\n                ),\n                \"images\": [base64_image]\n            }\n        ]\n    }\n    \n    response = requests.post(\n        \"http://localhost:11434/api/chat\",\n        json=payload,\n        headers={\"Content-Type\": \"application/json\"}\n    )\n    \n    return response.json().get('message', {}).get('content', 'No text extracted')\n\ndef process_directory():\n    \"\"\"Process all images in current directory and create text files.\"\"\"\n    for image_path in Path('.').glob('*'):\n        if image_path.suffix.lower() in {'.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp'}:\n            print(f\"\\nProcessing {image_path}...\")\n            \n            text = extract_text_from_image(image_path)\n            image_path.with_suffix('.txt').write_text(text, encoding='utf-8')\n            print(f\"Created {image_path.with_suffix('.txt')}\")\n\nprocess_directory()\n```\n\nSave the script, and then test it out. It may take a few minutes, but you should end up seeing a new text file for each image in the directory.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731160437938/53ccfbd8-a7fb-45ce-a16f-b97f8ca58729.png align=\"center\")\n\nAs you can see, the LLM was able to extract the table from the screenshot and save it as a Markdown table! It even got the hyperlink right! Here’s the exact Markdown, straight from the text file.\n\n---\n\n**Model library**\n\nOllama supports a list of models available on [ollama.com/library](http://ollama.com/library).\n\nHere are some example models that can be downloaded:\n\n| Model | Parameters | Size | Download |\n| --- | --- | --- | --- |\n| Llama 3.2 | 3B | 2.0GB | ollama run llama3.2 |\n| Llama 3.2 | 1B | 1.3GB | ollama run llama3.2:1b |\n| Llama 3.1 | 8B | 4.7GB | ollama run llama3.1 |\n| Llama 3.1 | 70B | 40GB | ollama run llama3.1:70b |\n| Llama 3.1 | 405B | 231GB | ollama run llama3.1:405b |\n\nTo run and chat with **Llama 3.2**, use the command `ollama run llama3.2`.\n\n---\n\nAnd here’s the text file from the notecard:\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731160645184/84c23431-f7d3-409f-99cd-e2bef88e7e5d.png align=\"center\")\n\nIt really is amazing that an LLM this powerful can now run on a ~5 year old laptop, completely local, with no internet required!\n\n## Finishing Touches\n\nLastly, we can add in type safety and a class to define the config, so this script can be used on different directories with different setups.\n\n```python\nfrom pathlib import Path\nfrom dataclasses import dataclass\nimport base64\nimport requests\n\n@dataclass\nclass LlamaConfig:\n    \"\"\"Configuration for Llama API.\"\"\"\n    endpoint: str = \"http://localhost:11434/api/chat\"\n    model: str = \"llama3.2-vision\"\n    image_extensions: set[str] = frozenset({'.png', '.jpg', '.jpeg', '.gif', '.bmp', '.webp'})\n\ndef encode_image_to_base64(image_path: Path) -> str:\n    \"\"\"Convert an image file to base64 string.\"\"\"\n    return base64.b64encode(image_path.read_bytes()).decode('utf-8')\n\ndef extract_text_from_image(image_path: Path, config: LlamaConfig) -> str:\n    \"\"\"Send image to local Llama API and get text description.\"\"\"\n    base64_image = encode_image_to_base64(image_path)\n    \n    content = (\n        \"Extract all text from the image and return it as markdown.\"\n        \"\\nDo not describe the image or add extra text. \"\n        \"\\nOnly return the text found in the image.\"\n    )\n    \n    payload = {\n        \"model\": config.model,\n        \"stream\": False,\n        \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": content,\n                \"images\": [base64_image]\n            }\n        ]\n    }\n    \n    response = requests.post(\n        config.endpoint,\n        json=payload,\n        headers={\"Content-Type\": \"application/json\"}\n    )\n    \n    return response.json()['message'].get('content', 'No text extracted')\n\ndef process_directory(config: LlamaConfig) -> None:\n    \"\"\"Process all images in current directory and create text files.\"\"\"\n    current_dir = Path('.')\n    \n    for image_path in current_dir.glob('*'):\n        if image_path.suffix.lower() in config.image_extensions:\n            print(f\"\\nProcessing {image_path}...\")\n            \n            text = extract_text_from_image(image_path, config)\n            output_path = image_path.with_suffix('.txt')\n            \n            output_path.write_text(text, encoding='utf-8')\n            print(f\"Created {output_path}\")\n\ndef main() -> None:\n    \"\"\"Main entry point.\"\"\"\n    config = LlamaConfig()\n    process_directory(config)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## Conclusion\n\nWith newer models like Llama3.2-vision, anyone can now run image-to-text LLMs locally and on regular consumer hardware, without the need for expensive GPUs. This opens up tons of new use cases, and avoids issues with privacy, security, and cost.\n\n### What’s Next?\n\nFrom here you could add path variable instead of only running on the current directory, use different prompts for different directories, or even build a GUI to select images and view the LLM response.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1731162232223/499c04a9-a7e2-47a5-86eb-1b310e7cb656.png","brief":"Generative AI for image-to-text has been out for a while now, so we’ve all seen how well it can extract text compared to traditional OCR (optical character recognition). Sure, it can hallucinate, but OCR isn’t perfect either. If you’re just looking t...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":7,"draft":"672ea801e46eda332538e105","tags":[],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"contributors":[{"_id":"686429d7dbf6bfe1b0c07134","user":"6672d3809f9a416fe3688070","stamp":"cm3dygtu4000209l57p1eenqi"}],"lastActivity":"2024-11-14T14:07:03.760Z","dateUpdated":"2024-11-20T11:34:29.157Z","pollOptions":[],"badges":[],"questionReplies":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"6731d5c18d33039a8b734c80"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"672f8fc52c2bb6d7d11a0ce7","createdAt":"2024-11-09T16:37:25.586Z","updatedAt":"2025-04-24T04:34:00.521Z","views":422,"isActive":true,"hasLatex":false,"popularity":7159.0899,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"FileMaker Image-to-Text with Llama3.2-vision","subtitle":"Extracting Text From Images with a Self-Hosted LLM","cuid":"cm3ae2ehb000609jmd9d4dw8t","dateAdded":"2024-11-09T16:37:25.583Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"filemaker-image-to-text-with-llama32-vision","content":"<p>Last week, Meta released the <a target=\"_blank\" href=\"https://ollama.com/library/llama3.2-vision\">LLama3.2-<em>vision</em></a> models, adding image recognition to the existing v3.2 text models. GenAI with image-to-text has been out for a while now, but what’s new here is just how optimized and lightweight the models are. The smaller 11b (11 billion parameter) model is only 7.9Gb and can easily run on regular hardware, without the need for an expensive GPU.</p>\n<p>In this guide, I’ll be building on a <a target=\"_blank\" href=\"https://blog.greenflux.us/local-llms-and-filemaker-pro\">previous post</a> about integrating with the original text model using FileMaker Pro and Ollama. Now that the vision model is out, I wanted to update the app to send images from a container field in FileMaker and share a copy of the <a target=\"_blank\" href=\"https://github.com/GreenFluxLLC/FileMaker-Experiments/tree/main/OllamaChat\">finished app</a>.</p>\n<h2 id=\"heading-running-llama32-vision-locally\">Running Llama3.2-vision Locally</h2>\n<p>Start out by installing the <a target=\"_blank\" href=\"https://ollama.com/download\">Ollama desktop app</a> and opening it. You should see a llama icon in the menu bar. Then open up the terminal and run:</p>\n<pre><code class=\"lang-bash\">ollama run llama3.2-vision\n</code></pre>\n<p>You’ll see several files download the first time you run the model. Once the download is finished, the model will begin running and you can chat with it directly from the terminal!</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731167586934/832fd947-fb70-4e97-b7bb-df105ca95cb6.png\" alt class=\"image--center mx-auto\" /></p>\n<p>To include an image with a prompt, just drag a file into the terminal and it will add the file path!</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731167934603/19869bb3-8833-46b9-b4f8-9b31c9bb0531.gif\" alt class=\"image--center mx-auto\" /></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731168152472/af7b5b97-a68b-440c-b9d9-03c784adc009.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-sending-image-prompts-from-filemaker\">Sending Image Prompts From FileMaker</h2>\n<p>When the Llama3.2-vision models were released last week, the first thing I did was pull up the FMP chat app I made with the regular text model. Once I had the new model downloaded and running, it only took 2 minutes and a few small changes from the original FMP chat app, to start prompting with images. Since most of the steps are explained in the <a target=\"_blank\" href=\"https://blog.greenflux.us/local-llms-and-filemaker-pro\">original tutorial</a>, I’ll just be sharing the final, updated solution here.</p>\n<h3 id=\"heading-updated-script\">Updated Script</h3>\n<pre><code class=\"lang-bash\">Set Variable [ <span class=\"hljs-variable\">$image</span>; Value:Base64Encode ( OllamaChat::image ) ]\nSet Variable [ <span class=\"hljs-variable\">$body</span>; Value:JSONSetElement ( <span class=\"hljs-string\">\"{}\"</span> ;\n[<span class=\"hljs-string\">\"stream\"</span> ; <span class=\"hljs-string\">\"false\"</span> ; JSONBoolean ];\n[<span class=\"hljs-string\">\"model\"</span> ; <span class=\"hljs-string\">\"llama3.2-vision\"</span> ; JSONString ];\n[<span class=\"hljs-string\">\"prompt\"</span> ; OllamaChat::Prompt ; JSONString ];\n[<span class=\"hljs-string\">\"images\"</span> ; <span class=\"hljs-string\">\"[\\\"\"</span> &amp; <span class=\"hljs-variable\">$image</span> &amp; <span class=\"hljs-string\">\"\\\"]\"</span> ; JSONArray ]\n) ]\n// Show Custom Dialog [ Message: <span class=\"hljs-variable\">$body</span>; Default Button: “OK”, Commit: “Yes”; Button 2: “Cancel”, Commit: “No” ]\nInsert from URL [ <span class=\"hljs-variable\">$responseJSON</span>; <span class=\"hljs-string\">\"http://localhost:11434/api/generate\"</span>; cURL options: <span class=\"hljs-string\">\"--header \\\"Content-Type: application/json\\\" --\ndata @<span class=\"hljs-variable\">$body</span>\"</span> ]\n[ Select; No dialog ]\nSet Field [ OllamaChat::Reply; JSONGetElement ( <span class=\"hljs-variable\">$responseJSON</span> ; <span class=\"hljs-string\">\"response\"</span> ) ]\n</code></pre>\n<h3 id=\"heading-updated-ui-and-database\">Updated UI and Database</h3>\n<ul>\n<li>Added <code>OllamaChat::image</code> <em>(container field)</em></li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1731168894413/d1a4add9-a5cc-41c8-a7bb-02df58c9f76c.png\" alt class=\"image--center mx-auto\" /></p>\n<p><strong>Link to app</strong>: <a target=\"_blank\" href=\"https://github.com/GreenFluxLLC/FileMaker-Experiments/tree/main/OllamaChat\">FileMaker Experiments &gt; OllamaChat</a></p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Newer multi-modal LLMs have advanced and been optimized to run on regular hardware, enabling new use cases and integrations, like image-to-text processing in FileMaker Pro. By hosting the model locally with Ollama, you can build AI integrations with image recognition, and avoid the privacy and security issues that come with web based services. This can also be a more cost effective solution, and it runs completely offline.</p>\n<h3 id=\"heading-whats-next\">What’s Next?</h3>\n<p>From here, you can work on different prompts for describing images, extracting text, classifying images, or detecting certain types of content.</p>\n<p><em>Got an idea for a new use case?</em> <strong>Drop a comment below!</strong></p>\n<p>Also, I’d love to hear from others about how this performs on newer hardware. It takes at least a full minute or two on my laptop. How does it perform on a higher-end desktop with a dedicated GPU and more RAM?</p>\n","contentMarkdown":"Last week, Meta released the [LLama3.2-*vision*](https://ollama.com/library/llama3.2-vision) models, adding image recognition to the existing v3.2 text models. GenAI with image-to-text has been out for a while now, but what’s new here is just how optimized and lightweight the models are. The smaller 11b (11 billion parameter) model is only 7.9Gb and can easily run on regular hardware, without the need for an expensive GPU.\n\nIn this guide, I’ll be building on a [previous post](https://blog.greenflux.us/local-llms-and-filemaker-pro) about integrating with the original text model using FileMaker Pro and Ollama. Now that the vision model is out, I wanted to update the app to send images from a container field in FileMaker and share a copy of the [finished app](https://github.com/GreenFluxLLC/FileMaker-Experiments/tree/main/OllamaChat).\n\n## Running Llama3.2-vision Locally\n\nStart out by installing the [Ollama desktop app](https://ollama.com/download) and opening it. You should see a llama icon in the menu bar. Then open up the terminal and run:\n\n```bash\nollama run llama3.2-vision\n```\n\nYou’ll see several files download the first time you run the model. Once the download is finished, the model will begin running and you can chat with it directly from the terminal!\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731167586934/832fd947-fb70-4e97-b7bb-df105ca95cb6.png align=\"center\")\n\nTo include an image with a prompt, just drag a file into the terminal and it will add the file path!\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731167934603/19869bb3-8833-46b9-b4f8-9b31c9bb0531.gif align=\"center\")\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731168152472/af7b5b97-a68b-440c-b9d9-03c784adc009.png align=\"center\")\n\n## Sending Image Prompts From FileMaker\n\nWhen the Llama3.2-vision models were released last week, the first thing I did was pull up the FMP chat app I made with the regular text model. Once I had the new model downloaded and running, it only took 2 minutes and a few small changes from the original FMP chat app, to start prompting with images. Since most of the steps are explained in the [original tutorial](https://blog.greenflux.us/local-llms-and-filemaker-pro), I’ll just be sharing the final, updated solution here.\n\n### Updated Script\n\n```bash\nSet Variable [ $image; Value:Base64Encode ( OllamaChat::image ) ]\nSet Variable [ $body; Value:JSONSetElement ( \"{}\" ;\n[\"stream\" ; \"false\" ; JSONBoolean ];\n[\"model\" ; \"llama3.2-vision\" ; JSONString ];\n[\"prompt\" ; OllamaChat::Prompt ; JSONString ];\n[\"images\" ; \"[\\\"\" & $image & \"\\\"]\" ; JSONArray ]\n) ]\n// Show Custom Dialog [ Message: $body; Default Button: “OK”, Commit: “Yes”; Button 2: “Cancel”, Commit: “No” ]\nInsert from URL [ $responseJSON; \"http://localhost:11434/api/generate\"; cURL options: \"--header \\\"Content-Type: application/json\\\" --\ndata @$body\" ]\n[ Select; No dialog ]\nSet Field [ OllamaChat::Reply; JSONGetElement ( $responseJSON ; \"response\" ) ]\n```\n\n### Updated UI and Database\n\n* Added `OllamaChat::image` *(container field)*\n    \n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1731168894413/d1a4add9-a5cc-41c8-a7bb-02df58c9f76c.png align=\"center\")\n\n**Link to app**: [FileMaker Experiments &gt; OllamaChat](https://github.com/GreenFluxLLC/FileMaker-Experiments/tree/main/OllamaChat)\n\n## Conclusion\n\nNewer multi-modal LLMs have advanced and been optimized to run on regular hardware, enabling new use cases and integrations, like image-to-text processing in FileMaker Pro. By hosting the model locally with Ollama, you can build AI integrations with image recognition, and avoid the privacy and security issues that come with web based services. This can also be a more cost effective solution, and it runs completely offline.\n\n### What’s Next?\n\nFrom here, you can work on different prompts for describing images, extracting text, classifying images, or detecting certain types of content.\n\n*Got an idea for a new use case?* **Drop a comment below!**\n\nAlso, I’d love to hear from others about how this performs on newer hardware. It takes at least a full minute or two on my laptop. How does it perform on a higher-end desktop with a dedicated GPU and more RAM?","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1731169343754/d5bb93ae-77d8-4c82-8c07-3211b2ff8f26.png","brief":"Last week, Meta released the LLama3.2-vision models, adding image recognition to the existing v3.2 text models. GenAI with image-to-text has been out for a while now, but what’s new here is just how optimized and lightweight the models are. The small...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":3,"draft":"672f7fc19f3dbeefa0420d01","tags":["6483259e8a9f5d9098c40f65","6547328115caa6554c5d5bc0","64e8a83fe0dc6d75cf7151ab","5674471d958ef13879b94776","66ae6b4aa3a2a11383215a48"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"dateUpdated":"2025-03-16T00:31:39.079Z","hasCustomDate":false,"series":"67d61af88a2ed4175bcf3b13","contributors":[{"_id":"686429d7dbf6bfe1b0c07135","user":"6809bef24515e96adafcb14f","stamp":"cm9uvbhl1000609lhf666hwxo"}],"lastActivity":"2025-04-24T04:34:00.520Z","pollOptions":[],"badges":[],"questionReplies":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"672f8fc52c2bb6d7d11a0ce7"},{"reward":{"type":"xlm"},"commentMetadata":{"qualityCommentCharLength":1088,"qualityCommentCount":1,"totalCommentCount":2,"lastCommentAddedDate":"2024-11-05T19:39:54.740Z"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"_id":"671f84acc13e40f0728bc62b","createdAt":"2024-10-28T12:33:48.785Z","updatedAt":"2024-12-23T15:15:53.382Z","views":266,"isActive":true,"hasLatex":false,"popularity":7136.2022,"discussionScore":9.685372669759268,"enableToc":true,"type":"story","partOfPublication":true,"responseCount":1,"replyCount":1,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":3,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"The UpWork Alternative You've Been Waiting For","cuid":"cm2t02w34000206ldgidielms","dateAdded":"2024-10-28T12:33:48.784Z","isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"the-upwork-alternative-youve-been-waiting-for","toc":[[{"id":"75cd5dc3-0f0e-4dab-977a-3ed66208062d","level":2,"previousLevel":null,"parentId":null,"slug":"background","title":"Background"}],[{"id":"86065681-5434-41b2-8ab1-c1b8e4d50c02","level":2,"previousLevel":2,"parentId":null,"slug":"developing-a-niche","title":"Developing a Niche"}],[{"id":"79e3c5bb-2f87-4d21-b703-77dd0899ba29","level":2,"previousLevel":2,"parentId":null,"slug":"leverage-your-network","title":"Leverage Your Network"}],[{"id":"484a0819-f27d-4258-83af-a23386431995","level":2,"previousLevel":2,"parentId":null,"slug":"learn-and-teach-in-public","title":"Learn, and Teach, In Public"}],[{"id":"d7287246-9fc9-4200-94f0-0e73e35e15a3","level":2,"previousLevel":2,"parentId":null,"slug":"branding-and-online-presence","title":"Branding and Online Presence"}],[{"id":"fc1bc7eb-954e-428d-9504-95605b679a23","level":2,"previousLevel":2,"parentId":null,"slug":"partner-programs-amp-vendor-directories","title":"Partner Programs &amp; Vendor Directories"}],[{"id":"3ab93f4e-3154-417b-b04f-82602d93d01b","level":2,"previousLevel":2,"parentId":null,"slug":"certifications-amp-trainings","title":"Certifications &amp; Trainings"}],[{"id":"02186662-5cd3-4ce6-801f-3a1ea651699f","level":2,"previousLevel":2,"parentId":null,"slug":"closing-thoughts","title":"Closing Thoughts"}]],"content":"<p>Before we get started, I want to make one thing clear, this is not a post bashing UpWork. For many years, I chose to find and keep clients in UpWork, and pay the fees, because I found the service well worth the cost. I could have taken my long term clients outside of UpWork and saved several thousand dollars a year, but I valued the platform, the profile I was building, the reviews, etc. It was gamified, and the fees were reasonable, so I wanted to keep building my profile, instead of pocketing an extra 5-10%.</p>\n<p>Between the lead generation, contracts, payment verification, etc, to me it seemed like a small price to pay. But that was before all the spam, scams, and AI bots, on both the client and freelancer side, and before UpWork’s connects system that charges you to apply to jobs.</p>\n<p>We could debate ways to improve UpWork all day, or think up ideas for a new platform, but this post isn’t about that. I’m here to tell you that the UpWork alternative you’ve been looking for has been here the entire time; and it’s <em>you</em>. YOU have to market yourself, and generate your own leads. And that’s what I’d like to talk about.</p>\n<h2 id=\"heading-background\">Background</h2>\n<p>Freelancing has been an amazing journey for me, and I want to help others find their own path to success. These are the things I’ve learned along the way, that helped me become an independent freelancer, and generate leads outside of UpWork. But why should you listen to me?</p>\n<p>In 2015, I had been doing some development work on the side for a few local companies, and things quickly took off. Soon, I was making more from freelancing than my full-time job, but I was working way too many hours. So I left my full-time job to start <a target=\"_blank\" href=\"https://www.greenflux.us/\">GreenFlux</a> in 2016, and switched from working with local clients to UpWork and Fiverr. I did fairly well on both platforms, and found some amazing long-term clients. Then around 2019, I started getting some larger contracts directly with clients that found me from my blog and forum posts.</p>\n<p>Here are some of the highlights from the last 8 years since I started freelancing:</p>\n<ul>\n<li><p>$200k+ earned on UpWork with 100% Job Success Score</p>\n</li>\n<li><p>$30k earned on Fiverr, 5 Stars, Level 2</p>\n</li>\n<li><p>$470k+ direct contracts (outside freelancer platforms)</p>\n</li>\n<li><p>$136k - largest individual contract (<a target=\"_blank\" href=\"https://atruck.msu.domains/writing-architect/\">State University</a>/<a target=\"_blank\" href=\"https://ies.ed.gov/funding/grantsearch/details.asp?ID=4633\">Federal Grant Funded</a>)</p>\n</li>\n</ul>\n<p>I’ve also mentored several new freelancers along the way, and sent referrals to other devs that landed them full-time freelance gigs with major enterprise companies. To me, part of growing as a freelancer is helping others get started with freelancing. Hopefully that gives you an idea of my experience, and why I’m writing this post. Now, about generating those leads…</p>\n<h2 id=\"heading-developing-a-niche\">Developing a Niche</h2>\n<p>Regardless of your tech stack, there are a ton of other developers out there marketing the same services. You can try to stand out from that massive crowd of devs with more experience than you, or, you can find a smaller crowd. Try combining your stack with another skill or interest, and specialize in that combo.</p>\n<p><strong>Examples</strong></p>\n<ul>\n<li><p>React + Restaurant Menus and landing pages</p>\n</li>\n<li><p>Airtable + Finance or healthcare data</p>\n</li>\n<li><p>Shopify + social media ads</p>\n</li>\n</ul>\n<p>It’s much easier to get noticed by clients, and it gives them more confidence because you have specific industry knowledge in addition to the tech stack. If you don’t have other experience to pull from to create a niche yet, just pick an area you’re interested in and start learning!</p>\n<h2 id=\"heading-leverage-your-network\">Leverage Your Network</h2>\n<p>When you’re just starting out, it’s much easier to close a deal with a local small business or a friend, than with a total stranger. You can reach out to them directly, or just advertise locally and on social to generate leads. Once you’ve completed a few jobs and have reviews and a portfolio to show, remote contracts will be a lot easier to close.</p>\n<p>You can also work on building a remote network of others in your field. Look for groups on LinkedIn or developer forums for your tech stack or industry, and become an active member. Make your niche known and start building that reputation as the expert in your <em>stack + industry</em> combo, by posting tutorials, answering forum questions, and starting discussions that engage the community.</p>\n<h2 id=\"heading-learn-and-teach-in-public\">Learn, and Teach, In Public</h2>\n<p>Some of the best clients I’ve had are ones that found me from a forum post or tutorial I wrote. At first I was going on forums to ask and learn, but soon I had learned enough to start answering some of those questions, and eventually became one of the experts in the community.</p>\n<p>Most developer communities have some kind of badges or stats system, and a profile page where you can share links to your portfolio. This is a great way to send traffic to your own site, but it only works if you provide real value to the community in the first place. Focus on helping the community first, and then make sure your community profile leads back to your site or contact form.</p>\n<p>I’d also recommend starting your own blog, and <strong><em>occasionally</em></strong> sharing those posts in other forums- <strong>but only after 'warming up’ the community.</strong> Don’t try posting an external link until they know who you are and see value in your content, especially on Reddit and developer forums! For my <a target=\"_blank\" href=\"https://blog.greenflux.us/\">blog</a>, I chose <a target=\"_blank\" href=\"https://hashnode.com/\">Hashnode</a> because you can connect your own custom domain for free.</p>\n<h2 id=\"heading-branding-and-online-presence\">Branding and Online Presence</h2>\n<p>When you’re first starting out, no one is searching for you by name; they just want to find a good developer. Instead, they are going to search the platform, tech stack, industry, etc. So you need content out there in multiple places that shows off your skillset.</p>\n<p>But your eventual goal is to stand out from the crowd and be known as the expert in your niche. Because eventually, they <em>will be</em> searching for you by name, and that’s when the leads really start coming in.</p>\n<p>Your branding can be a business name and logo, or just your name and headshot. But regardless of your branding, ensure it’s consistent everywhere you post, and try to be active in at least 3-5 different channels. This can be LinkedIn, X, Reddit, YouTube, developer communities, or your own blog. Each profile should have the same photo and links back to your website or contact form. This, combined with good content creation and community engagement, is like a lightning rod for lead generation.</p>\n<h2 id=\"heading-partner-programs-amp-vendor-directories\">Partner Programs &amp; Vendor Directories</h2>\n<p>Getting listed as a partner or vendor is another great way to generate leads. And it looks good on your profile, and will instill confidence in your prospective clients.</p>\n<p><strong>Partner/Affiliate Programs</strong>: Lots of platforms have partner programs where you can apply to be listed as a service provider from their community. Some are as easy as filling out a form, while others have interviews or exams involved. See what's available for the platforms and services you plan to use, and apply to be a partner or affiliate.</p>\n<p><strong>Vendor Directories</strong>: Government and educational institutions tend to have systems where contractors can apply to be listed as a vendor. See if you can get listed for your local university, or county or city municipality. Even if you never bid on a job, being listed as a vendor is both free advertising, and a credential you can show off.</p>\n<h2 id=\"heading-certifications-amp-trainings\">Certifications &amp; Trainings</h2>\n<p>Another way to beef up your resume is with certifications and trainings. There are plenty of free ones, so start there first. Check out <a target=\"_blank\" href=\"https://www.freecodecamp.org/news/freecodecamp-certifications/\">FreeCodeCamp</a>, and also look for courses offered by the specific tools in your stack, like SalesForce’s Trailblazer academy.</p>\n<p>Avoid paid bootcamps though, and hold of on expensive certifications until you’ve tried the free ones. Once you’ve completed a certification or training, be sure to list it on your freelancer profiles, and share it on social.</p>\n<h2 id=\"heading-closing-thoughts\">Closing Thoughts</h2>\n<p>The most powerful tool in your freelancing arsenal is you. By developing a unique niche that blends your skills and passions, actively engaging with communities, and establishing a consistent online presence, you're not just finding clients—you're building lasting professional relationships that will lead to future opportunities.</p>\n<p>There's no magic formula for instant success. It takes dedication, authenticity, and perseverance to create a steady stream of opportunities. But by investing time in learning, teaching, and genuinely contributing to your field, you can position yourself as a trusted expert in your niche.</p>\n<p>So take that leap. Start marketing yourself, share your knowledge openly, and don't be afraid to put yourself out there. The leads will come, not because you're chasing them, but because you're attracting them through the value you provide.</p>\n","contentMarkdown":"Before we get started, I want to make one thing clear, this is not a post bashing UpWork. For many years, I chose to find and keep clients in UpWork, and pay the fees, because I found the service well worth the cost. I could have taken my long term clients outside of UpWork and saved several thousand dollars a year, but I valued the platform, the profile I was building, the reviews, etc. It was gamified, and the fees were reasonable, so I wanted to keep building my profile, instead of pocketing an extra 5-10%.\n\nBetween the lead generation, contracts, payment verification, etc, to me it seemed like a small price to pay. But that was before all the spam, scams, and AI bots, on both the client and freelancer side, and before UpWork’s connects system that charges you to apply to jobs.\n\nWe could debate ways to improve UpWork all day, or think up ideas for a new platform, but this post isn’t about that. I’m here to tell you that the UpWork alternative you’ve been looking for has been here the entire time; and it’s *you*. YOU have to market yourself, and generate your own leads. And that’s what I’d like to talk about.\n\n## Background\n\nFreelancing has been an amazing journey for me, and I want to help others find their own path to success. These are the things I’ve learned along the way, that helped me become an independent freelancer, and generate leads outside of UpWork. But why should you listen to me?\n\nIn 2015, I had been doing some development work on the side for a few local companies, and things quickly took off. Soon, I was making more from freelancing than my full-time job, but I was working way too many hours. So I left my full-time job to start [GreenFlux](https://www.greenflux.us/) in 2016, and switched from working with local clients to UpWork and Fiverr. I did fairly well on both platforms, and found some amazing long-term clients. Then around 2019, I started getting some larger contracts directly with clients that found me from my blog and forum posts.\n\nHere are some of the highlights from the last 8 years since I started freelancing:\n\n* $200k+ earned on UpWork with 100% Job Success Score\n    \n* $30k earned on Fiverr, 5 Stars, Level 2\n    \n* $470k+ direct contracts (outside freelancer platforms)\n    \n* $136k - largest individual contract ([State University](https://atruck.msu.domains/writing-architect/)/[Federal Grant Funded](https://ies.ed.gov/funding/grantsearch/details.asp?ID=4633))\n    \n\nI’ve also mentored several new freelancers along the way, and sent referrals to other devs that landed them full-time freelance gigs with major enterprise companies. To me, part of growing as a freelancer is helping others get started with freelancing. Hopefully that gives you an idea of my experience, and why I’m writing this post. Now, about generating those leads…\n\n## Developing a Niche\n\nRegardless of your tech stack, there are a ton of other developers out there marketing the same services. You can try to stand out from that massive crowd of devs with more experience than you, or, you can find a smaller crowd. Try combining your stack with another skill or interest, and specialize in that combo.\n\n**Examples**\n\n* React + Restaurant Menus and landing pages\n    \n* Airtable + Finance or healthcare data\n    \n* Shopify + social media ads\n    \n\nIt’s much easier to get noticed by clients, and it gives them more confidence because you have specific industry knowledge in addition to the tech stack. If you don’t have other experience to pull from to create a niche yet, just pick an area you’re interested in and start learning!\n\n## Leverage Your Network\n\nWhen you’re just starting out, it’s much easier to close a deal with a local small business or a friend, than with a total stranger. You can reach out to them directly, or just advertise locally and on social to generate leads. Once you’ve completed a few jobs and have reviews and a portfolio to show, remote contracts will be a lot easier to close.\n\nYou can also work on building a remote network of others in your field. Look for groups on LinkedIn or developer forums for your tech stack or industry, and become an active member. Make your niche known and start building that reputation as the expert in your *stack + industry* combo, by posting tutorials, answering forum questions, and starting discussions that engage the community.\n\n## Learn, and Teach, In Public\n\nSome of the best clients I’ve had are ones that found me from a forum post or tutorial I wrote. At first I was going on forums to ask and learn, but soon I had learned enough to start answering some of those questions, and eventually became one of the experts in the community.\n\nMost developer communities have some kind of badges or stats system, and a profile page where you can share links to your portfolio. This is a great way to send traffic to your own site, but it only works if you provide real value to the community in the first place. Focus on helping the community first, and then make sure your community profile leads back to your site or contact form.\n\nI’d also recommend starting your own blog, and ***occasionally*** sharing those posts in other forums- **but only after 'warming up’ the community.** Don’t try posting an external link until they know who you are and see value in your content, especially on Reddit and developer forums! For my [blog](https://blog.greenflux.us/), I chose [Hashnode](https://hashnode.com/) because you can connect your own custom domain for free.\n\n## Branding and Online Presence\n\nWhen you’re first starting out, no one is searching for you by name; they just want to find a good developer. Instead, they are going to search the platform, tech stack, industry, etc. So you need content out there in multiple places that shows off your skillset.\n\nBut your eventual goal is to stand out from the crowd and be known as the expert in your niche. Because eventually, they *will be* searching for you by name, and that’s when the leads really start coming in.\n\nYour branding can be a business name and logo, or just your name and headshot. But regardless of your branding, ensure it’s consistent everywhere you post, and try to be active in at least 3-5 different channels. This can be LinkedIn, X, Reddit, YouTube, developer communities, or your own blog. Each profile should have the same photo and links back to your website or contact form. This, combined with good content creation and community engagement, is like a lightning rod for lead generation.\n\n## Partner Programs & Vendor Directories\n\nGetting listed as a partner or vendor is another great way to generate leads. And it looks good on your profile, and will instill confidence in your prospective clients.\n\n**Partner/Affiliate Programs**: Lots of platforms have partner programs where you can apply to be listed as a service provider from their community. Some are as easy as filling out a form, while others have interviews or exams involved. See what's available for the platforms and services you plan to use, and apply to be a partner or affiliate.\n\n**Vendor Directories**: Government and educational institutions tend to have systems where contractors can apply to be listed as a vendor. See if you can get listed for your local university, or county or city municipality. Even if you never bid on a job, being listed as a vendor is both free advertising, and a credential you can show off.\n\n## Certifications & Trainings\n\nAnother way to beef up your resume is with certifications and trainings. There are plenty of free ones, so start there first. Check out [FreeCodeCamp](https://www.freecodecamp.org/news/freecodecamp-certifications/), and also look for courses offered by the specific tools in your stack, like SalesForce’s Trailblazer academy.\n\nAvoid paid bootcamps though, and hold of on expensive certifications until you’ve tried the free ones. Once you’ve completed a certification or training, be sure to list it on your freelancer profiles, and share it on social.\n\n## Closing Thoughts\n\nThe most powerful tool in your freelancing arsenal is you. By developing a unique niche that blends your skills and passions, actively engaging with communities, and establishing a consistent online presence, you're not just finding clients—you're building lasting professional relationships that will lead to future opportunities.\n\nThere's no magic formula for instant success. It takes dedication, authenticity, and perseverance to create a steady stream of opportunities. But by investing time in learning, teaching, and genuinely contributing to your field, you can position yourself as a trusted expert in your niche.\n\nSo take that leap. Start marketing yourself, share your knowledge openly, and don't be afraid to put yourself out there. The leads will come, not because you're chasing them, but because you're attracting them through the value you provide.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1730029041451/f1c7198b-6067-4faf-9624-e22eda16cc1e.png","brief":"Before we get started, I want to make one thing clear, this is not a post bashing UpWork. For many years, I chose to find and keep clients in UpWork, and pay the fees, because I found the service well worth the cost. I could have taken my long term c...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":7,"draft":"671cdb920c246896282c1f53","tags":["56744723958ef13879b953cc","5c3cb5fc0d7e2f4641a2020b","56744722958ef13879b94e57","56744722958ef13879b94f1b","576fa8aca245bcf2e2e91044"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"contributors":[{"_id":"686429d7dbf6bfe1b0c07136","user":"672a721b502612d28916ad05","stamp":"cm34uto8k000d09mcg0cddgy3"},{"_id":"686429d7dbf6bfe1b0c07137","user":"67224e0d217f353c4dd7f00e","stamp":"cm2wzb9lc000009jr9kg89g0i"}],"lastActivity":"2024-11-05T19:52:30.701Z","pollOptions":[],"badges":[],"questionReplies":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"671f84acc13e40f0728bc62b"},{"reward":{"type":"xlm"},"commentMetadata":{"qualityCommentCharLength":383,"qualityCommentCount":3,"totalCommentCount":7,"lastCommentAddedDate":"2024-10-28T19:57:25.053Z"},"githubAsSourceMeta":null,"_id":"6716425e5c3f931e79be4936","createdAt":"2024-10-21T12:00:30.345Z","updatedAt":"2025-03-16T00:34:25.984Z","views":888,"isActive":true,"hasLatex":false,"popularity":7123.6878,"discussionScore":9.881419813794468,"enableToc":true,"type":"story","partOfPublication":true,"responseCount":3,"replyCount":4,"isFeatured":true,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":28,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"Local LLMs and FileMaker Pro","subtitle":"Secure, Self-Hosted AI with Offline Access, Using Ollama","cuid":"cm2iyt3et000009i8djdsax4d","dateAdded":"2024-10-21T12:00:30.341Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"local-llms-and-filemaker-pro","toc":[[{"id":"dbfc9574-29de-41d4-8e0c-eefedeb80514","level":2,"previousLevel":null,"parentId":null,"slug":"installing-ollama","title":"Installing Ollama"}],[{"id":"3cb1464b-e8f7-4ab4-abaa-1a85e5e1fa3c","level":2,"previousLevel":2,"parentId":null,"slug":"testing-the-api","title":"Testing the API"}],[{"id":"06e190d6-5918-47f7-a65b-fcfd4c9a4748","level":2,"previousLevel":2,"parentId":null,"slug":"connecting-from-filemaker-pro","title":"Connecting From FileMaker Pro"}],[{"id":"3f5511ee-0056-43b5-b3bb-aedb3911756a","level":3,"previousLevel":2,"parentId":"06e190d6-5918-47f7-a65b-fcfd4c9a4748","slug":"connecting-the-ui","title":"Connecting the UI"}],[{"id":"44913eb4-7879-4d08-b0d4-3d8e8daecadd","level":2,"previousLevel":3,"parentId":null,"slug":"conclusion","title":"Conclusion"}],[{"id":"01f08cfe-f587-4330-84b5-205cfd6578f5","level":3,"previousLevel":2,"parentId":"44913eb4-7879-4d08-b0d4-3d8e8daecadd","slug":"whats-next","title":"What’s Next?"}]],"content":"<p>In just the last year or so, nearly every app and web service has integrated some form of AI into their product. Even many development platforms like FileMaker now include LLMs for building custom solutions with AI features. And for older versions, you can easily integrate with the OpenAI API or other AI services.</p>\n<p>These are good options, but they might not work for all organizations. Some companies may have restrictions on sharing customer data with 3rd party AI services, or work in locations where there’s no internet access and everything has to be hosted locally.</p>\n<p>In this guide, I’ll show you how to set up your own <strong>self-hosted, local LLM</strong> that works <em>completely offline</em>, and integrate it with FileMaker Pro. We’ll be using the Ollama client for Mac, and downloading the Llama3.2 model. No special hardware is needed. I’m running this on my M1 Macbook with no issues, and I’m able to quickly get an AI response in FileMaker, all without sending any data away from my machine.</p>\n<p>Whether you’re concerned about privacy, need AI features offline, or just want to avoid the subscription costs, hosting your own LLM is a great alternative to relying on paid services. Sound interesting? <strong>Let’s get started!</strong></p>\n<h2 id=\"heading-installing-ollama\">Installing Ollama</h2>\n<p>For this guide, I’ll be using Ollama, an open-source tool for running LLMs locally. With Ollama, you can download and run different models, then interact with them in the terminal, or via REST API. I’ll be using the Llama3.2 model, which is a 2GB model containing 3 billion parameters.</p>\n<p>Start out by downloading Ollama and installing it.</p>\n<p><a target=\"_blank\" href=\"https://ollama.com/download\">https://ollama.com/download</a></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1729380535005/1c86f951-2e50-4d0a-a5e3-faf03d073ccf.png\" alt class=\"image--center mx-auto\" /></p>\n<p>I’ll be using MacOS in this guide, but Ollama also has Windows and Linux installers. Connecting from FileMaker will be the same on any OS once you have Ollama running, so feel free to follow along with other OS’es.</p>\n<p>Once the download finishes, move the <code>Ollama.app</code> file to your <strong>Applications</strong> folder, then open it. Then click through the installer and approve the drive access.</p>\n<p>After install, you’ll be given a command to run in the terminal, which will download and run the Llama3.2 model.</p>\n<p><code>ollama run llama3.2</code></p>\n<p>Run the command in the terminal and you’ll see several files download, just over 2GB total. Ollama will start running the Llama3.2 model as soon as it’s done downloading, and you can instantly begin chatting with it in the terminal!</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1729381431666/a4030407-7443-4a0e-b0f3-528c791b851f.png\" alt class=\"image--center mx-auto\" /></p>\n<p>You’ll notice a new llama icon in the menu bar, with a single menu option to <em>Quit Ollama</em>. There’s no GUI with Ollama; just an installer to get the service running. Everything else is done through the CLI.</p>\n<p><strong>Note</strong>: You can check that the server is running, by going to:</p>\n<p><a target=\"_blank\" href=\"http://localhost:11434/\">http://localhost:11434/</a></p>\n<p>You should see a message saying that Ollama is running.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1729380789293/2b8356f1-e0f1-435b-893d-d156d67b6e92.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-testing-the-api\">Testing the API</h2>\n<p>Next, open up Postman or your favorite API client. Lately I’ve been using <a target=\"_blank\" href=\"https://yaak.app/\">Yaak</a>, since Insomnia and Postman now require login to save requests.</p>\n<p>Add a new request with the following configuration:</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>Method</td><td>POST</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>URL</td><td><a target=\"_blank\" href=\"http://localhost:11434/api/generate\">http://localhost:11434/api/generate</a></td></tr>\n<tr>\n<td>Body</td><td><code>{ \"model\": \"llama3.2\", \"prompt\": \"Does FileMaker have any AI features?\", \"stream\": false }</code></td></tr>\n</tbody>\n</table>\n</div><p>Run the request, and you should get back a response from the model.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1729381951388/48b4d50b-d773-474c-8e84-5d5f8321afa2.png\" alt class=\"image--center mx-auto\" /></p>\n<p><strong>Note</strong>: The <code>streaming=false</code> parameter tells the server to wait until the model is done generating a response before replying, instead of sending multiple partial responses.</p>\n<p><strong>Congratulations!</strong> 🎉</p>\n<p>You now have a working AI API running locally! You can even disconnect from the internet and continue to use it completely offline. The Llama3.2 model is lightweight enough to run locally and still powerful enough for many use cases. Now let’s connect it to FileMaker.</p>\n<h2 id=\"heading-connecting-from-filemaker-pro\">Connecting From FileMaker Pro</h2>\n<p>Now open up FileMaker and add two text fields for <code>Prompt</code>, and <code>Reply</code>.</p>\n<p>Then add a new script:</p>\n<pre><code class=\"lang-plaintext\">Set Variable [ $body; Value:JSONSetElement ( \"{}\" ;\n[\"stream\" ; \"false\" ; JSONBoolean ];\n[\"model\" ; \"llama3.2\" ; JSONString ];\n[\"prompt\" ; OllamaChat::Prompt ; JSONString ]\n)]\nInsert from URL [ $responseJSON; \"http://localhost:11434/api/generate\"; cURL options: \"--header \\\"Content-Type: application/json\\\" -- data @$body\" ]\n[ Select; No dialog ]\nSet Field [ OllamaChat::Reply; JSONGetElement ( $responseJSON ; \"response\" ) ]\n</code></pre>\n<p>Note the formatting on the cUrl options.</p>\n<pre><code class=\"lang-plaintext\">\"--header \\\"Content-Type: application/json\\\" -- data @$body\"\n</code></pre>\n<p>Be sure to use escape quotes <code>\\”</code> around headers, and regular quotes around the entire string.</p>\n<h3 id=\"heading-connecting-the-ui\">Connecting the UI</h3>\n<p>Next, add the <em>Prompt</em> and <em>Reply</em> fields to the layout, and add a button to call the script.</p>\n<p><strong>Now test it out from FileMaker!</strong></p>\n<p>Turn off your wifi and ask it something specific. It’s amazing how much knowledge is packed in that 2GB model!</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1729383438604/c8f236c3-064c-4577-b0a6-9fdbc56d1cc0.png\" alt class=\"image--center mx-auto\" /></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1729384415277/de217568-c0e4-4419-87dd-9b844d59a47b.png\" alt class=\"image--center mx-auto\" /></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1729384418787/5cc38236-7624-4f8b-950d-2430f05b068e.png\" alt class=\"image--center mx-auto\" /></p>\n<p>I have a feeling that the Salesforce API answer is a little outdated, but the fact that it can even answer this offline with a 2GB model is impressive!</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Hosting your own LLM is a great alternative to paying for subscription services, and it avoids privacy concerns and internet connection requirements. By using Ollama to host LLMs on the same server as FileMaker Pro, you can easily add AI to any FileMaker solution, even offline!</p>\n<h3 id=\"heading-whats-next\">What’s Next?</h3>\n<p>From here, you can try installing other models, or creating vector stores and adding fine-tuning and retrieval augmented generation (RAG). You could even train a model on your company data and gather data insights without any data ever leaving your company network!</p>\n","contentMarkdown":"In just the last year or so, nearly every app and web service has integrated some form of AI into their product. Even many development platforms like FileMaker now include LLMs for building custom solutions with AI features. And for older versions, you can easily integrate with the OpenAI API or other AI services.\n\nThese are good options, but they might not work for all organizations. Some companies may have restrictions on sharing customer data with 3rd party AI services, or work in locations where there’s no internet access and everything has to be hosted locally.\n\nIn this guide, I’ll show you how to set up your own **self-hosted, local LLM** that works *completely offline*, and integrate it with FileMaker Pro. We’ll be using the Ollama client for Mac, and downloading the Llama3.2 model. No special hardware is needed. I’m running this on my M1 Macbook with no issues, and I’m able to quickly get an AI response in FileMaker, all without sending any data away from my machine.\n\nWhether you’re concerned about privacy, need AI features offline, or just want to avoid the subscription costs, hosting your own LLM is a great alternative to relying on paid services. Sound interesting? **Let’s get started!**\n\n## Installing Ollama\n\nFor this guide, I’ll be using Ollama, an open-source tool for running LLMs locally. With Ollama, you can download and run different models, then interact with them in the terminal, or via REST API. I’ll be using the Llama3.2 model, which is a 2GB model containing 3 billion parameters.\n\nStart out by downloading Ollama and installing it.\n\n[https://ollama.com/download](https://ollama.com/download)\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729380535005/1c86f951-2e50-4d0a-a5e3-faf03d073ccf.png align=\"center\")\n\nI’ll be using MacOS in this guide, but Ollama also has Windows and Linux installers. Connecting from FileMaker will be the same on any OS once you have Ollama running, so feel free to follow along with other OS’es.\n\nOnce the download finishes, move the `Ollama.app` file to your **Applications** folder, then open it. Then click through the installer and approve the drive access.\n\nAfter install, you’ll be given a command to run in the terminal, which will download and run the Llama3.2 model.\n\n`ollama run llama3.2`\n\nRun the command in the terminal and you’ll see several files download, just over 2GB total. Ollama will start running the Llama3.2 model as soon as it’s done downloading, and you can instantly begin chatting with it in the terminal!\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729381431666/a4030407-7443-4a0e-b0f3-528c791b851f.png align=\"center\")\n\nYou’ll notice a new llama icon in the menu bar, with a single menu option to *Quit Ollama*. There’s no GUI with Ollama; just an installer to get the service running. Everything else is done through the CLI.\n\n**Note**: You can check that the server is running, by going to:\n\n[http://localhost:11434/](http://localhost:11434/)\n\nYou should see a message saying that Ollama is running.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729380789293/2b8356f1-e0f1-435b-893d-d156d67b6e92.png align=\"center\")\n\n## Testing the API\n\nNext, open up Postman or your favorite API client. Lately I’ve been using [Yaak](https://yaak.app/), since Insomnia and Postman now require login to save requests.\n\nAdd a new request with the following configuration:\n\n| Method | POST |\n| --- | --- |\n| URL | [http://localhost:11434/api/generate](http://localhost:11434/api/generate) |\n| Body | `{ \"model\": \"llama3.2\", \"prompt\": \"Does FileMaker have any AI features?\", \"stream\": false }` |\n\nRun the request, and you should get back a response from the model.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729381951388/48b4d50b-d773-474c-8e84-5d5f8321afa2.png align=\"center\")\n\n**Note**: The `streaming=false` parameter tells the server to wait until the model is done generating a response before replying, instead of sending multiple partial responses.\n\n**Congratulations!** 🎉\n\nYou now have a working AI API running locally! You can even disconnect from the internet and continue to use it completely offline. The Llama3.2 model is lightweight enough to run locally and still powerful enough for many use cases. Now let’s connect it to FileMaker.\n\n## Connecting From FileMaker Pro\n\nNow open up FileMaker and add two text fields for `Prompt`, and `Reply`.\n\nThen add a new script:\n\n```plaintext\nSet Variable [ $body; Value:JSONSetElement ( \"{}\" ;\n[\"stream\" ; \"false\" ; JSONBoolean ];\n[\"model\" ; \"llama3.2\" ; JSONString ];\n[\"prompt\" ; OllamaChat::Prompt ; JSONString ]\n)]\nInsert from URL [ $responseJSON; \"http://localhost:11434/api/generate\"; cURL options: \"--header \\\"Content-Type: application/json\\\" -- data @$body\" ]\n[ Select; No dialog ]\nSet Field [ OllamaChat::Reply; JSONGetElement ( $responseJSON ; \"response\" ) ]\n```\n\nNote the formatting on the cUrl options.\n\n```plaintext\n\"--header \\\"Content-Type: application/json\\\" -- data @$body\"\n```\n\nBe sure to use escape quotes `\\”` around headers, and regular quotes around the entire string.\n\n### Connecting the UI\n\nNext, add the *Prompt* and *Reply* fields to the layout, and add a button to call the script.\n\n**Now test it out from FileMaker!**\n\nTurn off your wifi and ask it something specific. It’s amazing how much knowledge is packed in that 2GB model!\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729383438604/c8f236c3-064c-4577-b0a6-9fdbc56d1cc0.png align=\"center\")\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729384415277/de217568-c0e4-4419-87dd-9b844d59a47b.png align=\"center\")\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1729384418787/5cc38236-7624-4f8b-950d-2430f05b068e.png align=\"center\")\n\nI have a feeling that the Salesforce API answer is a little outdated, but the fact that it can even answer this offline with a 2GB model is impressive!\n\n## Conclusion\n\nHosting your own LLM is a great alternative to paying for subscription services, and it avoids privacy concerns and internet connection requirements. By using Ollama to host LLMs on the same server as FileMaker Pro, you can easily add AI to any FileMaker solution, even offline!\n\n### What’s Next?\n\nFrom here, you can try installing other models, or creating vector stores and adding fine-tuning and retrieval augmented generation (RAG). You could even train a model on your company data and gather data insights without any data ever leaving your company network!","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1729379781736/ca0487f9-4ca1-4391-94c6-1f230bfa88e2.webp","brief":"In just the last year or so, nearly every app and web service has integrated some form of AI into their product. Even many development platforms like FileMaker now include LLMs for building custom solutions with AI features. And for older versions, y...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":5,"draft":"671409680f30ec4105bbd901","tags":["635ad52efe8087002dee4707","64156e99fe70c2c6425030ed","56744721958ef13879b9488e","6483259e8a9f5d9098c40f65","6547328115caa6554c5d5bc0"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"contributors":[{"_id":"686429d7dbf6bfe1b0c07138","user":"672b3273c440e2ea1aef81f0","stamp":"cm35nvvcv000509lcdmv1cfv8"},{"user":"65d49e199a40ca54fbfff1aa","stamp":"cm2swl95c00w7jpnv9rpm3ix8","_id":"6718cbff2717eeebd4435dce"},{"_id":"6718cbff2717eeebd4435dc6","user":"671580387efc37ec7a9df516","stamp":"cm2je8wv6000009laf8xi4ru6"}],"lastActivity":"2024-11-06T09:13:26.148Z","dateFeatured":"2024-10-22T04:54:00.588Z","badges":[{"badgeId":"5f741eac07891b4f5b9ec8cd","name":"postFeaturedHN","_id":"67172fe80e9f3b71f257d50b"}],"__v":2,"answeredByTarget":false,"autoGeneratedCover":"","bookmarkedIn":[],"downvotedBy":[],"downvotes":0,"duplicatePosts":[],"followers":[],"hasPolls":false,"hasReward":false,"inviters":[],"isAnonymous":false,"pollOptions":[],"questionReplies":[],"reactionsByCurrentUser":[],"responses":[{"contentMarkdown":"Which another database can u use?","content":"<p>Which another database can u use?</p>\n","author":"65d49e199a40ca54fbfff1aa","post":"6716425e5c3f931e79be4936","popularity":7135.5948,"isActive":true,"stamp":"cm2swl95c00w7jpnv9rpm3ix8","upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"source":"blogs","score":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"reactionsByCurrentUser":[],"_id":"671f6dc773ffa882eafd45a6","replies":[],"dateAdded":"2024-10-28T10:56:07.058Z","badgesAwarded":[],"__v":0},{"contentMarkdown":"Very impressive 👏👏","content":"<p>Very impressive 👏👏</p>\n","author":"65d49e199a40ca54fbfff1aa","post":"6716425e5c3f931e79be4936","popularity":7125.9363,"isActive":true,"stamp":"cm2lptlhs0clbbtnv5cp5cvu5","upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"source":"blogs","score":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"reactionsByCurrentUser":[],"_id":"6718cbff2717eeebd4435dcc","replies":[],"dateAdded":"2024-10-23T10:12:15.762Z","badgesAwarded":[],"__v":0}],"similarPostIds":[],"sourcedFromGithub":false,"totalPollVotes":0,"untaggedFrom":[],"upvotedBy":[],"upvotes":0,"dateUpdated":"2025-03-16T00:34:25.984Z","hasCustomDate":false,"series":"67d61af88a2ed4175bcf3b13","uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"6716425e5c3f931e79be4936"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"67013b01f4e033df14ec74ff","createdAt":"2024-10-05T13:11:29.218Z","updatedAt":"2025-03-16T00:41:18.942Z","views":649,"isActive":true,"hasLatex":false,"popularity":7091.6153,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"Building A Data-Driven Organizational Chart In Apps Script","subtitle":"Using OrgChart JavaScript Library In A Web App","cuid":"cm1w6aqwv00000ami2ln91t0m","dateAdded":"2024-10-05T13:11:29.215Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"building-a-data-driven-organizational-chart-in-apps-script","content":"<p>Organizational charts help visualize the reporting structure of a company in a tree-like graph. They are usually created with a design tool, and lots of manual data entry. Then, every time an employee changes, the graphic has to be updated again manually.</p>\n<p>However, most organizations tend to have this same data in a database or spreadsheet format, with a column for the supervisor's name or ID. And with a little JavaScript, this data can be used to create a data-driven org chart that updates itself when the data changes!</p>\n<p>In this guide, I’ll show you how to build a data-driven organizational chart based on Google Sheets data, using Apps Script and the <a target=\"_blank\" href=\"https://github.com/dabeng/OrgChart\">OrgChart</a> JavaScript library.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Deploying Apps Script as a Web App</p>\n</li>\n<li><p>Using the OrgChart library</p>\n</li>\n<li><p>Transforming sheet data with JavaScript</p>\n</li>\n<li><p>Passing data from Sheets to OrgChart</p>\n</li>\n</ul>\n<p>Let's get started!</p>\n<h1 id=\"heading-basic-apps-script-web-app\">Basic Apps Script Web App</h1>\n<p>Start out by opening <strong>Apps Script</strong> from the <strong>Extension</strong> menu of the sheet with your employee data. In this case I have a sheet with each employee’s <code>id</code>, and a column for <code>supervisor_id</code>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1728128684878/76a65190-201c-4a4a-a6fb-6cc156887952.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Add a new HTML file and name it <code>index</code>, then paste in this placeholder HTML doc:</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Org Chart Tutorial<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n      <span class=\"hljs-selector-tag\">body</span> {\n        <span class=\"hljs-attribute\">font-family</span>: Arial, sans-serif;\n        <span class=\"hljs-attribute\">text-align</span>: center;\n        <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">50px</span>;\n      }\n      <span class=\"hljs-selector-tag\">h1</span> {\n        <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;\n      }\n      <span class=\"hljs-selector-tag\">ul</span> {\n        <span class=\"hljs-attribute\">list-style-type</span>: none;\n        <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;\n      }\n      <span class=\"hljs-selector-tag\">li</span> {\n        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">18px</span>;\n      }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Build a Data-Driven Organizational Chart<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Learn how to create dynamic org charts with Google Sheets and Apps Script!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>Deploy Apps Script as a Web App<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>Use the OrgChart Library<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>Transform Sheet Data with JavaScript<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>Connect Google Sheets to OrgChart<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>Then, in the Code.gs file, paste in this <code>doGet()</code> function to serve this HTML file as a web app:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doGet</span>(<span class=\"hljs-params\">e</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> HtmlService.createHtmlOutputFromFile(<span class=\"hljs-string\">'index'</span>)\n    .setTitle(<span class=\"hljs-string\">'Org Chart Tutorial'</span>)\n    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);\n}\n</code></pre>\n<p><strong>Now publish the script as a web app:</strong></p>\n<ul>\n<li><p>Save the script, and then give it a name</p>\n</li>\n<li><p>Click <strong>Deploy</strong> &gt; <strong>New Deployment</strong></p>\n</li>\n<li><p>Click the gear ⚙️ and select <strong>Web app</strong></p>\n</li>\n<li><p>Name the deployment, and select <strong>Who can view</strong>: <code>anyone</code></p>\n</li>\n<li><p><strong>Deploy!</strong> 🚀</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1728129257583/8d301067-8627-4195-875e-ee611302f9a1.png\" alt /></p>\n<p>Open the deployment link, and you should see something like this:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1728129349594/4b678e64-61c6-4f8d-8e43-91d2dfccf03d.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-using-the-orgchart-library\">Using the OrgChart Library</h2>\n<p>OrgChart is an open source library for creating data-driven organizational charts. It uses a nested JSON structure to feed the chart, with a tree-like schema that matches the visuals of the chart.</p>\n<p>Here’s a sample of the data format taken from their <a target=\"_blank\" href=\"https://github.com/dabeng/OrgChart?tab=readme-ov-file#online-demos\">docs</a>:</p>\n<pre><code class=\"lang-javascript\">{\n      <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Lao Lao'</span>,\n      <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'general manager'</span>,\n      <span class=\"hljs-string\">'children'</span>: [\n        { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Bo Miao'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'department manager'</span> },\n        { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Su Miao'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'department manager'</span>,\n          <span class=\"hljs-string\">'children'</span>: [\n            { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Tie Hua'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'senior engineer'</span> },\n            { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Hei Hei'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'senior engineer'</span>,\n              <span class=\"hljs-string\">'children'</span>: [\n                { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Dan Dan'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'engineer'</span> }\n              ]\n            },\n            { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Pang Pang'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'senior engineer'</span> }\n          ]\n        },\n        { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Hong Miao'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'department manager'</span> }\n      ]\n    }\n</code></pre>\n<p>…which renders as:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1728129679486/1a20a293-083c-4863-b098-5c1a5cbc8adc.png\" alt class=\"image--center mx-auto\" /></p>\n<p>You can also add different css to each node, images, pan and zoom controls, collapsable nodes, and a ton of other features.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1728129805666/dac6e668-c38e-4331-b51c-97c993aa6c45.png\" alt class=\"image--center mx-auto\" /></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1728129801839/001e55a5-2db7-4fa2-81b2-351c79498b48.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Let’s start with the most basic example.</p>\n<p>Update the <code>index.html</code> file with this example from their docs:</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Organization Chart Plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"icon\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.4/svgs/solid/sitemap.svg\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/orgchart@2.1.7/dist/css/jquery.orgchart.min.css\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-id\">#chart-container</span> {\n      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n      <span class=\"hljs-attribute\">height</span>: auto;\n      <span class=\"hljs-attribute\">text-align</span>: center;\n    }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chart-container\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/orgchart@2.1.7/dist/js/jquery.orgchart.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">\n    $(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\n      <span class=\"hljs-keyword\">var</span> datasource = {\n        <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Lao Lao'</span>,\n        <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'general manager'</span>,\n        <span class=\"hljs-string\">'children'</span>: [\n          { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Bo Miao'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'department manager'</span> },\n          { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Su Miao'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'department manager'</span>,\n            <span class=\"hljs-string\">'children'</span>: [\n              { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Tie Hua'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'senior engineer'</span> },\n              { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Hei Hei'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'senior engineer'</span>,\n                <span class=\"hljs-string\">'children'</span>: [\n                  { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Dan Dan'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'engineer'</span> }\n                ]\n              },\n              { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Pang Pang'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'senior engineer'</span> }\n            ]\n          },\n          { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Hong Miao'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'department manager'</span> }\n        ]\n      };\n\n      $(<span class=\"hljs-string\">'#chart-container'</span>).orgchart({\n        <span class=\"hljs-string\">'data'</span> : datasource,\n        <span class=\"hljs-string\">'nodeContent'</span>: <span class=\"hljs-string\">'title'</span>\n      });\n\n    });\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>Save the file, then click <strong>Deploy</strong> &gt; <strong>Test Deployment</strong>. This will let you view the changes without having to redeploy each time. You should see a chart like this now.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1728130137694/8c4cbdb8-c146-40f4-935d-b5be9bbe5c9d.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-transforming-sheet-data-with-javascript\">Transforming Sheet Data with JavaScript</h2>\n<p>Before we can send the sheet data to OrgChart, it has to be formatted in the correct, nested structure.</p>\n<p>Start out by individually copy/pasting each name from your sheet into this JSON structure:</p>\n<pre><code class=\"lang-javascript\">{\n        <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Lao Lao'</span>,\n        <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'general manager'</span>,\n        <span class=\"hljs-string\">'children'</span>: [\n          { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Bo Miao'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'department manager'</span> },\n          { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Su Miao'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'department manager'</span>,\n            <span class=\"hljs-string\">'children'</span>: [\n              { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Tie Hua'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'senior engineer'</span> },\n              { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Hei Hei'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'senior engineer'</span>,\n                <span class=\"hljs-string\">'children'</span>: [\n                  { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Dan Dan'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'engineer'</span> }\n                ]\n              },\n              { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Pang Pang'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'senior engineer'</span> }\n            ]\n          },\n          { <span class=\"hljs-string\">'name'</span>: <span class=\"hljs-string\">'Hong Miao'</span>, <span class=\"hljs-string\">'title'</span>: <span class=\"hljs-string\">'department manager'</span> }\n        ]\n      }\n</code></pre>\n<p><strong>Just kidding!</strong> DON’T do that. Hopefully you’re reading ahead, and didn’t just waste 10 minutes doing it the hard way. That would suck just as bad as manually updating the graphic each time! No, instead, we need a function that pulls data from the sheet and converts it to this format.</p>\n<p>Add a getEmployeeData function to the Code.gs file, to build the JSON structure:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getEmployeeData</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> ss = SpreadsheetApp.getActiveSpreadsheet();\n  <span class=\"hljs-keyword\">const</span> sheet = ss.getSheetByName(<span class=\"hljs-string\">\"Employees\"</span>);\n  <span class=\"hljs-keyword\">const</span> data = sheet.getDataRange().getValues();\n\n  <span class=\"hljs-keyword\">const</span> employees = {};\n  <span class=\"hljs-keyword\">let</span> root = <span class=\"hljs-literal\">null</span>;\n\n  <span class=\"hljs-comment\">// Skip header row</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; data.length; i++) {\n    <span class=\"hljs-keyword\">const</span> row = data[i];\n    <span class=\"hljs-keyword\">const</span> id = <span class=\"hljs-built_in\">String</span>(row[<span class=\"hljs-number\">0</span>]);\n    <span class=\"hljs-keyword\">const</span> name = row[<span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-keyword\">const</span> title = row[<span class=\"hljs-number\">2</span>];\n    <span class=\"hljs-keyword\">const</span> supervisorId = <span class=\"hljs-built_in\">String</span>(row[<span class=\"hljs-number\">3</span>]) || <span class=\"hljs-string\">''</span>;\n\n    employees[id] = {\n      <span class=\"hljs-attr\">id</span>: id,\n      <span class=\"hljs-attr\">name</span>: name,\n      <span class=\"hljs-attr\">title</span>: title,\n      <span class=\"hljs-attr\">supervisorId</span>: supervisorId,\n      <span class=\"hljs-attr\">children</span>: []\n    };\n\n    <span class=\"hljs-comment\">// Find the root (no supervisor_id)</span>\n    <span class=\"hljs-keyword\">if</span> (supervisorId === <span class=\"hljs-string\">\"\"</span>) {\n      root = employees[id];\n    }\n  }\n\n  <span class=\"hljs-comment\">// Build the tree structure</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> id <span class=\"hljs-keyword\">in</span> employees) {\n    <span class=\"hljs-keyword\">const</span> employee = employees[id];\n    <span class=\"hljs-keyword\">if</span> (employee.supervisorId !== <span class=\"hljs-string\">\"\"</span> &amp;&amp; employees[employee.supervisorId]) {\n      employees[employee.supervisorId].children.push(employee);\n    }\n  }\n\n  Logger.log(<span class=\"hljs-built_in\">JSON</span>.stringify(root));\n  <span class=\"hljs-keyword\">return</span> root;\n}\n</code></pre>\n<p>First we fetch the employee data as a 2D array, then iterate through it to build an <code>employees</code> object, where each employee is stored by their <code>id</code>. Then the hierarchical tree is constructed by iterating over the employees and using <code>push()</code> to append employees to their supervisor's <code>children</code> array based on matching <code>supervisor_id</code> values.</p>\n<p>This should return the correct, nested JSON structure for OrgChart.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1728131440289/adc94c5f-04a2-4fc6-a4bb-9a0603ead2cd.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Copy the value from the logs, and paste it into the HTML doc, replacing the original chart dataset. Then <strong>Save</strong>, and refresh the Test Deployment page.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1728131553281/9dad00c0-27fe-45a7-bcfb-1ab771687d2a.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, that’s pretty cool, but it won’t update when the sheet data changes.</p>\n<h2 id=\"heading-passing-data-from-sheets-to-orgchart\">Passing Data From Sheets To OrgChart</h2>\n<p>Now to tie it all together. We can use the <code>getEmployeeData()</code> function in the HTML doc to feed the chart by calling the <a target=\"_blank\" href=\"https://developers.google.com/apps-script/guides/html/reference/run\"><code>withSuccessHandler()</code></a> function. The syntax is a little weird but its easy once you get the hang of it. If you want to send the output of a server side function (.gs file) to a function on the client side (HTML file), then you pass the client function to withSuccessHandler(), and chain on the server function.</p>\n<pre><code class=\"lang-javascript\">google.script.run.withSuccessHandler(clientScript).serverScript()\n</code></pre>\n<p>It’s a little backwards, because you would think you need to run the server script first, then pass that value to the second script. But the way withSuceessHandler() works, is passing it the second (client/html doc) script, and then chaining on the first (server/.gs) script.</p>\n<p>Update the HTML with:</p>\n<pre><code class=\"lang-xml\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">\n    $(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-comment\">// Call Apps Script function getEmployeeData and handle the response</span>\n      google.script.run.withSuccessHandler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">datasource</span>) </span>{\n        $(<span class=\"hljs-string\">'#chart-container'</span>).orgchart({\n          <span class=\"hljs-string\">'data'</span> : datasource,\n          <span class=\"hljs-string\">'nodeContent'</span>: <span class=\"hljs-string\">'title'</span>\n        });\n      }).getEmployeeData(); <span class=\"hljs-comment\">// Calls the Apps Script function</span>\n    });\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Click <strong>Save</strong>, and then update the deployment:</p>\n<ul>\n<li><p>Deploy &gt; Manage Deployments</p>\n</li>\n<li><p>Click Pencil icon ✏️ &gt; Version dropdown &gt; New Version</p>\n</li>\n<li><p>Name the new version</p>\n</li>\n<li><p><strong>Click Deploy!</strong> 🚀</p>\n</li>\n</ul>\n<p>You should now have a data-drive organizational chart, showing live data from your Google Sheet!</p>\n<p>Change the Regional Manager to your name in the sheet, then refresh the web app. You should now be at the top of the org chart. <strong>Congrats on the promotion! 🤝</strong></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1728132495891/e96f502d-64a7-4d6c-82d1-2d9962d68a59.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>Organizational Charts are useful for visualizing a reporting structure, but keeping them updated manually can be a lot of work. This work can be automated by building a data-driven chart using the OrgChart library in Apps Script, creating a data-driven chart that updates with your spreadsheet!</p>\n<h3 id=\"heading-whats-next\">What’s Next?</h3>\n<p>OrgChart has tons of different options to customize the display and interactions, like adding pan and zoom features, or icons and extra css classes to add styling. You could also add click events to each node with a card view or navigate to the employee record in detail view.</p>\n<p><strong>Got an idea for other use cases?</strong> <em>Drop a comment below!</em></p>\n","contentMarkdown":"Organizational charts help visualize the reporting structure of a company in a tree-like graph. They are usually created with a design tool, and lots of manual data entry. Then, every time an employee changes, the graphic has to be updated again manually.\n\nHowever, most organizations tend to have this same data in a database or spreadsheet format, with a column for the supervisor's name or ID. And with a little JavaScript, this data can be used to create a data-driven org chart that updates itself when the data changes!\n\nIn this guide, I’ll show you how to build a data-driven organizational chart based on Google Sheets data, using Apps Script and the [OrgChart](https://github.com/dabeng/OrgChart) JavaScript library.\n\n**This guide will cover:**\n\n* Deploying Apps Script as a Web App\n    \n* Using the OrgChart library\n    \n* Transforming sheet data with JavaScript\n    \n* Passing data from Sheets to OrgChart\n    \n\nLet's get started!\n\n# Basic Apps Script Web App\n\nStart out by opening **Apps Script** from the **Extension** menu of the sheet with your employee data. In this case I have a sheet with each employee’s `id`, and a column for `supervisor_id`.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1728128684878/76a65190-201c-4a4a-a6fb-6cc156887952.png align=\"center\")\n\nAdd a new HTML file and name it `index`, then paste in this placeholder HTML doc:\n\n```xml\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Org Chart Tutorial</title>\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n        text-align: center;\n        padding: 50px;\n      }\n      h1 {\n        color: #333;\n      }\n      ul {\n        list-style-type: none;\n        padding: 0;\n      }\n      li {\n        margin: 10px 0;\n        font-size: 18px;\n      }\n    </style>\n  </head>\n  <body>\n    <h1>Build a Data-Driven Organizational Chart</h1>\n    <p>Learn how to create dynamic org charts with Google Sheets and Apps Script!</p>\n    <ul>\n      <li>Deploy Apps Script as a Web App</li>\n      <li>Use the OrgChart Library</li>\n      <li>Transform Sheet Data with JavaScript</li>\n      <li>Connect Google Sheets to OrgChart</li>\n    </ul>\n  </body>\n</html>\n```\n\nThen, in the Code.gs file, paste in this `doGet()` function to serve this HTML file as a web app:\n\n```javascript\nfunction doGet(e) {\n  return HtmlService.createHtmlOutputFromFile('index')\n    .setTitle('Org Chart Tutorial')\n    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);\n}\n```\n\n**Now publish the script as a web app:**\n\n* Save the script, and then give it a name\n    \n* Click **Deploy** &gt; **New Deployment**\n    \n* Click the gear ⚙️ and select **Web app**\n    \n* Name the deployment, and select **Who can view**: `anyone`\n    \n* **Deploy!** 🚀\n    \n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1728129257583/8d301067-8627-4195-875e-ee611302f9a1.png align=\"left\")\n\nOpen the deployment link, and you should see something like this:\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1728129349594/4b678e64-61c6-4f8d-8e43-91d2dfccf03d.png align=\"center\")\n\n## Using the OrgChart Library\n\nOrgChart is an open source library for creating data-driven organizational charts. It uses a nested JSON structure to feed the chart, with a tree-like schema that matches the visuals of the chart.\n\nHere’s a sample of the data format taken from their [docs](https://github.com/dabeng/OrgChart?tab=readme-ov-file#online-demos):\n\n```javascript\n{\n      'name': 'Lao Lao',\n      'title': 'general manager',\n      'children': [\n        { 'name': 'Bo Miao', 'title': 'department manager' },\n        { 'name': 'Su Miao', 'title': 'department manager',\n          'children': [\n            { 'name': 'Tie Hua', 'title': 'senior engineer' },\n            { 'name': 'Hei Hei', 'title': 'senior engineer',\n              'children': [\n                { 'name': 'Dan Dan', 'title': 'engineer' }\n              ]\n            },\n            { 'name': 'Pang Pang', 'title': 'senior engineer' }\n          ]\n        },\n        { 'name': 'Hong Miao', 'title': 'department manager' }\n      ]\n    }\n```\n\n…which renders as:\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1728129679486/1a20a293-083c-4863-b098-5c1a5cbc8adc.png align=\"center\")\n\nYou can also add different css to each node, images, pan and zoom controls, collapsable nodes, and a ton of other features.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1728129805666/dac6e668-c38e-4331-b51c-97c993aa6c45.png align=\"center\")\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1728129801839/001e55a5-2db7-4fa2-81b2-351c79498b48.png align=\"center\")\n\nLet’s start with the most basic example.\n\nUpdate the `index.html` file with this example from their docs:\n\n```xml\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Organization Chart Plugin</title>\n  <link rel=\"icon\" href=\"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.4/svgs/solid/sitemap.svg\">\n  <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/orgchart@2.1.7/dist/css/jquery.orgchart.min.css\">\n  <style>\n    #chart-container {\n      width: 100%;\n      height: auto;\n      text-align: center;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"chart-container\"></div>\n\n  <script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/orgchart@2.1.7/dist/js/jquery.orgchart.min.js\"></script>\n  <script type=\"text/javascript\">\n    $(function() {\n\n      var datasource = {\n        'name': 'Lao Lao',\n        'title': 'general manager',\n        'children': [\n          { 'name': 'Bo Miao', 'title': 'department manager' },\n          { 'name': 'Su Miao', 'title': 'department manager',\n            'children': [\n              { 'name': 'Tie Hua', 'title': 'senior engineer' },\n              { 'name': 'Hei Hei', 'title': 'senior engineer',\n                'children': [\n                  { 'name': 'Dan Dan', 'title': 'engineer' }\n                ]\n              },\n              { 'name': 'Pang Pang', 'title': 'senior engineer' }\n            ]\n          },\n          { 'name': 'Hong Miao', 'title': 'department manager' }\n        ]\n      };\n\n      $('#chart-container').orgchart({\n        'data' : datasource,\n        'nodeContent': 'title'\n      });\n\n    });\n  </script>\n</body>\n</html>\n```\n\nSave the file, then click **Deploy** &gt; **Test Deployment**. This will let you view the changes without having to redeploy each time. You should see a chart like this now.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1728130137694/8c4cbdb8-c146-40f4-935d-b5be9bbe5c9d.png align=\"center\")\n\n## Transforming Sheet Data with JavaScript\n\nBefore we can send the sheet data to OrgChart, it has to be formatted in the correct, nested structure.\n\nStart out by individually copy/pasting each name from your sheet into this JSON structure:\n\n```javascript\n{\n        'name': 'Lao Lao',\n        'title': 'general manager',\n        'children': [\n          { 'name': 'Bo Miao', 'title': 'department manager' },\n          { 'name': 'Su Miao', 'title': 'department manager',\n            'children': [\n              { 'name': 'Tie Hua', 'title': 'senior engineer' },\n              { 'name': 'Hei Hei', 'title': 'senior engineer',\n                'children': [\n                  { 'name': 'Dan Dan', 'title': 'engineer' }\n                ]\n              },\n              { 'name': 'Pang Pang', 'title': 'senior engineer' }\n            ]\n          },\n          { 'name': 'Hong Miao', 'title': 'department manager' }\n        ]\n      }\n```\n\n**Just kidding!** DON’T do that. Hopefully you’re reading ahead, and didn’t just waste 10 minutes doing it the hard way. That would suck just as bad as manually updating the graphic each time! No, instead, we need a function that pulls data from the sheet and converts it to this format.\n\nAdd a getEmployeeData function to the Code.gs file, to build the JSON structure:\n\n```javascript\nfunction getEmployeeData() {\n  const ss = SpreadsheetApp.getActiveSpreadsheet();\n  const sheet = ss.getSheetByName(\"Employees\");\n  const data = sheet.getDataRange().getValues();\n  \n  const employees = {};\n  let root = null;\n  \n  // Skip header row\n  for (let i = 1; i < data.length; i++) {\n    const row = data[i];\n    const id = String(row[0]);\n    const name = row[1];\n    const title = row[2];\n    const supervisorId = String(row[3]) || '';\n    \n    employees[id] = {\n      id: id,\n      name: name,\n      title: title,\n      supervisorId: supervisorId,\n      children: []\n    };\n    \n    // Find the root (no supervisor_id)\n    if (supervisorId === \"\") {\n      root = employees[id];\n    }\n  }\n  \n  // Build the tree structure\n  for (const id in employees) {\n    const employee = employees[id];\n    if (employee.supervisorId !== \"\" && employees[employee.supervisorId]) {\n      employees[employee.supervisorId].children.push(employee);\n    }\n  }\n  \n  Logger.log(JSON.stringify(root));\n  return root;\n}\n```\n\nFirst we fetch the employee data as a 2D array, then iterate through it to build an `employees` object, where each employee is stored by their `id`. Then the hierarchical tree is constructed by iterating over the employees and using `push()` to append employees to their supervisor's `children` array based on matching `supervisor_id` values.\n\nThis should return the correct, nested JSON structure for OrgChart.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1728131440289/adc94c5f-04a2-4fc6-a4bb-9a0603ead2cd.png align=\"center\")\n\nCopy the value from the logs, and paste it into the HTML doc, replacing the original chart dataset. Then **Save**, and refresh the Test Deployment page.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1728131553281/9dad00c0-27fe-45a7-bcfb-1ab771687d2a.png align=\"center\")\n\nOk, that’s pretty cool, but it won’t update when the sheet data changes.\n\n## Passing Data From Sheets To OrgChart\n\nNow to tie it all together. We can use the `getEmployeeData()` function in the HTML doc to feed the chart by calling the [`withSuccessHandler()`](https://developers.google.com/apps-script/guides/html/reference/run) function. The syntax is a little weird but its easy once you get the hang of it. If you want to send the output of a server side function (.gs file) to a function on the client side (HTML file), then you pass the client function to withSuccessHandler(), and chain on the server function.\n\n```javascript\ngoogle.script.run.withSuccessHandler(clientScript).serverScript()\n```\n\nIt’s a little backwards, because you would think you need to run the server script first, then pass that value to the second script. But the way withSuceessHandler() works, is passing it the second (client/html doc) script, and then chaining on the first (server/.gs) script.\n\nUpdate the HTML with:\n\n```xml\n  <script type=\"text/javascript\">\n    $(function() {\n      // Call Apps Script function getEmployeeData and handle the response\n      google.script.run.withSuccessHandler(function(datasource) {\n        $('#chart-container').orgchart({\n          'data' : datasource,\n          'nodeContent': 'title'\n        });\n      }).getEmployeeData(); // Calls the Apps Script function\n    });\n  </script>\n```\n\nClick **Save**, and then update the deployment:\n\n* Deploy &gt; Manage Deployments\n    \n* Click Pencil icon ✏️ &gt; Version dropdown &gt; New Version\n    \n* Name the new version\n    \n* **Click Deploy!** 🚀\n    \n\nYou should now have a data-drive organizational chart, showing live data from your Google Sheet!\n\nChange the Regional Manager to your name in the sheet, then refresh the web app. You should now be at the top of the org chart. **Congrats on the promotion! 🤝**\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1728132495891/e96f502d-64a7-4d6c-82d1-2d9962d68a59.png align=\"center\")\n\n## Conclusion\n\nOrganizational Charts are useful for visualizing a reporting structure, but keeping them updated manually can be a lot of work. This work can be automated by building a data-driven chart using the OrgChart library in Apps Script, creating a data-driven chart that updates with your spreadsheet!\n\n### What’s Next?\n\nOrgChart has tons of different options to customize the display and interactions, like adding pan and zoom features, or icons and extra css classes to add styling. You could also add click events to each node with a card view or navigate to the employee record in detail view.\n\n**Got an idea for other use cases?** *Drop a comment below!*","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1728132866695/c64237ca-6911-42b7-9df8-2d6f038d7361.png","brief":"Organizational charts help visualize the reporting structure of a company in a tree-like graph. They are usually created with a design tool, and lots of manual data entry. Then, every time an employee changes, the graphic has to be updated again manu...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":7,"draft":"67010a8bc516e77bc5ad15e4","tags":["56e669b622f645300192ed17","5e270f8a32d5fad159b76b9a","56744721958ef13879b94cad","56744722958ef13879b94f32","56744722958ef13879b94f1b"],"publication":"60771c264155da32fc83ad6e","series":"679fa03905414f167a095994","isNewsletterActivated":true,"coAuthors":[],"contributors":[{"_id":"686429d7dbf6bfe1b0c0713c","user":"67224e0d217f353c4dd7f00e","stamp":"cm2wzfqib000909lbgtjidzhw"},{"_id":"686429d7dbf6bfe1b0c0713d","user":"60771bbfa3407a32d7041f47","stamp":"cm1w9yass001509l0b7524ydp"}],"lastActivity":"2024-10-31T07:26:53.174Z","dateUpdated":"2025-03-16T00:41:18.942Z","hasCustomDate":false,"pollOptions":[],"badges":[],"questionReplies":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"67013b01f4e033df14ec74ff"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"66f00c6fc9bd005ff4d26163","createdAt":"2024-09-22T12:24:15.431Z","updatedAt":"2025-03-16T00:34:02.929Z","views":937,"isActive":true,"hasLatex":false,"popularity":7066.5923,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"Why I Built A Code Editor Inside FileMaker Pro","subtitle":"A Web Viewer for Building Web Viewers","cuid":"cm1djvxom003q08jtb94sf9fz","dateAdded":"2024-09-22T12:24:15.430Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"why-i-built-a-code-editor-inside-filemaker-pro","content":"<p>Web Viewers in FileMaker Pro are like an escape hatch. When you hit the limits of the native FMP platform, you can always extend it with a web viewer to add new functionality. You can add some really cool features to FileMaker with a web viewer and a few JavaScript libraries, like this <a target=\"_blank\" href=\"https://github.com/GreenFluxLLC/FileMaker-Experiments/tree/main/CSS%20Grid\">grid view</a>, and <a target=\"_blank\" href=\"https://github.com/GreenFluxLLC/FileMaker-Experiments/tree/main/SortableFMP\">drag-to-sort</a> list.</p>\n<p>I really enjoy pushing the limits of lowcode platforms, and FileMaker Pro was my first favorite lowcode tool. But let me tell you, working with web viewer code in FileMaker SUCKS! Imagine a CodePen style editor, but with the following restrictions:</p>\n<ul>\n<li><p>You can’t use double quotes anywhere without escaping them <code>”\\””</code></p>\n</li>\n<li><p>No syntax highlighting</p>\n</li>\n<li><p>No auto-indent / pretty-print</p>\n</li>\n<li><p>No template literals. String concatenation using <code>code</code> &amp; table::field &amp; <code>code</code></p>\n</li>\n<li><p>Limited ability to pass data between FMP and web viewer</p>\n</li>\n</ul>\n<p>It’s not an IDE by any means, but then it wasn’t meant to be. However, that leaves you copy and pasting code between some other editor and viewer, testing changes in the other editor, pasting again and saving a layout in FileMaker… it shouldn’t be this hard. Web viewers have so much potential but they are a pain in the ass to use.</p>\n<h2 id=\"heading-there-has-to-be-a-better-way\">There Has to Be A Better Way</h2>\n<p>Every time I try to build something in a web viewer, I keep thinking there has to be a better way to store, edit, and test the code. I’ve tried building a 3 pane editor with separate fields for HTML, CSS and JS, then merging them into a single doc with Substitute(). This helps a little, but there’s still no formatting, highlighting, etc. You still have to leave FMP to develop, then copy/paste into FileMaker. If only there were a way to write the code directly in FMP, with syntax highlighting, <em>and</em> test results instantly without switching between programs.</p>\n<h1 id=\"heading-solution-a-web-viewer-to-build-web-viewers\">Solution: A Web Viewer to Build Web Viewers</h1>\n<p>Building a basic code editor with syntax highlighting and multi-language support sounds complex, but it’s actually pretty easy with the CodeMirror library. Just import the library and select a textarea containing the code.</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>CodeMirror Example with Syntax Highlighting<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.css\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"editor\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Header<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>body text. <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- CodeMirror JS and Mode libraries from CDN --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/xml/xml.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/htmlmixed/htmlmixed.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n      <span class=\"hljs-comment\">// Initialize CodeMirror with default mode (HTML)</span>\n      <span class=\"hljs-keyword\">let</span> editor = CodeMirror.fromTextArea(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'editor'</span>), {\n        <span class=\"hljs-attr\">lineNumbers</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'htmlmixed'</span>,  <span class=\"hljs-comment\">// Start with HTML mode</span>\n        <span class=\"hljs-attr\">theme</span>: <span class=\"hljs-string\">'default'</span>,\n        <span class=\"hljs-attr\">tabSize</span>: <span class=\"hljs-number\">2</span>\n      });\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1726964622333/3011f3c9-6b20-455c-ace2-f1fdb46c6221.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-using-codemirror-in-filemaker\">Using CodeMirror in FileMaker</h2>\n<p>Dealing with quotes is a pain in FileMaker. You can’t use them directly in the Web Viewer’s input calculation field without escaping them. As a hack, you can store code that includes double quotes by pasting it in a text object on the layout, then using <code>GetLayoutObjectAttribute( objectName ; “content” )</code> to get the code without having to escape the quotes.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727003798424/ffa0c0c0-6bf2-46be-a142-1108125dfe9b.png\" alt class=\"image--center mx-auto\" /></p>\n<p>And in Browse Mode:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727003905355/08e1327e-4114-4103-abe1-38d0e1ce377c.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-loading-code-stored-in-filemaker\">Loading Code Stored In FileMaker</h2>\n<p>To preload the web viewer with code stored in a field in FileMaker, modify the <code>textarea</code> to leave a placeholder for inserting the editor’s code using Substitute(). Then, update the web viewer’s source to insert the code. In this case, I have a field named <code>doc</code> in a <code>CodeMirror</code> table, and the placeholder text in the textarea says EDITOR_TEXT.</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"editor\"</span>&gt;</span>EDITOR_TEXT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span>\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727004103202/a64ddbb3-2e5b-4c9c-8b38-4bf3ba773745.png\" alt class=\"image--center mx-auto\" /></p>\n<p>This will pre-load the code editor with code stored in the <code>CodeMirror::doc</code> field.</p>\n<h3 id=\"heading-other-language-support\">Other Language Support</h3>\n<p>To extend your web viewer to support other languages like CSS and JavaScript, just import the libraries for each mode, and then provide a way for the user to switch.</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-comment\">&lt;!-- CodeMirror mode for CSS --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/css/css.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-comment\">&lt;!-- CodeMirror mode for JavaScript --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/javascript/javascript.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>You can then modify the <code>CodeMirror</code> initialization to allow switching between these languages dynamically. Here’s an updated version with a dropdown for language selection:</p>\n<pre><code class=\"lang-xml\">htmlCopy code<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"toolbar\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"language-selector\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"htmlmixed\"</span>&gt;</span>HTML<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"css\"</span>&gt;</span>CSS<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"javascript\"</span>&gt;</span>JavaScript<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>To handle the language switching, you can modify the CodeMirror editor mode when the user selects a language:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> languageSelector = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'language-selector'</span>);\n\nlanguageSelector.addEventListener(<span class=\"hljs-string\">'change'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> selectedMode = <span class=\"hljs-built_in\">this</span>.value;\n  editor.setOption(<span class=\"hljs-string\">'mode'</span>, selectedMode);\n});\n</code></pre>\n<p>Now the syntax highlighting will change based on the selected language.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727004669686/71061d79-7dfb-4ed8-8b65-a619f1214e85.gif\" alt class=\"image--center mx-auto\" /></p>\n<h3 id=\"heading-saving-the-data\">Saving the Data</h3>\n<p>To save the code written in the CodeMirror editor back into FileMaker, you can use the <strong>FileMaker.PerformScript()</strong> function to trigger a FileMaker script. This allows you to pass the content of the editor as a parameter to the script, then use the Set Field step to insert the code back into FileMaker.</p>\n<p>Here’s an example with a \"Save\" button that will save the editor content:</p>\n<pre><code class=\"lang-xml\">htmlCopy code<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"save-button\"</span>&gt;</span>Save<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'save-button'</span>).addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> editorContent = editor.getValue();\n    FileMaker.PerformScript(<span class=\"hljs-string\">'Save Editor Code'</span>, editorContent);\n  });\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>In this case, you’ll need to create a FileMaker script named <strong>\"Save Editor Code\"</strong> that will handle the content passed from the web viewer and store it in a designated field.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727004769421/d5a0fe4a-ea4d-4e6e-abd2-6331968693c9.png\" alt class=\"image--center mx-auto\" /></p>\n<p>At this point, we have a decent code editor for writing and saving the code without leaving FileMaker.</p>\n<h3 id=\"heading-displaying-code-in-a-second-web-viewer\">Displaying Code in a Second Web Viewer</h3>\n<p>Now, the code in the <code>CodeMirror::doc</code> field can be displayed in a second web viewer. This time no Substitute() is needed, because we want to display the final result from our first web viewer.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727005069966/2106bd96-9c69-4450-a159-724014205fc3.gif\" alt class=\"image--center mx-auto\" /></p>\n<h3 id=\"heading-final-results\">Final Results</h3>\n<p>And here it is in action. Now you can build and test FileMaker web viewer code directly in FileMaker, with syntax highlighting for any language! And you can view the results instantly by saving the editor code back to FileMaker.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1727006283945/e02bea33-112a-438d-b2cf-14a3565d85ee.gif\" alt class=\"image--center mx-auto\" /></p>\n<p>Each record stores its own <code>doc</code> field, so you can build a library of web viewer code samples to use in other apps. This should make for a decent web viewer IDE, outputting all the code to a single field that can be used in the next solution.</p>\n<h3 id=\"heading-conclusion\">Conclusion</h3>\n<p>Building a new web viewer solution to extend FileMaker can be extremely fun and rewarding when you get it to work, but getting there can be a tedious and frustrating process. Hopefully this solution will help reduce some of that friction and let us focus more on the fun part!</p>\n<h2 id=\"heading-whats-next\">What’s Next?</h2>\n<p>CodeMirror has a ton of different options and plugins to extend the functionality. At first, I wasn’t able to ‘select-all’ with the keyboard on mac, but I was able to get it working by adjusting the config. Similarly, you could add keyboard shortcuts for auto-intent or other IDE functionality. Got an idea for another feature? Drop a comment below and I’ll see what I can do!</p>\n","contentMarkdown":"Web Viewers in FileMaker Pro are like an escape hatch. When you hit the limits of the native FMP platform, you can always extend it with a web viewer to add new functionality. You can add some really cool features to FileMaker with a web viewer and a few JavaScript libraries, like this [grid view](https://github.com/GreenFluxLLC/FileMaker-Experiments/tree/main/CSS%20Grid), and [drag-to-sort](https://github.com/GreenFluxLLC/FileMaker-Experiments/tree/main/SortableFMP) list.\n\nI really enjoy pushing the limits of lowcode platforms, and FileMaker Pro was my first favorite lowcode tool. But let me tell you, working with web viewer code in FileMaker SUCKS! Imagine a CodePen style editor, but with the following restrictions:\n\n* You can’t use double quotes anywhere without escaping them `”\\””`\n    \n* No syntax highlighting\n    \n* No auto-indent / pretty-print\n    \n* No template literals. String concatenation using `code` & table::field & `code`\n    \n* Limited ability to pass data between FMP and web viewer\n    \n\nIt’s not an IDE by any means, but then it wasn’t meant to be. However, that leaves you copy and pasting code between some other editor and viewer, testing changes in the other editor, pasting again and saving a layout in FileMaker… it shouldn’t be this hard. Web viewers have so much potential but they are a pain in the ass to use.\n\n## There Has to Be A Better Way\n\nEvery time I try to build something in a web viewer, I keep thinking there has to be a better way to store, edit, and test the code. I’ve tried building a 3 pane editor with separate fields for HTML, CSS and JS, then merging them into a single doc with Substitute(). This helps a little, but there’s still no formatting, highlighting, etc. You still have to leave FMP to develop, then copy/paste into FileMaker. If only there were a way to write the code directly in FMP, with syntax highlighting, *and* test results instantly without switching between programs.\n\n# Solution: A Web Viewer to Build Web Viewers\n\nBuilding a basic code editor with syntax highlighting and multi-language support sounds complex, but it’s actually pretty easy with the CodeMirror library. Just import the library and select a textarea containing the code.\n\n```xml\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CodeMirror Example with Syntax Highlighting</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.css\">\n  </head>\n  <body>\n    <textarea id=\"editor\"><h1>Header</h1>\n<p>body text. </p>\n</textarea>\n\n    <!-- CodeMirror JS and Mode libraries from CDN -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/xml/xml.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/htmlmixed/htmlmixed.min.js\"></script>\n\n    <script>\n      // Initialize CodeMirror with default mode (HTML)\n      let editor = CodeMirror.fromTextArea(document.getElementById('editor'), {\n        lineNumbers: true,\n        mode: 'htmlmixed',  // Start with HTML mode\n        theme: 'default',\n        tabSize: 2\n      });\n    </script>\n\n  </body>\n</html>\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1726964622333/3011f3c9-6b20-455c-ace2-f1fdb46c6221.png align=\"center\")\n\n## Using CodeMirror in FileMaker\n\nDealing with quotes is a pain in FileMaker. You can’t use them directly in the Web Viewer’s input calculation field without escaping them. As a hack, you can store code that includes double quotes by pasting it in a text object on the layout, then using `GetLayoutObjectAttribute( objectName ; “content” )` to get the code without having to escape the quotes.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1727003798424/ffa0c0c0-6bf2-46be-a142-1108125dfe9b.png align=\"center\")\n\nAnd in Browse Mode:\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1727003905355/08e1327e-4114-4103-abe1-38d0e1ce377c.png align=\"center\")\n\n## Loading Code Stored In FileMaker\n\nTo preload the web viewer with code stored in a field in FileMaker, modify the `textarea` to leave a placeholder for inserting the editor’s code using Substitute(). Then, update the web viewer’s source to insert the code. In this case, I have a field named `doc` in a `CodeMirror` table, and the placeholder text in the textarea says EDITOR\\_TEXT.\n\n```xml\n<textarea id=\"editor\">EDITOR_TEXT</textarea>\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1727004103202/a64ddbb3-2e5b-4c9c-8b38-4bf3ba773745.png align=\"center\")\n\nThis will pre-load the code editor with code stored in the `CodeMirror::doc` field.\n\n### Other Language Support\n\nTo extend your web viewer to support other languages like CSS and JavaScript, just import the libraries for each mode, and then provide a way for the user to switch.\n\n```xml\n<!-- CodeMirror mode for CSS -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/css/css.min.js\"></script>\n\n<!-- CodeMirror mode for JavaScript -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/javascript/javascript.min.js\"></script>\n```\n\nYou can then modify the `CodeMirror` initialization to allow switching between these languages dynamically. Here’s an updated version with a dropdown for language selection:\n\n```xml\nhtmlCopy code<div id=\"toolbar\">\n  <select id=\"language-selector\">\n    <option value=\"htmlmixed\">HTML</option>\n    <option value=\"css\">CSS</option>\n    <option value=\"javascript\">JavaScript</option>\n  </select>\n</div>\n```\n\nTo handle the language switching, you can modify the CodeMirror editor mode when the user selects a language:\n\n```javascript\nconst languageSelector = document.getElementById('language-selector');\n\nlanguageSelector.addEventListener('change', function() {\n  const selectedMode = this.value;\n  editor.setOption('mode', selectedMode);\n});\n```\n\nNow the syntax highlighting will change based on the selected language.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1727004669686/71061d79-7dfb-4ed8-8b65-a619f1214e85.gif align=\"center\")\n\n### Saving the Data\n\nTo save the code written in the CodeMirror editor back into FileMaker, you can use the **FileMaker.PerformScript()** function to trigger a FileMaker script. This allows you to pass the content of the editor as a parameter to the script, then use the Set Field step to insert the code back into FileMaker.\n\nHere’s an example with a \"Save\" button that will save the editor content:\n\n```xml\nhtmlCopy code<button id=\"save-button\">Save</button>\n\n<script>\n  document.getElementById('save-button').addEventListener('click', function() {\n    const editorContent = editor.getValue();\n    FileMaker.PerformScript('Save Editor Code', editorContent);\n  });\n</script>\n```\n\nIn this case, you’ll need to create a FileMaker script named **\"Save Editor Code\"** that will handle the content passed from the web viewer and store it in a designated field.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1727004769421/d5a0fe4a-ea4d-4e6e-abd2-6331968693c9.png align=\"center\")\n\nAt this point, we have a decent code editor for writing and saving the code without leaving FileMaker.\n\n### Displaying Code in a Second Web Viewer\n\nNow, the code in the `CodeMirror::doc` field can be displayed in a second web viewer. This time no Substitute() is needed, because we want to display the final result from our first web viewer.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1727005069966/2106bd96-9c69-4450-a159-724014205fc3.gif align=\"center\")\n\n### Final Results\n\nAnd here it is in action. Now you can build and test FileMaker web viewer code directly in FileMaker, with syntax highlighting for any language! And you can view the results instantly by saving the editor code back to FileMaker.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1727006283945/e02bea33-112a-438d-b2cf-14a3565d85ee.gif align=\"center\")\n\nEach record stores its own `doc` field, so you can build a library of web viewer code samples to use in other apps. This should make for a decent web viewer IDE, outputting all the code to a single field that can be used in the next solution.\n\n### Conclusion\n\nBuilding a new web viewer solution to extend FileMaker can be extremely fun and rewarding when you get it to work, but getting there can be a tedious and frustrating process. Hopefully this solution will help reduce some of that friction and let us focus more on the fun part!\n\n## What’s Next?\n\nCodeMirror has a ton of different options and plugins to extend the functionality. At first, I wasn’t able to ‘select-all’ with the keyboard on mac, but I was able to get it working by adjusting the config. Similarly, you could add keyboard shortcuts for auto-intent or other IDE functionality. Got an idea for another feature? Drop a comment below and I’ll see what I can do!","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1727007212211/765cd7de-93e5-45c0-8cab-ee23c220cef4.png","brief":"Web Viewers in FileMaker Pro are like an escape hatch. When you hit the limits of the native FMP platform, you can always extend it with a web viewer to add new functionality. You can add some really cool features to FileMaker with a web viewer and a...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":5,"draft":"66ef4df72e7b132644edefda","tags":["6483259e8a9f5d9098c40f65","5768be0dce293c309321dd57","56744721958ef13879b94cad","66ae6b4aa3a2a11383215a48","5cf6188006c28b8d5cd3d862"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"contributors":[{"_id":"686429d7dbf6bfe1b0c0713e","user":"60771bbfa3407a32d7041f47","stamp":"cm1dpbg2l003109mnf7lv90e3"}],"lastActivity":"2024-09-22T14:56:17.184Z","dateUpdated":"2025-03-16T00:34:02.929Z","hasCustomDate":false,"series":"67d61af88a2ed4175bcf3b13","pollOptions":[],"badges":[],"questionReplies":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"66f00c6fc9bd005ff4d26163"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"_id":"66e8d0b48000114d52b3e717","createdAt":"2024-09-17T00:43:32.732Z","updatedAt":"2024-09-17T07:35:28.015Z","views":153,"isActive":true,"hasLatex":false,"popularity":7057.058,"discussionScore":0,"enableToc":true,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":10,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"Text Analysis WITHOUT AI: Lexical Density, String Similarity, Readability & Other Metrics","subtitle":"A primer on natural language processing with JavaScript","cuid":"cm15pnjzv001408mdaz9od27s","dateAdded":"2024-09-17T00:43:32.731Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"text-analysis-without-ai-lexical-density-string-similarity-readability-other-metrics","toc":[[{"id":"9c98f828-bf17-464d-a76d-f32118c41cdd","level":3,"previousLevel":null,"parentId":null,"slug":"intro","title":"Intro"}],[{"id":"e163edf9-e02f-4bed-bb04-c1bf25902216","level":2,"previousLevel":3,"parentId":null,"slug":"calculating-lexical-density","title":"Calculating Lexical Density"}],[{"id":"e8bbddfa-f774-481e-875c-030331f2792f","level":2,"previousLevel":2,"parentId":null,"slug":"flesch-kincaid-readability-score","title":"Flesch-Kincaid Readability Score"}],[{"id":"71ccf82a-eee9-4403-9060-6f0d405ddc3e","level":2,"previousLevel":2,"parentId":null,"slug":"string-similarity","title":"String Similarity"}],[{"id":"f94e6161-5e5d-43c6-8c8f-de9c3dac5c78","level":3,"previousLevel":2,"parentId":"71ccf82a-eee9-4403-9060-6f0d405ddc3e","slug":"jaccard-similarity","title":"Jaccard Similarity"}],[{"id":"e10cacdd-bf44-4533-bd44-b83a0c4baa35","level":3,"previousLevel":3,"parentId":"71ccf82a-eee9-4403-9060-6f0d405ddc3e","slug":"levenshtein-distance","title":"Levenshtein Distance"}],[{"id":"876c8d88-d1d3-474a-a670-7c342047f01b","level":2,"previousLevel":3,"parentId":null,"slug":"sentiment-analysis","title":"Sentiment Analysis"}],[{"id":"45ff5e35-b5a6-4bc5-9efd-78835dd38ef3","level":2,"previousLevel":2,"parentId":null,"slug":"text-cohesion","title":"Text Cohesion"}],[{"id":"e28488f5-70cf-4025-b32a-72731e56c8d6","level":2,"previousLevel":2,"parentId":null,"slug":"conclusion","title":"Conclusion"}]],"content":"<blockquote>\n<p><strong><em>Lexical density measures word frequency within text.</em></strong></p>\n</blockquote>\n<p>That sentence had a lexical density of 100%, but it's a little hard to understand. Let's unpack it.</p>\n<blockquote>\n<p><em>Lexical density, in the context of text analysis, is a metric that quantifies the proportion of significant or content-bearing words, such as nouns, verbs, adjectives, and adverbs, compared to the total number of words in a piece of text.</em></p>\n</blockquote>\n<p>Ok, that's a lot easier to understand, but the lexical density here is now only ~56%.</p>\n<p>Lexical Density is just one metric linguists use to analyze text. There are tons of other interesting ways to analyze writing. This post will provide an introduction to some of these metrics, and how to calculate them in JavaScript.</p>\n<h3 id=\"heading-intro\"><strong>Intro</strong></h3>\n<p>Hey there, I'm Joseph, a senior developer advocate at <a target=\"_blank\" href=\"https://community.appsmith.com/a/josephappsmith\">Appsmith</a>, and I must warn you, <strong>I am NOT a linguist!</strong> No, I'm just a JavaScript developer who happened to build an app for a <a target=\"_blank\" href=\"https://atruck.msu.domains/writing-architect/\">university study</a>, went down the rabbit hole, and learned some basics about text analysis along the way. So if you see any missing or inaccurate information in this post, please feel free to drop a comment below. This is uncharted territory for me, but I'm diving in, and loving the combination of programming and written language.</p>\n<h2 id=\"heading-calculating-lexical-density\"><strong>Calculating Lexical Density</strong></h2>\n<p>In its most basic form, this is just a ratio of <code>unique words / total words</code>. Just split the text by spaces,</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">calculateLexicalDensity</span>(<span class=\"hljs-params\">text=<span class=\"hljs-string\">'testing, testing, one, two, three'</span></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> words = text.split(<span class=\"hljs-regexp\">/\\s+/</span>);\n    <span class=\"hljs-keyword\">const</span> uniqueWords = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(words); <span class=\"hljs-comment\">// Use a Set to store unique words</span>\n    <span class=\"hljs-keyword\">const</span> lexicalDensity = (uniqueWords.size / words.length) * <span class=\"hljs-number\">100</span>;\n    <span class=\"hljs-keyword\">return</span> lexicalDensity;\n}\n\n<span class=\"hljs-comment\">// returns 80</span>\n</code></pre>\n<p>In this example we have 5 word, but one repeats. So 4/5 = 80% Lexical Density. However, this simple function would return 100% if the first 'Testing' were capitalized because Set() is case sensitive. It also doesn't filter out those non-important words like, <em>in</em>, <em>of</em>, <em>and</em>, <em>the</em>, etc. Let's fix that!</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">calculateLexicalDensity</span>(<span class=\"hljs-params\">text, skipWords = [<span class=\"hljs-string\">\"a\"</span>,<span class=\"hljs-string\">\"an\"</span>,<span class=\"hljs-string\">\"the\"</span>,<span class=\"hljs-string\">\"in\"</span>,<span class=\"hljs-string\">\"on\"</span>,<span class=\"hljs-string\">\"at\"</span>,<span class=\"hljs-string\">\"of\"</span>,<span class=\"hljs-string\">\"for\"</span>]</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> words = text.split(<span class=\"hljs-regexp\">/\\s+/</span>);\n    <span class=\"hljs-keyword\">const</span> uniqueWords = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n\n    words.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">word</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> lowerCaseWord = word.toLowerCase();\n        <span class=\"hljs-keyword\">if</span> (!skipWords.includes(lowerCaseWord)) {\n            uniqueWords.add(lowerCaseWord);\n        }\n    });\n\n    <span class=\"hljs-keyword\">const</span> lexicalDensity = (uniqueWords.size / words.length) * <span class=\"hljs-number\">100</span>;\n    <span class=\"hljs-keyword\">return</span> lexicalDensity;\n}\n\n<span class=\"hljs-comment\">// Example usage:</span>\n<span class=\"hljs-keyword\">const</span> inputText = <span class=\"hljs-string\">\"This is a super basic example of lexical density calculation. This is a test.\"</span>;\n<span class=\"hljs-keyword\">const</span> skipWords = [<span class=\"hljs-string\">\"is\"</span>, <span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"this\"</span>, <span class=\"hljs-string\">\"of\"</span>];\n<span class=\"hljs-keyword\">const</span> density = calculateLexicalDensity(inputText, skipWords);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Lexical Density: <span class=\"hljs-subst\">${density.toFixed(<span class=\"hljs-number\">2</span>)}</span>%`</span>);\n</code></pre>\n<h2 id=\"heading-flesch-kincaid-readability-score\"><strong>Flesch-Kincaid Readability Score</strong></h2>\n<p>Next up, we'll look at the Flesch-Kincaid Readability Score, which uses a similar ratio calculation, but this time we'll also need the number of syllables. This is just a simple function call with the syllable.js library.</p>\n<pre><code class=\"lang-javascript\">countSyllables(string=<span class=\"hljs-string\">'testing, one, two three'</span>) {\n    <span class=\"hljs-comment\">//https://cdn.jsdelivr.net/npm/syllable@5.0.1/+esm</span>\n        <span class=\"hljs-keyword\">return</span> syllable.syllable(string);\n}\n\n<span class=\"hljs-comment\">// returns 5</span>\n</code></pre>\n<p>The Flesh-Kincaid formula compares the number of syllables to the number of words:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1726532776769/b7823021-bdc0-48a8-a5ad-ffb0955c3987.png\" alt class=\"image--center mx-auto\" /></p>\n<p><strong>And in JavaScript:</strong></p>\n<pre><code class=\"lang-javascript\">    <span class=\"hljs-comment\">// Function to calculate the Flesch-Kincaid readability score</span>\ncalculateFleschKincaid(text) {\n   <span class=\"hljs-keyword\">const</span> doc = compromise(text);\n   <span class=\"hljs-keyword\">const</span> words = doc.terms().out(<span class=\"hljs-string\">'array'</span>);\n   <span class=\"hljs-keyword\">const</span> numWords = words.length;\n   <span class=\"hljs-keyword\">const</span> numSentences = doc.sentences().length;\n   <span class=\"hljs-keyword\">const</span> totalSyllables = words.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">total, word</span>) =&gt;</span> total + <span class=\"hljs-built_in\">this</span>.countSyllables(word), <span class=\"hljs-number\">0</span>);\n   <span class=\"hljs-keyword\">const</span> avgSyllablesPerWord = totalSyllables / numWords;\n   <span class=\"hljs-keyword\">const</span> fleschKincaid = <span class=\"hljs-number\">0.39</span> * (numWords / numSentences) + <span class=\"hljs-number\">11.8</span> * avgSyllablesPerWord - <span class=\"hljs-number\">15.59</span>;\n   <span class=\"hljs-keyword\">return</span> fleschKincaid.toFixed(<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// Round to two decimal places</span>\n}\n</code></pre>\n<p>I took the copy from our website and ran it through this function to see where it falls on the readability score. It turns out, you have to be a <em>professional</em> to understand marketing speak about internal tools. I'll have to talk to our marketing team about this.</p>\n<p><img src=\"https://community.appsmith.com/sites/default/files/2023-10/Screenshot%202023-10-13%20at%204.18.47%E2%80%AFPM.png\" alt=\"Flesch–Kincaid grade level\" /></p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>Score</td><td>School level (<a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Education_in_the_United_States\">US</a>)</td><td>Notes</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>100.00–90.00</td><td>5th grade</td><td>Very easy to read. Easily understood by an average 11-year-old student.</td></tr>\n<tr>\n<td>90.0–80.0</td><td>6th grade</td><td>Easy to read. Conversational English for consumers.</td></tr>\n<tr>\n<td>80.0–70.0</td><td>7th grade</td><td>Fairly easy to read.</td></tr>\n<tr>\n<td>70.0–60.0</td><td>8th &amp; 9th grade</td><td>Plain English. Easily understood by 13- to 15-year-old students.</td></tr>\n<tr>\n<td>60.0–50.0</td><td>10th to 12th grade</td><td>Fairly difficult to read.</td></tr>\n<tr>\n<td>50.0–30.0</td><td>College</td><td>Difficult to read.</td></tr>\n<tr>\n<td>30.0–10.0</td><td>College graduate</td><td>Very difficult to read. Best understood by university graduates.</td></tr>\n<tr>\n<td>10.0–0.0</td><td>Professional</td><td>Extremely difficult to read. Best understood by university graduates.</td></tr>\n</tbody>\n</table>\n</div><h2 id=\"heading-string-similarity\"><strong>String Similarity</strong></h2>\n<p>How about comparing two strings? This can be useful for catching misspellings, grading, or even building a text based game. So how do you compare two strings in JavaScript? Like most things in programming, there are lots of ways. But more importantly, there are a bunch of different methodologies for comparison, separate from the programming approach. As such, this section would be massive if I tried to make it comprehensive. Instead, here's a high level summary of the possible methods, and a few examples.</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td><strong>Method</strong></td><td><strong>Description</strong></td><td><strong>Difficulty in JS</strong></td><td><strong>Related JS Libraries</strong></td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Levenshtein Distance</td><td>Measures edit operations to transform one string into another.</td><td>Moderate</td><td><strong>fast-levenshtein</strong>, <strong>natural</strong></td></tr>\n<tr>\n<td>Jaccard Similarity</td><td>Calculates set similarity by comparing elements' intersections.</td><td>Easy</td><td>None</td></tr>\n<tr>\n<td>Cosine Similarity</td><td>Computes similarity between vector representations of strings.</td><td>Moderate</td><td><strong>math.js</strong>, <strong>ml-cosine</strong></td></tr>\n<tr>\n<td>Hamming Distance</td><td>Counts differing characters in equal-length strings.</td><td>Easy</td><td>None</td></tr>\n<tr>\n<td>Dice Coefficient</td><td>Measures similarity using character bigrams.</td><td>Easy</td><td>None</td></tr>\n<tr>\n<td>Jaro-Winkler Distance</td><td>Designed for comparing human names, considering transpositions.</td><td>Moderate</td><td><strong>string-similarity</strong></td></tr>\n<tr>\n<td>Soundex and Metaphone</td><td>Phonetically encodes words to compare pronunciation.</td><td>Easy</td><td><strong>soundex</strong>, <strong>double-metaphone</strong></td></tr>\n<tr>\n<td>N-grams and Q-grams</td><td>Divides strings into character sequences for comparison.</td><td>Easy</td><td>None</td></tr>\n<tr>\n<td>Damerau-Levenshtein Distance</td><td>Extends Levenshtein with transposition consideration.</td><td>Moderate</td><td>None</td></tr>\n<tr>\n<td>Longest Common Subsequence (LCS)</td><td>Measures the length of the longest shared subsequence.</td><td>Moderate</td><td>None</td></tr>\n<tr>\n<td>Smith-Waterman Algorithm</td><td>Used for local sequence alignment in biological and text data.</td><td>Difficult</td><td><strong>needleman-wunsch</strong></td></tr>\n<tr>\n<td>Fuzzy Matching Algorithms</td><td>Utilizes approximate string matching techniques.</td><td>Moderate</td><td><strong>fuzzywuzzy</strong>, <strong>similarity</strong></td></tr>\n<tr>\n<td>Jaro Distance</td><td>Similar to Jaro-Winkler but without the prefix scaling factor.</td><td>Easy</td><td><strong>jaro-winkler</strong></td></tr>\n<tr>\n<td>Q-grams with Jaccard Similarity</td><td>Applies Jaccard similarity to Q-grams for string comparison.</td><td>Easy</td><td>None</td></tr>\n</tbody>\n</table>\n</div><h3 id=\"heading-jaccard-similarity\"><strong>Jaccard Similarity</strong></h3>\n<p>This one is easy in JavaScript, no libraries needed. Just find the intersections of the arrays created by splitting the strings into word arrays.</p>\n<pre><code class=\"lang-javascript\">    jaccardSimilarity(str1=<span class=\"hljs-string\">'I build apps'</span>, str2=<span class=\"hljs-string\">'apps that fill gaps'</span>) {\n   <span class=\"hljs-keyword\">const</span> set1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(str1.split(<span class=\"hljs-string\">' '</span>));\n   <span class=\"hljs-keyword\">const</span> set2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>(str2.split(<span class=\"hljs-string\">' '</span>));\n   <span class=\"hljs-keyword\">const</span> intersection = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([...set1].filter(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> set2.has(x)));\n   <span class=\"hljs-keyword\">const</span> union = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([...set1, ...set2]);\n   <span class=\"hljs-keyword\">const</span> similarity = intersection.size / union.size;\n   <span class=\"hljs-keyword\">return</span> similarity;\n}\n</code></pre>\n<h3 id=\"heading-levenshtein-distance\"><strong>Levenshtein Distance</strong></h3>\n<p>This one is <em>easy to understand</em>, but the JS is a bit advanced. Conceptually, the Levenshtein Distance is just the number of single character edits needed to change from one string to the other. The distance between <em>Cat</em> and <em>Bat</em> is <code>1</code>, and <em>API</em> and <em>IPA</em> is <code>2</code>.</p>\n<p>The code, however, is some matrix wizardry that I have yet to fully understand. I did get the code working though. Thanks ChatGPT. 🤝🤖</p>\n<pre><code class=\"lang-javascript\">levenshteinDistance(str1=<span class=\"hljs-string\">'Cat'</span>, str2=<span class=\"hljs-string\">'Bat'</span>) {\n   <span class=\"hljs-keyword\">const</span> len1 = str1.length;\n   <span class=\"hljs-keyword\">const</span> len2 = str2.length;\n   <span class=\"hljs-keyword\">const</span> matrix = [];\n\n   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt;= len1; i++) {\n       matrix[i] = [i];\n   }\n\n   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt;= len2; j++) {\n       matrix[<span class=\"hljs-number\">0</span>][j] = j;\n   }\n\n   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt;= len1; i++) {\n       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">1</span>; j &lt;= len2; j++) {\n           <span class=\"hljs-keyword\">const</span> cost = str1[i - <span class=\"hljs-number\">1</span>] !== str2[j - <span class=\"hljs-number\">1</span>] ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>;\n           matrix[i][j] = <span class=\"hljs-built_in\">Math</span>.min(\n               matrix[i - <span class=\"hljs-number\">1</span>][j] + <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// Deletion</span>\n               matrix[i][j - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// Insertion</span>\n               matrix[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + cost <span class=\"hljs-comment\">// Substitution or no change</span>\n           );\n       }\n   }\n\n   <span class=\"hljs-keyword\">return</span> matrix[len1][len2];\n}\n</code></pre>\n<h2 id=\"heading-sentiment-analysis\"><strong>Sentiment Analysis</strong></h2>\n<p><strong>Sentiment analysis</strong>, also known as opinion mining, is a natural language processing (NLP) technique used to determine the sentiment or emotional tone expressed in a piece of text, whether it's positive, negative, or neutral. It's widely employed in various applications such as social media monitoring, customer feedback analysis, and content recommendation.</p>\n<p>Sentiment analysis can be classified into three main categories:</p>\n<ol>\n<li><p><strong>Positive Sentiment</strong>: Indicates a positive emotional tone or favorable opinion.</p>\n</li>\n<li><p><strong>Negative Sentiment</strong>: Indicates a negative emotional tone or unfavorable opinion.</p>\n</li>\n<li><p><strong>Neutral Sentiment</strong>: Represents a lack of strong emotional tone, typically neither positive nor negative.</p>\n</li>\n</ol>\n<pre><code class=\"lang-javascript\">checkSentiment(text=<span class=\"hljs-string\">\"It's not that bad\"</span>){\n    <span class=\"hljs-comment\">//https://cdn.jsdelivr.net/npm/sentiment@5.0.2/+esm</span>\n    <span class=\"hljs-keyword\">const</span> sent = <span class=\"hljs-keyword\">new</span> sentiment();\n    <span class=\"hljs-keyword\">return</span> sent.analyze(text)\n}\n</code></pre>\n<p>Basic sentiment analysis works by looking for key words, and assuming they are being used in a certain context. But in this example, <em>not that bad</em> is a positive expression. Yet the sentiment.js library still flags it as negative.</p>\n<p><img src=\"https://community.appsmith.com/sites/default/files/styles/wide/public/2023-10/Screenshot%202023-10-13%20at%206.40.37%E2%80%AFPM.png?itok=uGx4lJKs\" alt=\"sentiment analysis\" /></p>\n<p>In cases like this, a better approach would be to use OpenAI's API for text analysis.</p>\n<h2 id=\"heading-text-cohesion\"><strong>Text Cohesion</strong></h2>\n<p><strong>Text cohesion</strong> refers to how different parts of a text are interconnected and logically structured to ensure clarity and coherence. Cohesive texts use techniques such as transitional words, pronouns, repetition, and logical organization to guide readers through the content smoothly, making it easier to understand.</p>\n<p>Here's a simple JavaScript example that calculates a basic measure of text cohesion by counting the number of transitional words (e.g., \"however,\" \"therefore\") used in a text:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">calculateTextCohesion</span>(<span class=\"hljs-params\">text</span>) </span>{\n   <span class=\"hljs-comment\">// List of common transitional words</span>\n   <span class=\"hljs-keyword\">const</span> transitionalWords = [<span class=\"hljs-string\">\"however\"</span>, <span class=\"hljs-string\">\"therefore\"</span>, <span class=\"hljs-string\">\"furthermore\"</span>, <span class=\"hljs-string\">\"in addition\"</span>, <span class=\"hljs-string\">\"consequently\"</span>, <span class=\"hljs-string\">\"nevertheless\"</span>];\n   <span class=\"hljs-comment\">// Tokenize the text into words</span>\n   <span class=\"hljs-keyword\">const</span> words = text.toLowerCase().split(<span class=\"hljs-regexp\">/\\s+/</span>);\n   <span class=\"hljs-comment\">// Count the number of transitional words in the text</span>\n   <span class=\"hljs-keyword\">const</span> transitionalWordCount = words.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">word</span> =&gt;</span> transitionalWords.includes(word)).length;\n   <span class=\"hljs-comment\">// Calculate a cohesion score based on the frequency of transitional words</span>\n   <span class=\"hljs-keyword\">const</span> totalWords = words.length;\n   <span class=\"hljs-keyword\">const</span> cohesionScore = (transitionalWordCount / totalWords) * <span class=\"hljs-number\">100</span>;\n   <span class=\"hljs-keyword\">return</span> cohesionScore;\n}\n<span class=\"hljs-comment\">// Example usage:</span>\n<span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-string\">\"However, despite the challenges, we persevered. Furthermore, our efforts paid off.\"</span>;\n<span class=\"hljs-keyword\">const</span> cohesionScore = calculateTextCohesion(text);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Text Cohesion Score: <span class=\"hljs-subst\">${cohesionScore.toFixed(<span class=\"hljs-number\">2</span>)}</span>%`</span>);\n</code></pre>\n<h2 id=\"heading-conclusion\"><strong>Conclusion</strong></h2>\n<p>I hope you've enjoyed this primer on text analysis in JavaScript. If you’d like to see more content on linguistics or natural language processing, drop a comment below and share any ideas you have. Thanks for reading!</p>\n","contentMarkdown":"> ***Lexical density measures word frequency within text.***\n\nThat sentence had a lexical density of 100%, but it's a little hard to understand. Let's unpack it.\n\n> *Lexical density, in the context of text analysis, is a metric that quantifies the proportion of significant or content-bearing words, such as nouns, verbs, adjectives, and adverbs, compared to the total number of words in a piece of text.*\n\nOk, that's a lot easier to understand, but the lexical density here is now only ~56%.\n\nLexical Density is just one metric linguists use to analyze text. There are tons of other interesting ways to analyze writing. This post will provide an introduction to some of these metrics, and how to calculate them in JavaScript.\n\n### **Intro**\n\nHey there, I'm Joseph, a senior developer advocate at [Appsmith](https://community.appsmith.com/a/josephappsmith), and I must warn you, **I am NOT a linguist!** No, I'm just a JavaScript developer who happened to build an app for a [university study](https://atruck.msu.domains/writing-architect/), went down the rabbit hole, and learned some basics about text analysis along the way. So if you see any missing or inaccurate information in this post, please feel free to drop a comment below. This is uncharted territory for me, but I'm diving in, and loving the combination of programming and written language.\n\n## **Calculating Lexical Density**\n\nIn its most basic form, this is just a ratio of `unique words / total words`. Just split the text by spaces,\n\n```javascript\nfunction calculateLexicalDensity(text='testing, testing, one, two, three') {\n    const words = text.split(/\\s+/);\n    const uniqueWords = new Set(words); // Use a Set to store unique words\n    const lexicalDensity = (uniqueWords.size / words.length) * 100;\n    return lexicalDensity;\n}\n\n// returns 80\n```\n\nIn this example we have 5 word, but one repeats. So 4/5 = 80% Lexical Density. However, this simple function would return 100% if the first 'Testing' were capitalized because Set() is case sensitive. It also doesn't filter out those non-important words like, *in*, *of*, *and*, *the*, etc. Let's fix that!\n\n```javascript\nfunction calculateLexicalDensity(text, skipWords = [\"a\",\"an\",\"the\",\"in\",\"on\",\"at\",\"of\",\"for\"]) {\n    const words = text.split(/\\s+/);\n    const uniqueWords = new Set();\n\n    words.forEach(word => {\n        const lowerCaseWord = word.toLowerCase();\n        if (!skipWords.includes(lowerCaseWord)) {\n            uniqueWords.add(lowerCaseWord);\n        }\n    });\n\n    const lexicalDensity = (uniqueWords.size / words.length) * 100;\n    return lexicalDensity;\n}\n\n// Example usage:\nconst inputText = \"This is a super basic example of lexical density calculation. This is a test.\";\nconst skipWords = [\"is\", \"a\", \"this\", \"of\"];\nconst density = calculateLexicalDensity(inputText, skipWords);\nconsole.log(`Lexical Density: ${density.toFixed(2)}%`);\n```\n\n## **Flesch-Kincaid Readability Score**\n\nNext up, we'll look at the Flesch-Kincaid Readability Score, which uses a similar ratio calculation, but this time we'll also need the number of syllables. This is just a simple function call with the syllable.js library.\n\n```javascript\ncountSyllables(string='testing, one, two three') {\n    //https://cdn.jsdelivr.net/npm/syllable@5.0.1/+esm\n        return syllable.syllable(string);\n}\n\n// returns 5\n```\n\nThe Flesh-Kincaid formula compares the number of syllables to the number of words:\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1726532776769/b7823021-bdc0-48a8-a5ad-ffb0955c3987.png align=\"center\")\n\n**And in JavaScript:**\n\n```javascript\n    // Function to calculate the Flesch-Kincaid readability score\ncalculateFleschKincaid(text) {\n   const doc = compromise(text);\n   const words = doc.terms().out('array');\n   const numWords = words.length;\n   const numSentences = doc.sentences().length;\n   const totalSyllables = words.reduce((total, word) => total + this.countSyllables(word), 0);\n   const avgSyllablesPerWord = totalSyllables / numWords;\n   const fleschKincaid = 0.39 * (numWords / numSentences) + 11.8 * avgSyllablesPerWord - 15.59;\n   return fleschKincaid.toFixed(2); // Round to two decimal places\n}\n```\n\nI took the copy from our website and ran it through this function to see where it falls on the readability score. It turns out, you have to be a *professional* to understand marketing speak about internal tools. I'll have to talk to our marketing team about this.\n\n![Flesch–Kincaid grade level](https://community.appsmith.com/sites/default/files/2023-10/Screenshot%202023-10-13%20at%204.18.47%E2%80%AFPM.png align=\"left\")\n\n| Score | School level ([US](https://en.wikipedia.org/wiki/Education_in_the_United_States)) | Notes |\n| --- | --- | --- |\n| 100.00–90.00 | 5th grade | Very easy to read. Easily understood by an average 11-year-old student. |\n| 90.0–80.0 | 6th grade | Easy to read. Conversational English for consumers. |\n| 80.0–70.0 | 7th grade | Fairly easy to read. |\n| 70.0–60.0 | 8th & 9th grade | Plain English. Easily understood by 13- to 15-year-old students. |\n| 60.0–50.0 | 10th to 12th grade | Fairly difficult to read. |\n| 50.0–30.0 | College | Difficult to read. |\n| 30.0–10.0 | College graduate | Very difficult to read. Best understood by university graduates. |\n| 10.0–0.0 | Professional | Extremely difficult to read. Best understood by university graduates. |\n\n## **String Similarity**\n\nHow about comparing two strings? This can be useful for catching misspellings, grading, or even building a text based game. So how do you compare two strings in JavaScript? Like most things in programming, there are lots of ways. But more importantly, there are a bunch of different methodologies for comparison, separate from the programming approach. As such, this section would be massive if I tried to make it comprehensive. Instead, here's a high level summary of the possible methods, and a few examples.\n\n| **Method** | **Description** | **Difficulty in JS** | **Related JS Libraries** |\n| --- | --- | --- | --- |\n| Levenshtein Distance | Measures edit operations to transform one string into another. | Moderate | **fast-levenshtein**, **natural** |\n| Jaccard Similarity | Calculates set similarity by comparing elements' intersections. | Easy | None |\n| Cosine Similarity | Computes similarity between vector representations of strings. | Moderate | **math.js**, **ml-cosine** |\n| Hamming Distance | Counts differing characters in equal-length strings. | Easy | None |\n| Dice Coefficient | Measures similarity using character bigrams. | Easy | None |\n| Jaro-Winkler Distance | Designed for comparing human names, considering transpositions. | Moderate | **string-similarity** |\n| Soundex and Metaphone | Phonetically encodes words to compare pronunciation. | Easy | **soundex**, **double-metaphone** |\n| N-grams and Q-grams | Divides strings into character sequences for comparison. | Easy | None |\n| Damerau-Levenshtein Distance | Extends Levenshtein with transposition consideration. | Moderate | None |\n| Longest Common Subsequence (LCS) | Measures the length of the longest shared subsequence. | Moderate | None |\n| Smith-Waterman Algorithm | Used for local sequence alignment in biological and text data. | Difficult | **needleman-wunsch** |\n| Fuzzy Matching Algorithms | Utilizes approximate string matching techniques. | Moderate | **fuzzywuzzy**, **similarity** |\n| Jaro Distance | Similar to Jaro-Winkler but without the prefix scaling factor. | Easy | **jaro-winkler** |\n| Q-grams with Jaccard Similarity | Applies Jaccard similarity to Q-grams for string comparison. | Easy | None |\n\n### **Jaccard Similarity**\n\nThis one is easy in JavaScript, no libraries needed. Just find the intersections of the arrays created by splitting the strings into word arrays.\n\n```javascript\n    jaccardSimilarity(str1='I build apps', str2='apps that fill gaps') {\n   const set1 = new Set(str1.split(' '));\n   const set2 = new Set(str2.split(' '));\n   const intersection = new Set([...set1].filter(x => set2.has(x)));\n   const union = new Set([...set1, ...set2]);\n   const similarity = intersection.size / union.size;\n   return similarity;\n}\n```\n\n### **Levenshtein Distance**\n\nThis one is *easy to understand*, but the JS is a bit advanced. Conceptually, the Levenshtein Distance is just the number of single character edits needed to change from one string to the other. The distance between *Cat* and *Bat* is `1`, and *API* and *IPA* is `2`.\n\nThe code, however, is some matrix wizardry that I have yet to fully understand. I did get the code working though. Thanks ChatGPT. 🤝🤖\n\n```javascript\nlevenshteinDistance(str1='Cat', str2='Bat') {\n   const len1 = str1.length;\n   const len2 = str2.length;\n   const matrix = [];\n   \n   for (let i = 0; i <= len1; i++) {\n       matrix[i] = [i];\n   }\n   \n   for (let j = 0; j <= len2; j++) {\n       matrix[0][j] = j;\n   }\n   \n   for (let i = 1; i <= len1; i++) {\n       for (let j = 1; j <= len2; j++) {\n           const cost = str1[i - 1] !== str2[j - 1] ? 1 : 0;\n           matrix[i][j] = Math.min(\n               matrix[i - 1][j] + 1, // Deletion\n               matrix[i][j - 1] + 1, // Insertion\n               matrix[i - 1][j - 1] + cost // Substitution or no change\n           );\n       }\n   }\n   \n   return matrix[len1][len2];\n}\n```\n\n## **Sentiment Analysis**\n\n**Sentiment analysis**, also known as opinion mining, is a natural language processing (NLP) technique used to determine the sentiment or emotional tone expressed in a piece of text, whether it's positive, negative, or neutral. It's widely employed in various applications such as social media monitoring, customer feedback analysis, and content recommendation.\n\nSentiment analysis can be classified into three main categories:\n\n1. **Positive Sentiment**: Indicates a positive emotional tone or favorable opinion.\n    \n2. **Negative Sentiment**: Indicates a negative emotional tone or unfavorable opinion.\n    \n3. **Neutral Sentiment**: Represents a lack of strong emotional tone, typically neither positive nor negative.\n    \n\n```javascript\ncheckSentiment(text=\"It's not that bad\"){\n    //https://cdn.jsdelivr.net/npm/sentiment@5.0.2/+esm\n    const sent = new sentiment();\n    return sent.analyze(text)\n}\n```\n\nBasic sentiment analysis works by looking for key words, and assuming they are being used in a certain context. But in this example, *not that bad* is a positive expression. Yet the sentiment.js library still flags it as negative.\n\n![sentiment analysis](https://community.appsmith.com/sites/default/files/styles/wide/public/2023-10/Screenshot%202023-10-13%20at%206.40.37%E2%80%AFPM.png?itok=uGx4lJKs align=\"left\")\n\nIn cases like this, a better approach would be to use OpenAI's API for text analysis.\n\n## **Text Cohesion**\n\n**Text cohesion** refers to how different parts of a text are interconnected and logically structured to ensure clarity and coherence. Cohesive texts use techniques such as transitional words, pronouns, repetition, and logical organization to guide readers through the content smoothly, making it easier to understand.\n\nHere's a simple JavaScript example that calculates a basic measure of text cohesion by counting the number of transitional words (e.g., \"however,\" \"therefore\") used in a text:\n\n```javascript\nfunction calculateTextCohesion(text) {\n   // List of common transitional words\n   const transitionalWords = [\"however\", \"therefore\", \"furthermore\", \"in addition\", \"consequently\", \"nevertheless\"];\n   // Tokenize the text into words\n   const words = text.toLowerCase().split(/\\s+/);\n   // Count the number of transitional words in the text\n   const transitionalWordCount = words.filter(word => transitionalWords.includes(word)).length;\n   // Calculate a cohesion score based on the frequency of transitional words\n   const totalWords = words.length;\n   const cohesionScore = (transitionalWordCount / totalWords) * 100;\n   return cohesionScore;\n}\n// Example usage:\nconst text = \"However, despite the challenges, we persevered. Furthermore, our efforts paid off.\";\nconst cohesionScore = calculateTextCohesion(text);\nconsole.log(`Text Cohesion Score: ${cohesionScore.toFixed(2)}%`);\n```\n\n## **Conclusion**\n\nI hope you've enjoyed this primer on text analysis in JavaScript. If you’d like to see more content on linguistics or natural language processing, drop a comment below and share any ideas you have. Thanks for reading!","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1697307940204/2d77f669-34c8-457d-9ede-ae69104e66b8.png","brief":"Lexical density measures word frequency within text.\n\nThat sentence had a lexical density of 100%, but it's a little hard to understand. Let's unpack it.\n\nLexical density, in the context of text analysis, is a metric that quantifies the proportion of...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":true,"originalArticleURL":"https://community.appsmith.com/content/blog/lexical-density-and-other-bedtime-stories","readTime":8,"draft":"652adcfe9c6327000fbae017","tags":["5c231c524a301053010bb6c2","5799db14becb9ebac0d6011b","56744721958ef13879b94cad","5caca6f9e80ebf2f7b830eb6","62eeba01e3a3793580e01276"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"dateUpdated":"2024-09-17T00:50:59.123Z","hasCustomDate":false,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"66e8d0b48000114d52b3e717"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"66ddcf705524b7098901bf74","createdAt":"2024-09-08T16:23:12.547Z","updatedAt":"2025-03-16T00:33:13.143Z","views":74,"isActive":true,"hasLatex":false,"popularity":7040.0309,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"Choropleth Map in FileMaker Pro Web Viewer With Leaflet.JS","subtitle":"Visualizing Aggregate Data Across Geographic Regions","cuid":"cm0ts9axq000009l894553rgg","dateAdded":"2024-09-08T16:23:12.543Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"choropleth-map-in-filemaker-pro-web-viewer-with-leafletjs","content":"<p>Choropleth maps are similar to heat maps, but with regions defined by geometry, rather than a grid. These maps are useful for displaying aggregate values for each region, like census or voting totals, average income or home cost per state, and other demographics. One of the most popular JavaScript libraries for creating Choropleth maps is Leaflet.js.</p>\n<p>In this guide, I'll show you how to use Leaflet.js in a FileMaker web viewer to build a Choropleth map that's driven by your data.</p>\n<p><strong>WATCH ON YOUTUBE:</strong><br /><a target=\"_blank\" href=\"https://youtu.be/Op6UZmh-20g\">https://youtu.be/Op6UZmh-20g</a></p>\n<p><strong>Download the demo app:</strong><br /><a target=\"_blank\" href=\"https://github.com/GreenFluxLLC/FileMaker-Experiments\">https://github.com/GreenFluxLLC/FileMaker-Experiments</a></p>\n","contentMarkdown":"Choropleth maps are similar to heat maps, but with regions defined by geometry, rather than a grid. These maps are useful for displaying aggregate values for each region, like census or voting totals, average income or home cost per state, and other demographics. One of the most popular JavaScript libraries for creating Choropleth maps is Leaflet.js.\n\nIn this guide, I'll show you how to use Leaflet.js in a FileMaker web viewer to build a Choropleth map that's driven by your data.\n\n**WATCH ON YOUTUBE:**  \n[https://youtu.be/Op6UZmh-20g](https://youtu.be/Op6UZmh-20g)\n\n**Download the demo app:**  \n[https://github.com/GreenFluxLLC/FileMaker-Experiments](https://github.com/GreenFluxLLC/FileMaker-Experiments)","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1725812468572/d3420e19-b1ee-465b-9dff-8636879773d5.png","brief":"Choropleth maps are similar to heat maps, but with regions defined by geometry, rather than a grid. These maps are useful for displaying aggregate values for each region, like census or voting totals, average income or home cost per state, and other ...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":1,"draft":"66dc5cbc8582ba0cd9ce64b8","tags":["6483259e8a9f5d9098c40f65","56744721958ef13879b94cad","5842c69f97063da359fe2d3a","57753e8457675ec2fcfd0812","5fae6c98fa438d6532c7f10b"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"dateUpdated":"2025-03-16T00:33:13.143Z","hasCustomDate":false,"series":"67d61af88a2ed4175bcf3b13","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"66ddcf705524b7098901bf74"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"66da5faad9e4245e950d7a0b","createdAt":"2024-09-06T01:49:30.847Z","updatedAt":"2025-03-16T00:40:54.201Z","views":218,"isActive":true,"hasLatex":false,"popularity":7035.026,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":1,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"Talk To Your SpreadSheet:  Apps Script + Cohere AI","subtitle":"ChatGPT Clone In Google Sheets","cuid":"cm0q260ri000h09l48vki1lka","dateAdded":"2024-09-06T01:49:30.846Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"talk-to-your-spreadsheet-apps-script-cohere-ai","content":"<p>AI can be a huge productivity boost, but it can also become a new bottleneck if it doesn't have existing access to your data. Bouncing back and forth between tabs and pasting sheets data into ChatGPT might solve one problem, but it creates another.</p>\n<p>Instead of bouncing between tabs, this guide will show you how to add an AI chat directly to your spreadsheet using an Apps Script Sidebar, and a free API key from <a target=\"_blank\" href=\"https://cohere.com/\">Cohere.com</a>.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Integrating with the Cohere API</p>\n</li>\n<li><p>Creating a Sidebar in Google Sheets</p>\n</li>\n<li><p>Displaying the API response in the Sidebar</p>\n</li>\n<li><p>Including Sheet data with the prompt, to get summary data</p>\n</li>\n</ul>\n<p>Let's get started by checking out the Cohere API docs.</p>\n<h2 id=\"heading-cohere-api-chat-endpoint\">Cohere API /chat Endpoint</h2>\n<p>Cohere's <code>/chat</code> endpoint is easy to use and extremely flexible. Just send a POST request with your message and it responds directly, without having to get an ID back and make a follow up request like many other AI APIs. Yet it can still access websites in realtime and reply with up-to-date information, instead of relying only on the model's training set. You can also choose to ground the responses to only a single website.</p>\n<p>To start a new chat, just send a <code>POST</code> request with a message property in the body. All other fields are optional.</p>\n<pre><code class=\"lang-bash\">curl --request POST \\\n  --url https://api.cohere.com/v1/chat \\\n  --header <span class=\"hljs-string\">'accept: application/json'</span> \\\n  --header <span class=\"hljs-string\">'content-type: application/json'</span> \\\n  --header <span class=\"hljs-string\">\"Authorization: bearer <span class=\"hljs-variable\">$API_KEY</span>\"</span> \\\n  --data <span class=\"hljs-string\">'{\n    \"message\": \"How can I build a Sidebar in Google Sheets?\"\n  }'</span>\n</code></pre>\n<p>You can create a free account at cohere.com and go to your <a target=\"_blank\" href=\"https://dashboard.cohere.com/api-keys\">Dashboard</a> to copy the trail API key. This will be rate limited, but it works fine for testing.</p>\n<h2 id=\"heading-sending-a-post-request-in-apps-script\">Sending a POST request in Apps Script</h2>\n<p>Open <strong>Apps Script</strong> from the Sheets <strong>Extension</strong> menu, and update the Code.gs file with the following:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callCohereAPI</span>(<span class=\"hljs-params\">apiKey=<span class=\"hljs-string\">'YOUR_API_KEY'</span>, message=<span class=\"hljs-string\">'hello'</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> apiUrl = <span class=\"hljs-string\">'https://api.cohere.com/v1/chat'</span>;\n\n  <span class=\"hljs-keyword\">const</span> payload = {\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'How can I make a Google Sheets Sidebar?'</span>\n    };\n\n  <span class=\"hljs-keyword\">const</span> options = {\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${apiKey}</span>`</span>,\n      <span class=\"hljs-string\">'Accept'</span>: <span class=\"hljs-string\">'application/json'</span>,\n      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>\n    },\n    <span class=\"hljs-attr\">payload</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(payload)\n  };\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> response = UrlFetchApp.fetch(apiUrl, options);\n    <span class=\"hljs-keyword\">const</span> jsonResponse = <span class=\"hljs-built_in\">JSON</span>.parse(response.getContentText());\n\n    <span class=\"hljs-keyword\">const</span> lastReply = jsonResponse.text;\n    Logger.log(lastReply)\n    <span class=\"hljs-keyword\">return</span> lastReply;\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Error: <span class=\"hljs-subst\">${error.message}</span>`</span>;\n  }\n}\n</code></pre>\n<p>Insert your API Key in the first line, click <strong>Save</strong>, and then run the function. You should see the AI's response in the Editor Log.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1725583941412/b44bb486-c6dd-471e-a2ba-47c7bdfefbfb.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-creating-a-sidebar\">Creating a Sidebar</h2>\n<p>Next, we'll add a sidebar to interact with the Cohere AI. So we need an HTML doc to display in the sidebar, and a function to open it.</p>\n<p>First add a new HTML file and name it Sidebar. Then paste in the following:</p>\n<pre><code class=\"lang-javascript\">&lt;!DOCTYPE html&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n      <span class=\"hljs-selector-tag\">body</span> {\n        <span class=\"hljs-attribute\">font-family</span>: Arial, sans-serif;\n      }\n      <span class=\"hljs-selector-class\">.input-field</span> {\n        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">0</span>;\n      }\n      <span class=\"hljs-selector-tag\">button</span> {\n        <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">10px</span>;\n      }\n      <span class=\"hljs-selector-class\">.result</span> {\n        <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">20px</span>;\n        <span class=\"hljs-attribute\">font-weight</span>: bold;\n        <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333</span>;\n      }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>Cohere Chat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"input-field\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"apiKey\"</span>&gt;</span>API Key:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"apiKey\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Enter your API key\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:100%;\"</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"input-field\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"message\"</span>&gt;</span>Message:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"message\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Enter your message\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:100%; height:100px;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"sendRequest()\"</span>&gt;</span>Send<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"result\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"result\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sendRequest</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> apiKey = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'apiKey'</span>).value;\n        <span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'message'</span>).value;\n\n        <span class=\"hljs-keyword\">if</span> (!apiKey || !message) {\n          <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'result'</span>).innerHTML = <span class=\"hljs-string\">\"Please provide both API key and message.\"</span>;\n          <span class=\"hljs-keyword\">return</span>;\n        }\n\n        google.script.run.withSuccessHandler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>) </span>{\n          <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'result'</span>).innerHTML = <span class=\"hljs-string\">\"Reply: \"</span> + response;\n        }).callCohereAPI(apiKey, message);\n      }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span>\n</code></pre>\n<p>Then add a function to the Code.gs to show the sidebar, and another one to add that function to the sheet menu bar.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onOpen</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> ui = SpreadsheetApp.getUi();\n  ui.createMenu(<span class=\"hljs-string\">'Custom Menu'</span>)\n    .addItem(<span class=\"hljs-string\">'Show Cohere Chat'</span>, <span class=\"hljs-string\">'showSidebar'</span>)\n    .addToUi();\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showSidebar</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> html = HtmlService.createHtmlOutputFromFile(<span class=\"hljs-string\">'Sidebar'</span>)\n      .setTitle(<span class=\"hljs-string\">'Cohere Chat'</span>);\n  SpreadsheetApp.getUi().showSidebar(html);\n}\n</code></pre>\n<p>Click Save, then refresh the sheet, and you should see the new menu item to open the sidebar. Then just paste in your API key and try asking a question.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1725584590936/29e623b4-9ae3-450b-9157-0d1a8c38f527.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-talking-to-your-spreadsheet\">Talking To Your SpreadSheet</h2>\n<p><strong>Now for the fun part!</strong> By sending the sheet data with the message, we can ask questions about it and get summary data, generate or classify text, and ask for extra details to enrich the existing dataset.</p>\n<p>Simply update the message to include a stringified version of the sheet data. You can also enable Cohere's Web Search by including it in the 'connectors', allowing it to search the web in realtime.</p>\n<pre><code class=\"lang-javascript\"> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callCohereAPI</span>(<span class=\"hljs-params\">apiKey=<span class=\"hljs-string\">'YOUR_API_KEY'</span>, message=<span class=\"hljs-string\">'hello'</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> apiUrl = <span class=\"hljs-string\">'https://api.cohere.com/v1/chat'</span>;\n  <span class=\"hljs-keyword\">const</span> ss = SpreadsheetApp.getActiveSpreadsheet();\n  <span class=\"hljs-keyword\">const</span> sh = SpreadsheetApp.getActiveSheet();\n  <span class=\"hljs-keyword\">const</span> data = sh.getDataRange().getValues()\n  <span class=\"hljs-keyword\">const</span> payload = {\n    <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${message}</span>, DATA: <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(data)}</span>`</span>,\n    <span class=\"hljs-attr\">connectors</span>: [\n      {\n        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">'web-search'</span>\n      }\n    ]\n  };\n\n  <span class=\"hljs-keyword\">const</span> options = {\n    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,\n    <span class=\"hljs-attr\">headers</span>: {\n      <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`Bearer <span class=\"hljs-subst\">${apiKey}</span>`</span>,\n      <span class=\"hljs-string\">'Accept'</span>: <span class=\"hljs-string\">'application/json'</span>,\n      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>\n    },\n    <span class=\"hljs-attr\">payload</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(payload)\n  };\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> response = UrlFetchApp.fetch(apiUrl, options);\n    <span class=\"hljs-keyword\">const</span> jsonResponse = <span class=\"hljs-built_in\">JSON</span>.parse(response.getContentText());\n\n    <span class=\"hljs-comment\">// Get only the last system message from the response</span>\n    <span class=\"hljs-keyword\">const</span> lastReply = jsonResponse.text;\n    Logger.log(lastReply)\n    <span class=\"hljs-keyword\">return</span> lastReply;\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Error: <span class=\"hljs-subst\">${error.message}</span>`</span>;\n  }\n}\n</code></pre>\n<p>Save and refresh the sheet, then reopen the sidebar. You should now be able to <em>Talk to your spreadsheet</em> and get summary data and other insights.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1725585287829/9cf65090-0830-47fd-b1d4-76be155c4da7.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-whats-next\">What's Next?</h2>\n<p>From here, you can save the response back to the sheet, update the message to only included the selected row, or send the response in an email. You could also train a model on your data and create a custom chat bot that has more background on your use case besides the sheet data.</p>\n","contentMarkdown":"AI can be a huge productivity boost, but it can also become a new bottleneck if it doesn't have existing access to your data. Bouncing back and forth between tabs and pasting sheets data into ChatGPT might solve one problem, but it creates another.\n\nInstead of bouncing between tabs, this guide will show you how to add an AI chat directly to your spreadsheet using an Apps Script Sidebar, and a free API key from [Cohere.com](https://cohere.com/).\n\n**This guide will cover:**\n\n* Integrating with the Cohere API\n    \n* Creating a Sidebar in Google Sheets\n    \n* Displaying the API response in the Sidebar\n    \n* Including Sheet data with the prompt, to get summary data\n    \n\nLet's get started by checking out the Cohere API docs.\n\n## Cohere API /chat Endpoint\n\nCohere's `/chat` endpoint is easy to use and extremely flexible. Just send a POST request with your message and it responds directly, without having to get an ID back and make a follow up request like many other AI APIs. Yet it can still access websites in realtime and reply with up-to-date information, instead of relying only on the model's training set. You can also choose to ground the responses to only a single website.\n\nTo start a new chat, just send a `POST` request with a message property in the body. All other fields are optional.\n\n```bash\ncurl --request POST \\\n  --url https://api.cohere.com/v1/chat \\\n  --header 'accept: application/json' \\\n  --header 'content-type: application/json' \\\n  --header \"Authorization: bearer $API_KEY\" \\\n  --data '{\n    \"message\": \"How can I build a Sidebar in Google Sheets?\"\n  }'\n```\n\nYou can create a free account at cohere.com and go to your [Dashboard](https://dashboard.cohere.com/api-keys) to copy the trail API key. This will be rate limited, but it works fine for testing.\n\n## Sending a POST request in Apps Script\n\nOpen **Apps Script** from the Sheets **Extension** menu, and update the Code.gs file with the following:\n\n```javascript\nfunction callCohereAPI(apiKey='YOUR_API_KEY', message='hello') {\n  const apiUrl = 'https://api.cohere.com/v1/chat';\n\n  const payload = {\n    message: 'How can I make a Google Sheets Sidebar?'\n    };\n\n  const options = {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${apiKey}`,\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    payload: JSON.stringify(payload)\n  };\n\n  try {\n    const response = UrlFetchApp.fetch(apiUrl, options);\n    const jsonResponse = JSON.parse(response.getContentText());\n    \n    const lastReply = jsonResponse.text;\n    Logger.log(lastReply)\n    return lastReply;\n  } catch (error) {\n    return `Error: ${error.message}`;\n  }\n}\n```\n\nInsert your API Key in the first line, click **Save**, and then run the function. You should see the AI's response in the Editor Log.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1725583941412/b44bb486-c6dd-471e-a2ba-47c7bdfefbfb.png align=\"center\")\n\n## Creating a Sidebar\n\nNext, we'll add a sidebar to interact with the Cohere AI. So we need an HTML doc to display in the sidebar, and a function to open it.\n\nFirst add a new HTML file and name it Sidebar. Then paste in the following:\n\n```javascript\n<!DOCTYPE html>\n<html>\n  <head>\n    <style>\n      body {\n        font-family: Arial, sans-serif;\n      }\n      .input-field {\n        margin: 10px 0;\n      }\n      button {\n        margin-top: 10px;\n      }\n      .result {\n        margin-top: 20px;\n        font-weight: bold;\n        color: #333;\n      }\n    </style>\n  </head>\n  <body>\n    <h2>Cohere Chat</h2>\n    \n    <div class=\"input-field\">\n      <label for=\"apiKey\">API Key:</label>\n      <input type=\"text\" id=\"apiKey\" placeholder=\"Enter your API key\" style=\"width:100%;\" />\n    </div>\n    \n    <div class=\"input-field\">\n      <label for=\"message\">Message:</label>\n      <textarea id=\"message\" placeholder=\"Enter your message\" style=\"width:100%; height:100px;\"></textarea>\n    </div>\n    \n    <button onclick=\"sendRequest()\">Send</button>\n    \n    <div class=\"result\" id=\"result\"></div>\n    \n    <script>\n      function sendRequest() {\n        var apiKey = document.getElementById('apiKey').value;\n        var message = document.getElementById('message').value;\n        \n        if (!apiKey || !message) {\n          document.getElementById('result').innerHTML = \"Please provide both API key and message.\";\n          return;\n        }\n\n        google.script.run.withSuccessHandler(function(response) {\n          document.getElementById('result').innerHTML = \"Reply: \" + response;\n        }).callCohereAPI(apiKey, message);\n      }\n    </script>\n  </body>\n</html>\n```\n\nThen add a function to the Code.gs to show the sidebar, and another one to add that function to the sheet menu bar.\n\n```javascript\nfunction onOpen() {\n  var ui = SpreadsheetApp.getUi();\n  ui.createMenu('Custom Menu')\n    .addItem('Show Cohere Chat', 'showSidebar')\n    .addToUi();\n}\n\nfunction showSidebar() {\n  var html = HtmlService.createHtmlOutputFromFile('Sidebar')\n      .setTitle('Cohere Chat');\n  SpreadsheetApp.getUi().showSidebar(html);\n}\n```\n\nClick Save, then refresh the sheet, and you should see the new menu item to open the sidebar. Then just paste in your API key and try asking a question.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1725584590936/29e623b4-9ae3-450b-9157-0d1a8c38f527.png align=\"center\")\n\n## Talking To Your SpreadSheet\n\n**Now for the fun part!** By sending the sheet data with the message, we can ask questions about it and get summary data, generate or classify text, and ask for extra details to enrich the existing dataset.\n\nSimply update the message to include a stringified version of the sheet data. You can also enable Cohere's Web Search by including it in the 'connectors', allowing it to search the web in realtime.\n\n```javascript\n function callCohereAPI(apiKey='YOUR_API_KEY', message='hello') {\n  const apiUrl = 'https://api.cohere.com/v1/chat';\n  const ss = SpreadsheetApp.getActiveSpreadsheet();\n  const sh = SpreadsheetApp.getActiveSheet();\n  const data = sh.getDataRange().getValues()\n  const payload = {\n    message: `${message}, DATA: ${JSON.stringify(data)}`,\n    connectors: [\n      {\n        id: 'web-search'\n      }\n    ]\n  };\n\n  const options = {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${apiKey}`,\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    payload: JSON.stringify(payload)\n  };\n\n  try {\n    const response = UrlFetchApp.fetch(apiUrl, options);\n    const jsonResponse = JSON.parse(response.getContentText());\n    \n    // Get only the last system message from the response\n    const lastReply = jsonResponse.text;\n    Logger.log(lastReply)\n    return lastReply;\n  } catch (error) {\n    return `Error: ${error.message}`;\n  }\n}\n```\n\nSave and refresh the sheet, then reopen the sidebar. You should now be able to *Talk to your spreadsheet* and get summary data and other insights.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1725585287829/9cf65090-0830-47fd-b1d4-76be155c4da7.png align=\"center\")\n\n## What's Next?\n\nFrom here, you can save the response back to the sheet, update the message to only included the selected row, or send the response in an email. You could also train a model on your data and create a custom chat bot that has more background on your use case besides the sheet data.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1725586965738/123d3174-4a61-4b04-87af-c80391fec65b.png","brief":"AI can be a huge productivity boost, but it can also become a new bottleneck if it doesn't have existing access to your data. Bouncing back and forth between tabs and pasting sheets data into ChatGPT might solve one problem, but it creates another.\nI...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":5,"draft":"66da47e00d24f39efcad7fbf","tags":["635ad52efe8087002dee4707","56744721958ef13879b9488e","56744723958ef13879b95470","5e270f8a32d5fad159b76b9a","65102817dae1474f64f9c4f7","62ed309c1e1353355ad31306"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"dateUpdated":"2025-03-16T00:40:54.201Z","hasCustomDate":false,"series":"679fa03905414f167a095994","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"66da5faad9e4245e950d7a0b"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"66d772c953591d04fd53089d","createdAt":"2024-09-03T20:34:17.199Z","updatedAt":"2025-03-16T00:40:28.891Z","views":544,"isActive":true,"hasLatex":false,"popularity":7032.1081,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":true,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":22,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"Building an Interactive XY Image Plot with Google Apps Script and Leaflet.js","subtitle":"Custom Background Image With Markers Plotted From Sheets Data","cuid":"cm0mw0xke00030al7f0wg84eb","dateAdded":"2024-09-03T20:34:17.198Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"building-an-interactive-xy-image-plot-with-google-apps-script-and-leafletjs","content":"<p>Google Maps has a ton of features for plotting points on a map, but what if you want to plot points <em>on an image</em>? These XY Image Plot maps are commonly used for floor maps, job site inspections, and even games.</p>\n<p>In this guide, I'll show you how to create an interactive map with draggable points using Leaflet.js and Google Apps Script. We'll cover everything from setting up the map to integrating data from Google Sheets, and deploying it as a web app.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Setting up Leaflet.js in a Google Apps Script HTML Service</p>\n</li>\n<li><p>Displaying Markers using data from Google Sheets</p>\n</li>\n<li><p>Updating Sheets row when a Marker is moved</p>\n</li>\n<li><p>Creating new Markers from the map and saving to Sheets</p>\n</li>\n<li><p>Deleting a marker from the web app</p>\n</li>\n</ul>\n<h3 id=\"heading-setting-up-leafletjs-in-a-google-apps-script-html-service\"><strong>Setting up Leaflet.js in a Google Apps Script HTML Service</strong></h3>\n<p><a target=\"_blank\" href=\"https://leafletjs.com/\">Leaflet.js</a> is one of the most popular open-source mapping libraries. It's light-weight, easy to use, and had great documentation. They support a ton of different map types, including \"<a target=\"_blank\" href=\"https://leafletjs.com/examples/crs-simple/crs-simple.html\">CRS.Simple</a>\", or Coordinate Reference System, which allows you to supply a background image.</p>\n<h3 id=\"heading-google-sheets-set-up\">Google Sheets Set Up</h3>\n<p>Start out by creating a sheet named <code>map_pin</code> with the following structure:</p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>id</td><td>title</td><td>x</td><td>y</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td><td>test1</td><td>10</td><td>30</td></tr>\n<tr>\n<td>2</td><td>test2</td><td>50</td><td>80</td></tr>\n</tbody>\n</table>\n</div><p>Then open Apps Script from the Extensions menu.</p>\n<h3 id=\"heading-creating-html-file\">Creating HTML File</h3>\n<p>First, we'll start with the basic example from the Leaflet docs, just to get the library working. You can see the full example in their quick start guide, <a target=\"_blank\" href=\"https://leafletjs.com/examples/quick-start/\">here</a>.</p>\n<p>Add a new HTML File named Index, and set the content to:</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Quick Start - Leaflet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-id\">#map</span> {\n      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">400px</span>;\n    }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"map\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">var</span> map = L.map(<span class=\"hljs-string\">'map'</span>).setView([<span class=\"hljs-number\">40.73</span>, <span class=\"hljs-number\">-73.99</span>], <span class=\"hljs-number\">13</span>);\n\n    L.tileLayer(<span class=\"hljs-string\">'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'</span>, {\n      <span class=\"hljs-attr\">maxZoom</span>: <span class=\"hljs-number\">19</span>,\n      <span class=\"hljs-attr\">attribution</span>: <span class=\"hljs-string\">'© OpenStreetMap'</span>\n    }).addTo(map);\n\n    <span class=\"hljs-keyword\">var</span> marker = L.marker([<span class=\"hljs-number\">40.73</span>, <span class=\"hljs-number\">-73.99</span>]).addTo(map)\n      .bindPopup(<span class=\"hljs-string\">'Test Popup Message'</span>)\n      .openPopup();\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>Then update the Code.gs file with:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doGet</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> html = HtmlService.createHtmlOutputFromFile(<span class=\"hljs-string\">'Index'</span>)\n    .setTitle(<span class=\"hljs-string\">'Map with Draggable Points'</span>)\n    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);\n  <span class=\"hljs-keyword\">return</span> html;\n}\n</code></pre>\n<p>Save, and then click Deploy, and publish as a web app. Then open the link for the new deployment and you should see Leaflet.js displaying a map on New York.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1725276194580/de10090c-7a53-4943-b96c-1792da69b88a.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, that's the regular map example using Leaflet. Now on to the CRS.Simple map type, which allows supplying a background image.</p>\n<p>Update the HTML with this example from the Leaflet Tutorials.</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>CRS Simple Example - Leaflet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-id\">#map</span> {\n      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">400px</span>;\n      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">600px</span>;\n    }\n    <span class=\"hljs-selector-tag\">body</span> {\n      <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;\n    }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"map\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-comment\">// Set up the map with a simple CRS (no geographic projection)</span>\n    <span class=\"hljs-keyword\">var</span> map = L.map(<span class=\"hljs-string\">'map'</span>, {\n      <span class=\"hljs-attr\">crs</span>: L.CRS.Simple,\n      <span class=\"hljs-attr\">minZoom</span>: <span class=\"hljs-number\">-1</span>,\n      <span class=\"hljs-attr\">maxZoom</span>: <span class=\"hljs-number\">4</span>\n    });\n\n    <span class=\"hljs-comment\">// Define the dimensions of the image</span>\n    <span class=\"hljs-keyword\">var</span> bounds = [[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">1000</span>]];\n    <span class=\"hljs-keyword\">var</span> image = L.imageOverlay(<span class=\"hljs-string\">'https://leafletjs.com/examples/crs-simple/uqm_map_full.png'</span>, bounds).addTo(map);\n\n    <span class=\"hljs-comment\">// Set the initial view of the map to show the whole image</span>\n    map.fitBounds(bounds);\n\n    <span class=\"hljs-comment\">// Optional: Add a marker or other elements to the map</span>\n    <span class=\"hljs-keyword\">var</span> marker = L.marker([<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">500</span>]).addTo(map)\n      .bindPopup(<span class=\"hljs-string\">'Center of the image'</span>)\n      .openPopup();\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>Here we are supplying an image of 1000 x 1000 pixels, then setting the center marker at <code>500, 500</code>.</p>\n<p>Click <strong>Save</strong>, then <strong>Deploy&gt;Test Deployments</strong>, to see the new map type. You should now have a map with a background image and a marker plotted in the center.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1725281356836/23b771ed-936b-404f-a102-d05e60808aaf.png\" alt class=\"image--center mx-auto\" /></p>\n<h3 id=\"heading-initializing-a-map-with-data-from-google-sheets\"><strong>Initializing a Map with Data from Google Sheets</strong></h3>\n<p>Next, we'll use data from the sheet to populate a set of markers on the map.</p>\n<p>First, add a function to the Code.gs file to get the marker locations:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPinData</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-keyword\">const</span> ss = SpreadsheetApp.getActiveSpreadsheet();\n  <span class=\"hljs-keyword\">const</span> sh = ss.getSheetByName(<span class=\"hljs-string\">'map_pin'</span>);\n  <span class=\"hljs-keyword\">const</span> data = sh.getDataRange().getValues();\n  <span class=\"hljs-keyword\">const</span> json = arrayToJSON(data);\n  <span class=\"hljs-comment\">//Logger.log(json);</span>\n  <span class=\"hljs-keyword\">return</span> json\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">arrayToJSON</span>(<span class=\"hljs-params\">data=getPinData()</span>)</span>{\n  <span class=\"hljs-keyword\">const</span> headers = data[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">const</span> rows = data.slice(<span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">let</span> jsonData = [];\n  <span class=\"hljs-keyword\">for</span>(row <span class=\"hljs-keyword\">of</span> rows){\n    <span class=\"hljs-keyword\">const</span> obj = {};\n    headers.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">h,i</span>)=&gt;</span>obj[h] = row[i]);\n    jsonData.push(obj)\n  }\n  <span class=\"hljs-comment\">//Logger.log(jsonData)</span>\n  <span class=\"hljs-keyword\">return</span> jsonData\n}\n</code></pre>\n<p>Here I'm returning the pins as JSON so they're easier to work with in the HTML in the next section.</p>\n<p>Now add a function to the HTML to loop over this JSON and create the map pins after the map has loaded.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// Add map pins from sheet data</span>\n    google.script.run.withSuccessHandler(addMarkers).getPinData();\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addMarkers</span>(<span class=\"hljs-params\">mapPinData</span>) </span>{\n      mapPinData.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">pin</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> marker = L.marker([pin.x, pin.y], {\n          <span class=\"hljs-attr\">draggable</span>: <span class=\"hljs-literal\">true</span>\n        }).addTo(map);\n\n        marker.bindPopup(<span class=\"hljs-string\">`&lt;b&gt;<span class=\"hljs-subst\">${pin.title}</span>`</span>).openPopup();\n\n        marker.on(<span class=\"hljs-string\">'dragend'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n          <span class=\"hljs-keyword\">const</span> latLng = e.target.getLatLng();\n          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Marker <span class=\"hljs-subst\">${pin.title}</span> moved to: <span class=\"hljs-subst\">${latLng.lat}</span>, <span class=\"hljs-subst\">${latLng.lng}</span>`</span>);\n        });\n      });\n    }\n</code></pre>\n<p>Save, and then open the test deployment. You should now have markers generated from your sheet data!</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1725389885086/b435fccc-a6a1-4c59-8e18-acdd52987d56.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Each pin has a popup with the title from that row. The pins are draggable at this point, but we still need a function to save the new position.</p>\n<h2 id=\"heading-saving-marker-position-when-dragged\">Saving Marker Position When Dragged</h2>\n<p>To save the new position, we need two functions: one in the HTML to capture the event on the client side, and one to save the new position on the server side, in the Code.gs file.</p>\n<p>Update the HTML with:</p>\n<pre><code class=\"lang-javascript\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addMarkers</span>(<span class=\"hljs-params\">mapPinData</span>) </span>{\n      mapPinData.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">pin</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> { id, title, x, y } = pin;\n        <span class=\"hljs-keyword\">const</span> marker = L.marker([x, y], {\n          <span class=\"hljs-attr\">draggable</span>: <span class=\"hljs-literal\">true</span>\n        }).addTo(map);\n\n        marker.bindPopup(<span class=\"hljs-string\">`&lt;b&gt;<span class=\"hljs-subst\">${title}</span>&lt;/b&gt;`</span>).openPopup();\n\n        marker.on(<span class=\"hljs-string\">'dragend'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n          <span class=\"hljs-keyword\">const</span> latLng = e.target.getLatLng();\n          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Marker <span class=\"hljs-subst\">${title}</span> moved to: <span class=\"hljs-subst\">${latLng.lat}</span>, <span class=\"hljs-subst\">${latLng.lng}</span>`</span>);\n          saveMarkerPosition({ id, title, <span class=\"hljs-attr\">lat</span>: latLng.lat, <span class=\"hljs-attr\">lng</span>: latLng.lng });\n        });\n      });\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">saveMarkerPosition</span>(<span class=\"hljs-params\">{ id, title, lat, lng }</span>) </span>{\n      google.script.run.saveMarkerPosition({ id, title, lat, lng });\n    }\n</code></pre>\n<p>And then add a function to the Code.gs file to save the location:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">saveMarkerPosition</span>(<span class=\"hljs-params\">{ id, lat, lng }</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> ss = SpreadsheetApp.getActiveSpreadsheet();\n  <span class=\"hljs-keyword\">const</span> sh = ss.getSheetByName(<span class=\"hljs-string\">'map_pin'</span>);\n  <span class=\"hljs-keyword\">const</span> data = sh.getDataRange().getValues();\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; data.length; i++) {\n    <span class=\"hljs-keyword\">if</span> (data[i][<span class=\"hljs-number\">0</span>] === id) {  <span class=\"hljs-comment\">// ID column (index 0)</span>\n      sh.getRange(i + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>).setValue(lat);  <span class=\"hljs-comment\">// latitude column </span>\n      sh.getRange(i + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>).setValue(lng);  <span class=\"hljs-comment\">// longitude column </span>\n      <span class=\"hljs-keyword\">break</span>;\n    }\n  }\n}\n</code></pre>\n<p>Save, and refresh the test deployment. You should now see the sheet update when a marker is dragged!</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1725391537794/72d5c1fb-657c-442e-8af3-a7b2b57ba0cb.gif\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-adding-new-points\">Adding New Points</h2>\n<p>We can now move the existing points, but what about adding new ones? Again, we'll need two functions, one in the HTML, and one in the Code.gs file.</p>\n<p>First, add a function to the HTML to open a prompt when the user clicks an empty spot on the map, and pass the value to a server function.</p>\n<pre><code class=\"lang-javascript\">    <span class=\"hljs-comment\">// Function to add a new pin</span>\n    map.on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n      <span class=\"hljs-keyword\">const</span> latLng = e.latlng;\n      <span class=\"hljs-keyword\">const</span> title = prompt(<span class=\"hljs-string\">'Enter a title for the new pin:'</span>);\n      <span class=\"hljs-keyword\">if</span> (title) {\n        google.script.run.withSuccessHandler(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">id</span>) </span>{\n          addNewMarker({ id, title, <span class=\"hljs-attr\">lat</span>: latLng.lat, <span class=\"hljs-attr\">lng</span>: latLng.lng });\n        }).addNewPin({ title, <span class=\"hljs-attr\">lat</span>: latLng.lat, <span class=\"hljs-attr\">lng</span>: latLng.lng });\n      }\n    });\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addNewMarker</span>(<span class=\"hljs-params\">{ id, title, lat, lng }</span>) </span>{\n      <span class=\"hljs-keyword\">const</span> marker = L.marker([lat, lng], {\n        <span class=\"hljs-attr\">draggable</span>: <span class=\"hljs-literal\">true</span>\n      }).addTo(map);\n\n      marker.bindPopup(<span class=\"hljs-string\">`&lt;b&gt;<span class=\"hljs-subst\">${title}</span>&lt;/b&gt;`</span>).openPopup();\n\n      marker.on(<span class=\"hljs-string\">'dragend'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n        <span class=\"hljs-keyword\">const</span> latLng = e.target.getLatLng();\n        saveMarkerPosition({ id, title, <span class=\"hljs-attr\">lat</span>: latLng.lat, <span class=\"hljs-attr\">lng</span>: latLng.lng });\n      });\n    }\n</code></pre>\n<p>Then add the function to the Code.gs to save the new row.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addNewPin</span>(<span class=\"hljs-params\">{ title, lat, lng }</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> ss = SpreadsheetApp.getActiveSpreadsheet();\n  <span class=\"hljs-keyword\">const</span> sh = ss.getSheetByName(<span class=\"hljs-string\">'map_pin'</span>);\n\n  <span class=\"hljs-comment\">// Check if there are any rows present, if not initialize ID</span>\n  <span class=\"hljs-keyword\">const</span> lastRow = sh.getLastRow();\n  <span class=\"hljs-keyword\">let</span> newId = <span class=\"hljs-number\">1</span>;\n\n  <span class=\"hljs-keyword\">if</span> (lastRow &gt; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">const</span> lastId = sh.getRange(lastRow, <span class=\"hljs-number\">1</span>).getValue(); \n    newId = lastId + <span class=\"hljs-number\">1</span>;\n  }\n\n  sh.appendRow([newId, title, lat, lng]);\n\n  <span class=\"hljs-keyword\">return</span> newId;  \n}\n</code></pre>\n<p>Save once more and refresh the test deployment. Now when you click an empty spot, you can enter a title and save a new marker!</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1725393299701/f74f0782-a908-443a-9a39-89d6708a99cb.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-deleting-a-marker\">Deleting A Marker</h2>\n<p>Lastly, we should add a way to delete markers, giving us a full CRUD app in map view.</p>\n<p>Update the add marker function to give the popup a delete button:</p>\n<pre><code class=\"lang-javascript\">\n      <span class=\"hljs-keyword\">const</span> popupContent = <span class=\"hljs-string\">`&lt;b&gt;<span class=\"hljs-subst\">${title}</span>&lt;/b&gt;&lt;br&gt;&lt;button onclick=\"deleteMarker(<span class=\"hljs-subst\">${id}</span>)\"&gt;Delete Marker&lt;/button&gt;`</span>;\n      marker.bindPopup(popupContent).openPopup();\n</code></pre>\n<p>And then add a function for deleting from the client side:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// Function to delete a marker</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deleteMarker</span>(<span class=\"hljs-params\">id</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> confirmed = confirm(<span class=\"hljs-string\">'Are you sure you want to delete this marker?'</span>);\n    <span class=\"hljs-keyword\">if</span> (confirmed) {\n      google.script.run.withSuccessHandler(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-comment\">// Refresh the markers after deletion</span>\n        google.script.run.withSuccessHandler(addMarkers).getPinData();\n      }).deleteMarker(id);\n    }\n  }\n</code></pre>\n<p>Then add the matching function to the Code.gs file:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deleteMarker</span>(<span class=\"hljs-params\">id</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> ss = SpreadsheetApp.getActiveSpreadsheet();\n  <span class=\"hljs-keyword\">const</span> sh = ss.getSheetByName(<span class=\"hljs-string\">'map_pin'</span>);\n  <span class=\"hljs-keyword\">const</span> data = sh.getDataRange().getValues();\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; data.length; i++) {\n    <span class=\"hljs-keyword\">if</span> (data[i][<span class=\"hljs-number\">0</span>] === id) {  <span class=\"hljs-comment\">// ID column (index 0)</span>\n      sh.deleteRow(i + <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// Delete the row</span>\n      <span class=\"hljs-keyword\">break</span>;\n    }\n  }\n}\n</code></pre>\n<h2 id=\"heading-whats-next\">What's Next?</h2>\n<p>There's a ton more you could do from here, like adding other data points to each marker, dynamic background images, or other click and drag interactions. You could even make a game! Got an idea for a use case? Drop a comment below!</p>\n","contentMarkdown":"Google Maps has a ton of features for plotting points on a map, but what if you want to plot points *on an image*? These XY Image Plot maps are commonly used for floor maps, job site inspections, and even games.\n\nIn this guide, I'll show you how to create an interactive map with draggable points using Leaflet.js and Google Apps Script. We'll cover everything from setting up the map to integrating data from Google Sheets, and deploying it as a web app.\n\n**This guide will cover:**\n\n* Setting up Leaflet.js in a Google Apps Script HTML Service\n    \n* Displaying Markers using data from Google Sheets\n    \n* Updating Sheets row when a Marker is moved\n    \n* Creating new Markers from the map and saving to Sheets\n    \n* Deleting a marker from the web app\n    \n\n### **Setting up Leaflet.js in a Google Apps Script HTML Service**\n\n[Leaflet.js](https://leafletjs.com/) is one of the most popular open-source mapping libraries. It's light-weight, easy to use, and had great documentation. They support a ton of different map types, including \"[CRS.Simple](https://leafletjs.com/examples/crs-simple/crs-simple.html)\", or Coordinate Reference System, which allows you to supply a background image.\n\n### Google Sheets Set Up\n\nStart out by creating a sheet named `map_pin` with the following structure:\n\n| id | title | x | y |\n| --- | --- | --- | --- |\n| 1 | test1 | 10 | 30 |\n| 2 | test2 | 50 | 80 |\n\nThen open Apps Script from the Extensions menu.\n\n### Creating HTML File\n\nFirst, we'll start with the basic example from the Leaflet docs, just to get the library working. You can see the full example in their quick start guide, [here](https://leafletjs.com/examples/quick-start/).\n\nAdd a new HTML File named Index, and set the content to:\n\n```xml\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Quick Start - Leaflet</title>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\n  <style>\n    #map {\n      height: 400px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"map\"></div>\n\n  <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\n  <script>\n    var map = L.map('map').setView([40.73, -73.99], 13);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 19,\n      attribution: '© OpenStreetMap'\n    }).addTo(map);\n\n    var marker = L.marker([40.73, -73.99]).addTo(map)\n      .bindPopup('Test Popup Message')\n      .openPopup();\n  </script>\n</body>\n</html>\n```\n\nThen update the Code.gs file with:\n\n```javascript\nfunction doGet() {\n  const html = HtmlService.createHtmlOutputFromFile('Index')\n    .setTitle('Map with Draggable Points')\n    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);\n  return html;\n}\n```\n\nSave, and then click Deploy, and publish as a web app. Then open the link for the new deployment and you should see Leaflet.js displaying a map on New York.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1725276194580/de10090c-7a53-4943-b96c-1792da69b88a.png align=\"center\")\n\nOk, that's the regular map example using Leaflet. Now on to the CRS.Simple map type, which allows supplying a background image.\n\nUpdate the HTML with this example from the Leaflet Tutorials.\n\n```xml\n<!DOCTYPE html>\n<html>\n<head>\n  <title>CRS Simple Example - Leaflet</title>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.css\" />\n  <style>\n    #map {\n      height: 400px;\n      width: 600px;\n    }\n    body {\n      margin: 0;\n      padding: 0;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"map\"></div>\n\n  <script src=\"https://unpkg.com/leaflet@1.9.3/dist/leaflet.js\"></script>\n  <script>\n    // Set up the map with a simple CRS (no geographic projection)\n    var map = L.map('map', {\n      crs: L.CRS.Simple,\n      minZoom: -1,\n      maxZoom: 4\n    });\n\n    // Define the dimensions of the image\n    var bounds = [[0, 0], [1000, 1000]];\n    var image = L.imageOverlay('https://leafletjs.com/examples/crs-simple/uqm_map_full.png', bounds).addTo(map);\n\n    // Set the initial view of the map to show the whole image\n    map.fitBounds(bounds);\n\n    // Optional: Add a marker or other elements to the map\n    var marker = L.marker([500, 500]).addTo(map)\n      .bindPopup('Center of the image')\n      .openPopup();\n  </script>\n</body>\n</html>\n```\n\nHere we are supplying an image of 1000 x 1000 pixels, then setting the center marker at `500, 500`.\n\nClick **Save**, then **Deploy&gt;Test Deployments**, to see the new map type. You should now have a map with a background image and a marker plotted in the center.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1725281356836/23b771ed-936b-404f-a102-d05e60808aaf.png align=\"center\")\n\n### **Initializing a Map with Data from Google Sheets**\n\nNext, we'll use data from the sheet to populate a set of markers on the map.\n\nFirst, add a function to the Code.gs file to get the marker locations:\n\n```javascript\nfunction getPinData(){\n  const ss = SpreadsheetApp.getActiveSpreadsheet();\n  const sh = ss.getSheetByName('map_pin');\n  const data = sh.getDataRange().getValues();\n  const json = arrayToJSON(data);\n  //Logger.log(json);\n  return json\n}\n\nfunction arrayToJSON(data=getPinData()){\n  const headers = data[0];\n  const rows = data.slice(1);\n  let jsonData = [];\n  for(row of rows){\n    const obj = {};\n    headers.forEach((h,i)=>obj[h] = row[i]);\n    jsonData.push(obj)\n  }\n  //Logger.log(jsonData)\n  return jsonData\n}\n```\n\nHere I'm returning the pins as JSON so they're easier to work with in the HTML in the next section.\n\nNow add a function to the HTML to loop over this JSON and create the map pins after the map has loaded.\n\n```javascript\n// Add map pins from sheet data\n    google.script.run.withSuccessHandler(addMarkers).getPinData();\n\n    function addMarkers(mapPinData) {\n      mapPinData.forEach(pin => {\n        const marker = L.marker([pin.x, pin.y], {\n          draggable: true\n        }).addTo(map);\n\n        marker.bindPopup(`<b>${pin.title}`).openPopup();\n\n        marker.on('dragend', function(e) {\n          const latLng = e.target.getLatLng();\n          console.log(`Marker ${pin.title} moved to: ${latLng.lat}, ${latLng.lng}`);\n        });\n      });\n    } \n```\n\nSave, and then open the test deployment. You should now have markers generated from your sheet data!\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1725389885086/b435fccc-a6a1-4c59-8e18-acdd52987d56.png align=\"center\")\n\nEach pin has a popup with the title from that row. The pins are draggable at this point, but we still need a function to save the new position.\n\n## Saving Marker Position When Dragged\n\nTo save the new position, we need two functions: one in the HTML to capture the event on the client side, and one to save the new position on the server side, in the Code.gs file.\n\nUpdate the HTML with:\n\n```javascript\n    function addMarkers(mapPinData) {\n      mapPinData.forEach(pin => {\n        const { id, title, x, y } = pin;\n        const marker = L.marker([x, y], {\n          draggable: true\n        }).addTo(map);\n\n        marker.bindPopup(`<b>${title}</b>`).openPopup();\n\n        marker.on('dragend', function(e) {\n          const latLng = e.target.getLatLng();\n          console.log(`Marker ${title} moved to: ${latLng.lat}, ${latLng.lng}`);\n          saveMarkerPosition({ id, title, lat: latLng.lat, lng: latLng.lng });\n        });\n      });\n    }\n\n    function saveMarkerPosition({ id, title, lat, lng }) {\n      google.script.run.saveMarkerPosition({ id, title, lat, lng });\n    }\n```\n\nAnd then add a function to the Code.gs file to save the location:\n\n```javascript\nfunction saveMarkerPosition({ id, lat, lng }) {\n  const ss = SpreadsheetApp.getActiveSpreadsheet();\n  const sh = ss.getSheetByName('map_pin');\n  const data = sh.getDataRange().getValues();\n\n  for (let i = 1; i < data.length; i++) {\n    if (data[i][0] === id) {  // ID column (index 0)\n      sh.getRange(i + 1, 3).setValue(lat);  // latitude column \n      sh.getRange(i + 1, 4).setValue(lng);  // longitude column \n      break;\n    }\n  }\n}\n```\n\nSave, and refresh the test deployment. You should now see the sheet update when a marker is dragged!\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1725391537794/72d5c1fb-657c-442e-8af3-a7b2b57ba0cb.gif align=\"center\")\n\n## Adding New Points\n\nWe can now move the existing points, but what about adding new ones? Again, we'll need two functions, one in the HTML, and one in the Code.gs file.\n\nFirst, add a function to the HTML to open a prompt when the user clicks an empty spot on the map, and pass the value to a server function.\n\n```javascript\n    // Function to add a new pin\n    map.on('click', function(e) {\n      const latLng = e.latlng;\n      const title = prompt('Enter a title for the new pin:');\n      if (title) {\n        google.script.run.withSuccessHandler(function(id) {\n          addNewMarker({ id, title, lat: latLng.lat, lng: latLng.lng });\n        }).addNewPin({ title, lat: latLng.lat, lng: latLng.lng });\n      }\n    });\n\n    function addNewMarker({ id, title, lat, lng }) {\n      const marker = L.marker([lat, lng], {\n        draggable: true\n      }).addTo(map);\n\n      marker.bindPopup(`<b>${title}</b>`).openPopup();\n\n      marker.on('dragend', function(e) {\n        const latLng = e.target.getLatLng();\n        saveMarkerPosition({ id, title, lat: latLng.lat, lng: latLng.lng });\n      });\n    }\n```\n\nThen add the function to the Code.gs to save the new row.\n\n```javascript\nfunction addNewPin({ title, lat, lng }) {\n  const ss = SpreadsheetApp.getActiveSpreadsheet();\n  const sh = ss.getSheetByName('map_pin');\n  \n  // Check if there are any rows present, if not initialize ID\n  const lastRow = sh.getLastRow();\n  let newId = 1;\n  \n  if (lastRow > 0) {\n    const lastId = sh.getRange(lastRow, 1).getValue(); \n    newId = lastId + 1;\n  }\n\n  sh.appendRow([newId, title, lat, lng]);\n\n  return newId;  \n}\n```\n\nSave once more and refresh the test deployment. Now when you click an empty spot, you can enter a title and save a new marker!\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1725393299701/f74f0782-a908-443a-9a39-89d6708a99cb.png align=\"center\")\n\n## Deleting A Marker\n\nLastly, we should add a way to delete markers, giving us a full CRUD app in map view.\n\nUpdate the add marker function to give the popup a delete button:\n\n```javascript\n\n      const popupContent = `<b>${title}</b><br><button onclick=\"deleteMarker(${id})\">Delete Marker</button>`;\n      marker.bindPopup(popupContent).openPopup();\n```\n\nAnd then add a function for deleting from the client side:\n\n```javascript\n// Function to delete a marker\n  function deleteMarker(id) {\n    const confirmed = confirm('Are you sure you want to delete this marker?');\n    if (confirmed) {\n      google.script.run.withSuccessHandler(() => {\n        // Refresh the markers after deletion\n        google.script.run.withSuccessHandler(addMarkers).getPinData();\n      }).deleteMarker(id);\n    }\n  }\n```\n\nThen add the matching function to the Code.gs file:\n\n```javascript\nfunction deleteMarker(id) {\n  const ss = SpreadsheetApp.getActiveSpreadsheet();\n  const sh = ss.getSheetByName('map_pin');\n  const data = sh.getDataRange().getValues();\n\n  for (let i = 1; i < data.length; i++) {\n    if (data[i][0] === id) {  // ID column (index 0)\n      sh.deleteRow(i + 1);  // Delete the row\n      break;\n    }\n  }\n}\n```\n\n## What's Next?\n\nThere's a ton more you could do from here, like adding other data points to each marker, dynamic background images, or other click and drag interactions. You could even make a game! Got an idea for a use case? Drop a comment below!","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1725394906396/98552e90-8fed-45f0-85a3-c75163245a8a.png","brief":"Google Maps has a ton of features for plotting points on a map, but what if you want to plot points on an image? These XY Image Plot maps are commonly used for floor maps, job site inspections, and even games.\nIn this guide, I'll show you how to crea...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":7,"draft":"66d4f4441c2c09f80e3c1db1","tags":["5e270f8a32d5fad159b76b9a","5842c69f97063da359fe2d3a","57753e8457675ec2fcfd0812","56e669b622f645300192ed17","56744721958ef13879b94cad"],"publication":"60771c264155da32fc83ad6e","series":"679fa03905414f167a095994","isNewsletterActivated":true,"coAuthors":[],"dateFeatured":"2024-09-04T06:48:01.295Z","badges":[{"badgeId":"5f741eac07891b4f5b9ec8cd","name":"postFeaturedHN","_id":"66d802a1352131d4fff3de9d"}],"dateUpdated":"2025-03-16T00:40:28.891Z","hasCustomDate":false,"pollOptions":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"66d772c953591d04fd53089d"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"66ce3cceeb4d19ab3f84eb64","createdAt":"2024-08-27T20:53:34.487Z","updatedAt":"2025-03-16T00:39:44.179Z","views":185,"isActive":true,"hasLatex":false,"popularity":7017.3514,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"Generating Heatmaps in Google Sheets using Apps Script and ECharts","subtitle":"Interactive Heatmap in under 100 lines of code!","cuid":"cm0cwmrv800010al7arxcfe6o","dateAdded":"2024-08-27T20:53:34.484Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"generating-heatmaps-in-google-sheets-using-apps-script-and-echarts","content":"<p>Heatmaps are a great way to visualize aggregate data so you can easily see trends and spikes in the data. They can summarize data across a range of time, display traffic and weather patterns, or any other series of data comparing two axis. One popular solution for creating Heatmaps, is the Echarts library from The Apache Software Foundation.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724754977046/8ce26879-acc6-43ca-a9f6-6d492b18f297.png\" alt class=\"image--center mx-auto\" /></p>\n<p>I've used Echarts in a few other platforms recently, and I wanted to see if I could get it working in Google Sheets. It was easy to get a sample chart with hard-coded data to display, but connecting the real sheet data was a bit challenging. So I wanted to share this guide now that I have it working.</p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Displaying a static EChart in a modal using Apps Script</p>\n</li>\n<li><p>Writing JavaScript to aggregate and transform sheet data</p>\n</li>\n<li><p>Inserting the sheet data into the HTML template using withSuccessHandler</p>\n</li>\n</ul>\n<h2 id=\"heading-echarts-basics\">ECharts Basics</h2>\n<p>ECharts works by selecting a DOM element, and running echarts.init(el) to create a chart instance. Then, the setOption(option) method is used to pass in the specific chart type and data.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724756552394/b8949d44-8522-45a0-b956-064be0bae51f.png\" alt class=\"image--center mx-auto\" /></p>\n<p>First we'll try to get this example displaying in a modal using Apps Script. You can follow along by copying the <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1D-MwN9Khtc1wqI7XddLm6hd9VdH_7FwBoNWsm2hoSnE/edit?usp=sharing\">sample Sales data</a> used in this example, or modify the code for your column names.</p>\n<p>Open Apps Scripts from the Extension menu in Google Sheets, and click the + to add a new file. Then select HTML and name it Heatmap.</p>\n<p>Then paste in this code:</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chart\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width: 600px; height: 400px;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">const</span> chart = echarts.init(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'chart'</span>));\n      <span class=\"hljs-keyword\">const</span> option = {\n        <span class=\"hljs-attr\">xAxis</span>: {\n          <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'category'</span>,\n          <span class=\"hljs-attr\">data</span>: [<span class=\"hljs-string\">'Mon'</span>, <span class=\"hljs-string\">'Tue'</span>, <span class=\"hljs-string\">'Wed'</span>, <span class=\"hljs-string\">'Thu'</span>, <span class=\"hljs-string\">'Fri'</span>, <span class=\"hljs-string\">'Sat'</span>, <span class=\"hljs-string\">'Sun'</span>]\n        },\n        <span class=\"hljs-attr\">yAxis</span>: {\n          <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'value'</span>\n        },\n        <span class=\"hljs-attr\">series</span>: [\n          {\n            <span class=\"hljs-attr\">data</span>: [<span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">230</span>, <span class=\"hljs-number\">224</span>, <span class=\"hljs-number\">218</span>, <span class=\"hljs-number\">135</span>, <span class=\"hljs-number\">147</span>, <span class=\"hljs-number\">260</span>],\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'line'</span>\n          }\n        ]\n      };\n      chart.setOption(option);\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>Next, paste this in the Code.gs file:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createHeatmap</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> html = HtmlService.createHtmlOutputFromFile(<span class=\"hljs-string\">'Heatmap'</span>)\n      .setWidth(<span class=\"hljs-number\">600</span>)\n      .setHeight(<span class=\"hljs-number\">400</span>);\n  SpreadsheetApp.getUi().showModalDialog(html, <span class=\"hljs-string\">'Sales Data Heatmap'</span>);\n}\n</code></pre>\n<p>Click save, then select the createHeatmap function in the dropdown and run it. You should see a modal in the sheet with a basic line chart.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724757484741/89f9622e-e3be-4e28-a90f-9f5475d0ccf8.png\" alt class=\"image--center mx-auto\" /></p>\n<p>You can try out other chart types by copying the option object from the Echarts examples. Update the option with this to create a Sankey chart:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> option = {\n  <span class=\"hljs-attr\">series</span>: {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'sankey'</span>,\n    <span class=\"hljs-attr\">layout</span>: <span class=\"hljs-string\">'none'</span>,\n    <span class=\"hljs-attr\">emphasis</span>: { <span class=\"hljs-attr\">focus</span>: <span class=\"hljs-string\">'adjacency'</span> },\n    <span class=\"hljs-attr\">data</span>: [\n      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'a'</span> },\n      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'b'</span> },\n      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'a1'</span> },\n      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'a2'</span> },\n      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'b1'</span> },\n      { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'c'</span> }\n    ],\n    <span class=\"hljs-attr\">links</span>: [\n      { <span class=\"hljs-attr\">source</span>: <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">'a1'</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">5</span> },\n      { <span class=\"hljs-attr\">source</span>: <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">'a2'</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">3</span> },\n      { <span class=\"hljs-attr\">source</span>: <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">'b1'</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">8</span> },\n      { <span class=\"hljs-attr\">source</span>: <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">'b1'</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">3</span> },\n      { <span class=\"hljs-attr\">source</span>: <span class=\"hljs-string\">'b1'</span>, <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">'a1'</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1</span> },\n      { <span class=\"hljs-attr\">source</span>: <span class=\"hljs-string\">'b1'</span>, <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">2</span> }\n    ]\n  }\n};\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724757876344/4ef839cb-c417-4dc2-a0b6-fa0d5da9e06a.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Ok, so rendering hard-coded charts is easy. Now we need to get the sheet data in the right format for a Heatmap.</p>\n<h2 id=\"heading-transforming-sheet-data-for-heatmap\">Transforming Sheet Data For Heatmap</h2>\n<p>First, take a look at the option structure for a Heatmap from the Echarts examples.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// prettier-ignore</span>\n<span class=\"hljs-keyword\">const</span> hours = [\n    <span class=\"hljs-string\">'12a'</span>, <span class=\"hljs-string\">'1a'</span>, <span class=\"hljs-string\">'2a'</span>, <span class=\"hljs-string\">'3a'</span>, <span class=\"hljs-string\">'4a'</span>, <span class=\"hljs-string\">'5a'</span>, <span class=\"hljs-string\">'6a'</span>,\n    <span class=\"hljs-string\">'7a'</span>, <span class=\"hljs-string\">'8a'</span>, <span class=\"hljs-string\">'9a'</span>, <span class=\"hljs-string\">'10a'</span>, <span class=\"hljs-string\">'11a'</span>,\n    <span class=\"hljs-string\">'12p'</span>, <span class=\"hljs-string\">'1p'</span>, <span class=\"hljs-string\">'2p'</span>, <span class=\"hljs-string\">'3p'</span>, <span class=\"hljs-string\">'4p'</span>, <span class=\"hljs-string\">'5p'</span>,\n    <span class=\"hljs-string\">'6p'</span>, <span class=\"hljs-string\">'7p'</span>, <span class=\"hljs-string\">'8p'</span>, <span class=\"hljs-string\">'9p'</span>, <span class=\"hljs-string\">'10p'</span>, <span class=\"hljs-string\">'11p'</span>\n];\n<span class=\"hljs-comment\">// prettier-ignore</span>\n<span class=\"hljs-keyword\">const</span> days = [\n    <span class=\"hljs-string\">'Saturday'</span>, <span class=\"hljs-string\">'Friday'</span>, <span class=\"hljs-string\">'Thursday'</span>,\n    <span class=\"hljs-string\">'Wednesday'</span>, <span class=\"hljs-string\">'Tuesday'</span>, <span class=\"hljs-string\">'Monday'</span>, <span class=\"hljs-string\">'Sunday'</span>\n];\n<span class=\"hljs-comment\">// prettier-ignore</span>\n<span class=\"hljs-keyword\">const</span> data = [[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">6</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">6</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">9</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">11</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">6</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">7</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">8</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">12</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">7</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">9</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">8</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">10</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">6</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">7</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">7</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">14</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">13</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">12</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">9</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">10</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">6</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">14</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">12</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">8</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">7</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">10</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">7</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">11</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">6</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>]]\n    .map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> [item[<span class=\"hljs-number\">1</span>], item[<span class=\"hljs-number\">0</span>], item[<span class=\"hljs-number\">2</span>] || <span class=\"hljs-string\">'-'</span>];\n});\noption = {\n  <span class=\"hljs-attr\">tooltip</span>: {\n    <span class=\"hljs-attr\">position</span>: <span class=\"hljs-string\">'top'</span>\n  },\n  <span class=\"hljs-attr\">grid</span>: {\n    <span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">'50%'</span>,\n    <span class=\"hljs-attr\">top</span>: <span class=\"hljs-string\">'10%'</span>\n  },\n  <span class=\"hljs-attr\">xAxis</span>: {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'category'</span>,\n    <span class=\"hljs-attr\">data</span>: hours,\n    <span class=\"hljs-attr\">splitArea</span>: {\n      <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>\n    }\n  },\n  <span class=\"hljs-attr\">yAxis</span>: {\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'category'</span>,\n    <span class=\"hljs-attr\">data</span>: days,\n    <span class=\"hljs-attr\">splitArea</span>: {\n      <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>\n    }\n  },\n  <span class=\"hljs-attr\">visualMap</span>: {\n    <span class=\"hljs-attr\">min</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-attr\">max</span>: <span class=\"hljs-number\">10</span>,\n    <span class=\"hljs-attr\">calculable</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">orient</span>: <span class=\"hljs-string\">'horizontal'</span>,\n    <span class=\"hljs-attr\">left</span>: <span class=\"hljs-string\">'center'</span>,\n    <span class=\"hljs-attr\">bottom</span>: <span class=\"hljs-string\">'15%'</span>\n  },\n  <span class=\"hljs-attr\">series</span>: [\n    {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Punch Card'</span>,\n      <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'heatmap'</span>,\n      <span class=\"hljs-attr\">data</span>: data,\n      <span class=\"hljs-attr\">label</span>: {\n        <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>\n      },\n      <span class=\"hljs-attr\">emphasis</span>: {\n        <span class=\"hljs-attr\">itemStyle</span>: {\n          <span class=\"hljs-attr\">shadowBlur</span>: <span class=\"hljs-number\">10</span>,\n          <span class=\"hljs-attr\">shadowColor</span>: <span class=\"hljs-string\">'rgba(0, 0, 0, 0.5)'</span>\n        }\n      }\n    }\n  ]\n}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724758240559/88aa5846-652f-4ef8-9d7d-da87c066e138.png\" alt class=\"image--center mx-auto\" /></p>\n<p>In this example, 3 variables are passed into the option object (hours, days, data), and the rest is hard-coded. We'll use the same approach, only with our sheet it will be comparing date vs region, with the color coming from the total number of sales for that date.</p>\n<p>Add a function to the Code.gs file to aggregate the data and return the 3 variables (dates, regions, salesData).</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getSheetData</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  <span class=\"hljs-keyword\">const</span> data = sheet.getDataRange().getValues();\n\n  <span class=\"hljs-comment\">// Initialize an empty object to store sales data grouped by date and region</span>\n  <span class=\"hljs-keyword\">let</span> salesMap = {};\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; data.length; i++) {\n    <span class=\"hljs-keyword\">const</span> [rawDate, region, , sales] = data[i];\n        <span class=\"hljs-keyword\">const</span> date = Utilities.formatDate(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(rawDate), Session.getScriptTimeZone(), <span class=\"hljs-string\">\"yyyy-MM-dd\"</span>);\n\n    <span class=\"hljs-comment\">// Initialize the date object and region value, then accumulate totals</span>\n    <span class=\"hljs-keyword\">if</span> (!salesMap[date]) salesMap[date] = {};\n    <span class=\"hljs-keyword\">if</span> (!salesMap[date][region]) salesMap[date][region] = <span class=\"hljs-number\">0</span>;\n    salesMap[date][region] += sales;\n  }\n\n  <span class=\"hljs-comment\">// Extract unique sorted dates and regions</span>\n  <span class=\"hljs-keyword\">const</span> dates = <span class=\"hljs-built_in\">Object</span>.keys(salesMap).sort();\n  <span class=\"hljs-keyword\">const</span> regions = [...new <span class=\"hljs-built_in\">Set</span>(data.slice(<span class=\"hljs-number\">1</span>).map(<span class=\"hljs-function\">(<span class=\"hljs-params\">[ , region]</span>) =&gt;</span> region))];\n\n  <span class=\"hljs-comment\">// Prepare the sales data array for the heatmap, mapping dates and regions to indices</span>\n  <span class=\"hljs-keyword\">const</span> salesData = dates.flatMap(<span class=\"hljs-function\">(<span class=\"hljs-params\">date, i</span>) =&gt;</span>\n    regions.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">region, j</span>) =&gt;</span> [i, j, salesMap[date][region] || <span class=\"hljs-number\">0</span>])\n  );\n\n  Logger.log({ dates, regions, salesData });\n  <span class=\"hljs-keyword\">return</span> { dates, regions, salesData };\n}\n</code></pre>\n<p>Run it and you should get back an object with the 3 variables ready to pass in to the HTML template.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724759011100/85253f66-ee6a-44b6-92e6-b177c9d6b9b7.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-inserting-sheet-data-into-chart\">Inserting Sheet Data Into Chart</h2>\n<p>Lastly, we can use the withSuccessHandler method to retrieve this data from the server, then pass it to a callback function that merges in the variables with an option object for a heatmap.</p>\n<p>Here's how the HTML doc should be structured:</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">drawChart</span>(<span class=\"hljs-params\"></span>) </span>{\n      google.script.run.withSuccessHandler(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ dates, regions, salesData }</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> chart = echarts.init(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'chart'</span>));\n        <span class=\"hljs-keyword\">const</span> option = {\n          <span class=\"hljs-comment\">//...</span>\n        };\n        chart.setOption(option);\n      }).getSheetData(); <span class=\"hljs-comment\">//run getSheetData first, then pass to drawChart</span>\n    }\n    drawChart();\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>Inserting a Heatmap option object and our variable names, we have:</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"chart\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width: 600px; height: 400px;\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">drawChart</span>(<span class=\"hljs-params\"></span>) </span>{\n      google.script.run.withSuccessHandler(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ dates, regions, salesData }</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> chart = echarts.init(<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'chart'</span>));\n        <span class=\"hljs-keyword\">const</span> option = {\n          <span class=\"hljs-attr\">tooltip</span>: { <span class=\"hljs-attr\">position</span>: <span class=\"hljs-string\">'top'</span> },\n          <span class=\"hljs-attr\">grid</span>: {\n            <span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">'50%'</span>,\n            <span class=\"hljs-attr\">top</span>: <span class=\"hljs-string\">'10%'</span>,\n            <span class=\"hljs-attr\">left</span>: <span class=\"hljs-string\">'20%'</span>,\n            <span class=\"hljs-attr\">right</span>: <span class=\"hljs-string\">'10%'</span>\n          },\n          <span class=\"hljs-attr\">xAxis</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'category'</span>,\n            <span class=\"hljs-attr\">data</span>: dates,\n            <span class=\"hljs-attr\">splitArea</span>: { <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span> }\n          },\n          <span class=\"hljs-attr\">yAxis</span>: {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'category'</span>,\n            <span class=\"hljs-attr\">data</span>: regions,\n            <span class=\"hljs-attr\">splitArea</span>: { <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span> }\n          },\n          <span class=\"hljs-attr\">visualMap</span>: {\n            <span class=\"hljs-attr\">min</span>: <span class=\"hljs-number\">0</span>,\n            <span class=\"hljs-attr\">max</span>: <span class=\"hljs-built_in\">Math</span>.max(...salesData.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">[ , , value]</span>) =&gt;</span> value)),\n            <span class=\"hljs-attr\">calculable</span>: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-attr\">orient</span>: <span class=\"hljs-string\">'horizontal'</span>,\n            <span class=\"hljs-attr\">left</span>: <span class=\"hljs-string\">'center'</span>,\n            <span class=\"hljs-attr\">bottom</span>: <span class=\"hljs-string\">'15%'</span>\n          },\n          <span class=\"hljs-attr\">series</span>: [{\n            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Sales Amount'</span>,\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'heatmap'</span>,\n            <span class=\"hljs-attr\">data</span>: salesData,\n            <span class=\"hljs-attr\">label</span>: { <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span> },\n            <span class=\"hljs-attr\">emphasis</span>: {\n              <span class=\"hljs-attr\">itemStyle</span>: {\n                <span class=\"hljs-attr\">shadowBlur</span>: <span class=\"hljs-number\">10</span>,\n                <span class=\"hljs-attr\">shadowColor</span>: <span class=\"hljs-string\">'rgba(0, 0, 0, 0.5)'</span>\n              }\n            }\n          }]\n        };\n        chart.setOption(option);\n      }).getSheetData();\n    }\n    drawChart();\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>Rerun the createHeatmap script, and you should have an interactive Heatmap, generated from your sheet data!</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724759491022/97724b93-b8e7-45b8-ad65-e69e6abb63d3.gif\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-whats-next\">What's Next?</h2>\n<p>There's a lot more you can do with ECharts, like add animations and click events to the data points. You can also download the charts as images, or even generate PDFs or emails with the charts embedded.</p>\n<h3 id=\"heading-about-me\">About Me</h3>\n<p>Hi, I'm Joseph, founder at <a target=\"_blank\" href=\"https://www.greenflux.us/\"><strong>GreenFlux, LLC</strong></a> and a senior developer advocate at <a target=\"_blank\" href=\"https://www.appsmith.com/\"><strong>Appsmith</strong></a>. I enjoy pushing the limits of low-code, and I'm always up for a new challenge. If you have an idea for an Apps Script tutorial or need help with Echarts, feel free to drop a comment below and I'll see what I can do!</p>\n","contentMarkdown":"Heatmaps are a great way to visualize aggregate data so you can easily see trends and spikes in the data. They can summarize data across a range of time, display traffic and weather patterns, or any other series of data comparing two axis. One popular solution for creating Heatmaps, is the Echarts library from The Apache Software Foundation.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724754977046/8ce26879-acc6-43ca-a9f6-6d492b18f297.png align=\"center\")\n\nI've used Echarts in a few other platforms recently, and I wanted to see if I could get it working in Google Sheets. It was easy to get a sample chart with hard-coded data to display, but connecting the real sheet data was a bit challenging. So I wanted to share this guide now that I have it working.\n\n**This guide will cover:**\n\n* Displaying a static EChart in a modal using Apps Script\n    \n* Writing JavaScript to aggregate and transform sheet data\n    \n* Inserting the sheet data into the HTML template using withSuccessHandler\n    \n\n## ECharts Basics\n\nECharts works by selecting a DOM element, and running echarts.init(el) to create a chart instance. Then, the setOption(option) method is used to pass in the specific chart type and data.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724756552394/b8949d44-8522-45a0-b956-064be0bae51f.png align=\"center\")\n\nFirst we'll try to get this example displaying in a modal using Apps Script. You can follow along by copying the [sample Sales data](https://docs.google.com/spreadsheets/d/1D-MwN9Khtc1wqI7XddLm6hd9VdH_7FwBoNWsm2hoSnE/edit?usp=sharing) used in this example, or modify the code for your column names.\n\nOpen Apps Scripts from the Extension menu in Google Sheets, and click the + to add a new file. Then select HTML and name it Heatmap.\n\nThen paste in this code:\n\n```xml\n<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"chart\" style=\"width: 600px; height: 400px;\"></div>\n    <script>\n      const chart = echarts.init(document.getElementById('chart'));\n      const option = {\n        xAxis: {\n          type: 'category',\n          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [\n          {\n            data: [150, 230, 224, 218, 135, 147, 260],\n            type: 'line'\n          }\n        ]\n      };\n      chart.setOption(option);\n    </script>\n  </body>\n</html>\n```\n\nNext, paste this in the Code.gs file:\n\n```javascript\nfunction createHeatmap() {\n  const html = HtmlService.createHtmlOutputFromFile('Heatmap')\n      .setWidth(600)\n      .setHeight(400);\n  SpreadsheetApp.getUi().showModalDialog(html, 'Sales Data Heatmap');\n}\n```\n\nClick save, then select the createHeatmap function in the dropdown and run it. You should see a modal in the sheet with a basic line chart.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724757484741/89f9622e-e3be-4e28-a90f-9f5475d0ccf8.png align=\"center\")\n\nYou can try out other chart types by copying the option object from the Echarts examples. Update the option with this to create a Sankey chart:\n\n```javascript\nconst option = {\n  series: {\n    type: 'sankey',\n    layout: 'none',\n    emphasis: { focus: 'adjacency' },\n    data: [\n      { name: 'a' },\n      { name: 'b' },\n      { name: 'a1' },\n      { name: 'a2' },\n      { name: 'b1' },\n      { name: 'c' }\n    ],\n    links: [\n      { source: 'a', target: 'a1', value: 5 },\n      { source: 'a', target: 'a2', value: 3 },\n      { source: 'b', target: 'b1', value: 8 },\n      { source: 'a', target: 'b1', value: 3 },\n      { source: 'b1', target: 'a1', value: 1 },\n      { source: 'b1', target: 'c', value: 2 }\n    ]\n  }\n};\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724757876344/4ef839cb-c417-4dc2-a0b6-fa0d5da9e06a.png align=\"center\")\n\nOk, so rendering hard-coded charts is easy. Now we need to get the sheet data in the right format for a Heatmap.\n\n## Transforming Sheet Data For Heatmap\n\nFirst, take a look at the option structure for a Heatmap from the Echarts examples.\n\n```javascript\n// prettier-ignore\nconst hours = [\n    '12a', '1a', '2a', '3a', '4a', '5a', '6a',\n    '7a', '8a', '9a', '10a', '11a',\n    '12p', '1p', '2p', '3p', '4p', '5p',\n    '6p', '7p', '8p', '9p', '10p', '11p'\n];\n// prettier-ignore\nconst days = [\n    'Saturday', 'Friday', 'Thursday',\n    'Wednesday', 'Tuesday', 'Monday', 'Sunday'\n];\n// prettier-ignore\nconst data = [[0, 0, 5], [0, 1, 1], [0, 2, 0], [0, 3, 0], [0, 4, 0], [0, 5, 0], [0, 6, 0], [0, 7, 0], [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 2], [0, 12, 4], [0, 13, 1], [0, 14, 1], [0, 15, 3], [0, 16, 4], [0, 17, 6], [0, 18, 4], [0, 19, 4], [0, 20, 3], [0, 21, 3], [0, 22, 2], [0, 23, 5], [1, 0, 7], [1, 1, 0], [1, 2, 0], [1, 3, 0], [1, 4, 0], [1, 5, 0], [1, 6, 0], [1, 7, 0], [1, 8, 0], [1, 9, 0], [1, 10, 5], [1, 11, 2], [1, 12, 2], [1, 13, 6], [1, 14, 9], [1, 15, 11], [1, 16, 6], [1, 17, 7], [1, 18, 8], [1, 19, 12], [1, 20, 5], [1, 21, 5], [1, 22, 7], [1, 23, 2], [2, 0, 1], [2, 1, 1], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [2, 7, 0], [2, 8, 0], [2, 9, 0], [2, 10, 3], [2, 11, 2], [2, 12, 1], [2, 13, 9], [2, 14, 8], [2, 15, 10], [2, 16, 6], [2, 17, 5], [2, 18, 5], [2, 19, 5], [2, 20, 7], [2, 21, 4], [2, 22, 2], [2, 23, 4], [3, 0, 7], [3, 1, 3], [3, 2, 0], [3, 3, 0], [3, 4, 0], [3, 5, 0], [3, 6, 0], [3, 7, 0], [3, 8, 1], [3, 9, 0], [3, 10, 5], [3, 11, 4], [3, 12, 7], [3, 13, 14], [3, 14, 13], [3, 15, 12], [3, 16, 9], [3, 17, 5], [3, 18, 5], [3, 19, 10], [3, 20, 6], [3, 21, 4], [3, 22, 4], [3, 23, 1], [4, 0, 1], [4, 1, 3], [4, 2, 0], [4, 3, 0], [4, 4, 0], [4, 5, 1], [4, 6, 0], [4, 7, 0], [4, 8, 0], [4, 9, 2], [4, 10, 4], [4, 11, 4], [4, 12, 2], [4, 13, 4], [4, 14, 4], [4, 15, 14], [4, 16, 12], [4, 17, 1], [4, 18, 8], [4, 19, 5], [4, 20, 3], [4, 21, 7], [4, 22, 3], [4, 23, 0], [5, 0, 2], [5, 1, 1], [5, 2, 0], [5, 3, 3], [5, 4, 0], [5, 5, 0], [5, 6, 0], [5, 7, 0], [5, 8, 2], [5, 9, 0], [5, 10, 4], [5, 11, 1], [5, 12, 5], [5, 13, 10], [5, 14, 5], [5, 15, 7], [5, 16, 11], [5, 17, 6], [5, 18, 0], [5, 19, 5], [5, 20, 3], [5, 21, 4], [5, 22, 2], [5, 23, 0], [6, 0, 1], [6, 1, 0], [6, 2, 0], [6, 3, 0], [6, 4, 0], [6, 5, 0], [6, 6, 0], [6, 7, 0], [6, 8, 0], [6, 9, 0], [6, 10, 1], [6, 11, 0], [6, 12, 2], [6, 13, 1], [6, 14, 3], [6, 15, 4], [6, 16, 0], [6, 17, 0], [6, 18, 0], [6, 19, 0], [6, 20, 1], [6, 21, 2], [6, 22, 2], [6, 23, 6]]\n    .map(function (item) {\n    return [item[1], item[0], item[2] || '-'];\n});\noption = {\n  tooltip: {\n    position: 'top'\n  },\n  grid: {\n    height: '50%',\n    top: '10%'\n  },\n  xAxis: {\n    type: 'category',\n    data: hours,\n    splitArea: {\n      show: true\n    }\n  },\n  yAxis: {\n    type: 'category',\n    data: days,\n    splitArea: {\n      show: true\n    }\n  },\n  visualMap: {\n    min: 0,\n    max: 10,\n    calculable: true,\n    orient: 'horizontal',\n    left: 'center',\n    bottom: '15%'\n  },\n  series: [\n    {\n      name: 'Punch Card',\n      type: 'heatmap',\n      data: data,\n      label: {\n        show: true\n      },\n      emphasis: {\n        itemStyle: {\n          shadowBlur: 10,\n          shadowColor: 'rgba(0, 0, 0, 0.5)'\n        }\n      }\n    }\n  ]\n}\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724758240559/88aa5846-652f-4ef8-9d7d-da87c066e138.png align=\"center\")\n\nIn this example, 3 variables are passed into the option object (hours, days, data), and the rest is hard-coded. We'll use the same approach, only with our sheet it will be comparing date vs region, with the color coming from the total number of sales for that date.\n\nAdd a function to the Code.gs file to aggregate the data and return the 3 variables (dates, regions, salesData).\n\n```javascript\nfunction getSheetData() {\n  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\n  const data = sheet.getDataRange().getValues();\n\n  // Initialize an empty object to store sales data grouped by date and region\n  let salesMap = {};\n\n  for (let i = 1; i < data.length; i++) {\n    const [rawDate, region, , sales] = data[i];\n        const date = Utilities.formatDate(new Date(rawDate), Session.getScriptTimeZone(), \"yyyy-MM-dd\");\n\n    // Initialize the date object and region value, then accumulate totals\n    if (!salesMap[date]) salesMap[date] = {};\n    if (!salesMap[date][region]) salesMap[date][region] = 0;\n    salesMap[date][region] += sales;\n  }\n\n  // Extract unique sorted dates and regions\n  const dates = Object.keys(salesMap).sort();\n  const regions = [...new Set(data.slice(1).map(([ , region]) => region))];\n\n  // Prepare the sales data array for the heatmap, mapping dates and regions to indices\n  const salesData = dates.flatMap((date, i) =>\n    regions.map((region, j) => [i, j, salesMap[date][region] || 0])\n  );\n\n  Logger.log({ dates, regions, salesData });\n  return { dates, regions, salesData };\n}\n```\n\nRun it and you should get back an object with the 3 variables ready to pass in to the HTML template.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724759011100/85253f66-ee6a-44b6-92e6-b177c9d6b9b7.png align=\"center\")\n\n## Inserting Sheet Data Into Chart\n\nLastly, we can use the withSuccessHandler method to retrieve this data from the server, then pass it to a callback function that merges in the variables with an option object for a heatmap.\n\nHere's how the HTML doc should be structured:\n\n```xml\n<script>\n    function drawChart() {\n      google.script.run.withSuccessHandler(({ dates, regions, salesData }) => {\n        const chart = echarts.init(document.getElementById('chart'));\n        const option = {\n          //...\n        };\n        chart.setOption(option);\n      }).getSheetData(); //run getSheetData first, then pass to drawChart\n    }\n    drawChart();\n  </script>\n```\n\nInserting a Heatmap option object and our variable names, we have:\n\n```xml\n<!DOCTYPE html>\n<html>\n<head>\n  <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.4.1/dist/echarts.min.js\"></script>\n</head>\n<body>\n  <div id=\"chart\" style=\"width: 600px; height: 400px;\"></div>\n  <script>\n    function drawChart() {\n      google.script.run.withSuccessHandler(({ dates, regions, salesData }) => {\n        const chart = echarts.init(document.getElementById('chart'));\n        const option = {\n          tooltip: { position: 'top' },\n          grid: {\n            height: '50%',\n            top: '10%',\n            left: '20%',\n            right: '10%'\n          },\n          xAxis: {\n            type: 'category',\n            data: dates,\n            splitArea: { show: true }\n          },\n          yAxis: {\n            type: 'category',\n            data: regions,\n            splitArea: { show: true }\n          },\n          visualMap: {\n            min: 0,\n            max: Math.max(...salesData.map(([ , , value]) => value)),\n            calculable: true,\n            orient: 'horizontal',\n            left: 'center',\n            bottom: '15%'\n          },\n          series: [{\n            name: 'Sales Amount',\n            type: 'heatmap',\n            data: salesData,\n            label: { show: true },\n            emphasis: {\n              itemStyle: {\n                shadowBlur: 10,\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\n              }\n            }\n          }]\n        };\n        chart.setOption(option);\n      }).getSheetData();\n    }\n    drawChart();\n  </script>\n</body>\n</html>\n```\n\nRerun the createHeatmap script, and you should have an interactive Heatmap, generated from your sheet data!\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724759491022/97724b93-b8e7-45b8-ad65-e69e6abb63d3.gif align=\"center\")\n\n## What's Next?\n\nThere's a lot more you can do with ECharts, like add animations and click events to the data points. You can also download the charts as images, or even generate PDFs or emails with the charts embedded.\n\n### About Me\n\nHi, I'm Joseph, founder at [**GreenFlux, LLC**](https://www.greenflux.us/) and a senior developer advocate at [**Appsmith**](https://www.appsmith.com/). I enjoy pushing the limits of low-code, and I'm always up for a new challenge. If you have an idea for an Apps Script tutorial or need help with Echarts, feel free to drop a comment below and I'll see what I can do!","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1724791958306/0bbb1651-fe86-4247-87c1-2bfbf7e6ca3d.png","brief":"Heatmaps are a great way to visualize aggregate data so you can easily see trends and spikes in the data. They can summarize data across a range of time, display traffic and weather patterns, or any other series of data comparing two axis. One popula...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":8,"draft":"66cdaad8eeb4458af2fb3824","tags":["66ce3ccd90f30966f7109d26","5c9a4fdfae7a1d9f0b50b94a","5e270f8a32d5fad159b76b9a","56e669b622f645300192ed17","56744721958ef13879b94cad"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"dateUpdated":"2025-03-16T00:39:44.179Z","hasCustomDate":false,"series":"679fa03905414f167a095994","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"66ce3cceeb4d19ab3f84eb64"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"66cb7ae239eef8a3a5a1eb35","createdAt":"2024-08-25T18:41:38.140Z","updatedAt":"2025-03-16T00:42:12.563Z","views":458,"isActive":true,"hasLatex":false,"popularity":7013.3355,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"Creating a Google Sheets Sidebar with MermaidJS Charts","cuid":"cm09x1e8q00050al2ccbtc2he","dateAdded":"2024-08-25T18:41:38.138Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"creating-a-google-sheets-sidebar-with-mermaidjs-charts","content":"<p>Google Sheets has a ton of different chart types built-in, but there are a few types missing like Class, Sequence and Sankey diagrams, to name a few. When it comes to these types of charts, you usually have to export your sheets data to another tool, or give it access to connect to your Google Account. That's not always an option with some organizations though, either due to cost or security restrictions. In cases like this, you have to get creative and use what's available, like the Sidebar in Google Apps Script.</p>\n<p>That's only half of the solution though. Apps Script can serve a web page based on sheet data, but what about creating charts? That's where Mermaid.js comes in. Mermaid is a markdown-inspired charting library, that uses a plain-text syntax to generate charts without coding.</p>\n<p><strong>In this guide, I'll show you how to:</strong></p>\n<ul>\n<li><p>Create a Sheets Sidebar with Apps Script</p>\n</li>\n<li><p>Import Mermaid.js and insert a static chart</p>\n</li>\n<li><p>Add JavaScript to read sheet data and update the chart</p>\n</li>\n<li><p>Make it dynamic with UI options to select columns to chart</p>\n</li>\n</ul>\n<p><strong>Let's get started!</strong></p>\n<h2 id=\"heading-creating-a-sidebar\">Creating a Sidebar</h2>\n<p>First, open up the sheet you want to chart, then open up Apps Script from the Extensions menu.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724583434048/174a34ca-b545-420e-bd9a-20c6a6283ba1.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Start out by clicking the <strong>+</strong> to create a new File and choose <em>HTML</em> for the type. Name it Index, then paste this in the file and click SAVE.</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\nWeb app test\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>Then, paste this in the Code.gs file and SAVE.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">showSidebar</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> htmlOutput = HtmlService.createHtmlOutputFromFile(<span class=\"hljs-string\">'Index'</span>)\n    .setTitle(<span class=\"hljs-string\">'Mermaid Chart'</span>);\n  SpreadsheetApp.getUi().showSidebar(htmlOutput);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onOpen</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> ui = SpreadsheetApp.getUi();\n  ui.createMenu(<span class=\"hljs-string\">'Custom Menu'</span>)\n    .addItem(<span class=\"hljs-string\">'Open Mermaid Chart'</span>, <span class=\"hljs-string\">'showSidebar'</span>)\n    .addToUi();\n}\n</code></pre>\n<p>Refresh the sheet, and you should now see the Custom Menu in the toolbar. Open it and run the showSidebar function to open the new sidebar.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724606887604/95b5628e-8476-497f-9b97-8a8e77b9a4d7.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-adding-a-mermaid-chart\">Adding a Mermaid Chart</h2>\n<p>Next, update the HTML to import the Mermaid library and display a pie chart.</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdnjs.cloudflare.com/ajax/libs/mermaid/9.1.7/mermaid.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"mermaid\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"mermaidChart\"</span>&gt;</span>\npie title Mermaid Test\n    \"Sales\" : 3\n    \"Receptionist\" : 2\n    \"Temp\" : 1\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>Re-run the script from the Custom Menu, and you should see a pie chart in the sidebar.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724607217249/12d59afb-9f2e-416c-ad75-d362f300d3a6.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-inserting-sheet-data\">Inserting Sheet Data</h2>\n<p>Next, we need a JavaScript function to return the Mermaid Pie Chart config, using numbers from the sheet data. This can be done by looping over the rows and accumulating a count of repeat values, then looping over those totals to create the chart config.</p>\n<p>Update the Code.gs with:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pieChart</span>(<span class=\"hljs-params\">groupBy = <span class=\"hljs-string\">'Department'</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> ss = SpreadsheetApp.getActiveSpreadsheet();\n  <span class=\"hljs-keyword\">const</span> sh = ss.getActiveSheet();\n  <span class=\"hljs-keyword\">const</span> table = sh.getDataRange().getValues();\n  <span class=\"hljs-keyword\">const</span> headers = table[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">const</span> data = table.slice(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Get all rows except the header</span>\n  <span class=\"hljs-keyword\">const</span> groupByCol = headers.findIndex(<span class=\"hljs-function\"><span class=\"hljs-params\">h</span> =&gt;</span> h === groupBy);\n\n  <span class=\"hljs-keyword\">let</span> chart = <span class=\"hljs-string\">`pie showData\\ntitle By <span class=\"hljs-subst\">${groupBy}</span>\\n`</span>;\n  <span class=\"hljs-keyword\">const</span> totals = {};\n\n  data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {\n    totals[row[groupByCol]] = (totals[row[groupByCol]] || <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>;\n  });\n\n  <span class=\"hljs-built_in\">Object</span>.entries(totals).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">entryArr</span> =&gt;</span> {\n    chart += <span class=\"hljs-string\">`  \"<span class=\"hljs-subst\">${entryArr[<span class=\"hljs-number\">0</span>]}</span>\" : <span class=\"hljs-subst\">${entryArr[<span class=\"hljs-number\">1</span>]}</span>\\n`</span>;\n  });\n\n  Logger.log(chart);\n  <span class=\"hljs-keyword\">return</span> chart;\n}\n</code></pre>\n<p>This will return a chart config based on your sheet data.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724607510121/f87cd473-580f-46c0-8fe9-e9a7817599b8.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Next, add script tags to the HTML doc, and write a function to update the Mermaid div with this config, then re-initialize Mermaid:</p>\n<pre><code class=\"lang-javascript\">        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">renderMermaidChart</span>(<span class=\"hljs-params\">mermaidSyntax</span>) </span>{\n        <span class=\"hljs-keyword\">const</span> mermaidDiv = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'mermaidChart'</span>);\n\n        <span class=\"hljs-comment\">// Clear placeholder chart and create a new one</span>\n        mermaidDiv.innerHTML = <span class=\"hljs-string\">''</span>; \n\n        <span class=\"hljs-keyword\">const</span> newDiv = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>);\n        newDiv.className = <span class=\"hljs-string\">'mermaid'</span>;\n        newDiv.textContent = mermaidSyntax;\n        mermaidDiv.appendChild(newDiv);\n        mermaid.init(<span class=\"hljs-literal\">undefined</span>, newDiv);\n      }\n</code></pre>\n<p><strong>NOTE</strong>: Mermaid won't re-render the chart when the config is updated. Instead, you can clear the placeholder chart and create a new one with the real data.</p>\n<p>Then add an sync function to call the pieChart function from the client side, get the chart config, and then run this renderMermaidChart function with the config. You can use the jquery library to wrap the function with $(function(){}) so that it will evaluate and run on the client side.</p>\n<p>Here's the updated HTML doc:</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdnjs.cloudflare.com/ajax/libs/mermaid/9.1.7/mermaid.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">renderMermaidChart</span>(<span class=\"hljs-params\">mermaidSyntax</span>) </span>{\n        <span class=\"hljs-keyword\">const</span> mermaidDiv = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'mermaidChart'</span>);\n\n        <span class=\"hljs-comment\">// Clear placeholder chart and create a new one</span>\n        mermaidDiv.innerHTML = <span class=\"hljs-string\">''</span>; \n\n        <span class=\"hljs-keyword\">const</span> newDiv = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>);\n        newDiv.className = <span class=\"hljs-string\">'mermaid'</span>;\n        newDiv.textContent = mermaidSyntax;\n        mermaidDiv.appendChild(newDiv);\n        mermaid.init(<span class=\"hljs-literal\">undefined</span>, newDiv);\n      }\n      $(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        google.script.run.withSuccessHandler(renderMermaidChart)\n          .pieChart(<span class=\"hljs-string\">'Department'</span>);\n      })\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"mermaid\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"mermaidChart\"</span>&gt;</span>\npie title Mermaid Test\n    \"Sales\" : 3\n    \"Receptionist\" : 2\n    \"Temp\" : 1\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>Re-run the script from the sheet menu, and you should see the placeholder pie chart, followed by a real chart from your data.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724608537083/23943e36-558a-463a-a80d-39dbc0e7cff3.png\" alt class=\"image--center mx-auto\" /></p>\n<p>You may notice that there is no legend data, even though the examples in Mermaid show one. Unfortunately, Google Sidebars are always a fixed 300px, and in this case Mermaid is rendering the legend outside the viewable area. This can be fixed by adding some CSS to reposition the legend.</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">rect</span>,\n  <span class=\"hljs-selector-tag\">rect</span> + <span class=\"hljs-selector-tag\">text</span> {\n    <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>(-<span class=\"hljs-number\">320px</span>, <span class=\"hljs-number\">250px</span>);\n  }\n\n<span class=\"hljs-selector-tag\">svg</span> {\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">800px</span>\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></pre>\n<p>This moves the rectangle and text label below the pie chart, and adds some extra room at the bottom for them.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724608916401/21e071fc-5ecc-4227-aa7c-20b057b4a5a9.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-making-it-dynamic\">Making It Dynamic</h2>\n<p>Lastly, we can add in a select input with a list of the column headers, so you can choose which column to chart.</p>\n<p>Update the HTML with a select input. I put mine in a container so I could fix it to the top when the sidebar is scrolled.</p>\n<pre><code class=\"lang-xml\">    <span class=\"hljs-comment\">&lt;!-- Container for the select element, acting as a navbar --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"selectContainer\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">for</span>=<span class=\"hljs-string\">\"groupBySelect\"</span>&gt;</span>Group by:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"groupBySelect\"</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!-- Options will be populated here --&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>Then add a function to the Code.gs file to get the headers.</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getHeaders</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> ss = SpreadsheetApp.getActiveSpreadsheet();\n  <span class=\"hljs-keyword\">const</span> sh = ss.getActiveSheet();\n  <span class=\"hljs-keyword\">const</span> headers = sh.getDataRange().getValues()[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">return</span> headers;\n}\n</code></pre>\n<p>Next, add a function to the HTML doc that uses this output to update the select options.</p>\n<pre><code class=\"lang-javascript\">      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">populateSelect</span>(<span class=\"hljs-params\">headers</span>) </span>{\n        <span class=\"hljs-keyword\">const</span> selectElement = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'groupBySelect'</span>);\n        headers.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">header</span> =&gt;</span> {\n          <span class=\"hljs-keyword\">const</span> option = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'option'</span>);\n          option.value = header;\n          option.text = header;\n          selectElement.appendChild(option);\n        });\n\n        <span class=\"hljs-comment\">// Add event listener to update chart on selection change</span>\n        selectElement.addEventListener(<span class=\"hljs-string\">'change'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n          <span class=\"hljs-keyword\">const</span> selectedGroupBy = selectElement.value;\n          google.script.run.withSuccessHandler(renderMermaidChart)\n            .pieChart(selectedGroupBy);\n        });\n      }\n</code></pre>\n<p>And update the client side function to call this function after the page loads.</p>\n<pre><code class=\"lang-javascript\">      $(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-comment\">// Populate the select input with the headers</span>\n        google.script.run.withSuccessHandler(populateSelect)\n          .getHeaders();\n\n        <span class=\"hljs-comment\">// Initial chart rendering</span>\n        google.script.run.withSuccessHandler(renderMermaidChart)\n          .pieChart(<span class=\"hljs-string\">'Department'</span>);\n      });\n</code></pre>\n<p>Lastly, add the CSS to make the select stay at the top when scrolling:</p>\n<pre><code class=\"lang-css\"><span class=\"hljs-selector-id\">#selectContainer</span> {\n        <span class=\"hljs-attribute\">position</span>: sticky;\n        <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f9f9f9</span>;\n        <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">1000</span>; \n        <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>; \n        <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ccc</span>;\n}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724609434509/d8954c7d-abf2-4a70-ba93-02f773460daf.png\" alt class=\"image--center mx-auto\" /></p>\n<p>And that's it! You can now select any column to generate a Pie chart based on the repeating values in that column.</p>\n<h2 id=\"heading-whats-next\">What's Next?</h2>\n<p>Now that the basics are working, you can replace the pieChart function with any other function to return other chart types.</p>\n<p>Here's a function to generate an Organizational Flow Chart:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">orgFlowchart</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> ss = SpreadsheetApp.getActiveSpreadsheet();\n  <span class=\"hljs-keyword\">const</span> sh = ss.getActiveSheet();\n  <span class=\"hljs-keyword\">const</span> data = sh.getDataRange().getValues();\n  <span class=\"hljs-keyword\">const</span> headers = data[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">const</span> bossColIndex = headers.indexOf(<span class=\"hljs-string\">'Boss'</span>);\n  <span class=\"hljs-keyword\">const</span> nameColIndex = headers.indexOf(<span class=\"hljs-string\">'Character Name'</span>);\n\n  <span class=\"hljs-keyword\">if</span> (bossColIndex === <span class=\"hljs-number\">-1</span> || nameColIndex === <span class=\"hljs-number\">-1</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">\"The sheet must have 'Boss' and 'Name' columns.\"</span>);\n  }\n\n  <span class=\"hljs-keyword\">const</span> orgStructure = {};\n\n  <span class=\"hljs-comment\">// Build the org structure from the data</span>\n  data.slice(<span class=\"hljs-number\">1</span>).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> boss = row[bossColIndex];\n    <span class=\"hljs-keyword\">const</span> employee = row[nameColIndex];\n\n    <span class=\"hljs-keyword\">if</span> (!orgStructure[boss]) {\n      orgStructure[boss] = [];\n    }\n    orgStructure[boss].push(employee);\n  });\n\n  <span class=\"hljs-comment\">// Build the Mermaid syntax for the flowchart</span>\n  <span class=\"hljs-keyword\">let</span> mermaidSyntax = <span class=\"hljs-string\">'graph TD\\n'</span>;\n\n  <span class=\"hljs-built_in\">Object</span>.keys(orgStructure).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">boss</span> =&gt;</span> {\n    orgStructure[boss].forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">employee</span> =&gt;</span> {\n      mermaidSyntax += <span class=\"hljs-string\">`  <span class=\"hljs-subst\">${sanitizeName(boss)}</span> --&gt; <span class=\"hljs-subst\">${sanitizeName(employee)}</span>\\n`</span>;\n    });\n  });\n\n  Logger.log(mermaidSyntax); <span class=\"hljs-comment\">// Log the generated Mermaid syntax</span>\n  <span class=\"hljs-keyword\">return</span> mermaidSyntax;\n}\n\n<span class=\"hljs-comment\">// Helper function to sanitize names for Mermaid syntax</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sanitizeName</span>(<span class=\"hljs-params\">name</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!name) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'undefined'</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> name.replace(<span class=\"hljs-regexp\">/\\s+/g</span>, <span class=\"hljs-string\">'_'</span>).replace(<span class=\"hljs-regexp\">/[^a-zA-Z0-9_]/g</span>, <span class=\"hljs-string\">''</span>);\n}\n</code></pre>\n<p>Just swap out the .withSuccessHandler functions to pass this functions return value to the renderMermaidChart function, and you'll get a completely different chart type.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724610366644/557a1178-1dfb-4436-89b5-6230207202f9.png\" alt class=\"image--center mx-auto\" /></p>\n<h3 id=\"heading-about-me\"><strong>About Me</strong></h3>\n<p>Hi, I'm Joseph, founder at <a target=\"_blank\" href=\"https://www.greenflux.us/\">GreenFlux, LLC</a> and a senior developer advocate at <a target=\"_blank\" href=\"https://www.appsmith.com/\"><strong>Appsmith</strong></a>. I enjoy pushing the limits of low-code, and I'm always up for a new challenge. If you have an idea for an Apps Script tutorial, feel free to drop a comment below and I'll see what I can do!</p>\n","contentMarkdown":"Google Sheets has a ton of different chart types built-in, but there are a few types missing like Class, Sequence and Sankey diagrams, to name a few. When it comes to these types of charts, you usually have to export your sheets data to another tool, or give it access to connect to your Google Account. That's not always an option with some organizations though, either due to cost or security restrictions. In cases like this, you have to get creative and use what's available, like the Sidebar in Google Apps Script.\n\nThat's only half of the solution though. Apps Script can serve a web page based on sheet data, but what about creating charts? That's where Mermaid.js comes in. Mermaid is a markdown-inspired charting library, that uses a plain-text syntax to generate charts without coding.\n\n**In this guide, I'll show you how to:**\n\n* Create a Sheets Sidebar with Apps Script\n    \n* Import Mermaid.js and insert a static chart\n    \n* Add JavaScript to read sheet data and update the chart\n    \n* Make it dynamic with UI options to select columns to chart\n    \n\n**Let's get started!**\n\n## Creating a Sidebar\n\nFirst, open up the sheet you want to chart, then open up Apps Script from the Extensions menu.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724583434048/174a34ca-b545-420e-bd9a-20c6a6283ba1.png align=\"center\")\n\nStart out by clicking the **+** to create a new File and choose *HTML* for the type. Name it Index, then paste this in the file and click SAVE.\n\n```xml\n<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n<div>\nWeb app test\n</div>\n</body>\n</html>\n```\n\nThen, paste this in the Code.gs file and SAVE.\n\n```javascript\nfunction showSidebar() {\n  const htmlOutput = HtmlService.createHtmlOutputFromFile('Index')\n    .setTitle('Mermaid Chart');\n  SpreadsheetApp.getUi().showSidebar(htmlOutput);\n}\n\nfunction onOpen() {\n  const ui = SpreadsheetApp.getUi();\n  ui.createMenu('Custom Menu')\n    .addItem('Open Mermaid Chart', 'showSidebar')\n    .addToUi();\n}\n```\n\nRefresh the sheet, and you should now see the Custom Menu in the toolbar. Open it and run the showSidebar function to open the new sidebar.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724606887604/95b5628e-8476-497f-9b97-8a8e77b9a4d7.png align=\"center\")\n\n## Adding a Mermaid Chart\n\nNext, update the HTML to import the Mermaid library and display a pie chart.\n\n```xml\n<!DOCTYPE html>\n<html>\n<head>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mermaid/9.1.7/mermaid.min.js\"></script>\n</head>\n<body>\n<div class=\"mermaid\" id=\"mermaidChart\">\npie title Mermaid Test\n    \"Sales\" : 3\n    \"Receptionist\" : 2\n    \"Temp\" : 1\n</div>\n</body>\n</html>\n```\n\nRe-run the script from the Custom Menu, and you should see a pie chart in the sidebar.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724607217249/12d59afb-9f2e-416c-ad75-d362f300d3a6.png align=\"center\")\n\n## Inserting Sheet Data\n\nNext, we need a JavaScript function to return the Mermaid Pie Chart config, using numbers from the sheet data. This can be done by looping over the rows and accumulating a count of repeat values, then looping over those totals to create the chart config.\n\nUpdate the Code.gs with:\n\n```javascript\nfunction pieChart(groupBy = 'Department') {\n  const ss = SpreadsheetApp.getActiveSpreadsheet();\n  const sh = ss.getActiveSheet();\n  const table = sh.getDataRange().getValues();\n  const headers = table[0];\n  const data = table.slice(1); // Get all rows except the header\n  const groupByCol = headers.findIndex(h => h === groupBy);\n  \n  let chart = `pie showData\\ntitle By ${groupBy}\\n`;\n  const totals = {};\n  \n  data.forEach(row => {\n    totals[row[groupByCol]] = (totals[row[groupByCol]] || 0) + 1;\n  });\n  \n  Object.entries(totals).forEach(entryArr => {\n    chart += `  \"${entryArr[0]}\" : ${entryArr[1]}\\n`;\n  });\n  \n  Logger.log(chart);\n  return chart;\n}\n```\n\nThis will return a chart config based on your sheet data.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724607510121/f87cd473-580f-46c0-8fe9-e9a7817599b8.png align=\"center\")\n\nNext, add script tags to the HTML doc, and write a function to update the Mermaid div with this config, then re-initialize Mermaid:\n\n```javascript\n        function renderMermaidChart(mermaidSyntax) {\n        const mermaidDiv = document.getElementById('mermaidChart');\n        \n        // Clear placeholder chart and create a new one\n        mermaidDiv.innerHTML = ''; \n        \n        const newDiv = document.createElement('div');\n        newDiv.className = 'mermaid';\n        newDiv.textContent = mermaidSyntax;\n        mermaidDiv.appendChild(newDiv);\n        mermaid.init(undefined, newDiv);\n      }\n```\n\n**NOTE**: Mermaid won't re-render the chart when the config is updated. Instead, you can clear the placeholder chart and create a new one with the real data.\n\nThen add an sync function to call the pieChart function from the client side, get the chart config, and then run this renderMermaidChart function with the config. You can use the jquery library to wrap the function with $(function(){}) so that it will evaluate and run on the client side.\n\nHere's the updated HTML doc:\n\n```xml\n<!DOCTYPE html>\n<html>\n<head>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mermaid/9.1.7/mermaid.min.js\"></script>\n  <script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n  <script>\n        function renderMermaidChart(mermaidSyntax) {\n        const mermaidDiv = document.getElementById('mermaidChart');\n        \n        // Clear placeholder chart and create a new one\n        mermaidDiv.innerHTML = ''; \n        \n        const newDiv = document.createElement('div');\n        newDiv.className = 'mermaid';\n        newDiv.textContent = mermaidSyntax;\n        mermaidDiv.appendChild(newDiv);\n        mermaid.init(undefined, newDiv);\n      }\n      $(function() {\n        google.script.run.withSuccessHandler(renderMermaidChart)\n          .pieChart('Department');\n      })\n  </script>\n</head>\n<body>\n<div class=\"mermaid\" id=\"mermaidChart\">\npie title Mermaid Test\n    \"Sales\" : 3\n    \"Receptionist\" : 2\n    \"Temp\" : 1\n</div>\n</body>\n</html>\n```\n\nRe-run the script from the sheet menu, and you should see the placeholder pie chart, followed by a real chart from your data.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724608537083/23943e36-558a-463a-a80d-39dbc0e7cff3.png align=\"center\")\n\nYou may notice that there is no legend data, even though the examples in Mermaid show one. Unfortunately, Google Sidebars are always a fixed 300px, and in this case Mermaid is rendering the legend outside the viewable area. This can be fixed by adding some CSS to reposition the legend.\n\n```xml\n<style>\n  rect,\n  rect + text {\n    transform: translate(-320px, 250px);\n  }\n  \nsvg {\n    height: 800px\n  }\n</style>\n```\n\nThis moves the rectangle and text label below the pie chart, and adds some extra room at the bottom for them.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724608916401/21e071fc-5ecc-4227-aa7c-20b057b4a5a9.png align=\"center\")\n\n## Making It Dynamic\n\nLastly, we can add in a select input with a list of the column headers, so you can choose which column to chart.\n\nUpdate the HTML with a select input. I put mine in a container so I could fix it to the top when the sidebar is scrolled.\n\n```xml\n    <!-- Container for the select element, acting as a navbar -->\n    <div id=\"selectContainer\">\n      <label for=\"groupBySelect\">Group by:</label>\n      <select id=\"groupBySelect\">\n        <!-- Options will be populated here -->\n      </select>\n    </div>\n```\n\nThen add a function to the Code.gs file to get the headers.\n\n```javascript\nfunction getHeaders() {\n  const ss = SpreadsheetApp.getActiveSpreadsheet();\n  const sh = ss.getActiveSheet();\n  const headers = sh.getDataRange().getValues()[0];\n  return headers;\n}\n```\n\nNext, add a function to the HTML doc that uses this output to update the select options.\n\n```javascript\n      function populateSelect(headers) {\n        const selectElement = document.getElementById('groupBySelect');\n        headers.forEach(header => {\n          const option = document.createElement('option');\n          option.value = header;\n          option.text = header;\n          selectElement.appendChild(option);\n        });\n\n        // Add event listener to update chart on selection change\n        selectElement.addEventListener('change', function() {\n          const selectedGroupBy = selectElement.value;\n          google.script.run.withSuccessHandler(renderMermaidChart)\n            .pieChart(selectedGroupBy);\n        });\n      }\n```\n\nAnd update the client side function to call this function after the page loads.\n\n```javascript\n      $(function() {\n        // Populate the select input with the headers\n        google.script.run.withSuccessHandler(populateSelect)\n          .getHeaders();\n\n        // Initial chart rendering\n        google.script.run.withSuccessHandler(renderMermaidChart)\n          .pieChart('Department');\n      });\n```\n\nLastly, add the CSS to make the select stay at the top when scrolling:\n\n```css\n#selectContainer {\n        position: sticky;\n        top: 0;\n        background-color: #f9f9f9;\n        z-index: 1000; \n        padding: 10px; \n        border-bottom: 1px solid #ccc;\n}\n```\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724609434509/d8954c7d-abf2-4a70-ba93-02f773460daf.png align=\"center\")\n\nAnd that's it! You can now select any column to generate a Pie chart based on the repeating values in that column.\n\n## What's Next?\n\nNow that the basics are working, you can replace the pieChart function with any other function to return other chart types.\n\nHere's a function to generate an Organizational Flow Chart:\n\n```javascript\nfunction orgFlowchart() {\n  const ss = SpreadsheetApp.getActiveSpreadsheet();\n  const sh = ss.getActiveSheet();\n  const data = sh.getDataRange().getValues();\n  const headers = data[0];\n  const bossColIndex = headers.indexOf('Boss');\n  const nameColIndex = headers.indexOf('Character Name');\n  \n  if (bossColIndex === -1 || nameColIndex === -1) {\n    throw new Error(\"The sheet must have 'Boss' and 'Name' columns.\");\n  }\n\n  const orgStructure = {};\n  \n  // Build the org structure from the data\n  data.slice(1).forEach(row => {\n    const boss = row[bossColIndex];\n    const employee = row[nameColIndex];\n    \n    if (!orgStructure[boss]) {\n      orgStructure[boss] = [];\n    }\n    orgStructure[boss].push(employee);\n  });\n  \n  // Build the Mermaid syntax for the flowchart\n  let mermaidSyntax = 'graph TD\\n';\n  \n  Object.keys(orgStructure).forEach(boss => {\n    orgStructure[boss].forEach(employee => {\n      mermaidSyntax += `  ${sanitizeName(boss)} --> ${sanitizeName(employee)}\\n`;\n    });\n  });\n  \n  Logger.log(mermaidSyntax); // Log the generated Mermaid syntax\n  return mermaidSyntax;\n}\n\n// Helper function to sanitize names for Mermaid syntax\nfunction sanitizeName(name) {\n  if (!name) {\n    return 'undefined';\n  }\n  return name.replace(/\\s+/g, '_').replace(/[^a-zA-Z0-9_]/g, '');\n}\n```\n\nJust swap out the .withSuccessHandler functions to pass this functions return value to the renderMermaidChart function, and you'll get a completely different chart type.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724610366644/557a1178-1dfb-4436-89b5-6230207202f9.png align=\"center\")\n\n### **About Me**\n\nHi, I'm Joseph, founder at [GreenFlux, LLC](https://www.greenflux.us/) and a senior developer advocate at [**Appsmith**](https://www.appsmith.com/). I enjoy pushing the limits of low-code, and I'm always up for a new challenge. If you have an idea for an Apps Script tutorial, feel free to drop a comment below and I'll see what I can do!","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1724610989992/ed85e3a8-6a55-45e5-87b9-a1752d0f1584.png","brief":"Google Sheets has a ton of different chart types built-in, but there are a few types missing like Class, Sequence and Sankey diagrams, to name a few. When it comes to these types of charts, you usually have to export your sheets data to another tool,...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":7,"draft":"66cb08825d224b3a5e6481cd","tags":["6298be4f5787a911a45d5fad","56e669b622f645300192ed17","5e270f8a32d5fad159b76b9a","56744721958ef13879b94cad","5cbcea202ebf63902601a8d8"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"dateUpdated":"2025-03-16T00:42:12.563Z","hasCustomDate":false,"series":"679fa03905414f167a095994","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"66cb7ae239eef8a3a5a1eb35"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"66c9dd287695ee667d3cb127","createdAt":"2024-08-24T13:16:24.493Z","updatedAt":"2025-03-16T00:34:48.658Z","views":483,"isActive":true,"hasLatex":false,"popularity":7010.9819,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":1,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"Building a Mobile Responsive Grid Layout in FileMaker Pro","subtitle":"Web Viewer Trick to Display Records in a Grid, with Click Events!","cuid":"cm085zar0000k0amm0k803n8m","dateAdded":"2024-08-24T13:16:24.492Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"building-a-mobile-responsive-grid-layout-in-filemaker-pro","content":"<p>FileMaker Pro's layout design tools are top-notch. Between Form View, List View, Sub-Summary Parts, and Table View, you can build just about any type of UI you want... EXCEPT Grid Layouts! Yes, there are some workarounds you can do with multiple copies of the same layout objects, but the number of columns are fixed.</p>\n<p>But what if you want a mobile responsive grid, with columns that adjust based on the screen width? Years ago I told a few clients this was not possible in FileMaker. But since then I've come to realize how powerful the Web Viewer can be in FileMaker.</p>\n<p><strong>In this guide, I'll show you how to:</strong></p>\n<ol>\n<li><p>Display a list of HTML elements in a Web Viewer</p>\n</li>\n<li><p>Add CSS to make it mobile responsive</p>\n</li>\n<li><p>Add JavaScript to merge in data from FileMaker</p>\n</li>\n<li><p>Trigger FileMaker scripts from within the Web Viewer</p>\n</li>\n</ol>\n<p>Let's get started!</p>\n<h2 id=\"heading-static-list-of-element-in-a-web-viewer\">Static List of Element in a Web Viewer</h2>\n<p>First, create a text field named HTML and add it to the layout, and then add a web viewer that displays the HTML field. You may want to put each one inside separate tabs of a Tab Control so they can be stacked, and each take the full screen width.</p>\n<p>In the web viewer settings, enable <em>Allow JavaScript to perform FileMaker scripts</em>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724495347951/b598a662-7f22-49a7-b6fa-4b12fd0c370d.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Next, go back to layout mode and enter this in the HTML field:</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'grid'</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'item'</span>&gt;</span>Item #1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'item'</span>&gt;</span>Item #2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'item'</span>&gt;</span>Item #3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'item'</span>&gt;</span>Item #4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'item'</span>&gt;</span>Item #5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'item'</span>&gt;</span>Item #6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'item'</span>&gt;</span>Item #7<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'item'</span>&gt;</span>Item #8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'item'</span>&gt;</span>Item #9<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'item'</span>&gt;</span>Item #10<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>You should see a list in the web viewer like this:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724495826089/37215266-7dd0-418c-b2e6-4649c6fffa7b.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-adding-css-to-make-it-mobile-responsive\">Adding CSS to Make it Mobile Responsive</h2>\n<p>Now add some CSS to make each item look like a card, and to make the items display in a grid, by pasting this style tag in the <code>&lt;head&gt;</code> section:</p>\n<pre><code class=\"lang-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n      <span class=\"hljs-selector-tag\">body</span> {\n        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>;\n        <span class=\"hljs-attribute\">font-family</span>: Verdana, Geneva, sans-serif;\n        <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">12px</span>;\n      }\n      <span class=\"hljs-selector-class\">.grid</span> {\n        <span class=\"hljs-attribute\">display</span>: grid;\n        <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-built_in\">repeat</span>(auto-fit, minmax(<span class=\"hljs-number\">100px</span>, <span class=\"hljs-number\">1</span>fr));\n        <span class=\"hljs-attribute\">gap</span>: <span class=\"hljs-number\">10px</span>;\n      }\n      <span class=\"hljs-selector-class\">.item</span> {\n        <span class=\"hljs-attribute\">border</span>: solid <span class=\"hljs-number\">1px</span> lightgrey;\n        <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n        <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">4px</span>;\n        <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>;\n        <span class=\"hljs-attribute\">text-align</span>: center;\n        <span class=\"hljs-attribute\">position</span>: relative;\n        <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">160px</span>\n      }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></pre>\n<p>Then anchor the right and bottom edges of the Tab Control, Web Viewer, and HTML field, so that they expand when the window is resized. You may also want to reduce the layout width, as this is will affect the minimum width of the grid.</p>\n<p>Resize the window, and you should see the grid columns adjust.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724496592455/148c8733-10d6-462d-99be-91651630b550.gif\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-adding-javascript-to-merge-in-filemaker-data\">Adding JavaScript to Merge in FileMaker Data</h2>\n<p>Ok, the easy part is done. Now to insert data from FileMaker. But first, we need to figure out what data to merge in. For this example, I'm using a Tasks table, and displaying fields for the ID, Title and Owner.</p>\n<p>Start out by using the Data Viewer to construct an ExecuteSQL query to get the fields you want to display in your grid. Be sure to use escape quotes on any table or field names that are <a target=\"_blank\" href=\"https://community.appsmith.com/content/blog/sql-reserved-words\">SQL reserved words</a> or that contain special characters or upper case letters. You have to use double-quotes on <a target=\"_blank\" href=\"https://community.appsmith.com/content/blog/understanding-single-vs-double-quotation-marks-postgresql\">table and field names in SQL</a>, and single quotes for strings.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724497487895/4f2888bf-fd8b-44bb-9995-dc2602f3ca04.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Note the use of <code>|</code> for the row separator instead of the default <code>¶</code>. I had trouble parsing <code>¶</code> in JavaScript, so I chose the pipe character for the row separator. Click <strong>Monitor</strong> to save this expression to use in a few more steps.</p>\n<p>Now go back to the HTML field and remove all the item divs. Then add a script tag to insert the raw SQL result into the grid div.</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'grid'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-string\">'SQL_RESULT'</span>;\n      <span class=\"hljs-keyword\">const</span> grid = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.grid'</span>);\n      grid.innerHTML = data;\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</code></pre>\n<p>Next, use Substitute in the web viewer to insert the SQL_RESULT, instead of displaying the HTML field directly.</p>\n<pre><code class=\"lang-bash\">Substitute ( task::HTML ; \n\n  <span class=\"hljs-string\">\"SQL_RESULT\"</span> ; //search string\n\n  //replace string\n  ExecuteSQL(\n  <span class=\"hljs-string\">\"SELECT \\\"_id\\\", title, owner FROM task\"</span>; \n  <span class=\"hljs-string\">\",\"</span>; <span class=\"hljs-string\">\"|\"</span>) \n\n)\n</code></pre>\n<p>You should now see the FileMaker SQL data in the web viewer, but the grid will now be broken.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724498828667/b4068247-e45e-49e7-ab42-1ebb54d6b5ee.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Now that the data is in the web viewer, you can loop over it to add new item divs to the grid. Update the script tag with:</p>\n<pre><code class=\"lang-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-string\">'SQL_RESULT'</span>;\n      <span class=\"hljs-keyword\">const</span> itemList = data.split(<span class=\"hljs-string\">'|'</span>);\n      <span class=\"hljs-keyword\">const</span> grid = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.grid'</span>);\n      itemList.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> [id, title, owner] = row.split(<span class=\"hljs-string\">','</span>);\n        <span class=\"hljs-keyword\">const</span> item = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>);\n        item.setAttribute(<span class=\"hljs-string\">'class'</span>, <span class=\"hljs-string\">'item'</span>)\n        item.innerHTML = <span class=\"hljs-string\">`#<span class=\"hljs-subst\">${id}</span> - <span class=\"hljs-subst\">${title}</span>\\nOwner: <span class=\"hljs-subst\">${owner}</span>`</span>;\n        grid.appendChild(item)\n      })\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>You should now have a mobile responsive, data driven grid of your FileMaker data! In this example I'm keeping the card content simple by making it all a single string. You could add separate elements if you want to style them differently.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724499468833/d7929d17-dd4d-4213-9556-e9562e415c1d.gif\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-triggering-filemaker-scripts-from-the-web-viewer\">Triggering FileMaker Scripts From the Web Viewer</h2>\n<p>Ok, we have a mobile responsive grid in FileMaker, which is pretty cool on its own. But to make it truly useful, you need click events on each record to trigger FileMaker scripts. It also helps to have some buttons and icons on each card. So first we'll import Bootstrap and Bootstrap Icons, then add a few icons to each card.</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n      <span class=\"hljs-selector-tag\">body</span> {\n        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>;\n        <span class=\"hljs-attribute\">font-family</span>: Verdana, Geneva, sans-serif;\n        <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">12px</span>;\n      }\n      <span class=\"hljs-selector-class\">.grid</span> {\n        <span class=\"hljs-attribute\">display</span>: grid;\n        <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-built_in\">repeat</span>(auto-fit, minmax(<span class=\"hljs-number\">100px</span>, <span class=\"hljs-number\">1</span>fr));\n        <span class=\"hljs-attribute\">gap</span>: <span class=\"hljs-number\">10px</span>;\n      }\n      <span class=\"hljs-selector-class\">.item</span> {\n        <span class=\"hljs-attribute\">border</span>: solid <span class=\"hljs-number\">1px</span> lightgrey;\n        <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n        <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">4px</span>;\n        <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>;\n        <span class=\"hljs-attribute\">text-align</span>: center;\n        <span class=\"hljs-attribute\">position</span>: relative;\n        <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">180px</span>;\n        <span class=\"hljs-attribute\">display</span>: flex;\n        <span class=\"hljs-attribute\">flex-direction</span>: column;\n        <span class=\"hljs-attribute\">justify-content</span>: space-between;\n      }\n      <span class=\"hljs-selector-class\">.btn-container</span> {\n        <span class=\"hljs-attribute\">margin-top</span>: auto;\n        <span class=\"hljs-attribute\">display</span>: flex;\n        <span class=\"hljs-attribute\">justify-content</span>: space-around;\n      }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'grid'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-string\">'SQL_RESULT'</span>;\n      <span class=\"hljs-keyword\">const</span> itemList = data.split(<span class=\"hljs-string\">'|'</span>);\n      <span class=\"hljs-keyword\">const</span> grid = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.grid'</span>);\n      itemList.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> [id, title, owner] = row.split(<span class=\"hljs-string\">','</span>);\n        <span class=\"hljs-keyword\">const</span> item = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>);\n        item.setAttribute(<span class=\"hljs-string\">'class'</span>, <span class=\"hljs-string\">'item'</span>);\n        item.innerHTML = <span class=\"hljs-string\">`#<span class=\"hljs-subst\">${id}</span> - <span class=\"hljs-subst\">${title}</span>&lt;br&gt;Owner: <span class=\"hljs-subst\">${owner}</span>`</span>;\n\n        <span class=\"hljs-keyword\">const</span> btnContainer = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>);\n        btnContainer.classList.add(<span class=\"hljs-string\">'btn-container'</span>);\n\n        <span class=\"hljs-keyword\">const</span> editBtn = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'button'</span>);\n        editBtn.setAttribute(<span class=\"hljs-string\">'class'</span>, <span class=\"hljs-string\">'btn btn-primary btn-sm'</span>);\n        editBtn.innerHTML = <span class=\"hljs-string\">'&lt;i class=\"bi bi-pencil\"&gt;&lt;/i&gt;'</span>;\n\n        <span class=\"hljs-keyword\">const</span> deleteBtn = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'button'</span>);\n        deleteBtn.setAttribute(<span class=\"hljs-string\">'class'</span>, <span class=\"hljs-string\">'btn btn-danger btn-sm'</span>);\n        deleteBtn.innerHTML = <span class=\"hljs-string\">'&lt;i class=\"bi bi-trash\"&gt;&lt;/i&gt;'</span>;\n\n        btnContainer.appendChild(editBtn);\n        btnContainer.appendChild(deleteBtn);\n\n        item.appendChild(btnContainer);\n        grid.appendChild(item);\n      });\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>This should finish out the UI, aside from any CSS you want to add.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724499875707/e4132de3-164b-40f0-b050-004e81a4ea6e.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Next, create a new script called <em>Handle Button Click</em>. Add a <em>Show custom dialog</em> script step to display the script parameter, which we will be passing from the web viewer when a button is clicked.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724502316344/5a479f1e-6106-4508-adc2-f25030aeed75.png\" alt class=\"image--center mx-auto\" /></p>\n<p>Then update the JavaScript to add event listeners to each button to set the <code>onClick</code> to execute this script, passing the task ID and the button that was clicked. You can also add an event for clicking anywhere on the card except for the buttons, and use that to navigate to the record in a detail view. But be sure to use the stopPropagation() method to avoid triggering the button and card click at the same time.</p>\n<p>Here's the final HTML:</p>\n<pre><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n      <span class=\"hljs-selector-tag\">body</span> {\n        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">10px</span>;\n        <span class=\"hljs-attribute\">font-family</span>: Verdana, Geneva, sans-serif;\n        <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">12px</span>;\n      }\n      <span class=\"hljs-selector-class\">.grid</span> {\n        <span class=\"hljs-attribute\">display</span>: grid;\n        <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-built_in\">repeat</span>(auto-fit, minmax(<span class=\"hljs-number\">100px</span>, <span class=\"hljs-number\">1</span>fr));\n        <span class=\"hljs-attribute\">gap</span>: <span class=\"hljs-number\">10px</span>;\n      }\n      <span class=\"hljs-selector-class\">.item</span> {\n        <span class=\"hljs-attribute\">border</span>: solid <span class=\"hljs-number\">1px</span> lightgrey;\n        <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n        <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">4px</span>;\n        <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#f0f0f0</span>;\n        <span class=\"hljs-attribute\">text-align</span>: center;\n        <span class=\"hljs-attribute\">position</span>: relative;\n        <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">180px</span>;\n        <span class=\"hljs-attribute\">display</span>: flex;\n        <span class=\"hljs-attribute\">flex-direction</span>: column;\n        <span class=\"hljs-attribute\">justify-content</span>: space-between;\n        <span class=\"hljs-attribute\">cursor</span>: pointer;\n      }\n      <span class=\"hljs-selector-class\">.btn-container</span> {\n        <span class=\"hljs-attribute\">margin-top</span>: auto;\n        <span class=\"hljs-attribute\">display</span>: flex;\n        <span class=\"hljs-attribute\">justify-content</span>: space-around;\n      }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'grid'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n      <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-string\">'SQL_RESULT'</span>;\n      <span class=\"hljs-keyword\">const</span> itemList = data.split(<span class=\"hljs-string\">'|'</span>);\n      <span class=\"hljs-keyword\">const</span> grid = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.grid'</span>);\n\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callFileMakerScript</span>(<span class=\"hljs-params\">taskId, action</span>) </span>{\n        <span class=\"hljs-keyword\">const</span> jsonPayload = <span class=\"hljs-built_in\">JSON</span>.stringify({ <span class=\"hljs-attr\">id</span>: taskId, <span class=\"hljs-attr\">action</span>: action });\n        <span class=\"hljs-built_in\">window</span>.FileMaker.PerformScript(<span class=\"hljs-string\">'Handle Button Click'</span>, jsonPayload);\n      }\n\n      itemList.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> [id, title, owner] = row.split(<span class=\"hljs-string\">','</span>);\n        <span class=\"hljs-keyword\">const</span> item = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>);\n        item.setAttribute(<span class=\"hljs-string\">'class'</span>, <span class=\"hljs-string\">'item'</span>);\n        item.setAttribute(<span class=\"hljs-string\">'id'</span>, id);\n        item.innerHTML = <span class=\"hljs-string\">`#<span class=\"hljs-subst\">${id}</span> - <span class=\"hljs-subst\">${title}</span>&lt;br&gt;Owner: <span class=\"hljs-subst\">${owner}</span>`</span>;\n\n        <span class=\"hljs-keyword\">const</span> btnContainer = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>);\n        btnContainer.classList.add(<span class=\"hljs-string\">'btn-container'</span>);\n\n        <span class=\"hljs-keyword\">const</span> editBtn = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'button'</span>);\n        editBtn.setAttribute(<span class=\"hljs-string\">'class'</span>, <span class=\"hljs-string\">'btn btn-primary btn-sm'</span>);\n        editBtn.setAttribute(<span class=\"hljs-string\">'id'</span>, <span class=\"hljs-string\">'edit'</span>);\n        editBtn.innerHTML = <span class=\"hljs-string\">'&lt;i class=\"bi bi-pencil\"&gt;&lt;/i&gt;'</span>;\n\n        <span class=\"hljs-keyword\">const</span> deleteBtn = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'button'</span>);\n        deleteBtn.setAttribute(<span class=\"hljs-string\">'class'</span>, <span class=\"hljs-string\">'btn btn-danger btn-sm'</span>);\n        deleteBtn.setAttribute(<span class=\"hljs-string\">'id'</span>, <span class=\"hljs-string\">'delete'</span>);\n        deleteBtn.innerHTML = <span class=\"hljs-string\">'&lt;i class=\"bi bi-trash\"&gt;&lt;/i&gt;'</span>;\n\n        editBtn.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) </span>{\n          event.stopPropagation(); <span class=\"hljs-comment\">// Prevent triggering the card click event</span>\n          callFileMakerScript(id, <span class=\"hljs-string\">'edit'</span>);\n        });\n\n        deleteBtn.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) </span>{\n          event.stopPropagation(); \n          callFileMakerScript(id, <span class=\"hljs-string\">'delete'</span>);\n        });\n\n        btnContainer.appendChild(editBtn);\n        btnContainer.appendChild(deleteBtn);\n\n        item.appendChild(btnContainer);\n\n        item.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n          callFileMakerScript(id, <span class=\"hljs-string\">'select'</span>);\n        });\n\n        grid.appendChild(item);\n      });\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>And here's the final result:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1724503138622/1ccd3cbf-7743-4bb4-87ae-bbc75a6b50c0.gif\" alt class=\"image--center mx-auto\" /></p>\n<p>From here you can use JSONGetElement() to extract the ID and Action from the web viewer click, and run any other script steps you want, based on the script parameters.</p>\n<h2 id=\"heading-whats-next\">What's next?</h2>\n<p>There's a lot more you could do with the card styling, like adding images, and making each data point its own element so you can target them separately with different CSS. You can also add separate fields for the HTML, CSS, and JS, then merge them all together using Substitute. You can even edit data from inside the web viewer, like in this <a target=\"_blank\" href=\"https://github.com/GreenFluxLLC/FileMaker-Experiments/tree/main/SortableFMP\">SortableJS web viewer</a> with draggable, reorderable rows!</p>\n<h3 id=\"heading-about-me\">About Me</h3>\n<p>Hi, I'm Joseph, founder at GreenFlux, LLC and a senior developer advocate at <a target=\"_blank\" href=\"https://www.appsmith.com/\">Appsmith</a>. I enjoy pushing the limits of low-code, and I'm always up for a new challenge. If you have a difficult API integration or web viewer idea, post a comment below and I'll see what I can do!</p>\n","contentMarkdown":"FileMaker Pro's layout design tools are top-notch. Between Form View, List View, Sub-Summary Parts, and Table View, you can build just about any type of UI you want... EXCEPT Grid Layouts! Yes, there are some workarounds you can do with multiple copies of the same layout objects, but the number of columns are fixed.\n\nBut what if you want a mobile responsive grid, with columns that adjust based on the screen width? Years ago I told a few clients this was not possible in FileMaker. But since then I've come to realize how powerful the Web Viewer can be in FileMaker.\n\n**In this guide, I'll show you how to:**\n\n1. Display a list of HTML elements in a Web Viewer\n    \n2. Add CSS to make it mobile responsive\n    \n3. Add JavaScript to merge in data from FileMaker\n    \n4. Trigger FileMaker scripts from within the Web Viewer\n    \n\nLet's get started!\n\n## Static List of Element in a Web Viewer\n\nFirst, create a text field named HTML and add it to the layout, and then add a web viewer that displays the HTML field. You may want to put each one inside separate tabs of a Tab Control so they can be stacked, and each take the full screen width.\n\nIn the web viewer settings, enable *Allow JavaScript to perform FileMaker scripts*.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724495347951/b598a662-7f22-49a7-b6fa-4b12fd0c370d.png align=\"center\")\n\nNext, go back to layout mode and enter this in the HTML field:\n\n```xml\n<html>\n<head>\n</head>\n<body>\n<div class='grid'>\n  <div class='item'>Item #1</div>\n  <div class='item'>Item #2</div>\n  <div class='item'>Item #3</div>\n  <div class='item'>Item #4</div>\n  <div class='item'>Item #5</div>\n  <div class='item'>Item #6</div>\n  <div class='item'>Item #7</div>\n  <div class='item'>Item #8</div>\n  <div class='item'>Item #9</div>\n  <div class='item'>Item #10</div>\n</div>\n</body>\n</html>\n```\n\nYou should see a list in the web viewer like this:\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724495826089/37215266-7dd0-418c-b2e6-4649c6fffa7b.png align=\"center\")\n\n## Adding CSS to Make it Mobile Responsive\n\nNow add some CSS to make each item look like a card, and to make the items display in a grid, by pasting this style tag in the `<head>` section:\n\n```xml\n    <style>\n      body {\n        margin: 10px;\n        font-family: Verdana, Geneva, sans-serif;\n        font-size: 12px;\n      }\n      .grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n        gap: 10px;\n      }\n      .item {\n        border: solid 1px lightgrey;\n        padding: 10px;\n        border-radius: 4px;\n        background-color: #f0f0f0;\n        text-align: center;\n        position: relative;\n        height: 160px\n      }\n    </style>\n```\n\nThen anchor the right and bottom edges of the Tab Control, Web Viewer, and HTML field, so that they expand when the window is resized. You may also want to reduce the layout width, as this is will affect the minimum width of the grid.\n\nResize the window, and you should see the grid columns adjust.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724496592455/148c8733-10d6-462d-99be-91651630b550.gif align=\"center\")\n\n## Adding JavaScript to Merge in FileMaker Data\n\nOk, the easy part is done. Now to insert data from FileMaker. But first, we need to figure out what data to merge in. For this example, I'm using a Tasks table, and displaying fields for the ID, Title and Owner.\n\nStart out by using the Data Viewer to construct an ExecuteSQL query to get the fields you want to display in your grid. Be sure to use escape quotes on any table or field names that are [SQL reserved words](https://community.appsmith.com/content/blog/sql-reserved-words) or that contain special characters or upper case letters. You have to use double-quotes on [table and field names in SQL](https://community.appsmith.com/content/blog/understanding-single-vs-double-quotation-marks-postgresql), and single quotes for strings.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724497487895/4f2888bf-fd8b-44bb-9995-dc2602f3ca04.png align=\"center\")\n\nNote the use of `|` for the row separator instead of the default `¶`. I had trouble parsing `¶` in JavaScript, so I chose the pipe character for the row separator. Click **Monitor** to save this expression to use in a few more steps.\n\nNow go back to the HTML field and remove all the item divs. Then add a script tag to insert the raw SQL result into the grid div.\n\n```xml\n<body>\n    <div class='grid'></div>\n    <script>\n      const data = 'SQL_RESULT';\n      const grid = document.querySelector('.grid');\n      grid.innerHTML = data;\n    </script>\n </body>\n```\n\nNext, use Substitute in the web viewer to insert the SQL\\_RESULT, instead of displaying the HTML field directly.\n\n```bash\nSubstitute ( task::HTML ; \n\n  \"SQL_RESULT\" ; //search string\n\n  //replace string\n  ExecuteSQL(\n  \"SELECT \\\"_id\\\", title, owner FROM task\"; \n  \",\"; \"|\") \n\n)\n```\n\nYou should now see the FileMaker SQL data in the web viewer, but the grid will now be broken.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724498828667/b4068247-e45e-49e7-ab42-1ebb54d6b5ee.png align=\"center\")\n\nNow that the data is in the web viewer, you can loop over it to add new item divs to the grid. Update the script tag with:\n\n```xml\n    <script>\n      const data = 'SQL_RESULT';\n      const itemList = data.split('|');\n      const grid = document.querySelector('.grid');\n      itemList.forEach(row => {\n        const [id, title, owner] = row.split(',');\n        const item = document.createElement('div');\n        item.setAttribute('class', 'item')\n        item.innerHTML = `#${id} - ${title}\\nOwner: ${owner}`;\n        grid.appendChild(item)\n      })\n    </script>\n```\n\nYou should now have a mobile responsive, data driven grid of your FileMaker data! In this example I'm keeping the card content simple by making it all a single string. You could add separate elements if you want to style them differently.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724499468833/d7929d17-dd4d-4213-9556-e9562e415c1d.gif align=\"center\")\n\n## Triggering FileMaker Scripts From the Web Viewer\n\nOk, we have a mobile responsive grid in FileMaker, which is pretty cool on its own. But to make it truly useful, you need click events on each record to trigger FileMaker scripts. It also helps to have some buttons and icons on each card. So first we'll import Bootstrap and Bootstrap Icons, then add a few icons to each card.\n\n```xml\n<html>\n  <head>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css\" rel=\"stylesheet\">\n\n    <style>\n      body {\n        margin: 10px;\n        font-family: Verdana, Geneva, sans-serif;\n        font-size: 12px;\n      }\n      .grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n        gap: 10px;\n      }\n      .item {\n        border: solid 1px lightgrey;\n        padding: 10px;\n        border-radius: 4px;\n        background-color: #f0f0f0;\n        text-align: center;\n        position: relative;\n        height: 180px;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n      }\n      .btn-container {\n        margin-top: auto;\n        display: flex;\n        justify-content: space-around;\n      }\n    </style>\n  </head>\n  <body>\n    <div class='grid'></div>\n    <script>\n      const data = 'SQL_RESULT';\n      const itemList = data.split('|');\n      const grid = document.querySelector('.grid');\n      itemList.forEach(row => {\n        const [id, title, owner] = row.split(',');\n        const item = document.createElement('div');\n        item.setAttribute('class', 'item');\n        item.innerHTML = `#${id} - ${title}<br>Owner: ${owner}`;\n\n        const btnContainer = document.createElement('div');\n        btnContainer.classList.add('btn-container');\n\n        const editBtn = document.createElement('button');\n        editBtn.setAttribute('class', 'btn btn-primary btn-sm');\n        editBtn.innerHTML = '<i class=\"bi bi-pencil\"></i>';\n\n        const deleteBtn = document.createElement('button');\n        deleteBtn.setAttribute('class', 'btn btn-danger btn-sm');\n        deleteBtn.innerHTML = '<i class=\"bi bi-trash\"></i>';\n\n        btnContainer.appendChild(editBtn);\n        btnContainer.appendChild(deleteBtn);\n\n        item.appendChild(btnContainer);\n        grid.appendChild(item);\n      });\n    </script>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n  </body>\n</html>\n```\n\nThis should finish out the UI, aside from any CSS you want to add.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724499875707/e4132de3-164b-40f0-b050-004e81a4ea6e.png align=\"center\")\n\nNext, create a new script called *Handle Button Click*. Add a *Show custom dialog* script step to display the script parameter, which we will be passing from the web viewer when a button is clicked.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724502316344/5a479f1e-6106-4508-adc2-f25030aeed75.png align=\"center\")\n\nThen update the JavaScript to add event listeners to each button to set the `onClick` to execute this script, passing the task ID and the button that was clicked. You can also add an event for clicking anywhere on the card except for the buttons, and use that to navigate to the record in a detail view. But be sure to use the stopPropagation() method to avoid triggering the button and card click at the same time.\n\nHere's the final HTML:\n\n```xml\n<html>\n  <head>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css\" rel=\"stylesheet\">\n\n    <style>\n      body {\n        margin: 10px;\n        font-family: Verdana, Geneva, sans-serif;\n        font-size: 12px;\n      }\n      .grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n        gap: 10px;\n      }\n      .item {\n        border: solid 1px lightgrey;\n        padding: 10px;\n        border-radius: 4px;\n        background-color: #f0f0f0;\n        text-align: center;\n        position: relative;\n        height: 180px;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n        cursor: pointer;\n      }\n      .btn-container {\n        margin-top: auto;\n        display: flex;\n        justify-content: space-around;\n      }\n    </style>\n  </head>\n  <body>\n    <div class='grid'></div>\n    <script>\n      const data = 'SQL_RESULT';\n      const itemList = data.split('|');\n      const grid = document.querySelector('.grid');\n\n      function callFileMakerScript(taskId, action) {\n        const jsonPayload = JSON.stringify({ id: taskId, action: action });\n        window.FileMaker.PerformScript('Handle Button Click', jsonPayload);\n      }\n\n      itemList.forEach(row => {\n        const [id, title, owner] = row.split(',');\n        const item = document.createElement('div');\n        item.setAttribute('class', 'item');\n        item.setAttribute('id', id);\n        item.innerHTML = `#${id} - ${title}<br>Owner: ${owner}`;\n\n        const btnContainer = document.createElement('div');\n        btnContainer.classList.add('btn-container');\n\n        const editBtn = document.createElement('button');\n        editBtn.setAttribute('class', 'btn btn-primary btn-sm');\n        editBtn.setAttribute('id', 'edit');\n        editBtn.innerHTML = '<i class=\"bi bi-pencil\"></i>';\n\n        const deleteBtn = document.createElement('button');\n        deleteBtn.setAttribute('class', 'btn btn-danger btn-sm');\n        deleteBtn.setAttribute('id', 'delete');\n        deleteBtn.innerHTML = '<i class=\"bi bi-trash\"></i>';\n\n        editBtn.addEventListener('click', function(event) {\n          event.stopPropagation(); // Prevent triggering the card click event\n          callFileMakerScript(id, 'edit');\n        });\n\n        deleteBtn.addEventListener('click', function(event) {\n          event.stopPropagation(); \n          callFileMakerScript(id, 'delete');\n        });\n\n        btnContainer.appendChild(editBtn);\n        btnContainer.appendChild(deleteBtn);\n\n        item.appendChild(btnContainer);\n\n        item.addEventListener('click', function() {\n          callFileMakerScript(id, 'select');\n        });\n\n        grid.appendChild(item);\n      });\n    </script>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n  </body>\n</html>\n```\n\nAnd here's the final result:\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1724503138622/1ccd3cbf-7743-4bb4-87ae-bbc75a6b50c0.gif align=\"center\")\n\nFrom here you can use JSONGetElement() to extract the ID and Action from the web viewer click, and run any other script steps you want, based on the script parameters.\n\n## What's next?\n\nThere's a lot more you could do with the card styling, like adding images, and making each data point its own element so you can target them separately with different CSS. You can also add separate fields for the HTML, CSS, and JS, then merge them all together using Substitute. You can even edit data from inside the web viewer, like in this [SortableJS web viewer](https://github.com/GreenFluxLLC/FileMaker-Experiments/tree/main/SortableFMP) with draggable, reorderable rows!\n\n### About Me\n\nHi, I'm Joseph, founder at GreenFlux, LLC and a senior developer advocate at [Appsmith](https://www.appsmith.com/). I enjoy pushing the limits of low-code, and I'm always up for a new challenge. If you have a difficult API integration or web viewer idea, post a comment below and I'll see what I can do!","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1724504263101/8bc75b8f-ccad-4adb-97a1-e174eb69fef3.png","brief":"FileMaker Pro's layout design tools are top-notch. Between Form View, List View, Sub-Summary Parts, and Table View, you can build just about any type of UI you want... EXCEPT Grid Layouts! Yes, there are some workarounds you can do with multiple copi...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":7,"draft":"66c9ad8fd554ab47170c540b","tags":["6483259e8a9f5d9098c40f65","56744721958ef13879b94cad","5cf6188006c28b8d5cd3d862","66ae6b4aa3a2a11383215a48"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"dateUpdated":"2025-03-16T00:34:48.658Z","hasCustomDate":false,"contributors":[{"_id":"686429d7dbf6bfe1b0c07140","user":"66cbafd95e0796343569cfb7","stamp":"cm0a5ryw400010al81pt3ab38"}],"lastActivity":"2024-08-25T22:46:14.888Z","series":"67d61af88a2ed4175bcf3b13","pollOptions":[],"badges":[],"questionReplies":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"66c9dd287695ee667d3cb127"},{"reward":{"type":"xlm"},"sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"66ae6b4bca3036b4212f03f5","createdAt":"2024-08-03T17:39:23.688Z","updatedAt":"2025-03-16T00:32:42.674Z","views":439,"isActive":true,"hasLatex":true,"popularity":6971.0125,"discussionScore":0,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":1,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"ChatFMP: FileMaker Pro Starter Template For Integrating OpenAI Assistants","subtitle":"Just add your API Key and Assistant ID to start chatting with your own custom assistant!","cuid":"clzef4m20000409jwdag65ygj","dateAdded":"2024-08-03T17:39:23.688Z","isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"chatfmp-filemaker-pro-starter-template-for-integrating-openai-assistants","content":"<p>OpenAI’s Assistants allow developers to add a ChatGPT-like AI chat to other apps and websites. I’ve been using the Assistant API quite a bit lately in Appsmith, and I wanted to see if I could build the same type of integration in my original go-to low-code platform, FileMaker Pro.</p>\n<p>It turned out to be fairly easy, aside from the usual struggles with curl requests and escape quotes in FileMaker. Now that I have it working, I wanted to share the app as a resource for other FileMaker devs, and write up a quick tutorial. </p>\n<p><strong>This guide will cover:</strong></p>\n<ul>\n<li><p>Create an OpenAI Assistant</p>\n</li>\n<li><p>Create an OpenAI API key</p>\n</li>\n<li><p>Integrate FileMaker Pro with the Assistant API</p>\n</li>\n</ul>\n<p><strong>Note:</strong> <em>Using the OpenAI API requires a paid plan.</em> </p>\n<h2 id=\"heading-creating-the-assistant\">Creating the Assistant</h2>\n<p>Start out by going to your <a target=\"_blank\" href=\"https://platform.openai.com/assistants\">OpenAI Dashboard</a>, and creating a new Assistant. You can enter <em>Instructions</em> to describe how the Assistant should reply, upload files, and adjust other options as needed for your use case. The Instructions and Files you add here will be used in every conversation (called <code>threads</code> in the API) with the Assistant .</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1722702606274/654c869e-ac57-4710-81eb-e2fc7e7a4339.png\" alt class=\"image--center mx-auto\" /></p>\n<p><strong>Examples</strong></p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>Use Case</td><td>Prompt</td><td>File</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>Employee HR Assistant</td><td>answer employee questions based on our company policies in the file provided</td><td>employee handbook</td></tr>\n<tr>\n<td>Support Assistant</td><td>draft a reply to the support request based on the support docs in the file provided</td><td>support docs</td></tr>\n<tr>\n<td>Contract Assistant</td><td>draft a contract between the two parties</td><td>example contracts</td></tr>\n</tbody>\n</table>\n</div><p>Finish setting up your Assistant and enter a name. Note the <code>assistant_id</code> under the name field. This will be needed in a few steps.</p>\n<h2 id=\"heading-connect-your-assistant-to-fmp\">Connect Your Assistant To FMP</h2>\n<h3 id=\"heading-creating-an-api-key\">Creating an API Key</h3>\n<p>Next, go to the <strong>API Keys</strong> section of the OpenAI dashboard and click <strong>create new secret key</strong>. Give it a name, and then click <strong>create secret key.</strong> Then copy the key.</p>\n<p><strong>Note</strong>: You won't be able to see this value again, so keep this window open for the next step!</p>\n<h3 id=\"heading-connect-your-assistant-to-fmp-1\">Connect Your Assistant To FMP</h3>\n<p>Now, open the ChatFMP app and go to the script editor.</p>\n<p><strong>You can copy the app from here:</strong></p>\n<p><a target=\"_blank\" href=\"https://github.com/GreenFluxLLC/ChatFMP\">https://github.com/GreenFluxLLC/ChatFMP</a></p>\n<p>Update the <code>Create Thread</code> script with your <code>API key</code> and <code>assistant_id</code>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1722701657670/9c694e2e-d4b2-4221-aba1-dee9f7e10651.png\" alt class=\"image--center mx-auto\" /></p>\n<p><strong>That's It!</strong> Your app should now be connected to your own custom AI Assistant.</p>\n<h2 id=\"heading-using-the-app\">Using the App</h2>\n<p>Enter Layout mode and create a new record. Then type your prompt, and hit enter. It takes a few seconds for the AI to analyze the request and write a response, so the <code>Add Message</code> script will run on a loop, checking for a reply every 1.3 seconds.</p>\n<p>You can name the thread, and save the conversation to come back to later. Each record will store a different <code>thread_id</code> so you can switch between conversations and continue the thread at any time.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1722701780766/762e33a7-97b6-4b60-a637-c8d364f6bd54.png\" alt class=\"image--center mx-auto\" /></p>\n<h2 id=\"heading-how-it-works\">How It Works</h2>\n<h3 id=\"heading-assistant-api\">Assistant API</h3>\n<p>In order to 'talk' to your custom AI Assistant, there are <a target=\"_blank\" href=\"https://platform.openai.com/docs/api-reference/threads\">4 API's involved</a>, which run in the following order:</p>\n<ol>\n<li><p><strong>Create Thread</strong>: Returns a <code>thread_id</code>, used in subsequent API's.</p>\n</li>\n<li><p><strong>Add Message</strong>: Adds the user message (prompt) to the thread.</p>\n</li>\n<li><p><strong>Create Run</strong>: Runs the thread with the specified Assistant.</p>\n</li>\n<li><p><strong>List Messages</strong>: Gets the messages from a thread.</p>\n</li>\n</ol>\n<p>List Messages returns an array of all the messages in the thread, with the most recent one first. If you run List Messages too early after adding your prompt, the last message will still be yours because the AI hasn't replied yet. So the script handles checking on a loop until the AI has responded.</p>\n<h3 id=\"heading-filemaker-scripts\">FileMaker Scripts</h3>\n<p>Both scripts use the <em>Insert From URL</em> script step to send a curl request to the Assistant API, and they have the same headers. So I wrote a custom function to construct the curl options.</p>\n<pre><code class=\"lang-javascript\">Let (\n    [\n        <span class=\"hljs-comment\">// Ensure the method is in uppercase and defaults to POST if empty</span>\n        requestMethod = If ( IsEmpty ( method ); <span class=\"hljs-string\">\"POST\"</span>; Upper ( method ) );\n        <span class=\"hljs-comment\">// Format headers: each header is prefixed with \"--header \" and enclosed in quotes</span>\n        formattedHeaders = If (\n            not IsEmpty ( headers );\n            Substitute (\n                headers;\n                <span class=\"hljs-string\">\"¶\"</span>;\n                Quote ( <span class=\"hljs-string\">\"\\\" --header \"</span> )\n            );\n            <span class=\"hljs-string\">\"\"</span>\n        );\n        <span class=\"hljs-comment\">// Prepare headers with initial \"--header\" prefix</span>\n        formattedHeaders = If (\n            not IsEmpty ( formattedHeaders );\n            <span class=\"hljs-string\">\"--header \\\"\"</span> &amp; formattedHeaders &amp; <span class=\"hljs-string\">\"\\\"\"</span>;\n            <span class=\"hljs-string\">\"\"</span>\n        );\n        <span class=\"hljs-comment\">// Format body: add \"--data\" only if body is not empty and method requires it</span>\n        formattedBody = If (\n            not IsEmpty ( body ) and requestMethod ≠ <span class=\"hljs-string\">\"GET\"</span>;\n            <span class=\"hljs-string\">\"--data \"</span> &amp; Quote( body );\n            <span class=\"hljs-string\">\"\"</span>\n        );\n        <span class=\"hljs-comment\">// Construct the full cURL command</span>\n        curlCommand = <span class=\"hljs-string\">\"-X \"</span> &amp; requestMethod &amp; <span class=\"hljs-string\">\" \"</span> &amp; formattedHeaders &amp; <span class=\"hljs-string\">\" \"</span> &amp; formattedBody\n    ];\n    curlCommand\n)\n</code></pre>\n<p>This makes it easy to construct the curl options in the four different APIs.</p>\n<p><strong>Example Usage</strong></p>\n<pre><code class=\"lang-javascript\">curl ( \n  <span class=\"hljs-string\">\"POST\"</span> ; \n\n  $$headers ; \n\n <span class=\"hljs-string\">\"\"</span> <span class=\"hljs-comment\">//no body</span>\n\n)\n</code></pre>\n<p>...which returns:</p>\n<pre><code class=\"lang-bash\">-X POST --header <span class=\"hljs-string\">\"OpenAI-Beta: assistants=v2\"</span>\\\" --header <span class=\"hljs-string\">\"Authorization: Bearer sk-proj-XYZ\"</span>\n</code></pre>\n<p><strong>Create Thread</strong></p>\n<p>This script runs <em>onRecordLoad</em> and checks to see if there is already a <code>thread_id</code>. If not, it creates a new thread and saves the ID.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1722701657670/9c694e2e-d4b2-4221-aba1-dee9f7e10651.png\" alt class=\"image--center mx-auto\" /></p>\n<p><strong>Add Message</strong></p>\n<p>This script adds your prompt as a new message to the thread, then runs the thread with your Assistant. It then loops every 1.3 seconds, checking the response from List Messages.</p>\n<p>Once the assistant has replied, the script exits the loop, saves the response, and then clears your prompt so you can continue the conversation and enter a new message on the same thread.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1722702320370/dca63e9d-4eb4-4a43-96e8-94dd33d53ba2.png\" alt class=\"image--center mx-auto\" /></p>\n<p>To keep this template simple, I'm only displaying the AI's last response, and not the full message history. However, the data is there in the response if you want to extend the UI to display it.</p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>The OpenAI Assistant API makes it easy to enhance other apps and websites with AI features. Using FileMaker's Insert From URL script step, you can integrate a live AI chat into any solution with just a few simple scripts. Just copy the scripts and add your API key and <code>assistant_id</code> to get started.</p>\n<p><strong>Thanks for reading!</strong> I hope this helps others get started with the OpenAI API in FileMaker. If you're looking for other ways to integrate FileMaker Pro with APIs without dealing with FileMaker curl requests, check out the <a target=\"_blank\" href=\"https://community.appsmith.com/content/blog/filemaker-api-connector-free-and-open-source-starter-solution-integrating-filemaker\">Postman-type interface</a> I made for the FileMaker Data API.</p>\n","contentMarkdown":"OpenAI’s Assistants allow developers to add a ChatGPT-like AI chat to other apps and websites. I’ve been using the Assistant API quite a bit lately in Appsmith, and I wanted to see if I could build the same type of integration in my original go-to low-code platform, FileMaker Pro.\n\nIt turned out to be fairly easy, aside from the usual struggles with curl requests and escape quotes in FileMaker. Now that I have it working, I wanted to share the app as a resource for other FileMaker devs, and write up a quick tutorial. \n\n**This guide will cover:**\n\n* Create an OpenAI Assistant\n    \n* Create an OpenAI API key\n    \n* Integrate FileMaker Pro with the Assistant API\n    \n\n**Note:** *Using the OpenAI API requires a paid plan.* \n\n## Creating the Assistant\n\nStart out by going to your [OpenAI Dashboard](https://platform.openai.com/assistants), and creating a new Assistant. You can enter *Instructions* to describe how the Assistant should reply, upload files, and adjust other options as needed for your use case. The Instructions and Files you add here will be used in every conversation (called `threads` in the API) with the Assistant .\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1722702606274/654c869e-ac57-4710-81eb-e2fc7e7a4339.png align=\"center\")\n\n**Examples**\n\n| Use Case | Prompt | File |\n| --- | --- | --- |\n| Employee HR Assistant | answer employee questions based on our company policies in the file provided | employee handbook |\n| Support Assistant | draft a reply to the support request based on the support docs in the file provided | support docs |\n| Contract Assistant | draft a contract between the two parties | example contracts |\n\nFinish setting up your Assistant and enter a name. Note the `assistant_id` under the name field. This will be needed in a few steps.\n\n## Connect Your Assistant To FMP\n\n### Creating an API Key\n\nNext, go to the **API Keys** section of the OpenAI dashboard and click **create new secret key**. Give it a name, and then click **create secret key.** Then copy the key.\n\n**Note**: You won't be able to see this value again, so keep this window open for the next step!\n\n### Connect Your Assistant To FMP\n\nNow, open the ChatFMP app and go to the script editor.\n\n**You can copy the app from here:**\n\n[https://github.com/GreenFluxLLC/ChatFMP](https://github.com/GreenFluxLLC/ChatFMP)\n\nUpdate the `Create Thread` script with your `API key` and `assistant_id`.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1722701657670/9c694e2e-d4b2-4221-aba1-dee9f7e10651.png align=\"center\")\n\n**That's It!** Your app should now be connected to your own custom AI Assistant.\n\n## Using the App\n\nEnter Layout mode and create a new record. Then type your prompt, and hit enter. It takes a few seconds for the AI to analyze the request and write a response, so the `Add Message` script will run on a loop, checking for a reply every 1.3 seconds.\n\nYou can name the thread, and save the conversation to come back to later. Each record will store a different `thread_id` so you can switch between conversations and continue the thread at any time.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1722701780766/762e33a7-97b6-4b60-a637-c8d364f6bd54.png align=\"center\")\n\n## How It Works\n\n### Assistant API\n\nIn order to 'talk' to your custom AI Assistant, there are [4 API's involved](https://platform.openai.com/docs/api-reference/threads), which run in the following order:\n\n1. **Create Thread**: Returns a `thread_id`, used in subsequent API's.\n    \n2. **Add Message**: Adds the user message (prompt) to the thread.\n    \n3. **Create Run**: Runs the thread with the specified Assistant.\n    \n4. **List Messages**: Gets the messages from a thread.\n    \n\nList Messages returns an array of all the messages in the thread, with the most recent one first. If you run List Messages too early after adding your prompt, the last message will still be yours because the AI hasn't replied yet. So the script handles checking on a loop until the AI has responded.\n\n### FileMaker Scripts\n\nBoth scripts use the *Insert From URL* script step to send a curl request to the Assistant API, and they have the same headers. So I wrote a custom function to construct the curl options.\n\n```javascript\nLet (\n    [\n        // Ensure the method is in uppercase and defaults to POST if empty\n        requestMethod = If ( IsEmpty ( method ); \"POST\"; Upper ( method ) );\n        // Format headers: each header is prefixed with \"--header \" and enclosed in quotes\n        formattedHeaders = If (\n            not IsEmpty ( headers );\n            Substitute (\n                headers;\n                \"¶\";\n                Quote ( \"\\\" --header \" )\n            );\n            \"\"\n        );\n        // Prepare headers with initial \"--header\" prefix\n        formattedHeaders = If (\n            not IsEmpty ( formattedHeaders );\n            \"--header \\\"\" & formattedHeaders & \"\\\"\";\n            \"\"\n        );\n        // Format body: add \"--data\" only if body is not empty and method requires it\n        formattedBody = If (\n            not IsEmpty ( body ) and requestMethod ≠ \"GET\";\n            \"--data \" & Quote( body );\n            \"\"\n        );\n        // Construct the full cURL command\n        curlCommand = \"-X \" & requestMethod & \" \" & formattedHeaders & \" \" & formattedBody\n    ];\n    curlCommand\n)\n```\n\nThis makes it easy to construct the curl options in the four different APIs.\n\n**Example Usage**\n\n```javascript\ncurl ( \n  \"POST\" ; \n\n  $$headers ; \n\n \"\" //no body\n\n)\n```\n\n...which returns:\n\n```bash\n-X POST --header \"OpenAI-Beta: assistants=v2\"\\\" --header \"Authorization: Bearer sk-proj-XYZ\" \n```\n\n**Create Thread**\n\nThis script runs *onRecordLoad* and checks to see if there is already a `thread_id`. If not, it creates a new thread and saves the ID.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1722701657670/9c694e2e-d4b2-4221-aba1-dee9f7e10651.png align=\"center\")\n\n**Add Message**\n\nThis script adds your prompt as a new message to the thread, then runs the thread with your Assistant. It then loops every 1.3 seconds, checking the response from List Messages.\n\nOnce the assistant has replied, the script exits the loop, saves the response, and then clears your prompt so you can continue the conversation and enter a new message on the same thread.\n\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1722702320370/dca63e9d-4eb4-4a43-96e8-94dd33d53ba2.png align=\"center\")\n\nTo keep this template simple, I'm only displaying the AI's last response, and not the full message history. However, the data is there in the response if you want to extend the UI to display it.\n\n## Conclusion\n\nThe OpenAI Assistant API makes it easy to enhance other apps and websites with AI features. Using FileMaker's Insert From URL script step, you can integrate a live AI chat into any solution with just a few simple scripts. Just copy the scripts and add your API key and `assistant_id` to get started.\n\n**Thanks for reading!** I hope this helps others get started with the OpenAI API in FileMaker. If you're looking for other ways to integrate FileMaker Pro with APIs without dealing with FileMaker curl requests, check out the [Postman-type interface](https://community.appsmith.com/content/blog/filemaker-api-connector-free-and-open-source-starter-solution-integrating-filemaker) I made for the FileMaker Data API.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1722705439158/66335c9f-18da-406c-9487-a0b60471b588.png","brief":"OpenAI’s Assistants allow developers to add a ChatGPT-like AI chat to other apps and websites. I’ve been using the Assistant API quite a bit lately in Appsmith, and I wanted to see if I could build the same type of integration in my original go-to lo...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":false,"readTime":5,"draft":"660d86564cced4e54d807dc6","tags":["66ae6b4aa3a2a11383215a48","6483259e8a9f5d9098c40f65","5f1a7b4309e95d4d18c3b2ee","638891761e50d717cbfd7b5b","658315f87f2e4b55d0bba63f"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"coAuthors":[],"dateUpdated":"2025-03-16T00:32:42.674Z","hasCustomDate":false,"series":"67d61af88a2ed4175bcf3b13","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"66ae6b4bca3036b4212f03f5"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"discussionScore":0,"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"64847d981029934c86933f2b","createdAt":"2023-06-10T13:41:44.683Z","updatedAt":"2025-03-16T00:43:10.661Z","views":46,"isActive":true,"sourcedFromGithub":false,"hasLatex":false,"popularity":6164.2956,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"Extract Images from a Google Doc and Save to Drive Folder","cuid":"cliq1p7qh000d08jng3z5cr5h","dateAdded":"2023-06-10T13:41:44.681Z","hasCustomDate":false,"isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"extract-images-from-a-google-doc-and-save-to-drive-folder","content":"<p>Recently, I needed to export all the images from a Google Doc and upload them to another service. Seems like a simple job, right? You would think... but not so much.</p>\n<p>Google Docs blocks the standard <em>right-click</em> context menu and replaces it with a custom menu, so there's no <code>right-click &gt; save image as</code> option.</p>\n<p>There is an option to <strong>Save to Keep</strong>, and once saved, then you can right-click and <code>save image as</code>. But I had over 20 images to export, so I wanted to find a way to scrape the images all at once.</p>\n<p>Realistically, it would have taken only 5-10 minutes of work. But that time would have felt like an eternity. Clicking in circles like a mindless robot.</p>\n<p>No, I don't have time for such mindless tasks. I'd much rather spend 1.5 hours writing a script to do this one task that I'll probably never have to do again. But if I do, I'll have a script for it!</p>\n<hr />\n<p><strong>This function takes the source Doc, loops through all images, and saves them to a Drive folder.</strong></p>\n<p>You can specify a destination folder ID, or leave the second parameter blank and it will create a new <em>images</em> folder in the same folder as the source Doc (naming the images after the source doc + #).</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getDocImages</span>(<span class=\"hljs-params\">sourceId, destinationId</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> sourceName = DriveApp.getFileById(sourceId).getName();\n  <span class=\"hljs-keyword\">const</span> allImages  = DocumentApp.openById(sourceId).getBody().getImages();\n\n  <span class=\"hljs-keyword\">if</span>(!destinationId){\n    <span class=\"hljs-keyword\">const</span> parentId = DriveApp.getFileById(sourceId).getParents().next().getId();\n    destinationId  = DriveApp.getFolderById(parentId).createFolder(<span class=\"hljs-string\">'images'</span>).getId()\n    };\n\n  <span class=\"hljs-keyword\">const</span> saveTo = DriveApp.getFolderById(destinationId) ;\n\n  allImages.forEach( <span class=\"hljs-function\">(<span class=\"hljs-params\">i, idx</span>) =&gt;</span> saveTo.createFile(i.getAs(<span class=\"hljs-string\">'image/png'</span>).setName( <span class=\"hljs-string\">`<span class=\"hljs-subst\">${sourceName}</span>_<span class=\"hljs-subst\">${idx + <span class=\"hljs-number\">1</span>}</span>`</span> )) )\n\n}\n</code></pre>\n<p>I'll probably never need to do this again, but if anyone else does, I hope this helps.</p>\n","contentMarkdown":"Recently, I needed to export all the images from a Google Doc and upload them to another service. Seems like a simple job, right? You would think... but not so much.\n\nGoogle Docs blocks the standard *right-click* context menu and replaces it with a custom menu, so there's no `right-click > save image as` option.\n\nThere is an option to **Save to Keep**, and once saved, then you can right-click and `save image as`. But I had over 20 images to export, so I wanted to find a way to scrape the images all at once.\n\nRealistically, it would have taken only 5-10 minutes of work. But that time would have felt like an eternity. Clicking in circles like a mindless robot.\n\nNo, I don't have time for such mindless tasks. I'd much rather spend 1.5 hours writing a script to do this one task that I'll probably never have to do again. But if I do, I'll have a script for it!\n\n---\n\n**This function takes the source Doc, loops through all images, and saves them to a Drive folder.**\n\nYou can specify a destination folder ID, or leave the second parameter blank and it will create a new *images* folder in the same folder as the source Doc (naming the images after the source doc + #).\n\n```javascript\nfunction getDocImages(sourceId, destinationId) {\n  const sourceName = DriveApp.getFileById(sourceId).getName();\n  const allImages  = DocumentApp.openById(sourceId).getBody().getImages();\n\n  if(!destinationId){\n    const parentId = DriveApp.getFileById(sourceId).getParents().next().getId();\n    destinationId  = DriveApp.getFolderById(parentId).createFolder('images').getId()\n    };\n\n  const saveTo = DriveApp.getFolderById(destinationId) ;\n\n  allImages.forEach( (i, idx) => saveTo.createFile(i.getAs('image/png').setName( `${sourceName}_${idx + 1}` )) )\n\n}\n```\n\nI'll probably never need to do this again, but if anyone else does, I hope this helps.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1686404452524/69a630a7-b563-4211-a4c2-2b9718ade691.png","brief":"Recently, I needed to export all the images from a Google Doc and upload them to another service. Seems like a simple job, right? You would think... but not so much.\nGoogle Docs blocks the standard right-click context menu and replaces it with a cust...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":true,"originalArticleURL":"https://www.reddit.com/r/GoogleAppsScript/comments/z4uub7/extract_images_from_google_doc_and_save_to_drive/","readTime":2,"draft":"64847c36e2a501000f33869d","tags":["5e270f8a32d5fad159b76b9a","629d9e42b53317496bbdd9f6","641147fefe70c2c642f666d0"],"publication":"60771c264155da32fc83ad6e","isNewsletterActivated":true,"viewsUpdatedOn":1712628037285,"coAuthors":[],"dateUpdated":"2025-03-16T00:43:10.661Z","series":"679fa03905414f167a095994","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"64847d981029934c86933f2b"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"coAuthors":[],"upvotedBy":[],"downvotedBy":[],"discussionScore":0,"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"toc":[],"_id":"64834faf57ec2e17256ad14b","createdAt":"2023-06-09T16:13:35.332Z","updatedAt":"2023-06-09T16:13:35.332Z","views":94,"isActive":true,"sourcedFromGithub":false,"hasLatex":false,"popularity":6162.5781,"enableToc":false,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":0,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":false,"tweetOptions":{"enabled":false},"title":"Save files to Google Drive by POST-ing the URL to a web app","cuid":"clioromw3000f09mqdfcd6qgq","dateAdded":"2023-06-09T16:13:35.331Z","hasCustomDate":null,"isCoverAttributionHidden":false,"coverImageAttribution":"","coverImagePhotographer":"","stickCoverToBottom":false,"slug":"save-files-to-google-drive-by-post-ing-the-url-to-a-web-app","content":"<p>I just found an old script I wrote that others might find useful, so I wanted to share. This script saves a file to Google Drive when you POST its URL to the webapp, using this format:</p>\n<pre><code class=\"lang-javascript\">{\n  <span class=\"hljs-string\">'key'</span>: <span class=\"hljs-string\">'APIKEY'</span>,\n  <span class=\"hljs-string\">'fileUrl'</span>: <span class=\"hljs-string\">'https://upload.wikimedia.org/wikipedia/commons/0/07/Reddit_icon.svg'</span>,\n  <span class=\"hljs-string\">'folderId'</span>: <span class=\"hljs-string\">'FOLDER_ID'</span>\n}\n</code></pre>\n<p>The script checks the POST body for the API key, then saves the file to the specified folder in Google Drive.</p>\n<p>Just publish as a web app, and set the permissions to:<br />- <em>Execute as:</em> <strong><em>ME</em></strong><br />- <em>Who has access:</em> <strong><em>ANYONE</em></strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> key = <span class=\"hljs-string\">'APIKEY'</span>; <span class=\"hljs-comment\">// custom string to check in request body</span>\n<span class=\"hljs-keyword\">const</span> defaultFolder = <span class=\"hljs-string\">'FOLDER_ID_FROM_URL'</span>; <span class=\"hljs-comment\">// folder to use if no id is given</span>\n<span class=\"hljs-keyword\">const</span> defaultUrl = <span class=\"hljs-string\">'https://upload.wikimedia.org/wikipedia/commons/0/07/Reddit_icon.svg'</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doPost</span>(<span class=\"hljs-params\">e</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> returnedUrl = <span class=\"hljs-string\">''</span>;\n  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-built_in\">JSON</span>.parse(e.postData.contents);\n  <span class=\"hljs-keyword\">if</span> (request.key == key &amp;&amp; <span class=\"hljs-string\">'fileUrl'</span> <span class=\"hljs-keyword\">in</span> request) {\n    returnedUrl = getFileByUrl(request.fileUrl, request.folderId);\n  }\n  <span class=\"hljs-keyword\">return</span> ContentService.createTextOutput(returnedUrl)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getFileByUrl</span>(<span class=\"hljs-params\">url = defaultUrl, folderId = defaultFolder</span>) </span>{ \n  <span class=\"hljs-comment\">// Download file from url and save to GDrive folder with fileName</span>\n  <span class=\"hljs-keyword\">const</span> fileData = UrlFetchApp.fetch(url);\n  <span class=\"hljs-keyword\">const</span> folder = DriveApp.getFolderById(folderId);\n  <span class=\"hljs-keyword\">const</span> fileName = url.split(<span class=\"hljs-string\">'/'</span>).pop(); \n  <span class=\"hljs-comment\">// string after last forwardslash: url/folder/filename.type</span>\n  <span class=\"hljs-keyword\">const</span> newFileUrl = folder.createFile(fileData).setName(fileName).getUrl();\n  Logger.log(newFileUrl);\n  <span class=\"hljs-keyword\">return</span> newFileUrl;\n}\n</code></pre>\n<p>I've used this on several jobs to send files from other platforms to Google Drive. Hope someone finds this helpful!</p>\n","contentMarkdown":"I just found an old script I wrote that others might find useful, so I wanted to share. This script saves a file to Google Drive when you POST its URL to the webapp, using this format:\n\n```javascript\n{\n  'key': 'APIKEY',\n  'fileUrl': 'https://upload.wikimedia.org/wikipedia/commons/0/07/Reddit_icon.svg',\n  'folderId': 'FOLDER_ID'\n}\n```\n\nThe script checks the POST body for the API key, then saves the file to the specified folder in Google Drive.\n\nJust publish as a web app, and set the permissions to:  \n\\- *Execute as:* ***ME***  \n\\- *Who has access:* ***ANYONE***\n\n```javascript\nconst key = 'APIKEY'; // custom string to check in request body\nconst defaultFolder = 'FOLDER_ID_FROM_URL'; // folder to use if no id is given\nconst defaultUrl = 'https://upload.wikimedia.org/wikipedia/commons/0/07/Reddit_icon.svg';\n\nfunction doPost(e) {\n  let returnedUrl = '';\n  let request = JSON.parse(e.postData.contents);\n  if (request.key == key && 'fileUrl' in request) {\n    returnedUrl = getFileByUrl(request.fileUrl, request.folderId);\n  }\n  return ContentService.createTextOutput(returnedUrl)\n}\n\nfunction getFileByUrl(url = defaultUrl, folderId = defaultFolder) { \n  // Download file from url and save to GDrive folder with fileName\n  const fileData = UrlFetchApp.fetch(url);\n  const folder = DriveApp.getFolderById(folderId);\n  const fileName = url.split('/').pop(); \n  // string after last forwardslash: url/folder/filename.type\n  const newFileUrl = folder.createFile(fileData).setName(fileName).getUrl();\n  Logger.log(newFileUrl);\n  return newFileUrl;\n}\n```\n\nI've used this on several jobs to send files from other platforms to Google Drive. Hope someone finds this helpful!","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1686327110546/5d109736-bf60-4079-860c-601a332f6452.png","brief":"I just found an old script I wrote that others might find useful, so I wanted to share. This script saves a file to Google Drive when you POST its URL to the webapp, using this format:\n{\n  'key': 'APIKEY',\n  'fileUrl': 'https://upload.wikimedia.org/w...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":true,"originalArticleURL":"https://www.reddit.com/r/GoogleAppsScript/comments/ywaypj/save_files_to_google_drive_by_posting_the_url_to/","readTime":1,"draft":"63e7cbb778f0a40008a88a71","tags":["5e270f8a32d5fad159b76b9a","56744723958ef13879b95245","629d9e42b53317496bbdd9f6","56744721958ef13879b94cad"],"publication":"60771c264155da32fc83ad6e","ogImage":null,"metaTitle":null,"metaDescription":null,"isNewsletterActivated":true,"viewsUpdatedOn":1713679231780,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"64834faf57ec2e17256ad14b"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"isAnonymous":false,"autoGeneratedCover":"","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"discussionScore":0,"responses":[],"followers":[],"answeredByTarget":false,"inviters":[],"duplicatePosts":[],"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactionsByCurrentUser":[],"_id":"648325a0301e1ca7fa4723c4","createdAt":"2023-06-09T13:14:08.031Z","updatedAt":"2025-03-16T00:29:47.250Z","views":235,"isActive":true,"sourcedFromGithub":false,"hasLatex":false,"popularity":6162.3388,"enableToc":true,"type":"story","partOfPublication":true,"responseCount":0,"replyCount":0,"isFeatured":false,"isEngaging":false,"isDelisted":false,"isNotified":false,"numCollapsed":0,"reactions":[],"totalReactions":5,"totalReactionsByCurrentUser":0,"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"slugOverridden":true,"tweetOptions":{"enabled":false},"title":"FileMaker API Connector","subtitle":"a starter solution for integrating any API or Database with FileMaker","cuid":"cliol9usc000009mc0f2z1ejl","dateAdded":"2023-06-09T13:14:08.028Z","hasCustomDate":false,"isCoverAttributionHidden":false,"stickCoverToBottom":false,"slug":"filemaker-api-connector","toc":[[{"id":"d726b2de-fe25-4408-b3ff-4db1481ae3cc","level":2,"previousLevel":null,"parentId":null,"slug":"getting-started","title":"Getting started"}],[{"id":"46250bae-91c3-4e83-b6c7-a9e4877636cc","level":2,"previousLevel":2,"parentId":null,"slug":"get-or-post","title":"GET or POST"}],[{"id":"7ae9589c-1800-40df-a8ce-e89c0fb22c44","level":1,"previousLevel":2,"parentId":null,"slug":"pagination","title":"Pagination"}],[{"id":"dbccc319-5510-4b86-b000-19cdd779fe49","level":1,"previousLevel":1,"parentId":null,"slug":"low-code-integrate-with-another-database-or-api","title":"Low-code: Integrate with another database or API"}],[{"id":"9f2f2901-e9b6-47dd-b796-8729ec74581d","level":1,"previousLevel":1,"parentId":null,"slug":"building-the-query-body-with-javascript","title":"Building the query body with JavaScript"}],[{"id":"835fb883-db67-4e5a-9786-ca4e4bb5b7de","level":1,"previousLevel":1,"parentId":null,"slug":"server-credentials-and-security","title":"Server credentials and security"}],[{"id":"af127ff6-12a6-412b-9322-7eb9f2c5606b","level":1,"previousLevel":1,"parentId":null,"slug":"final-thoughts","title":"Final thoughts"}]],"content":"<p>Hey, I'm Joseph, I'm an engineer at <a target=\"_blank\" href=\"https://www.appsmith.com/\">Appsmith</a>, and a long-time FileMaker Pro developer and consultant. I freelanced in FileMaker Pro for years, integrating APIs like Shopify, BigCommerce, eBay and other services, using FileMaker's <code>insert from URL</code> script step, curl requests, and roughly a terabyte of <code>\\\"escaped quotes\\\"</code>. 😖</p>\n<p>FileMaker is a powerful low-code platform that can build some pretty amazing apps, but the developer experience isn’t always as… <em>let’s just say</em> — modern. And while curl requests still have their uses, these days, I’d much rather use a <em>Postman-like interface</em> for making API calls. <strong>So I built one!</strong> And I wanted to share it with the FileMaker community.</p>\n<p><a target=\"_blank\" href=\"https://app.appsmith.com/app/filemaker-api-connector/fmp-to-api-6304e44ab189ad45f609d8bb?utm_source=reddit&amp;utm_medium=filemaker-reddit&amp;utm_content=appsmith_apps&amp;utm_campaign=devrel&amp;utm_term=filemaker-appsmith-app\">This app</a>, built on Appsmith, provides a starting point for connecting your FileMaker data to almost any API or Database using one of Appsmith’s many <a target=\"_blank\" href=\"https://www.appsmith.com/integration?utm_source=reddit&amp;utm_medium=filemaker-reddit&amp;utm_content=appsmith_apps&amp;utm_campaign=devrel&amp;utm_term=integration\">integrations</a><strong>,</strong> and a Postman-like API builder.</p>\n<p><img src=\"https://preview.redd.it/p2q3dx4kpxj91.png?width=2254&amp;format=png&amp;auto=webp&amp;v=enabled&amp;s=d04cd5f045adef240418f3090ac95e90c470d7b0\" alt=\"r/filemaker - FileMaker API Connector: A free and open-source starter solution for integrating FileMaker with any API or database\" /></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1660674420036/L5e62_R51.png\" alt=\"Screen Shot 2022-08-16 at 2.24.58 PM.png\" /></p>\n<blockquote>\n<p><strong>Appsmith is</strong> <a target=\"_blank\" href=\"https://github.com/appsmithorg/appsmith\">open-source</a> <strong>and can be self-hosted, or hosted for</strong> <a target=\"_blank\" href=\"https://www.appsmith.com/pricing?utm_source=reddit&amp;utm_medium=filemaker-reddit&amp;utm_content=appsmith_apps&amp;utm_campaign=devrel&amp;utm_term=pricing\">free</a> <strong>on our cloud platform</strong></p>\n</blockquote>\n<h2 id=\"heading-getting-started\">Getting started</h2>\n<p>The app handles the FileMaker login flow and query building, using a UI to select fields and enter search terms without coding—just like a <em>Find Request</em> in FileMaker. It generates the actual JSON query object for you and runs the API request, returning any matching records.</p>\n<p>To get started, click the <a target=\"_blank\" href=\"https://app.appsmith.com/app/filemaker-api-connector/fmp-to-api-6304e44ab189ad45f609d8bb?utm_source=reddit&amp;utm_medium=filemaker-reddit&amp;utm_content=appsmith_apps&amp;utm_campaign=devrel&amp;utm_term=filemaker-appsmith-app\">Fork App</a> button in the top right to copy the app to your Appsmith account. Then, follow the instructions in the app to connect to your FileMaker server.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1660674980756/8e6TVeUZU.png\" alt=\"Screen Shot 2022-08-16 at 2.35.31 PM.png\" /></p>\n<p>Click the <strong>Test Connection</strong> button to verify if the API is working, and then close the setup window.</p>\n<p>Enter the layout name you want to query, and the app will pull in the table name, field names, and total record count. This populates the Select widgets in the query builder so you can easily build complex <code>AND</code>/<code>OR</code> queries with multiple conditions.</p>\n<p>Click <strong>FIND</strong> to run the query and the table should populate with the first 100 records from your FileMaker database. This query builder uses Appsmith's <a target=\"_blank\" href=\"https://docs.appsmith.com/reference/widgets/json-form?utm_source=reddit&amp;utm_medium=filemaker-reddit&amp;utm_content=appsmith_apps&amp;utm_campaign=devrel&amp;utm_term=docs\"><strong>JSON Form widget</strong></a>, which dynamically generates a form from a JSON object.</p>\n<p>Next, try entering a few search terms using the query builder, and set a <strong>Query Type</strong>: <code>AND</code> or <code>OR</code>. See how the query-body preview updates and the JSON structure changes? Awesome! Now let's check out the API requests.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1660693979810/ic59SZNkS.gif\" alt=\"2022-08-16 19.52.22.gif\" /></p>\n<h2 id=\"heading-get-or-post\">GET or POST</h2>\n<p>The FileMaker API uses a <code>GET</code> method to retrieve records from a layout if no specific filter is used. However, to perform a <em>find request</em>, a <code>POST</code> method is used to send the query conditions in the <code>POST</code> body.</p>\n<blockquote>\n<p>The search works the same as FileMaker's native <em>find requests</em>, using the <a target=\"_blank\" href=\"https://support.claris.com/s/article/Refining-find-requests-in-FileMaker-Pro-using-find-operators-1503693059311?language=en_US\">same operators</a> for wildcards <code>*</code>, exact matches <code>==</code>, and others.</p>\n</blockquote>\n<p><code>AND</code> requests group the conditions as multiple properties of the same object:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-string\">\"query\"</span>: [\n    {\n      <span class=\"hljs-string\">\"address_state\"</span>: <span class=\"hljs-string\">\"FL\"</span>,\n      <span class=\"hljs-string\">\"first_name\"</span>: <span class=\"hljs-string\">\"J*\"</span>\n    }\n  ]\n}\n</code></pre>\n<p><code>OR</code> requests separate each condition into a separate object:</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-string\">\"query\"</span>: [\n    {\n      <span class=\"hljs-string\">\"address_state\"</span>: <span class=\"hljs-string\">\"FL\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"first_name\"</span>: <span class=\"hljs-string\">\"J*\"</span>\n    }\n  ]\n}\n</code></pre>\n<h1 id=\"heading-pagination\">Pagination</h1>\n<p>Feel free to skip to the next section if your table has &lt;=100 records. Still here? Ok, well it sounds like you might need to paginate your data. <strong>But do you?</strong> 🤨</p>\n<p>If possible, try to request only the records needed client-side and limit the results to less than 100 records, the limit per request for the FileMaker API. If you really need more than 100 records pulled, check out this <a target=\"_blank\" href=\"https://docs.appsmith.com/core-concepts/data-access-and-binding/displaying-data-read/display-data-tables#pagination\"><strong>guide</strong></a> on pagination.</p>\n<h1 id=\"heading-low-code-integrate-with-another-database-or-api\">Low-code: Integrate with another database or API</h1>\n<p>There's a lot you can do without coding in Appsmith, but you can do even more with JavaScript, like controlling widgets’ behaviors and appearances, transforming data, or chaining together multiple actions. This app was built using a few JavaScript nuggets to make the query builder, but it can easily be extended to send data to another API or database without additional coding.</p>\n<p>Just add a new column to the table widget and set the type to <em>Button</em>. Then add a new API or database query to send data from the current row to another system.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1660917739089/GBE7XIxJ_.gif\" alt=\"add API.gif\" /></p>\n<h1 id=\"heading-building-the-query-body-with-javascript\">Building the query body with JavaScript</h1>\n<p>The JSONForm widget supports Array and Object type fields, and allows the user to add additional objects—sets of fields and values—to an array. In this case, you are adding new query objects with inputs for the <code>field_name</code> and <code>search_term</code>. The data can be accessed inside the JSONForm widget by referencing <code>JSONForm1.formData</code>.</p>\n<pre><code class=\"lang-javascript\">{\n  <span class=\"hljs-string\">\"query\"</span>: [\n    {\n      <span class=\"hljs-string\">\"field_name\"</span>: <span class=\"hljs-string\">\"address_state\"</span>,\n      <span class=\"hljs-string\">\"search_term\"</span>: <span class=\"hljs-string\">\"FL\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"field_name\"</span>: <span class=\"hljs-string\">\"first_name\"</span>,\n      <span class=\"hljs-string\">\"search_term\"</span>: <span class=\"hljs-string\">\"J*\"</span>\n    }\n  ],\n  <span class=\"hljs-string\">\"query_type\"</span>: <span class=\"hljs-string\">\"AND\"</span>\n}\n</code></pre>\n<p>Then, this data is transformed using a <code>map()</code> function, or <code>forEach()</code> function, depending on the <strong>query_type</strong> (<code>AND</code> or <code>OR</code>).</p>\n<pre><code class=\"lang-javascript\">    buildQuery: <span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span>(!JSONForm1.formData?.query){<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>}\n        <span class=\"hljs-keyword\">let</span> queryBody = {<span class=\"hljs-attr\">query</span>:[{}]};\n        <span class=\"hljs-keyword\">let</span> conditions = JSONForm1.formData.query;\n        <span class=\"hljs-keyword\">let</span> queryType = JSONForm1.formData.query_type;\n        <span class=\"hljs-keyword\">if</span>(queryType == <span class=\"hljs-string\">'OR'</span>){\n            <span class=\"hljs-keyword\">let</span> body = conditions.map(<span class=\"hljs-function\"><span class=\"hljs-params\">c</span> =&gt;</span> ({[c.field_name]:c.search_term})); \n            queryBody[<span class=\"hljs-string\">'query'</span>] = body;\n        }<span class=\"hljs-keyword\">else</span>{\n            conditions.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">c</span> =&gt;</span> queryBody[<span class=\"hljs-string\">'query'</span>][<span class=\"hljs-number\">0</span>][c.field_name] = c.search_term)\n        };\n        <span class=\"hljs-keyword\">return</span> queryBody\n    }\n</code></pre>\n<h1 id=\"heading-server-credentials-and-security\">Server credentials and security</h1>\n<p>For easy setup and demo, this public Appsmith app was built using a client-side form to input the FileMaker API credentials as an <em>app user</em>. Appsmith also offer a secure datasource feature that saves the credentials on your Appsmith server as an <em>admin</em>, without exposing them to the <em>user</em>. Check out our <a target=\"_blank\" href=\"https://docs.appsmith.com/core-concepts/connecting-to-data-sources/authentication#create-authenticated-api\"><strong>Authenticated API</strong></a> docs for more info.</p>\n<h1 id=\"heading-final-thoughts\">Final thoughts</h1>\n<p>I started this app as a fun experiment to learn the FileMaker API and query structure, but it quickly evolved into the perfect starting point to connect FileMaker to any API or database. Hope this helps you get started on your own integrations!</p>\n<p>I would love to hear back from you on your experience using the app, or if you would like to collaborate on adding additional features. I may even open-source this app as its own project if others are interested in contributing.</p>\n","contentMarkdown":"Hey, I'm Joseph, I'm an engineer at [Appsmith](https://www.appsmith.com/), and a long-time FileMaker Pro developer and consultant. I freelanced in FileMaker Pro for years, integrating APIs like Shopify, BigCommerce, eBay and other services, using FileMaker's `insert from URL` script step, curl requests, and roughly a terabyte of `\\\"escaped quotes\\\"`. 😖\n\nFileMaker is a powerful low-code platform that can build some pretty amazing apps, but the developer experience isn’t always as… *let’s just say* — modern. And while curl requests still have their uses, these days, I’d much rather use a *Postman-like interface* for making API calls. **So I built one!** And I wanted to share it with the FileMaker community.\n\n[This app](https://app.appsmith.com/app/filemaker-api-connector/fmp-to-api-6304e44ab189ad45f609d8bb?utm_source=reddit&utm_medium=filemaker-reddit&utm_content=appsmith_apps&utm_campaign=devrel&utm_term=filemaker-appsmith-app), built on Appsmith, provides a starting point for connecting your FileMaker data to almost any API or Database using one of Appsmith’s many [integrations](https://www.appsmith.com/integration?utm_source=reddit&utm_medium=filemaker-reddit&utm_content=appsmith_apps&utm_campaign=devrel&utm_term=integration)**,** and a Postman-like API builder.\n\n![r/filemaker - FileMaker API Connector: A free and open-source starter solution for integrating FileMaker with any API or database](https://preview.redd.it/p2q3dx4kpxj91.png?width=2254&format=png&auto=webp&v=enabled&s=d04cd5f045adef240418f3090ac95e90c470d7b0 align=\"left\")\n\n![Screen Shot 2022-08-16 at 2.24.58 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1660674420036/L5e62_R51.png align=\"left\")\n\n> **Appsmith is** [open-source](https://github.com/appsmithorg/appsmith) **and can be self-hosted, or hosted for** [free](https://www.appsmith.com/pricing?utm_source=reddit&utm_medium=filemaker-reddit&utm_content=appsmith_apps&utm_campaign=devrel&utm_term=pricing) **on our cloud platform**\n\n## Getting started\n\nThe app handles the FileMaker login flow and query building, using a UI to select fields and enter search terms without coding—just like a *Find Request* in FileMaker. It generates the actual JSON query object for you and runs the API request, returning any matching records.\n\nTo get started, click the [Fork App](https://app.appsmith.com/app/filemaker-api-connector/fmp-to-api-6304e44ab189ad45f609d8bb?utm_source=reddit&utm_medium=filemaker-reddit&utm_content=appsmith_apps&utm_campaign=devrel&utm_term=filemaker-appsmith-app) button in the top right to copy the app to your Appsmith account. Then, follow the instructions in the app to connect to your FileMaker server.\n\n![Screen Shot 2022-08-16 at 2.35.31 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1660674980756/8e6TVeUZU.png align=\"left\")\n\nClick the **Test Connection** button to verify if the API is working, and then close the setup window.\n\nEnter the layout name you want to query, and the app will pull in the table name, field names, and total record count. This populates the Select widgets in the query builder so you can easily build complex `AND`/`OR` queries with multiple conditions.\n\nClick **FIND** to run the query and the table should populate with the first 100 records from your FileMaker database. This query builder uses Appsmith's [**JSON Form widget**](https://docs.appsmith.com/reference/widgets/json-form?utm_source=reddit&utm_medium=filemaker-reddit&utm_content=appsmith_apps&utm_campaign=devrel&utm_term=docs), which dynamically generates a form from a JSON object.\n\nNext, try entering a few search terms using the query builder, and set a **Query Type**: `AND` or `OR`. See how the query-body preview updates and the JSON structure changes? Awesome! Now let's check out the API requests.\n\n![2022-08-16 19.52.22.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1660693979810/ic59SZNkS.gif align=\"left\")\n\n## GET or POST\n\nThe FileMaker API uses a `GET` method to retrieve records from a layout if no specific filter is used. However, to perform a *find request*, a `POST` method is used to send the query conditions in the `POST` body.\n\n> The search works the same as FileMaker's native *find requests*, using the [same operators](https://support.claris.com/s/article/Refining-find-requests-in-FileMaker-Pro-using-find-operators-1503693059311?language=en_US) for wildcards `*`, exact matches `==`, and others.\n\n`AND` requests group the conditions as multiple properties of the same object:\n\n```js\n{\n  \"query\": [\n    {\n      \"address_state\": \"FL\",\n      \"first_name\": \"J*\"\n    }\n  ]\n}\n```\n\n`OR` requests separate each condition into a separate object:\n\n```js\n{\n  \"query\": [\n    {\n      \"address_state\": \"FL\"\n    },\n    {\n      \"first_name\": \"J*\"\n    }\n  ]\n}\n```\n\n# Pagination\n\nFeel free to skip to the next section if your table has &lt;=100 records. Still here? Ok, well it sounds like you might need to paginate your data. **But do you?** 🤨\n\nIf possible, try to request only the records needed client-side and limit the results to less than 100 records, the limit per request for the FileMaker API. If you really need more than 100 records pulled, check out this [**guide**](https://docs.appsmith.com/core-concepts/data-access-and-binding/displaying-data-read/display-data-tables#pagination) on pagination.\n\n# Low-code: Integrate with another database or API\n\nThere's a lot you can do without coding in Appsmith, but you can do even more with JavaScript, like controlling widgets’ behaviors and appearances, transforming data, or chaining together multiple actions. This app was built using a few JavaScript nuggets to make the query builder, but it can easily be extended to send data to another API or database without additional coding.\n\nJust add a new column to the table widget and set the type to *Button*. Then add a new API or database query to send data from the current row to another system.\n\n![add API.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1660917739089/GBE7XIxJ_.gif align=\"left\")\n\n# Building the query body with JavaScript\n\nThe JSONForm widget supports Array and Object type fields, and allows the user to add additional objects—sets of fields and values—to an array. In this case, you are adding new query objects with inputs for the `field_name` and `search_term`. The data can be accessed inside the JSONForm widget by referencing `JSONForm1.formData`.\n\n```javascript\n{\n  \"query\": [\n    {\n      \"field_name\": \"address_state\",\n      \"search_term\": \"FL\"\n    },\n    {\n      \"field_name\": \"first_name\",\n      \"search_term\": \"J*\"\n    }\n  ],\n  \"query_type\": \"AND\"\n}\n```\n\nThen, this data is transformed using a `map()` function, or `forEach()` function, depending on the **query\\_type** (`AND` or `OR`).\n\n```javascript\n\tbuildQuery: () => {\n\t\tif(!JSONForm1.formData?.query){return ''}\n\t\tlet queryBody = {query:[{}]};\n\t\tlet conditions = JSONForm1.formData.query;\n\t\tlet queryType = JSONForm1.formData.query_type;\n\t\tif(queryType == 'OR'){\n\t\t\tlet body = conditions.map(c => ({[c.field_name]:c.search_term})); \n\t\t\tqueryBody['query'] = body;\n\t\t}else{\n\t\t\tconditions.forEach(c => queryBody['query'][0][c.field_name] = c.search_term)\n\t\t};\n\t\treturn queryBody\n\t}\n```\n\n# Server credentials and security\n\nFor easy setup and demo, this public Appsmith app was built using a client-side form to input the FileMaker API credentials as an *app user*. Appsmith also offer a secure datasource feature that saves the credentials on your Appsmith server as an *admin*, without exposing them to the *user*. Check out our [**Authenticated API**](https://docs.appsmith.com/core-concepts/connecting-to-data-sources/authentication#create-authenticated-api) docs for more info.\n\n# Final thoughts\n\nI started this app as a fun experiment to learn the FileMaker API and query structure, but it quickly evolved into the perfect starting point to connect FileMaker to any API or database. Hope this helps you get started on your own integrations!\n\nI would love to hear back from you on your experience using the app, or if you would like to collaborate on adding additional features. I may even open-source this app as its own project if others are interested in contributing.","coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1661080486105/dnw6KBVrm.png","brief":"Hey, I'm Joseph, I'm an engineer at Appsmith, and a long-time FileMaker Pro developer and consultant. I freelanced in FileMaker Pro for years, integrating APIs like Shopify, BigCommerce, eBay and other services, using FileMaker's insert from URL scri...","author":"60771bbfa3407a32d7041f47","sB":false,"isRepublished":true,"originalArticleURL":"https://www.reddit.com/r/filemaker/comments/wy54l7/filemaker_api_connector_a_free_and_opensource/","readTime":5,"draft":"62fae34fbe14cfbd5d7c9832","tags":["6483259e8a9f5d9098c40f65","63e346678dd6c5e912645b1f","56744721958ef13879b94861","56b1208d04f0061506b360ff"],"publication":"60771c264155da32fc83ad6e","metaTitle":"FileMaker API Connector","isNewsletterActivated":true,"viewsUpdatedOn":1709202639020,"dateUpdated":"2025-03-16T00:29:47.249Z","coAuthors":[],"series":"67d61af88a2ed4175bcf3b13","pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"648325a0301e1ca7fa4723c4"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"discussionScore":0,"totalReactionsByCurrentUser":0,"commentsPaused":false,"toc":[],"_id":"617d4c51d55bde5cb6681334","sourcedFromGithub":false,"isAnonymous":false,"views":827,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1635798668059/zEOx1UN4a.png","autoGeneratedCover":"","brief":"Joseph from GreenFlux, LLC here, with my 3rd and final entry for Appsmith's 2021 Hackathon.\nLet's build a Slack integration in Appsmith!\nAppsmith is great for connecting various APIs and bridging different apps and services in your tech stack. And Sl...","content":"<p>Joseph from <a class=\"user-mention\" href=\"https://hashnode.com/@greenflux\">GreenFlux, LLC</a> here, with my 3rd and final entry for Appsmith's 2021 Hackathon.</p>\n<h2 id=\"heading-lets-build-a-slack-integration-in-appsmith\">Let's build a Slack integration in Appsmith!</h2>\n<p>Appsmith is great for connecting various APIs and bridging different apps and services in your tech stack. And Slack has a HUGE API with several authentication methods for connecting to those other platforms.</p>\n<h3 id=\"heading-webhooks\">Webhooks</h3>\n<p>Slack webhooks are the quick and easy way to set up an API endpoint for sending messages, but they come with a few limitations:</p>\n<ul>\n<li><p>webhooks only work for sending incoming message to Slack</p>\n</li>\n<li><p>the message can only be sent as a 'bot', not as different users</p>\n</li>\n<li><p>the webhook has to be installed to a specific channel or direct message</p>\n</li>\n</ul>\n<p>However, it's much less work to configure than a Slack app with full API access using OAuth flow. If you can live with these limitations, then I'd recommend sticking with the webhook method.</p>\n<p><a target=\"_blank\" href=\"https://api.slack.com/messaging/webhooks\">WEBHOOK SETUP INSTRUCTIONS</a></p>\n<h3 id=\"heading-oauth-20-flow\">OAuth 2.0 Flow</h3>\n<p>For more advanced integrations, Slack apps can be installed with OAuth 2.0 flow to grant the app specific 'scopes', or permissions to run different actions, as any user and in any workspace. The authentication steps are a little tricky to figure out, but this will provide a much wider range of options for the actions you can perform through the API, instead of just sending incoming messages as a bot to one specific channel or direct message.</p>\n<p>Ok, let's be serious, it's more than a little tricky. OAuth 2.0 flow is a huge pain. There's a lot to it, and I'm no expert. I'm not even going to attempt to explain the topic, but I can at least show you how to obtain an access token so you can start making API calls in Appsmith.</p>\n<p>For an in-depth explanation of OAuth 2.0 flow, check out this guide:</p>\n<p><a target=\"_blank\" href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2\">OAUTH GUIDE</a></p>\n<p>And here's Slack's official OAuth guide:</p>\n<p><a target=\"_blank\" href=\"https://api.slack.com/authentication/oauth-v2\">Installing with OAuth</a></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635593378968/3w-PNGxN1.png\" alt=\"slack_oauth_flow_diagram.png\" /></p>\n<h3 id=\"heading-create-new-slack-app\">Create new Slack App</h3>\n<p>Start by creating a <a target=\"_blank\" href=\"https://api.slack.com/apps\">new Slack app</a> , which will assign a client ID and secret. Then click on the <code>Add features and functionality</code> section to expand the menu, and choose <code>Permissions</code>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635593457796/PJvy2LWD_.png\" alt=\"Screen Shot 2021-10-30 at 7.30.03 AM.png\" /></p>\n<p>From there, scroll down and add a new <code>Redirect URL</code>. This URL is where you'll receive the <code>authorization code</code> needed to request an <code>access token</code>.</p>\n<p>Now, you could program in some way to 'catch' this code and automate the next step. However, this only has to be done once and can be done manually if you're authorizing your own app. Automating it would be more important if you're distributing the app to lots of users who would be installing the app to different workspaces. We're gonna cheat and just grab the code from the URL after being redirected. I used my own website as the redirect URL but you can use any valid address. After authorization, you'll be redirected to this address and can copy the authorization code needed for the next step from the address bar.</p>\n<p>Ok, we have a new Slack app created, and a redirect URL assigned. Now we can start the actual OAuth flow and send our first request!</p>\n<h3 id=\"heading-step-1-request-scopes\">Step 1: Request Scope(s)</h3>\n<p>Before we can send authenticated API requests to Slack, we need an <code>access_token</code>. However... one does not simply request an access token. No, no, no. That would be too easy. First we must request scopes! But what scopes should we request? Well, that's step 0.</p>\n<h3 id=\"heading-step-0-choosing-scopes\">Step 0: Choosing Scopes</h3>\n<p>So there's this massive list of scopes, and you have to specifically request the ones you want your app to be able to access. If you miss one and try to use the API, you'll get an error telling you what scope you're missing. Luckily, the Slack API allows you to re-authorize the same app multiple times with different scopes in each request, and any new scopes will be added to the list that you've already authorized for that app.</p>\n<p>This means if you miss a scope on the first request, it's no big deal. Just try the API endpoint you want to use and if you get an error, update the scope list in the URL and re-authorize with the missing scope that was listed in the error.</p>\n<p>Ok, let's build our first scope request so all this will make more sense.</p>\n<p>We're going to 'build' a URL by adding the list of scope we want to authorize to this base URL:</p>\n<p><code>https://slack.com/oauth/v2/authorize?scope=SCOPE1,SCOPE2,SCOPE3...&amp;client_id=CLEINT_ID</code></p>\n<ul>\n<li><p>Copy the <code>client_id</code> from the new app you created in Slack and add to the URL above</p>\n</li>\n<li><p>Review the list of <a target=\"_blank\" href=\"https://api.slack.com/scopes\">scopes</a> and add the ones you think you'll need to the URL, separated by commas</p>\n</li>\n<li><p>Open the URL and approve the app</p>\n</li>\n<li><p>Copy the authorization code from the new URL after the approve screen redirects you</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635594536096/Mqu60-Zxx.gif\" alt=\"2021-10-30 07.48.27.gif\" /></p>\n<p>This authorization code is only good for 10 minutes! So make sure you're ready for the next step or just open the link again to request a new code when you're ready for step 2.</p>\n<h3 id=\"heading-step-2-request-an-access-token\">Step 2: Request an Access Token</h3>\n<p>Now that we have the authorization code, we can use that to request an access token.</p>\n<pre><code class=\"lang-json\">POST: https:<span class=\"hljs-comment\">//slack.com/api/oauth.v2.access?code={AUTHORIZATION_CODE}&amp;client_id={CLEINT_ID}&amp;client_secret={CLIENT_SECRET}</span>\n</code></pre>\n<p>There it is! The elusive, magical, beautiful access token, in all its glory. We can now make authenticated API requests to Slack.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635595312493/AGtcWZUsX.png\" alt=\"Screen Shot 2021-10-30 at 8.01.30 AM.png\" /></p>\n<blockquote>\n<p>Be sure to protect the code just like a password! I've already deleted the test app I created for this post so that I could safely share the screenshots.</p>\n</blockquote>\n<h3 id=\"heading-posting-a-message-to-a-channel\">Posting a message to a channel</h3>\n<p>The Slack API has over 100 method for performing different actions or retrieving data. For this example, we're going to use the <code>chat.postMessage</code> method.</p>\n<p><a target=\"_blank\" href=\"https://api.slack.com/methods/chat.postMessage\">chat.postMessage</a></p>\n<p>Add a new POST request in Appsmith, with the URL for the method you want to use. For sending a message to a channel, use:</p>\n<p><code>https://slack.com/api/chat.postMessage?channel={CHANNEL_ID}</code></p>\n<p>The easiest way to find the Channel_ID is to view the channel from the Slack webapp and get the ID from the URL. You can also use the API to get back a list of channels and lookup the ID, but you only need to look it up once and don't really need to build a separate API call just for that.</p>\n<p>Simply login to the Slack website and click on the 'launch Slack' button for the workspace you want to use. When prompted to open Slack by the browser, click cancel and then 'open Slack in the browser'.</p>\n<p>The Channel ID comes after the Client ID:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635600376929/4auZK_ce2.png\" alt=\"Screen Shot 2021-10-30 at 9.26.09 AM.png\" /></p>\n<p>Use this value to set up a new POST request in Appsmith.</p>\n<pre><code class=\"lang-json\">POST: https:<span class=\"hljs-comment\">//slack.com/api/chat.postMessage?channel={CHANNEL_ID}</span>\n</code></pre>\n<p>Then add the <code>Authorization</code> header, using the authorization code from the previous request.</p>\n<pre><code class=\"lang-json\">Authorization: Bearer {authorization code}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635596418491/_jRSPfIUp.png\" alt=\"Screen Shot 2021-10-30 at 8.19.54 AM.png\" /></p>\n<p>What's this? The response code is 200: success, but the response body says it's an error. This means our authentication is correct, but our app is missing a required scope for the endpoint/method we're trying to use.</p>\n<p>As I mentioned above, Slack apps can be updated with additional permission by editing the scope-request URL and reauthorizing the app. New scopes are added, but no scopes will be removed if you leave out previously requested ones.</p>\n<p>So update the URL with the scope(s) listed under <code>needed</code> in the response body.</p>\n<p>You'll be redirected again and given a <em>new authorization code</em>, so add this to the previous API and request an access token again.</p>\n<p>Ok, let's try sending the message again.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635596987944/G7ddDuE0G.png\" alt=\"Screen Shot 2021-10-30 at 8.29.42 AM.png\" /></p>\n<p>Hmm... ok, the new scope is added, but now the response <code>body.error</code> = \"not_in_channel\". This means our bot user is not a member of the channel we're trying to post a message in.</p>\n<p>Open Slack and go to the channel, then type a forward slash to open the slash-command. Then invite your bot (the name of your app)</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635597759652/waqXG6ZPE.gif\" alt=\"2021-10-30 08.42.16.gif\" /></p>\n<p>Run the <code>chat.postMessage</code> one more time and you should finally get a message to go through.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635597874447/KJtErigjzw.png\" alt=\"Screen Shot 2021-10-30 at 8.44.13 AM.png\" /></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635597878313/TPw6K_qvS.png\" alt=\"Screen Shot 2021-10-30 at 8.44.19 AM.png\" /></p>\n<h2 id=\"heading-success\">SUCCESS!</h2>\n<p><img src=\"https://media.giphy.com/media/Ch7el3epcW3Wo/giphy.gif\" alt=\"High Five\" /></p>\n<hr />\n<p>That's a lot of work just to send a message! But now we have everything needed to start using all of Slack's API methods and do a lot more, like add/remove users, create channels, and all kinds of other actions.</p>\n<p>There's also a wide range of formatting/styling options and interactive components that can be sent, instead of plain text messages. Slack 'surfaces' can be used to send advanced messages with buttons, links, and other interactive components.</p>\n<h3 id=\"heading-thanks-for-reading-and-happy-appsmith-ing\">Thanks for reading, and happy Appsmith-ing!</h3>\n","contentMarkdown":"Joseph from @[GreenFlux, LLC](@greenflux) here, with my 3rd and final entry for Appsmith's 2021 Hackathon.\n\n## Let's build a Slack integration in Appsmith!\n\nAppsmith is great for connecting various APIs and bridging different apps and services in your tech stack. And Slack has a HUGE API with several authentication methods for connecting to those other platforms.\n\n### Webhooks\n\nSlack webhooks are the quick and easy way to set up an API endpoint for sending messages, but they come with a few limitations:\n\n* webhooks only work for sending incoming message to Slack\n    \n* the message can only be sent as a 'bot', not as different users\n    \n* the webhook has to be installed to a specific channel or direct message\n    \n\nHowever, it's much less work to configure than a Slack app with full API access using OAuth flow. If you can live with these limitations, then I'd recommend sticking with the webhook method.\n\n[WEBHOOK SETUP INSTRUCTIONS](https://api.slack.com/messaging/webhooks)\n\n### OAuth 2.0 Flow\n\nFor more advanced integrations, Slack apps can be installed with OAuth 2.0 flow to grant the app specific 'scopes', or permissions to run different actions, as any user and in any workspace. The authentication steps are a little tricky to figure out, but this will provide a much wider range of options for the actions you can perform through the API, instead of just sending incoming messages as a bot to one specific channel or direct message.\n\nOk, let's be serious, it's more than a little tricky. OAuth 2.0 flow is a huge pain. There's a lot to it, and I'm no expert. I'm not even going to attempt to explain the topic, but I can at least show you how to obtain an access token so you can start making API calls in Appsmith.\n\nFor an in-depth explanation of OAuth 2.0 flow, check out this guide:\n\n[OAUTH GUIDE](https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2)\n\nAnd here's Slack's official OAuth guide:\n\n[Installing with OAuth](https://api.slack.com/authentication/oauth-v2)\n\n![slack_oauth_flow_diagram.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635593378968/3w-PNGxN1.png align=\"left\")\n\n### Create new Slack App\n\nStart by creating a [new Slack app](https://api.slack.com/apps) , which will assign a client ID and secret. Then click on the `Add features and functionality` section to expand the menu, and choose `Permissions`.\n\n![Screen Shot 2021-10-30 at 7.30.03 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635593457796/PJvy2LWD_.png align=\"left\")\n\nFrom there, scroll down and add a new `Redirect URL`. This URL is where you'll receive the `authorization code` needed to request an `access token`.\n\nNow, you could program in some way to 'catch' this code and automate the next step. However, this only has to be done once and can be done manually if you're authorizing your own app. Automating it would be more important if you're distributing the app to lots of users who would be installing the app to different workspaces. We're gonna cheat and just grab the code from the URL after being redirected. I used my own website as the redirect URL but you can use any valid address. After authorization, you'll be redirected to this address and can copy the authorization code needed for the next step from the address bar.\n\nOk, we have a new Slack app created, and a redirect URL assigned. Now we can start the actual OAuth flow and send our first request!\n\n### Step 1: Request Scope(s)\n\nBefore we can send authenticated API requests to Slack, we need an `access_token`. However... one does not simply request an access token. No, no, no. That would be too easy. First we must request scopes! But what scopes should we request? Well, that's step 0.\n\n### Step 0: Choosing Scopes\n\nSo there's this massive list of scopes, and you have to specifically request the ones you want your app to be able to access. If you miss one and try to use the API, you'll get an error telling you what scope you're missing. Luckily, the Slack API allows you to re-authorize the same app multiple times with different scopes in each request, and any new scopes will be added to the list that you've already authorized for that app.\n\nThis means if you miss a scope on the first request, it's no big deal. Just try the API endpoint you want to use and if you get an error, update the scope list in the URL and re-authorize with the missing scope that was listed in the error.\n\nOk, let's build our first scope request so all this will make more sense.\n\nWe're going to 'build' a URL by adding the list of scope we want to authorize to this base URL:\n\n`https://slack.com/oauth/v2/authorize?scope=SCOPE1,SCOPE2,SCOPE3...&client_id=CLEINT_ID`\n\n* Copy the `client_id` from the new app you created in Slack and add to the URL above\n    \n* Review the list of [scopes](https://api.slack.com/scopes) and add the ones you think you'll need to the URL, separated by commas\n    \n* Open the URL and approve the app\n    \n* Copy the authorization code from the new URL after the approve screen redirects you\n    \n\n![2021-10-30 07.48.27.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1635594536096/Mqu60-Zxx.gif align=\"left\")\n\nThis authorization code is only good for 10 minutes! So make sure you're ready for the next step or just open the link again to request a new code when you're ready for step 2.\n\n### Step 2: Request an Access Token\n\nNow that we have the authorization code, we can use that to request an access token.\n\n```json\nPOST: https://slack.com/api/oauth.v2.access?code={AUTHORIZATION_CODE}&client_id={CLEINT_ID}&client_secret={CLIENT_SECRET}\n```\n\nThere it is! The elusive, magical, beautiful access token, in all its glory. We can now make authenticated API requests to Slack.\n\n![Screen Shot 2021-10-30 at 8.01.30 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635595312493/AGtcWZUsX.png align=\"left\")\n\n> Be sure to protect the code just like a password! I've already deleted the test app I created for this post so that I could safely share the screenshots.\n\n### Posting a message to a channel\n\nThe Slack API has over 100 method for performing different actions or retrieving data. For this example, we're going to use the `chat.postMessage` method.\n\n[chat.postMessage](https://api.slack.com/methods/chat.postMessage)\n\nAdd a new POST request in Appsmith, with the URL for the method you want to use. For sending a message to a channel, use:\n\n`https://slack.com/api/chat.postMessage?channel={CHANNEL_ID}`\n\nThe easiest way to find the Channel\\_ID is to view the channel from the Slack webapp and get the ID from the URL. You can also use the API to get back a list of channels and lookup the ID, but you only need to look it up once and don't really need to build a separate API call just for that.\n\nSimply login to the Slack website and click on the 'launch Slack' button for the workspace you want to use. When prompted to open Slack by the browser, click cancel and then 'open Slack in the browser'.\n\nThe Channel ID comes after the Client ID:\n\n![Screen Shot 2021-10-30 at 9.26.09 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635600376929/4auZK_ce2.png align=\"left\")\n\nUse this value to set up a new POST request in Appsmith.\n\n```json\nPOST: https://slack.com/api/chat.postMessage?channel={CHANNEL_ID}\n```\n\nThen add the `Authorization` header, using the authorization code from the previous request.\n\n```json\nAuthorization: Bearer {authorization code}\n```\n\n![Screen Shot 2021-10-30 at 8.19.54 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635596418491/_jRSPfIUp.png align=\"left\")\n\nWhat's this? The response code is 200: success, but the response body says it's an error. This means our authentication is correct, but our app is missing a required scope for the endpoint/method we're trying to use.\n\nAs I mentioned above, Slack apps can be updated with additional permission by editing the scope-request URL and reauthorizing the app. New scopes are added, but no scopes will be removed if you leave out previously requested ones.\n\nSo update the URL with the scope(s) listed under `needed` in the response body.\n\nYou'll be redirected again and given a *new authorization code*, so add this to the previous API and request an access token again.\n\nOk, let's try sending the message again.\n\n![Screen Shot 2021-10-30 at 8.29.42 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635596987944/G7ddDuE0G.png align=\"left\")\n\nHmm... ok, the new scope is added, but now the response `body.error` = \"not\\_in\\_channel\". This means our bot user is not a member of the channel we're trying to post a message in.\n\nOpen Slack and go to the channel, then type a forward slash to open the slash-command. Then invite your bot (the name of your app)\n\n![2021-10-30 08.42.16.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1635597759652/waqXG6ZPE.gif align=\"left\")\n\nRun the `chat.postMessage` one more time and you should finally get a message to go through.\n\n![Screen Shot 2021-10-30 at 8.44.13 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635597874447/KJtErigjzw.png align=\"left\")\n\n![Screen Shot 2021-10-30 at 8.44.19 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635597878313/TPw6K_qvS.png align=\"left\")\n\n## SUCCESS!\n\n![High Five](https://media.giphy.com/media/Ch7el3epcW3Wo/giphy.gif align=\"left\")\n\n---\n\nThat's a lot of work just to send a message! But now we have everything needed to start using all of Slack's API methods and do a lot more, like add/remove users, create channels, and all kinds of other actions.\n\nThere's also a wide range of formatting/styling options and interactive components that can be sent, instead of plain text messages. Slack 'surfaces' can be used to send advanced messages with buttons, links, and other interactive components.\n\n### Thanks for reading, and happy Appsmith-ing!","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b95245","56744723958ef13879b952bc","56744723958ef13879b9550d","56744720958ef13879b947ce","56744720958ef13879b947d4"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5035.3398,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35484"],"totalReactions":1,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":true,"numUniqueUsersWhoReacted":0,"title":"Slacksmith: An OAuth 2.0 Flow Example in Appsmith","type":"story","isRepublished":false,"partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"slacksmith-an-oauth-20-flow-example-in-appsmith","importedFromMedium":false,"dateAdded":"2021-10-30T13:44:49.584Z","hasCustomDate":false,"stickCoverToBottom":false,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"cuid":"ckvduwah306ffbas1bwymfx1b","author":"60771bbfa3407a32d7041f47","followersCount":1,"draft":"617b28e354e5820289bf8da3","hasPinnedTag":false,"readTime":7,"__v":0,"reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35484":1},"series":"67d6b35a41604947f002d803","dateUpdated":"2025-03-16T11:20:26.753Z","pendingPublicationApproval":false,"viewsUpdatedOn":1713960047040,"coAuthors":[],"enableToc":false,"isCoverAttributionHidden":false,"updatedAt":"2025-03-16T11:20:26.753Z","uniqueReactions":["5c090d96c2a9c2a674d35484"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35484":1},"id":"617d4c51d55bde5cb6681334"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"discussionScore":0,"totalReactionsByCurrentUser":0,"commentsPaused":false,"toc":[],"_id":"617459d90c5e175a1c616aa2","sourcedFromGithub":false,"isAnonymous":false,"views":1035,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1635014605960/3Q7mzGEGk.png","autoGeneratedCover":"","brief":"Hello again, Joseph from GreenFlux, LLC here with another Appsmith tutorial; I'm submitting this one for Appsmith's Hacktoberfest . Today I will be integrating with the Google Maps Embed API to plot directions for a delivery route, and then send that...","content":"<p>Hello again, Joseph from <a class=\"user-mention\" href=\"https://hashnode.com/@greenflux\">GreenFlux, LLC</a> here with another Appsmith tutorial; I'm submitting this one for Appsmith's <a target=\"_blank\" href=\"https://www.appsmith.com/blog/all-you-need-to-know-about-the-appsmith-hacktoberfest-2021\">Hacktoberfest</a> . Today I will be integrating with the Google Maps Embed API to plot directions for a delivery route, and then send that route to drivers.</p>\n<p>Appsmith's <a target=\"_blank\" href=\"https://docs.appsmith.com/setup/instance-configuration/google-maps\">map widget</a> is great for plotting a single location, or even multiple points at once on a single map. But what if you want to plot <em>directions</em> between two points? The map widget doesn't have any options for displaying directions, so maybe an iframe will work!</p>\n<p>At first I tried just running Google Maps inside an iframe, but unfortunately, Google blocks maps from loading in an iframe.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635008608278/Yy1j1ss2W.png\" alt=\"Screen Shot 2021-10-23 at 1.03.20 PM.png\" /></p>\n<p>It turns out, if you want to run Google Maps in an iframe, you have to use the Maps Embed API.</p>\n<h2 id=\"heading-enabling-the-maps-embed-api\">Enabling the Maps Embed API</h2>\n<p>Most Google APIs have fees involved, which means you have to set up a billing before you can start using the API, but the Google Maps Embed API is free to use! So all you have to do is set up a new project, enable the API and create a new API key.</p>\n<p>Head on over to the quick start guide for detailed instructions on enabling the API. https://developers.google.com/maps/documentation/embed/map-generator</p>\n<p>Ok, now that you've got your Maps Embed API key...</p>\n<h2 id=\"heading-lets-build-a-delivery-app\">Let's build a delivery app! 🚙</h2>\n<p>This guide assumes you're already familiar with a few basics in Appsmith, like adding data sources and connecting an API response to a table widget. If this is new to you, check out a few of my previous tutorials for more info on getting started.</p>\n<p>https://blog.greenflux.us/saving-api-response-data-to-google-sheets-with-appsmith</p>\n<p>https://www.appsmith.com/blog/building-a-shopify-admin-panel-a-step-by-step-guide</p>\n<p>I'm using Google Sheets for storing the list of delivery drivers, and Shopify for receiving orders. However, this guide could easily be applied to other data sources. So go ahead and connect whatever sources you're using for drivers and orders, and add two table widgets, connected to your <code>get_orders</code> and <code>get_drivers</code> queries.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635005420049/WsqdsZS4o.png\" alt=\"Screen Shot 2021-10-23 at 12.10.13 PM.png\" /></p>\n<p>To keep things simple, I'll be using the <code>latitude, longitude</code> format for both the origin and destination in our API request. Although it is possible to search for directions by street address, it's best to send a separate request to look up the <code>place_id</code> first, and then use that <code>id</code> instead of the lat-long value. Fortunately, Shopify stores the lat-long format along with the street address.</p>\n<h2 id=\"heading-create-origin-and-destination-input-widgets\">Create <code>Origin</code> and <code>Destination</code> Input Widgets</h2>\n<p>Before we get to the map iframe, let's set up a few input widgets to store the <code>latitude, longitude</code> of the <code>selectedRow</code> from both table widgets. This will make it a little easier to reference the one field we need from each table in our API request.</p>\n<p><code>Origin</code></p>\n<pre><code class=\"lang-json\">{{tbl_drivers.selectedRow.location}}\n</code></pre>\n<p><code>Destination</code></p>\n<pre><code class=\"lang-json\">{{tbl_orders.selectedRow.billing_address.latitude + <span class=\"hljs-attr\">\",\"</span> + tbl_orders.selectedRow.billing_address.longitude}}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635005985071/4ToS9DIo5.gif\" alt=\"2021-10-23 12.19.11.gif\" /></p>\n<p>Next, add an iframe widget and set the URL to:</p>\n<pre><code class=\"lang-json\">https:<span class=\"hljs-comment\">//www.google.com/maps/embed/v1/directions?origin={{origin.text}}&amp;destination={{destination.text}}&amp;key=YOUR_API_KEY</span>\n</code></pre>\n<p>Deploy the app, and test by selecting different drivers and orders.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635006289173/bXDS2J7MA.gif\" alt=\"2021-10-23 12.23.59.gif\" /></p>\n<p>Awesome! Now we just need a way to send these directions to a delivery driver. This will depend on your specific use-case and how you want to contact each driver. Appsmith doesn't have direct support for sending emails or text messages, but either one could be accomplished with a 3rd party API.</p>\n<p>Here's one example of sending emails using reply.io:</p>\n<p>https://www.appsmith.com/blog/connecting-mixpanel-reply-io-and-activecampaign-using-appsmith-to-engage-with-your-users</p>\n<p>Regardless of how you choose to send the directions, the body of that request is what's important. If you try opening the embed link directly in the browser, you'll end up getting an error that says the API can only be used in an iframe. Instead, we could use the Directions API, but that one isn't completely free. There is a free quota, but you have to enable billing to cover if you go over the free limit.</p>\n<p>https://developers.google.com/maps/documentation/directions/quickstart</p>\n<p><strong>So how can we send directions to our drivers without using a paid API?</strong></p>\n<p>Well, at first we were forced to use the Embed API because the map wouldn't load in an iframe. But if we're sending the directions to a phone or email, we can just send the driver a direct link to the Google Maps site now.</p>\n<p>The URL format is a little different, but we can still use the same <code>origin</code> and <code>destination</code> widgets to pass in the lat-long values.</p>\n<pre><code class=\"lang-json\">https:<span class=\"hljs-comment\">//www.google.com/maps/dir/?api=1&amp;origin={{origin.text}}&amp;destination={{destination.text}}&amp;travelmode=driving</span>\n</code></pre>\n<p>This link will show the same directions as our embed version, but it will work outside of an iframe only, while the Embed API only works <em>inside</em> an iframe. So you can text or email the link directly to your drivers using the same <code>selectedRow</code>s from the orders and drivers table to determine the locations.</p>\n<p>Another option besides text/email is to send a webhook to a Slack Channel , Discord, Telegram, etc. This way your drivers can have an installed app that will notify them of the new message.</p>\n<hr />\n<p>So the big thing to keep in mind is that the regular Google Maps site <em>won't</em> work in an iframe, but the Embed API is free and will work in iframes <em>only</em>. Thanks for reading and happy Appsmithing!</p>\n","contentMarkdown":"Hello again, Joseph from @[GreenFlux, LLC](@greenflux) here with another Appsmith tutorial; I'm submitting this one for Appsmith's [Hacktoberfest](https://www.appsmith.com/blog/all-you-need-to-know-about-the-appsmith-hacktoberfest-2021) . Today I will be integrating with the Google Maps Embed API to plot directions for a delivery route, and then send that route to drivers.\n\nAppsmith's [map widget](https://docs.appsmith.com/setup/instance-configuration/google-maps) is great for plotting a single location, or even multiple points at once on a single map. But what if you want to plot *directions* between two points? The map widget doesn't have any options for displaying directions, so maybe an iframe will work!\n\nAt first I tried just running Google Maps inside an iframe, but unfortunately, Google blocks maps from loading in an iframe.\n\n![Screen Shot 2021-10-23 at 1.03.20 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635008608278/Yy1j1ss2W.png align=\"left\")\n\nIt turns out, if you want to run Google Maps in an iframe, you have to use the Maps Embed API.\n\n## Enabling the Maps Embed API\n\nMost Google APIs have fees involved, which means you have to set up a billing before you can start using the API, but the Google Maps Embed API is free to use! So all you have to do is set up a new project, enable the API and create a new API key.\n\nHead on over to the quick start guide for detailed instructions on enabling the API. https://developers.google.com/maps/documentation/embed/map-generator\n\nOk, now that you've got your Maps Embed API key...\n\n## Let's build a delivery app! 🚙\n\nThis guide assumes you're already familiar with a few basics in Appsmith, like adding data sources and connecting an API response to a table widget. If this is new to you, check out a few of my previous tutorials for more info on getting started.\n\nhttps://blog.greenflux.us/saving-api-response-data-to-google-sheets-with-appsmith\n\nhttps://www.appsmith.com/blog/building-a-shopify-admin-panel-a-step-by-step-guide\n\nI'm using Google Sheets for storing the list of delivery drivers, and Shopify for receiving orders. However, this guide could easily be applied to other data sources. So go ahead and connect whatever sources you're using for drivers and orders, and add two table widgets, connected to your `get_orders` and `get_drivers` queries.\n\n![Screen Shot 2021-10-23 at 12.10.13 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635005420049/WsqdsZS4o.png align=\"left\")\n\nTo keep things simple, I'll be using the `latitude, longitude` format for both the origin and destination in our API request. Although it is possible to search for directions by street address, it's best to send a separate request to look up the `place_id` first, and then use that `id` instead of the lat-long value. Fortunately, Shopify stores the lat-long format along with the street address.\n\n## Create `Origin` and `Destination` Input Widgets\n\nBefore we get to the map iframe, let's set up a few input widgets to store the `latitude, longitude` of the `selectedRow` from both table widgets. This will make it a little easier to reference the one field we need from each table in our API request.\n\n`Origin`\n\n```json\n{{tbl_drivers.selectedRow.location}}\n```\n\n`Destination`\n\n```json\n{{tbl_orders.selectedRow.billing_address.latitude + \",\" + tbl_orders.selectedRow.billing_address.longitude}}\n```\n\n![2021-10-23 12.19.11.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1635005985071/4ToS9DIo5.gif align=\"left\")\n\nNext, add an iframe widget and set the URL to:\n\n```json\nhttps://www.google.com/maps/embed/v1/directions?origin={{origin.text}}&destination={{destination.text}}&key=YOUR_API_KEY\n```\n\nDeploy the app, and test by selecting different drivers and orders.\n\n![2021-10-23 12.23.59.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1635006289173/bXDS2J7MA.gif align=\"left\")\n\nAwesome! Now we just need a way to send these directions to a delivery driver. This will depend on your specific use-case and how you want to contact each driver. Appsmith doesn't have direct support for sending emails or text messages, but either one could be accomplished with a 3rd party API.\n\nHere's one example of sending emails using reply.io:\n\nhttps://www.appsmith.com/blog/connecting-mixpanel-reply-io-and-activecampaign-using-appsmith-to-engage-with-your-users\n\nRegardless of how you choose to send the directions, the body of that request is what's important. If you try opening the embed link directly in the browser, you'll end up getting an error that says the API can only be used in an iframe. Instead, we could use the Directions API, but that one isn't completely free. There is a free quota, but you have to enable billing to cover if you go over the free limit.\n\nhttps://developers.google.com/maps/documentation/directions/quickstart\n\n**So how can we send directions to our drivers without using a paid API?**\n\nWell, at first we were forced to use the Embed API because the map wouldn't load in an iframe. But if we're sending the directions to a phone or email, we can just send the driver a direct link to the Google Maps site now.\n\nThe URL format is a little different, but we can still use the same `origin` and `destination` widgets to pass in the lat-long values.\n\n```json\nhttps://www.google.com/maps/dir/?api=1&origin={{origin.text}}&destination={{destination.text}}&travelmode=driving\n```\n\nThis link will show the same directions as our embed version, but it will work outside of an iframe only, while the Embed API only works *inside* an iframe. So you can text or email the link directly to your drivers using the same `selectedRow`s from the orders and drivers table to determine the locations.\n\nAnother option besides text/email is to send a webhook to a Slack Channel , Discord, Telegram, etc. This way your drivers can have an installed app that will notify them of the new message.\n\n---\n\nSo the big thing to keep in mind is that the regular Google Maps site *won't* work in an iframe, but the Embed API is free and will work in iframes *only*. Thanks for reading and happy Appsmithing!","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["5f6629266dfc523d0a89357b","56744720958ef13879b947ce","56744722958ef13879b950fe","57496c3892b151fb90adc735","56744723958ef13879b95245"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5022.3095,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35484"],"totalReactions":1,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":true,"numUniqueUsersWhoReacted":0,"title":"Creating a Delivery App in Appsmith!","type":"story","partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"creating-a-delivery-app-in-appsmith","pollOptions":[],"dateAdded":"2021-10-23T18:52:09.387Z","badges":[],"questionReplies":[],"contributors":[],"cuid":"ckv45sk2w12j1sss158cmdlob","author":"60771bbfa3407a32d7041f47","followersCount":1,"draft":"617429ed0c5e175a1c61665d","isRepublished":false,"hasPinnedTag":false,"readTime":4,"__v":0,"reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35484":1},"viewsUpdatedOn":1713873642913,"coAuthors":[],"dateUpdated":"2025-03-16T11:20:00.524Z","enableToc":false,"hasCustomDate":false,"isCoverAttributionHidden":false,"series":"67d6b35a41604947f002d803","stickCoverToBottom":false,"updatedAt":"2025-03-16T11:20:00.524Z","uniqueReactions":["5c090d96c2a9c2a674d35484"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35484":1},"id":"617459d90c5e175a1c616aa2"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"discussionScore":0,"totalReactionsByCurrentUser":0,"commentsPaused":false,"toc":[],"_id":"616305e053401f641ba1078c","sourcedFromGithub":false,"isAnonymous":false,"views":2777,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1626377405556/XCHSzYyCp.png","autoGeneratedCover":"","brief":"Hey, Joseph from GreenFlux, LLC here. I'm a full-time freelancer and a HUGE fan of Appsmith ! I've written a few other tutorials for Appsmith before but this one is gonna be a little different:\nInstead of an app for a specific use-case like an admin ...","content":"<p>Hey, Joseph from <a class=\"user-mention\" href=\"https://hashnode.com/@greenflux\">GreenFlux, LLC</a> here. I'm a full-time freelancer and a HUGE fan of <a target=\"_blank\" href=\"https://www.appsmith.com/\">Appsmith</a> ! I've written a few other tutorials for Appsmith before but this one is gonna be a little <em>different</em>:</p>\n<p>Instead of an app for a <em>specific use-case</em> like an admin panel or dashboard, this app is a collection of examples and snippets to help with your <em>other</em> apps. This app- as a whole- does <strong>nothing</strong>! 🙃</p>\n<p>But it's filled with examples using Javascript and REGEX to serve as a single reference for a bunch of common techniques. <strong>It's a meta-app!</strong></p>\n<p>The idea is to pack a ton of tips and tricks into a single sample app, instead of having them scattered throughout the forums, Discord, help docs, etc. This will be an 'evolving' app, as I continue to add more examples over time. Feel free to post suggestions below if you'd like to see any other features added.</p>\n<p>Ok, let's get started!</p>\n<hr />\n<p>Appsmith Widgets provide a wide range of User Input options, like a <strong>Date Picker</strong>, <strong>Select/Multi-Select</strong>, <strong>Checkbox</strong>, <strong>Switch</strong> or just a plain <strong>Input</strong> widget.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626377749201/GRnhtTTdQ.png\" alt=\"Screen Shot 2021-07-15 at 3.33.22 PM.png\" /></p>\n<p>These Widgets have various settings to control the user input and ensure it's of the proper format <em>(Date, Number, Value from List, etc)</em>.</p>\n<p>For more advanced input checking, Javascript and regular expressions can be used inside the properties pane for most widgets. Javascript can also be used to generate the values in a dropdown, filter table data, format text, or dynamically hide inputs.</p>\n<hr />\n<h3 id=\"heading-select-widget-generate-labelvalue-pairs-from-static-list\">Select Widget: Generate label/value pairs from static list</h3>\n<p>The Select Widget's options are controlled using an array of objects with label and value properties.</p>\n<pre><code class=\"lang-json\">[\n  {\n    <span class=\"hljs-attr\">\"label\"</span>: <span class=\"hljs-string\">\"JAN\"</span>,\n    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\"JAN\"</span>\n  },\n  {\n    <span class=\"hljs-attr\">\"label\"</span>: <span class=\"hljs-string\">\"FEB\"</span>,\n    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\"FEB\"</span>\n  },\n  {\n    <span class=\"hljs-attr\">\"label\"</span>: <span class=\"hljs-string\">\"MAR\"</span>,\n    <span class=\"hljs-attr\">\"value\"</span>: <span class=\"hljs-string\">\"MAR\"</span>\n  },...\n]\n</code></pre>\n<p>Typing this out manually can be a bit tedious for a long list of options. But we can use the <code>map()</code> method on an array to return the correct format without all the repetition.</p>\n<p>Now, to get an array, we could type out each value wrapped in quotes and separated by commas:</p>\n<p><code>[\"JAN\",\"FEB\",\"MAR\",...]</code></p>\n<p>Or, to shorten it even further, we can use a single string and <code>split()</code> it!</p>\n<pre><code class=\"lang-json\">{{\n<span class=\"hljs-attr\">\"JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC\"</span>.split('|')\n  .map(m =&gt; ({'label':m,'value':m}))\n}}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1633727669888/L7Nasn_bt.png\" alt=\"Screen Shot 2021-10-08 at 5.02.40 PM.png\" /></p>\n<h3 id=\"heading-datepicker-date-is-within-last-30-days\">DatePicker: Date is within last 30 days</h3>\n<p>The DatePicker Widget has a setting for MIN and MAX date, where you can type the date, explicitly, <em>or</em> click the JS option to enter custom Javascript. But what if you want the MIN or MAX to be relative to <em>today</em> or some other date?</p>\n<p>We can use the <code>moment.js</code> library (included with Appsmith) to generate a new Date that is 30 days before today and use that for the MIN value.</p>\n<p>MIN Date = <code>{{moment().add(-30, 'days')}}</code></p>\n<p>https://momentjscom.readthedocs.io/en/latest/moment/03-manipulating/01-add/</p>\n<h3 id=\"heading-days-of-the-week\">Days of the week</h3>\n<p>Or how about a dropdown for the day of the week, displayed as text but saved as a number:</p>\n<pre><code class=\"lang-json\">{{'SUN|MON|TUE|WED|THU|FRI|SAT'.split('|').map((d,i) =&gt; ({label:d,value:i}))}}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1633817231335/L8totaM4J.gif\" alt=\"2021-10-09 17.59.46.gif\" /></p>\n<h3 id=\"heading-range-of-numbers\">Range of numbers</h3>\n<p>Or how about generating a list of numbers, say 0-100, by increments of 10:</p>\n<pre><code class=\"lang-json\">{{\n[...Array(11)].map(\n    (n,i) =&gt; ({label:i*<span class=\"hljs-number\">10</span>,value:i*<span class=\"hljs-number\">10</span>})\n)\n}}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1633811654620/q6UxhEvg4.gif\" alt=\"2021-10-09 16.33.31.gif\" /></p>\n<p>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax</p>\n<h3 id=\"heading-email-validation\">Email Validation</h3>\n<p>Want to check that the input is a valid email format? Sounds like a job for REGEX!</p>\n<blockquote>\n<p>Note: This is different from <em>validating</em> an email address actually exists and is connected to a real account. But you can do that in Appsmith too! Just check out this tutorial. https://blog.greenflux.us/validating-emails-with-appsmith-and-the-verifalia-api</p>\n</blockquote>\n<p>So, we need a regular expression to check that the user typed in a valid email <em>format</em>. This should be easy, right? 😭</p>\n<pre><code class=\"lang-json\">(?:[a-z0<span class=\"hljs-number\">-9</span>!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0<span class=\"hljs-number\">-9</span>!#$%&amp;'*+/=?^_`{|}~-]+)*|<span class=\"hljs-string\">\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\"</span>)@(?:(?:[a-z0<span class=\"hljs-number\">-9</span>](?:[a-z0<span class=\"hljs-number\">-9</span>-]*[a-z0<span class=\"hljs-number\">-9</span>])?\\.)+[a-z0<span class=\"hljs-number\">-9</span>](?:[a-z0<span class=\"hljs-number\">-9</span>-]*[a-z0<span class=\"hljs-number\">-9</span>])?|\\[(?:(?:<span class=\"hljs-number\">25</span>[<span class=\"hljs-number\">0</span><span class=\"hljs-number\">-5</span>]|<span class=\"hljs-number\">2</span>[<span class=\"hljs-number\">0</span><span class=\"hljs-number\">-4</span>][<span class=\"hljs-number\">0</span><span class=\"hljs-number\">-9</span>]|[<span class=\"hljs-number\">01</span>]?[<span class=\"hljs-number\">0</span><span class=\"hljs-number\">-9</span>][<span class=\"hljs-number\">0</span><span class=\"hljs-number\">-9</span>]?)\\.){3}(?:<span class=\"hljs-number\">25</span>[<span class=\"hljs-number\">0</span><span class=\"hljs-number\">-5</span>]|<span class=\"hljs-number\">2</span>[<span class=\"hljs-number\">0</span><span class=\"hljs-number\">-4</span>][<span class=\"hljs-number\">0</span><span class=\"hljs-number\">-9</span>]|[<span class=\"hljs-number\">01</span>]?[<span class=\"hljs-number\">0</span><span class=\"hljs-number\">-9</span>][<span class=\"hljs-number\">0</span><span class=\"hljs-number\">-9</span>]?|[a-z0<span class=\"hljs-number\">-9</span>-]*[a-z0<span class=\"hljs-number\">-9</span>]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\n</code></pre>\n<p>Oh REGEX, you mysterious beast. No, that's not my cat sitting on the keyboard. This is just one version of an attempt to capture all allowable email addresses, found here:</p>\n<blockquote>\n<p>https://www.emailregex.com/</p>\n</blockquote>\n<p>But if you look in the comments, someone points out that it doesn't work for international domains.</p>\n<p>It doesn't have to be that complex, though. Let's say you own a company that has 4 locations, and all employees have an email in the format <code>first.last@company#.com</code>.</p>\n<p>This REGEX is a good start: <code>[a-z]{2,12}\\.[a-z]{4,12}@company[1-4]\\.com</code></p>\n<p>But what if two users have the same name? We may want to add a number after the last name: <code>[a-z]{2,12}\\.[a-z0-9]{4,12}@company[1-4]\\.com</code></p>\n<p>Ok, perfect. Except, it doesn't cover hyphenated last names. And it would allow the last name to be all numbers. And... you get the point. This is a big topic and there's no right answer.</p>\n<h3 id=\"heading-input-value-exists-in-query-data\">Input Value Exists in Query Data</h3>\n<p>Let's say you have a dynamic list of values, like emails from the <code>get_users</code> query, and you want to ensure the input value exists in the dataset. For this validation, I'm using the <code>some()</code> method which returns true after the <em>first</em> match so that it doesn't have to check the entire table.</p>\n<pre><code class=\"lang-json\">{{get_users.data.some(u =&gt; u.email === Input2.text)}}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1633729370687/2mskbjdq3.png\" alt=\"Screen Shot 2021-10-08 at 5.38.42 PM.png\" /></p>\n<h3 id=\"heading-unique-value-not-in-data-from-query\">Unique Value (Not in data from query)</h3>\n<p>Here, we can use the <code>every()</code> method to make sure every value in the array matches a condition. The expression will return false if any matching value is found, or true, after all values have been checked.</p>\n<pre><code class=\"lang-json\">{{get_users.data.every(u =&gt; u.name !== Input3.text)}}\n</code></pre>\n<h3 id=\"heading-default-value-random-id\">Default Value: Random ID</h3>\n<p>For ID fields, a random HEX string of X-length can be generated with the following snippet:</p>\n<pre><code class=\"lang-json\">{{[...Array(8)].map(() =&gt; Math.floor(Math.random() * 16).toString(16)).join('')}}\n</code></pre>\n<h3 id=\"heading-check-input-for-a-specific-pattern-x\">Check input for a specific pattern (X###-#######)</h3>\n<p>Another job for REGEX!</p>\n<pre><code class=\"lang-json\">^[A-Z]\\d{3}-\\d{7}$\n</code></pre>\n<p>This regular expression will match any upper case letter followed by 3 digits, a dash and 7 digits. The <code>[A-Z]</code> declares a range of allowed values for the first character. Then the <code>\\d</code> represents a single digit and the <code>{#}</code> indicates how many digits are required.</p>\n<h3 id=\"heading-hide-input-if-another-input-is-invalid\">Hide input if another input is invalid</h3>\n<p>Just reference the widget's <code>isValid</code> property. This returns a true/false value, so it's already in the right format to insert directly in the Show/Hide JS setting.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1633730035077/WWLjhokHG.gif\" alt=\"2021-10-08 17.53.34.gif\" /></p>\n<h3 id=\"heading-generate-the-options-for-a-select-widget-from-query-data\">Generate the options for a select widget from query data</h3>\n<p>Need a dropdown using values from an existing query? This one is a little tricky if the data has duplicate values.</p>\n<p>In this example, I wanted to make a dropdown of the Countries from the <code>get_users</code> query. But duplicates must be removed, or the Appsmith editor will throw an error. And the final array should be sorted alphabetically, after removing duplicates.</p>\n<p>This could be done with pure Javascript but it's a lot easier with Lodash, which is also included in Appsmith!</p>\n<p>https://docs-lodash.com/v4/sort-by/</p>\n<pre><code class=\"lang-json\">{{\n_.sortBy(_.uniqBy(get_users.data.map((u) =&gt; ( \n{label:u.country, value:u.country} \n) ), 'value'), 'value')\n}}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1633734092893/dPgUNN8wh.png\" alt=\"Screen Shot 2021-10-08 at 7.00.56 PM.png\" /></p>\n<p>Special thanks to @cokoghenun and @Somangshu on Discord for help on this one!</p>\n<h3 id=\"heading-filter-table-data-based-on-selectedoption\">Filter table data based on SelectedOption</h3>\n<p>Now that the Select options contain all the Countries from our User table, we can use the selected value to filter the table. However, we need to include a way to show all Countries and some way to handle when no option is selected.</p>\n<p>I started by adding a placeholder value to the top of the country list.</p>\n<pre><code class=\"lang-json\">{{\n[{label:'--country', value:''}].concat(\n_.sortBy(_.uniqBy(get_users.data.map((u) =&gt; ( \n{label:u.country, value:u.country} \n) ), 'value'), 'value'))\n}}\n</code></pre>\n<p>Then, updated the Table1 binding to filter() the get_users data.</p>\n<pre><code class=\"lang-json\">{{\nget_users.data.filter( \n  u =&gt; {return u.country === Select2.selectedOptionValue || Select2.selectedOptionValue === ''}\n)\n}}\n</code></pre>\n<p>The || (OR) operator is used to return true when the selectedOptionValue is blank.</p>\n<h3 id=\"heading-display-data-from-the-selected-row-of-a-table\">Display data from the selected row of a table</h3>\n<p>Table Widgets have a selectedRow property that can be referenced in other widgets. You can even combined multiple values into a single expression to feed into the next widget.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1633731983583/JEyko0wHN.png\" alt=\"Screen Shot 2021-10-08 at 6.25.58 PM.png\" /></p>\n<h3 id=\"heading-dynamically-format-data-based-on-its-value\">Dynamically format data based on its value</h3>\n<p>Javascript can also be used in Appsmith to dynamically control formatting, like text color. To assign a different color to each value, you can define a new object with your desired settings and then lookup the color for each row.</p>\n<pre><code class=\"lang-json\">{{ function(){\nlet colors = {\n    'Netherlands':'Blue',\n    'Norway':'Green',\n    'United Kingdom':'Red',\n    'United States':'Purple',\n    'Canada':'Orange'\n};\nreturn colors[currentRow.country]\n}()}}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1633876035606/A_uBcfnBv.png\" alt=\"Screen Shot 2021-10-10 at 10.21.04 AM.png\" /></p>\n<h3 id=\"heading-dynamically-add-color-to-a-number-value-based-on-a-range\">Dynamically add color to a number value based on a range</h3>\n<pre><code class=\"lang-json\">{{( () =&gt; { \n    const id = currentRow.id;\n\n    if (id &lt; 4)\n { return '#FF0000'}\n\nelse if (id &gt;=<span class=\"hljs-number\">4</span> &amp;&amp; id &lt; <span class=\"hljs-number\">6</span>)\n   {return '#FFCC00'} \n\nelse if (id &gt;=<span class=\"hljs-number\">6</span> &amp;&amp; id &lt; <span class=\"hljs-number\">8</span>)\n   {return '#0066FF'}\n\n    else if (id &gt;=<span class=\"hljs-number\">8</span> &amp;&amp; id &lt; <span class=\"hljs-number\">12</span>)\n   {return '#00CC00'}\n\n  })()\n}}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1633878070093/s7pRqZvg4.png\" alt=\"Screen Shot 2021-10-10 at 11.01.01 AM.png\" /></p>\n<hr />\n<p>As you can see, there's a lot you can do with Javascript and REGEX in Appsmith! These examples are mostly limited to formatting and input validation, but you can also use Javascript to run API calls, chain together actions, transform data and more.</p>\n<p>I'll be updating this sample with new snippets and examples, so check back for updates. And feel free to send in your own snippets or requests for new examples. I hope you all find this useful. Thanks for reading!</p>\n<p>Here's a link to the app:</p>\n<p>https://app.appsmith.com/applications/61328586987e5a1cc9ff7511/pages/616023beea18372f051050c9</p>\n","contentMarkdown":"Hey, Joseph from @[GreenFlux, LLC](@greenflux) here. I'm a full-time freelancer and a HUGE fan of [Appsmith](https://www.appsmith.com/) ! I've written a few other tutorials for Appsmith before but this one is gonna be a little *different*:\n\nInstead of an app for a *specific use-case* like an admin panel or dashboard, this app is a collection of examples and snippets to help with your *other* apps. This app- as a whole- does **nothing**! 🙃\n\nBut it's filled with examples using Javascript and REGEX to serve as a single reference for a bunch of common techniques. **It's a meta-app!**\n\nThe idea is to pack a ton of tips and tricks into a single sample app, instead of having them scattered throughout the forums, Discord, help docs, etc. This will be an 'evolving' app, as I continue to add more examples over time. Feel free to post suggestions below if you'd like to see any other features added.\n\nOk, let's get started!\n\n---\n\nAppsmith Widgets provide a wide range of User Input options, like a **Date Picker**, **Select/Multi-Select**, **Checkbox**, **Switch** or just a plain **Input** widget.\n\n![Screen Shot 2021-07-15 at 3.33.22 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626377749201/GRnhtTTdQ.png align=\"left\")\n\nThese Widgets have various settings to control the user input and ensure it's of the proper format *(Date, Number, Value from List, etc)*.\n\nFor more advanced input checking, Javascript and regular expressions can be used inside the properties pane for most widgets. Javascript can also be used to generate the values in a dropdown, filter table data, format text, or dynamically hide inputs.\n\n---\n\n### Select Widget: Generate label/value pairs from static list\n\nThe Select Widget's options are controlled using an array of objects with label and value properties.\n\n```json\n[\n  {\n    \"label\": \"JAN\",\n    \"value\": \"JAN\"\n  },\n  {\n    \"label\": \"FEB\",\n    \"value\": \"FEB\"\n  },\n  {\n    \"label\": \"MAR\",\n    \"value\": \"MAR\"\n  },...\n]\n```\n\nTyping this out manually can be a bit tedious for a long list of options. But we can use the `map()` method on an array to return the correct format without all the repetition.\n\nNow, to get an array, we could type out each value wrapped in quotes and separated by commas:\n\n`[\"JAN\",\"FEB\",\"MAR\",...]`\n\nOr, to shorten it even further, we can use a single string and `split()` it!\n\n```json\n{{\n\"JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC\".split('|')\n  .map(m => ({'label':m,'value':m}))\n}}\n```\n\n![Screen Shot 2021-10-08 at 5.02.40 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633727669888/L7Nasn_bt.png align=\"left\")\n\n### DatePicker: Date is within last 30 days\n\nThe DatePicker Widget has a setting for MIN and MAX date, where you can type the date, explicitly, *or* click the JS option to enter custom Javascript. But what if you want the MIN or MAX to be relative to *today* or some other date?\n\nWe can use the `moment.js` library (included with Appsmith) to generate a new Date that is 30 days before today and use that for the MIN value.\n\nMIN Date = `{{moment().add(-30, 'days')}}`\n\nhttps://momentjscom.readthedocs.io/en/latest/moment/03-manipulating/01-add/\n\n### Days of the week\n\nOr how about a dropdown for the day of the week, displayed as text but saved as a number:\n\n```json\n{{'SUN|MON|TUE|WED|THU|FRI|SAT'.split('|').map((d,i) => ({label:d,value:i}))}}\n```\n\n![2021-10-09 17.59.46.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1633817231335/L8totaM4J.gif align=\"left\")\n\n### Range of numbers\n\nOr how about generating a list of numbers, say 0-100, by increments of 10:\n\n```json\n{{\n[...Array(11)].map(\n\t(n,i) => ({label:i*10,value:i*10})\n)\n}}\n```\n\n![2021-10-09 16.33.31.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1633811654620/q6UxhEvg4.gif align=\"left\")\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread\\_syntax\n\n### Email Validation\n\nWant to check that the input is a valid email format? Sounds like a job for REGEX!\n\n> Note: This is different from *validating* an email address actually exists and is connected to a real account. But you can do that in Appsmith too! Just check out this tutorial. https://blog.greenflux.us/validating-emails-with-appsmith-and-the-verifalia-api\n\nSo, we need a regular expression to check that the user typed in a valid email *format*. This should be easy, right? 😭\n\n```json\n(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\n```\n\nOh REGEX, you mysterious beast. No, that's not my cat sitting on the keyboard. This is just one version of an attempt to capture all allowable email addresses, found here:\n\n> https://www.emailregex.com/\n\nBut if you look in the comments, someone points out that it doesn't work for international domains.\n\nIt doesn't have to be that complex, though. Let's say you own a company that has 4 locations, and all employees have an email in the format `first.last@company#.com`.\n\nThis REGEX is a good start: `[a-z]{2,12}\\.[a-z]{4,12}@company[1-4]\\.com`\n\nBut what if two users have the same name? We may want to add a number after the last name: `[a-z]{2,12}\\.[a-z0-9]{4,12}@company[1-4]\\.com`\n\nOk, perfect. Except, it doesn't cover hyphenated last names. And it would allow the last name to be all numbers. And... you get the point. This is a big topic and there's no right answer.\n\n### Input Value Exists in Query Data\n\nLet's say you have a dynamic list of values, like emails from the `get_users` query, and you want to ensure the input value exists in the dataset. For this validation, I'm using the `some()` method which returns true after the *first* match so that it doesn't have to check the entire table.\n\n```json\n{{get_users.data.some(u => u.email === Input2.text)}}\n```\n\n![Screen Shot 2021-10-08 at 5.38.42 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633729370687/2mskbjdq3.png align=\"left\")\n\n### Unique Value (Not in data from query)\n\nHere, we can use the `every()` method to make sure every value in the array matches a condition. The expression will return false if any matching value is found, or true, after all values have been checked.\n\n```json\n{{get_users.data.every(u => u.name !== Input3.text)}}\n```\n\n### Default Value: Random ID\n\nFor ID fields, a random HEX string of X-length can be generated with the following snippet:\n\n```json\n{{[...Array(8)].map(() => Math.floor(Math.random() * 16).toString(16)).join('')}}\n```\n\n### Check input for a specific pattern (X###-#######)\n\nAnother job for REGEX!\n\n```json\n^[A-Z]\\d{3}-\\d{7}$\n```\n\nThis regular expression will match any upper case letter followed by 3 digits, a dash and 7 digits. The `[A-Z]` declares a range of allowed values for the first character. Then the `\\d` represents a single digit and the `{#}` indicates how many digits are required.\n\n### Hide input if another input is invalid\n\nJust reference the widget's `isValid` property. This returns a true/false value, so it's already in the right format to insert directly in the Show/Hide JS setting.\n\n![2021-10-08 17.53.34.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1633730035077/WWLjhokHG.gif align=\"left\")\n\n### Generate the options for a select widget from query data\n\nNeed a dropdown using values from an existing query? This one is a little tricky if the data has duplicate values.\n\nIn this example, I wanted to make a dropdown of the Countries from the `get_users` query. But duplicates must be removed, or the Appsmith editor will throw an error. And the final array should be sorted alphabetically, after removing duplicates.\n\nThis could be done with pure Javascript but it's a lot easier with Lodash, which is also included in Appsmith!\n\nhttps://docs-lodash.com/v4/sort-by/\n\n```json\n{{\n_.sortBy(_.uniqBy(get_users.data.map((u) => ( \n{label:u.country, value:u.country} \n) ), 'value'), 'value')\n}}\n```\n\n![Screen Shot 2021-10-08 at 7.00.56 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633734092893/dPgUNN8wh.png align=\"left\")\n\nSpecial thanks to @cokoghenun and @Somangshu on Discord for help on this one!\n\n### Filter table data based on SelectedOption\n\nNow that the Select options contain all the Countries from our User table, we can use the selected value to filter the table. However, we need to include a way to show all Countries and some way to handle when no option is selected.\n\nI started by adding a placeholder value to the top of the country list.\n\n```json\n{{\n[{label:'--country', value:''}].concat(\n_.sortBy(_.uniqBy(get_users.data.map((u) => ( \n{label:u.country, value:u.country} \n) ), 'value'), 'value'))\n}}\n```\n\nThen, updated the Table1 binding to filter() the get\\_users data.\n\n```json\n{{\nget_users.data.filter( \n  u => {return u.country === Select2.selectedOptionValue || Select2.selectedOptionValue === ''}\n)\n}}\n```\n\nThe || (OR) operator is used to return true when the selectedOptionValue is blank.\n\n### Display data from the selected row of a table\n\nTable Widgets have a selectedRow property that can be referenced in other widgets. You can even combined multiple values into a single expression to feed into the next widget.\n\n![Screen Shot 2021-10-08 at 6.25.58 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633731983583/JEyko0wHN.png align=\"left\")\n\n### Dynamically format data based on its value\n\nJavascript can also be used in Appsmith to dynamically control formatting, like text color. To assign a different color to each value, you can define a new object with your desired settings and then lookup the color for each row.\n\n```json\n{{ function(){\nlet colors = {\n\t'Netherlands':'Blue',\n\t'Norway':'Green',\n\t'United Kingdom':'Red',\n\t'United States':'Purple',\n\t'Canada':'Orange'\n};\nreturn colors[currentRow.country]\n}()}}\n```\n\n![Screen Shot 2021-10-10 at 10.21.04 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633876035606/A_uBcfnBv.png align=\"left\")\n\n### Dynamically add color to a number value based on a range\n\n```json\n{{( () => { \n\tconst id = currentRow.id;\n\t\n\tif (id < 4)\n { return '#FF0000'}\n\t\nelse if (id >=4 && id < 6)\n   {return '#FFCC00'} \n\t\t\nelse if (id >=6 && id < 8)\n   {return '#0066FF'}\n\t\n\telse if (id >=8 && id < 12)\n   {return '#00CC00'}\n\n  })()\n}}\n```\n\n![Screen Shot 2021-10-10 at 11.01.01 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1633878070093/s7pRqZvg4.png align=\"left\")\n\n---\n\nAs you can see, there's a lot you can do with Javascript and REGEX in Appsmith! These examples are mostly limited to formatting and input validation, but you can also use Javascript to run API calls, chain together actions, transform data and more.\n\nI'll be updating this sample with new snippets and examples, so check back for updates. And feel free to send in your own snippets or requests for new examples. I hope you all find this useful. Thanks for reading!\n\nHere's a link to the app:\n\nhttps://app.appsmith.com/applications/61328586987e5a1cc9ff7511/pages/616023beea18372f051050c9","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744721958ef13879b94cad","56f6aef0aa013a5f87413615","5f6629266dfc523d0a89357b","56744720958ef13879b947ce","57ebac0bd9b08ec06a77be05"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4997.5509,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35484","567453d0b73d6a82ac8c5abc","5c090d96c2a9c2a674d35485"],"totalReactions":3,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":true,"syncAlgolia":true,"numUniqueUsersWhoReacted":0,"title":"Appsmith Tutorial: Validating User Input","type":"story","isRepublished":false,"partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"appsmith-tutorial-validating-user-input","importedFromMedium":false,"dateAdded":"2021-10-10T15:25:20.734Z","hasCustomDate":false,"stickCoverToBottom":false,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"cuid":"ckuldoiwk0644rvs15cnma4dj","author":"60771bbfa3407a32d7041f47","followersCount":1,"draft":"60f08c6c303c5845ab8c9efd","hasPinnedTag":false,"readTime":7,"__v":0,"reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35484":1,"reaction_567453d0b73d6a82ac8c5abc":1,"reaction_5c090d96c2a9c2a674d35485":1},"series":"67d6b35a41604947f002d803","dateUpdated":"2025-03-16T11:18:07.252Z","pendingPublicationApproval":false,"viewsUpdatedOn":1713983440309,"coAuthors":[],"enableToc":false,"isCoverAttributionHidden":false,"updatedAt":"2025-03-16T11:18:07.252Z","uniqueReactions":["5c090d96c2a9c2a674d35484","567453d0b73d6a82ac8c5abc","5c090d96c2a9c2a674d35485"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35484":1,"reaction_567453d0b73d6a82ac8c5abc":1,"reaction_5c090d96c2a9c2a674d35485":1},"id":"616305e053401f641ba1078c"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"discussionScore":0,"totalReactionsByCurrentUser":0,"commentsPaused":false,"toc":[],"_id":"614b258bc790e72dddca6479","sourcedFromGithub":false,"isAnonymous":false,"views":1839,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1632313770813/yF8kaRjTc.png","autoGeneratedCover":"","brief":"Intro\nHi, I'm Joseph Petty from GreenFlux, LLC - I'm a full-time freelancer/developer- focused on mobile/web apps, databases, and no/low-code platforms and integrations. I've been using Appsmith for a while now and have written a few  other posts  on...","content":"<h1 id=\"heading-intro\">Intro</h1>\n<p>Hi, I'm Joseph Petty from <a class=\"user-mention\" href=\"https://hashnode.com/@greenflux\">GreenFlux, LLC</a> - I'm a full-time freelancer/developer- focused on mobile/web apps, databases, and no/low-code platforms and integrations. I've been using Appsmith for a while now and have written a few  <a target=\"_blank\" href=\"https://blog.greenflux.us/\">other posts</a>  on it already, so I figured it was time to do a full review of the platform. </p>\n<h3 id=\"heading-so-what-is-appsmith\">So what is Appsmith?</h3>\n<p>Well, for one thing- it's SUPER new, like just over a year old. But you'd have no idea just from using it. Their dev team is blazing fast 🔥 and has been churning out awesome new features almost every week since I started using it. </p>\n<p>That being said, it <em>is</em> still a very young platform, so it's expected that some major features are still in development. I think they're off to an amazing start and I just wanted to mention how new the platform is before talking about any missing features. </p>\n<p>Before I get into the details, here's a quick overview of what <strong>can</strong> be built with Appsmith- <em>and what can't</em> (yet 😉).</p>\n<ul>\n<li>✅ - Web apps, admin panels, dashboards, reporting tools, etc</li>\n<li>✅ - Full page or iframe browser-based apps</li>\n<li>✅ - White-labeled apps (remove all Appsmith branding)</li>\n<li>✅ - Datasource connections (APIs, *-SQL, GraphQL, Google Sheets)</li>\n<li><p>✅ - Custom Javascript to transform data or add logic/UI features</p>\n</li>\n<li><p>❌ - Native/hybrid mobile app</p>\n</li>\n<li>❌ - Cron Jobs (coming soon)</li>\n<li>❌ - Custom Themes (coming soon)</li>\n<li>❌ - App versioning/History (coming soon)</li>\n<li>❌ - Audit Logs (coming soon)</li>\n<li>❌ - Granular permissions/ User groups (Enterprise Plan?)</li>\n</ul>\n<p>So at a high-level, Appsmith is a powerful developer tool for quickly building UIs and connecting to a wide range of datasources. It's no-code in the sense that UI is drag and drop with an open grid-style canvas. When it comes to adding logic, transforming data and defining workflows, Appsmith lets you insert plain Javascript right inside any widget, query, or almost any other setting. </p>\n<p>I love this approach because there's no made-up abstraction layer or terminology to learn on the code side. Yes, you need to understand some basic Javascript, but that's a very useful, transferable skill. Working in Appsmith has pushed me to learn more Javascript and made me a better developer. </p>\n<p>Ok, enough rambling; on to the details:</p>\n<h1 id=\"heading-open-source\">Open Source</h1>\n<p>Appsmith is an open-source project, so the code is entirely free to use. You can even host your own server with unlimited users, create custom widgets, and submit your own features/bug fixes through GitHub. The dev team is very welcoming to community contributions, and I've already seen a few features added by members from the Discord. </p>\n<p>They've also been fast to approve new feature requests and add them to GitHub when new ideas come up in Discord. I've seen them take a suggestion and create a new issue in GitHub within minutes, and on several occasions.  </p>\n<h1 id=\"heading-pricing\">Pricing</h1>\n<p>So the code is free to use, but it has to be hosted somewhere. Now, if setting up a server isn't for you, don't worry! Appsmith also offers FREE HOSTING with unlimited users, datasources, and apps! </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1631979505204/9HPTn4X5u.png\" alt=\"Screen Shot 2021-09-18 at 11.33.19 AM.png\" /></p>\n<p>There is also an Enterprise Plan in the works, but pricing details are yet to be released.  </p>\n<h1 id=\"heading-widgets\">Widgets</h1>\n<p>Widgets are the basic UI building blocks in Appsmith. Interface components like buttons, tables, file pickers, etc, are displayed on a left sidebar. Just drag and drop widgets anywhere on the canvas grid and adjust the settings to change the appearance or connect a datasource. </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1631980153157/Hs0ZEhrmd.png\" alt=\"Screen Shot 2021-09-18 at 11.49.06 AM.png\" /></p>\n<h1 id=\"heading-data-sources\">Data Sources</h1>\n<p>There are no-code builders that use Google Sheets as a backend, others that can connect to SQL data sources, and a few with decent API connectors... </p>\n<p><strong>And then there's APPSMITH! </strong> 🤯</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1631980225834/j4TnFJ0MY.png\" alt=\"Screen Shot 2021-09-18 at 11.50.17 AM.png\" /></p>\n<p><strong>And on top of the wide range of source-specific connectors, the Datasources tab has some <em>really cool</em> extras:</strong> 😎</p>\n<p><strong>Sample Datasets:</strong>\nJump straight to building without setting up a database by using the mock datasets! </p>\n<p><strong>Authenticated API:</strong>\nSave API credentials once, and then add any new request under that source. No need to authenticate each new endpoint or method when you add a new one. </p>\n<p><strong>Import from CURL:</strong> \nPaste in a CURL request from another source, and Appsmith will parse out the headers, endpoint, body, etc and add a new API automatically! </p>\n<p><strong>Generate Page from Datasource:</strong>\nJust pick a datasource and a searchable column, and BOOM! 🪄💥 <strong>NEW APP!</strong>\nhttps://github.com/appsmithorg/appsmith/pull/5513</p>\n<h1 id=\"heading-deploy-and-share\">Deploy and Share</h1>\n<p>Changes are saved automatically and reflected in real-time in the Appsmith editor, but you have to click <strong>Deploy</strong> to push those updates to the live version of the app. So you can make multiple edits/saves and see the results in the editor, but App Users won't see them until those changes are deployed. </p>\n<p>Appsmith groups app by Organization, and uses these groups to share apps with other users. When you share an app with someone, you're actually sharing all apps in that organization- so be sure to organize your apps into Organizations that match the user-groups you intend to share with. </p>\n<h1 id=\"heading-hosting\">Hosting</h1>\n<p>Appsmith offers free hosting on their Appsmith Cloud instance, as well as an Enterprise plan that is still being developed. Users may also host their own version for free. </p>\n<p>Here's a detailed guide on how to deploy your own Appsmith server on Docker:\nhttps://docs.appsmith.com/setup/docker</p>\n<h1 id=\"heading-javascript\">Javascript</h1>\n<p>Transform data, and add logic/formatting to UI components with plain Javascript. \nAppsmith is no-code when it comes to dragging Widgets into the canvas. When it's time to add more advanced features, many platforms have created their own internal language or abstraction layer, which can be hard to learn and limited in functionality. But Appsmith lets you insert raw Javascript right inside any widget, API or query template, or other setting. </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1632002931170/C0e6vGB_M.png\" alt=\"Screen Shot 2021-09-18 at 6.07.19 PM.png\" /></p>\n<p>The beauty of Appsmith is in the ability to insert Javascript just about anywhere in the app. The APIs/DB Queries you create can be triggered by, or used to control, widget appearance, visibility, behavior, etc. </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1632096819688/7dQMq7u6b.png\" alt=\"Screen Shot 2021-09-19 at 8.11.19 PM.png\" /></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1632097079612/mvI9ofSSH.png\" alt=\"Screen Shot 2021-09-19 at 8.17.52 PM.png\" /></p>\n<p>Every Widget is a JSON object and can be referenced by the name you give it in the properties pane. The editor auto-completes and suggests available Widgets and Queries as you type. </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1632097537029/fuz7m_dvi.gif\" alt=\"2021-09-19 20.25.05.gif\" /></p>\n<h1 id=\"heading-integrations\">Integrations</h1>\n<p>Integrating with APIs in Appsmith is straightforward and direct. The UI is very similar to Postman- and gives you direct access to view responses and errors right in the editor. </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1631998445362/NWj28duJh.png\" alt=\"Screen Shot 2021-09-18 at 4.53.41 PM.png\" /></p>\n<p>When connecting an API to a widget, the widget's property pane displays the data from the last response right in the editor. So you can connect directly to an external API as a datasource, and see the results as you're building the app! </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1631999633712/xQIAJkyQZ.png\" alt=\"Screen Shot 2021-09-18 at 5.13.46 PM.png\" /></p>\n<h1 id=\"heading-workflows\">Workflows</h1>\n<p>There aren't really any specific features dedicated to creating workflows or automating processes, but that's not to say it can't be done. You can easily chain together multiple APIs or DB queries using Javascript.</p>\n<p>Also worth noting, there's no way to trigger Javascript without user interaction, however, there's a feature in testing to run a function on page load. </p>\n<p>Another option for automations is to integrate with n8n.io or other automation platforms using webhooks. Here's a great tutorial from one of the community calls a few months ago. </p>\n<p>https://www.youtube.com/watch?v=mWZGn8kuIBo&amp;t=1s</p>\n<h1 id=\"heading-security\">Security</h1>\n<p>When sharing an app with a new user, you can assign them one of 3 Roles:</p>\n<p><strong>Administrator: </strong>  </p>\n<ul>\n<li>Create/Edit App</li>\n<li>View App</li>\n<li>Make App Public</li>\n<li>Invite Users</li>\n<li>Manage Users  </li>\n</ul>\n<p><strong>Developer:</strong>  </p>\n<ul>\n<li>Create/Edit App</li>\n<li>View App</li>\n<li>Invite Users  </li>\n</ul>\n<p><strong>App Viewer:</strong>  </p>\n<ul>\n<li>View App</li>\n<li>Invite Users as App Viewers only</li>\n</ul>\n<p>New users can sign up with Google, GitHub, or just an email and password. There is no Multi-factor Authentication. SAML/SSO and granular access controls are in the Enterprise Plan only. </p>\n<p>When you create an app and save API or database credentials, those values are never sent to the browser for <strong>App Users</strong>. The Appsmith servers (or your own hosted server) act as a proxy layer to append the request with credentials before forwarding it to the endpoint or database. The  response goes directly to the client's browser. The Appsmith servers do not store any of the query responses. </p>\n<p><a target=\"_blank\" href=\"https://docs.appsmith.com/security#does-appsmith-store-my-data\">DOCS: does-appsmith-store-my-data</a></p>\n<h1 id=\"heading-architecture\">Architecture</h1>\n<p>So how does Appsmith `<em>smith</em> apps? </p>\n<p>Well, the app definition is stored in plain JSON on the Appsmith server. That JSON gets sent to each client, where the page is built client-side using Javascript and DSL. </p>\n<p>So there's no HTML page being stored or generated on a server and sent to the client. The app definition is sent from the server to the client's browser (minus the credentials- for App Users), along with some Javascript needed to dynamically build the page and form requests to the Appsmith server. </p>\n<h1 id=\"heading-app-versioning-exporting\">App Versioning /Exporting</h1>\n<p>Apps can be exported as plain JSON and imported back into any server. You can build your app on the free Appsmith cloud and later export to run on your own server or vice-versa. So it's easy to manually save your own backup copies at any time and recover if needed. </p>\n<p>There's also a GitSync feature in beta right now that should be released soon to allow syncing backup copies to GitHub. However, at the moment, there is no way to save multiple app versions or recover old versions aside from manually exporting and importing. </p>\n<h1 id=\"heading-community\">Community</h1>\n<p>The Appsmith team provide excellent support via several channels:</p>\n<ul>\n<li>Discord: https://discord.com/invite/rBTTVJp</li>\n<li>Community Forum: https://community.appsmith.com/</li>\n<li>Intercom: Chat popup in Editor and Docs</li>\n</ul>\n<p>The Discord is pretty active but the forum was launched a few months ago, so it's just starting to pick up. </p>\n<p>Appsmith has also been very active in reaching out to the community for feedback. And they host a live community call every Thursday at 1 PM Eastern to demo new/upcoming features and answer questions from the community. </p>\n<h1 id=\"heading-roadmap\">Roadmap</h1>\n<ul>\n<li>Custom Themes</li>\n<li>Reusable Javascript functions and larger JS editor</li>\n<li>GitSync for App Versioning</li>\n<li>Custom JS objects and functions, reusable across apps 😻</li>\n</ul>\n<h1 id=\"heading-summary\">Summary</h1>\n<p>With a no-code UI builder, TONS of data source connectors, custom Javascript, an open-source license and thriving community, Appsmith is uniquely positioned in the no-code builder market space. There's still some work to be done regarding Enterprise features, and the lack of a mobile client limits use-cases. But given Appsmith's current feature set at this early stage and the speed of the developer team, the incredible power of this platform will only continue to grow. </p>\n","contentMarkdown":"# Intro\nHi, I'm Joseph Petty from @[GreenFlux, LLC](@greenflux) - I'm a full-time freelancer/developer- focused on mobile/web apps, databases, and no/low-code platforms and integrations. I've been using Appsmith for a while now and have written a few  [other posts](https://blog.greenflux.us/)  on it already, so I figured it was time to do a full review of the platform. \n\n### So what is Appsmith? \n\nWell, for one thing- it's SUPER new, like just over a year old. But you'd have no idea just from using it. Their dev team is blazing fast 🔥 and has been churning out awesome new features almost every week since I started using it. \n\nThat being said, it *is* still a very young platform, so it's expected that some major features are still in development. I think they're off to an amazing start and I just wanted to mention how new the platform is before talking about any missing features. \n\nBefore I get into the details, here's a quick overview of what **can** be built with Appsmith- *and what can't* (yet 😉).\n\n- ✅ - Web apps, admin panels, dashboards, reporting tools, etc\n- ✅ - Full page or iframe browser-based apps\n- ✅ - White-labeled apps (remove all Appsmith branding)\n- ✅ - Datasource connections (APIs, *-SQL, GraphQL, Google Sheets)\n- ✅ - Custom Javascript to transform data or add logic/UI features\n\n- ❌ - Native/hybrid mobile app\n- ❌ - Cron Jobs (coming soon)\n- ❌ - Custom Themes (coming soon)\n- ❌ - App versioning/History (coming soon)\n- ❌ - Audit Logs (coming soon)\n- ❌ - Granular permissions/ User groups (Enterprise Plan?)\n\nSo at a high-level, Appsmith is a powerful developer tool for quickly building UIs and connecting to a wide range of datasources. It's no-code in the sense that UI is drag and drop with an open grid-style canvas. When it comes to adding logic, transforming data and defining workflows, Appsmith lets you insert plain Javascript right inside any widget, query, or almost any other setting. \n\nI love this approach because there's no made-up abstraction layer or terminology to learn on the code side. Yes, you need to understand some basic Javascript, but that's a very useful, transferable skill. Working in Appsmith has pushed me to learn more Javascript and made me a better developer. \n\nOk, enough rambling; on to the details:\n\n# Open Source\nAppsmith is an open-source project, so the code is entirely free to use. You can even host your own server with unlimited users, create custom widgets, and submit your own features/bug fixes through GitHub. The dev team is very welcoming to community contributions, and I've already seen a few features added by members from the Discord. \n\nThey've also been fast to approve new feature requests and add them to GitHub when new ideas come up in Discord. I've seen them take a suggestion and create a new issue in GitHub within minutes, and on several occasions.  \n\n# Pricing\nSo the code is free to use, but it has to be hosted somewhere. Now, if setting up a server isn't for you, don't worry! Appsmith also offers FREE HOSTING with unlimited users, datasources, and apps! \n\n![Screen Shot 2021-09-18 at 11.33.19 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631979505204/9HPTn4X5u.png)\n\nThere is also an Enterprise Plan in the works, but pricing details are yet to be released.  \n\n# Widgets\nWidgets are the basic UI building blocks in Appsmith. Interface components like buttons, tables, file pickers, etc, are displayed on a left sidebar. Just drag and drop widgets anywhere on the canvas grid and adjust the settings to change the appearance or connect a datasource. \n\n![Screen Shot 2021-09-18 at 11.49.06 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631980153157/Hs0ZEhrmd.png)\n\n# Data Sources\nThere are no-code builders that use Google Sheets as a backend, others that can connect to SQL data sources, and a few with decent API connectors... \n\n**And then there's APPSMITH! ** 🤯\n\n![Screen Shot 2021-09-18 at 11.50.17 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631980225834/j4TnFJ0MY.png)\n\n**And on top of the wide range of source-specific connectors, the Datasources tab has some *really cool* extras:** 😎\n\n**Sample Datasets:**\nJump straight to building without setting up a database by using the mock datasets! \n\n**Authenticated API:**\nSave API credentials once, and then add any new request under that source. No need to authenticate each new endpoint or method when you add a new one. \n\n**Import from CURL:** \nPaste in a CURL request from another source, and Appsmith will parse out the headers, endpoint, body, etc and add a new API automatically! \n\n**Generate Page from Datasource:**\nJust pick a datasource and a searchable column, and BOOM! 🪄💥 **NEW APP!**\nhttps://github.com/appsmithorg/appsmith/pull/5513\n\n# Deploy and Share\nChanges are saved automatically and reflected in real-time in the Appsmith editor, but you have to click **Deploy** to push those updates to the live version of the app. So you can make multiple edits/saves and see the results in the editor, but App Users won't see them until those changes are deployed. \n\nAppsmith groups app by Organization, and uses these groups to share apps with other users. When you share an app with someone, you're actually sharing all apps in that organization- so be sure to organize your apps into Organizations that match the user-groups you intend to share with. \n\n# Hosting\nAppsmith offers free hosting on their Appsmith Cloud instance, as well as an Enterprise plan that is still being developed. Users may also host their own version for free. \n\nHere's a detailed guide on how to deploy your own Appsmith server on Docker:\nhttps://docs.appsmith.com/setup/docker\n\n# Javascript\nTransform data, and add logic/formatting to UI components with plain Javascript. \nAppsmith is no-code when it comes to dragging Widgets into the canvas. When it's time to add more advanced features, many platforms have created their own internal language or abstraction layer, which can be hard to learn and limited in functionality. But Appsmith lets you insert raw Javascript right inside any widget, API or query template, or other setting. \n\n![Screen Shot 2021-09-18 at 6.07.19 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632002931170/C0e6vGB_M.png)\n\n\nThe beauty of Appsmith is in the ability to insert Javascript just about anywhere in the app. The APIs/DB Queries you create can be triggered by, or used to control, widget appearance, visibility, behavior, etc. \n\n![Screen Shot 2021-09-19 at 8.11.19 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632096819688/7dQMq7u6b.png)\n\n![Screen Shot 2021-09-19 at 8.17.52 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1632097079612/mvI9ofSSH.png)\n\nEvery Widget is a JSON object and can be referenced by the name you give it in the properties pane. The editor auto-completes and suggests available Widgets and Queries as you type. \n\n![2021-09-19 20.25.05.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1632097537029/fuz7m_dvi.gif)\n\n# Integrations\nIntegrating with APIs in Appsmith is straightforward and direct. The UI is very similar to Postman- and gives you direct access to view responses and errors right in the editor. \n\n![Screen Shot 2021-09-18 at 4.53.41 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631998445362/NWj28duJh.png)\n\nWhen connecting an API to a widget, the widget's property pane displays the data from the last response right in the editor. So you can connect directly to an external API as a datasource, and see the results as you're building the app! \n\n![Screen Shot 2021-09-18 at 5.13.46 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1631999633712/xQIAJkyQZ.png)\n\n# Workflows \nThere aren't really any specific features dedicated to creating workflows or automating processes, but that's not to say it can't be done. You can easily chain together multiple APIs or DB queries using Javascript.\n\nAlso worth noting, there's no way to trigger Javascript without user interaction, however, there's a feature in testing to run a function on page load. \n\nAnother option for automations is to integrate with n8n.io or other automation platforms using webhooks. Here's a great tutorial from one of the community calls a few months ago. \n\nhttps://www.youtube.com/watch?v=mWZGn8kuIBo&t=1s\n\n# Security\nWhen sharing an app with a new user, you can assign them one of 3 Roles:\n\n**Administrator: **  \n- Create/Edit App\n- View App\n- Make App Public\n- Invite Users\n- Manage Users  \n\n**Developer:**  \n- Create/Edit App\n- View App\n- Invite Users  \n\n**App Viewer:**  \n- View App\n- Invite Users as App Viewers only\n\nNew users can sign up with Google, GitHub, or just an email and password. There is no Multi-factor Authentication. SAML/SSO and granular access controls are in the Enterprise Plan only. \n\nWhen you create an app and save API or database credentials, those values are never sent to the browser for **App Users**. The Appsmith servers (or your own hosted server) act as a proxy layer to append the request with credentials before forwarding it to the endpoint or database. The  response goes directly to the client's browser. The Appsmith servers do not store any of the query responses. \n\n[DOCS: does-appsmith-store-my-data](https://docs.appsmith.com/security#does-appsmith-store-my-data)\n\n# Architecture\nSo how does Appsmith `*smith* apps? \n\nWell, the app definition is stored in plain JSON on the Appsmith server. That JSON gets sent to each client, where the page is built client-side using Javascript and DSL. \n\nSo there's no HTML page being stored or generated on a server and sent to the client. The app definition is sent from the server to the client's browser (minus the credentials- for App Users), along with some Javascript needed to dynamically build the page and form requests to the Appsmith server. \n\n# App Versioning /Exporting\nApps can be exported as plain JSON and imported back into any server. You can build your app on the free Appsmith cloud and later export to run on your own server or vice-versa. So it's easy to manually save your own backup copies at any time and recover if needed. \n\nThere's also a GitSync feature in beta right now that should be released soon to allow syncing backup copies to GitHub. However, at the moment, there is no way to save multiple app versions or recover old versions aside from manually exporting and importing. \n\n# Community\nThe Appsmith team provide excellent support via several channels:\n- Discord: https://discord.com/invite/rBTTVJp\n- Community Forum: https://community.appsmith.com/\n- Intercom: Chat popup in Editor and Docs\n\nThe Discord is pretty active but the forum was launched a few months ago, so it's just starting to pick up. \n\nAppsmith has also been very active in reaching out to the community for feedback. And they host a live community call every Thursday at 1 PM Eastern to demo new/upcoming features and answer questions from the community. \n\n# Roadmap\n- Custom Themes\n- Reusable Javascript functions and larger JS editor\n- GitSync for App Versioning\n- Custom JS objects and functions, reusable across apps 😻\n\n# Summary\nWith a no-code UI builder, TONS of data source connectors, custom Javascript, an open-source license and thriving community, Appsmith is uniquely positioned in the no-code builder market space. There's still some work to be done regarding Enterprise features, and the lack of a mobile client limits use-cases. But given Appsmith's current feature set at this early stage and the speed of the developer team, the incredible power of this platform will only continue to grow. \n\n\n\n\n","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["57ebac0bd9b08ec06a77be05","56744720958ef13879b947c4","56744723958ef13879b9550d","56744722958ef13879b950eb","56744723958ef13879b95245"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4963.5802,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35485","5c090d96c2a9c2a674d35488","567453d0b73d6a82ac8c5abd","5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d35484","567453d0b73d6a82ac8c5abc","5c090d96c2a9c2a674d3548b"],"totalReactions":19,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":true,"numUniqueUsersWhoReacted":0,"title":"The Little Big Framework: Appsmith Reviewed","type":"story","isRepublished":false,"partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"the-little-big-framework-appsmith-reviewed","importedFromMedium":false,"dateAdded":"2021-09-22T12:46:03.716Z","hasCustomDate":false,"stickCoverToBottom":false,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"cuid":"cktvi2ck502jz25s12gcmcw8g","author":"60771bbfa3407a32d7041f47","followersCount":1,"draft":"614506e3e1f56817e3604cc4","hasPinnedTag":false,"readTime":8,"__v":0,"reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35485":5,"reaction_5c090d96c2a9c2a674d35488":2,"reaction_567453d0b73d6a82ac8c5abd":3,"reaction_5d9dd859f31791c942dc5b52":2,"reaction_5c090d96c2a9c2a674d35484":3,"reaction_567453d0b73d6a82ac8c5abc":2,"reaction_5c090d96c2a9c2a674d3548b":2},"viewsUpdatedOn":1714008635929,"coAuthors":[],"dateUpdated":"2025-03-16T11:19:29.788Z","enableToc":false,"isCoverAttributionHidden":false,"series":"67d6b35a41604947f002d803","updatedAt":"2025-03-16T11:19:29.788Z","uniqueReactions":["5c090d96c2a9c2a674d35485","5c090d96c2a9c2a674d35488","567453d0b73d6a82ac8c5abd","5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d35484","567453d0b73d6a82ac8c5abc","5c090d96c2a9c2a674d3548b"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35485":5,"reaction_5c090d96c2a9c2a674d35488":2,"reaction_567453d0b73d6a82ac8c5abd":3,"reaction_5d9dd859f31791c942dc5b52":2,"reaction_5c090d96c2a9c2a674d35484":3,"reaction_567453d0b73d6a82ac8c5abc":2,"reaction_5c090d96c2a9c2a674d3548b":2},"id":"614b258bc790e72dddca6479"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"discussionScore":0,"totalReactionsByCurrentUser":0,"toc":[],"_id":"60fd6a5b18fbbb77c9467bdd","sourcedFromGithub":false,"isAnonymous":false,"views":887,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1627213302520/-IEe36ZNq.png","autoGeneratedCover":"","brief":"In this tutorial, I'll be writing a general purpose Apps Script Web App to save a cloud-hosted file to Google Drive as a new file, when the original file url is POST-ed to the script's web app endpoint.\nfunction getFileByUrl(url , folderId){\n  // Dow...","content":"<p>In this tutorial, I'll be writing a general purpose Apps Script <a target=\"_blank\" href=\"https://developers.google.com/apps-script/guides/web\">Web App</a> to save a cloud-hosted file to Google Drive as a new file, when the original file url is POST-ed to the script's web app endpoint.</p>\n<pre><code class=\"lang-json\">function getFileByUrl(url , folderId){\n  <span class=\"hljs-comment\">// Download file from Url and save to specified folder</span>\n  return newFileUrl\n  ...\n}\n</code></pre>\n<p>The script will be published as a web app so that POST requests can be sent from other apps/services, allowing integrations with any REST API.</p>\n<pre><code class=\"lang-json\">function doPost(e) {\n  <span class=\"hljs-comment\">// POST Request Received, containing fileUrl and folderId</span>\n  ...\n      returnedUrl = getFileByUrl(fileUrl, folderId);\n\n  return ContentService.createTextOutput(returnedUrl)\n}\n</code></pre>\n<h2 id=\"heading-use-cases\">Use Cases</h2>\n<ul>\n<li><p>Copy images/files from 3rd party app or API</p>\n</li>\n<li><p>Loop through a spreadsheet of file urls</p>\n</li>\n<li><p>Scrape image/file urls from a web page</p>\n</li>\n</ul>\n<h3 id=\"heading-dopost-requirements-for-web-apps\">DoPost() - Requirements for web apps:</h3>\n<blockquote>\n<p>A script can be published as a web app if it meets these requirements:</p>\n<p>It contains a doGet(e) or doPost(e) function.</p>\n<p>The function returns an HTML service HtmlOutput object or a Content service TextOutput object.</p>\n</blockquote>\n<ol>\n<li>Start with a basic doPost() function that returns a url.</li>\n</ol>\n<pre><code class=\"lang-json\">function doPost(e) {\n  let returnedUrl = 'https:<span class=\"hljs-comment\">//indico.cern.ch/event/853710/contributions/3708132/attachments/1985053/3307323/Armina_Abramyan_JS_for_Science.pdf';</span>\n\n  return ContentService.createTextOutput(returnedUrl)\n}\n</code></pre>\n<ol start=\"2\">\n<li><p>Name, save and then publish as a web app: <code>Execute as: *Me*, Who has access: *Anyone*</code></p>\n</li>\n<li><p>Send a test POST to the new published URL</p>\n<p> <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1627218007410/aFH2zDUV4z.png\" alt=\"Screen Shot 2021-07-25 at 9.00.00 AM.png\" /></p>\n</li>\n</ol>\n<p>Ok, the doPost() responds to our POST request and returns a file url. Now let's create a function that GETs a file from a url and saves it to Google Drive.</p>\n<pre><code class=\"lang-json\">function getFileByUrl(url, folderId){\n  <span class=\"hljs-comment\">// Download file from url and save to GDrive folder with fileName</span>\n\n  const fileData = UrlFetchApp.fetch(url);\n  const folder = DriveApp.getFolderById(folderId);\n  const fileName = url.split('/').pop(); <span class=\"hljs-comment\">// last value = file name in last folder, url/folder/filename.type</span>\n  const newFileUrl = folder.createFile(fileData).setName(fileName).getUrl();\n  Logger.log(newFileUrl);\n  return newFileUrl;\n\n}\n</code></pre>\n<blockquote>\n<p><code>const fileName = url.split('/').pop();</code></p>\n</blockquote>\n<p>The split() method creates an array of strings from the url, with the last value being the text after the last forward slash. https://indico.cern.ch/event/853710/contributions/3708132/attachments/1985053/3307323/<code>Armina_Abramyan_JS_for_Science.pdf</code> And the pop() array method returns the last value, to be used as the new file name!</p>\n<p>Now the getFileByUrl() function can be inserted into the doPost().</p>\n<pre><code class=\"lang-json\">function doPost(e) {\n\n  const fileUrl = 'https:<span class=\"hljs-comment\">//www.evl.uic.edu/luc/bvis546/Essential_Javascript_--_A_Javascript_Tutorial.pdf';</span>\n  const folderId = '{FOLDER_ID}';\n  returnedUrl = getFileByUrl(fileUrl, folderId);\n  return ContentService.createTextOutput(returnedUrl)\n}\n</code></pre>\n<p>PUBLISH and Retest.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1627219153918/scNWuDaZ9.png\" alt=\"Screen Shot 2021-07-25 at 9.18.40 AM.png\" /></p>\n<p><img src=\"https://media.giphy.com/media/xT5LMHxhOfscxPfIfm/giphy.gif\" alt=\"image.png\" /></p>\n<p>SUCCESS! The script created a new copy of the file in Google Drive!</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1627219372636/qLAdeGq7F.png\" alt=\"Screen Shot 2021-07-25 at 9.22.48 AM.png\" /></p>\n<p>Finally, to dynamically pass the url and folderId, and an API key as a security check:</p>\n<pre><code class=\"lang-json\">function doPost(e) {\n  let returnedUrl = '';\n\n  if(e.parameter.key == key &amp;&amp; 'fileUrl' in e.parameter){\n    const fileUrl = decodeURI(e.parameter.fileUrl);\n    const folderId = decodeURI(e.parameter.folderId);\n    returnedUrl = getFileByUrl(fileUrl, folderId);\n  }\n  return ContentService.createTextOutput(returnedUrl)\n}\n</code></pre>\n<p>Now we can POST to the web app using the following url parameters:</p>\n<pre><code class=\"lang-json\">{\n  key: 'API_KEY',\n  fileUrl: 'FULL_URL_TO_FILE',\n  folderId: 'ID_OF_DRIVE_FOLDER'\n}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1627220175285/_iJ2aDnOa.png\" alt=\"Screen Shot 2021-07-25 at 9.34.34 AM.png\" /></p>\n<h2 id=\"heading-heres-the-finished-script\">Here's the finished script:</h2>\n<pre><code class=\"lang-json\">const key = 'APIKEY';  <span class=\"hljs-comment\">// custom string to check before returning contacts</span>\nconst defaultFolder = 'OPTIONAL_FOLDER_ID'; <span class=\"hljs-comment\">// folder to use if no id is given</span>\nconst defaultUrl = 'https:<span class=\"hljs-comment\">//www.acquisition.gov/sites/default/files/current/dfars/pdf/DFARS.pdf';</span>\n\nfunction doPost(e) {\n  let responseBody = {'requestEvent':e};\n  let returnedUrl = '';\n\n  if(e.parameter.key == key &amp;&amp; 'fileUrl' in e.parameter){\n    const fileUrl = decodeURI(e.parameter.fileUrl);\n    const folderId = decodeURI(e.parameter.folderId);\n    returnedUrl = getFileByUrl(fileUrl, folderId);\n  }\n  return ContentService.createTextOutput(returnedUrl)\n}\n\nfunction getFileByUrl(url = defaultUrl, folderId = defaultFolder){\n  <span class=\"hljs-comment\">// Download file from url and save to GDrive folder with fileName</span>\n\n  const fileData = UrlFetchApp.fetch(url);\n  const folder = DriveApp.getFolderById(folderId);\n  const fileName = url.split('/').pop(); <span class=\"hljs-comment\">// last value = file name in last folder, url/folder/filename.type</span>\n  const newFileUrl = folder.createFile(fileData).setName(fileName).getUrl();\n  Logger.log(newFileUrl);\n  return newFileUrl;\n\n}\n</code></pre>\n<hr />\n<h4 id=\"heading-thanks-for-reading\">Thanks for reading!</h4>\n<p>Comment below with any questions or ideas for other use cases.</p>\n","contentMarkdown":"In this tutorial, I'll be writing a general purpose Apps Script [Web App](https://developers.google.com/apps-script/guides/web) to save a cloud-hosted file to Google Drive as a new file, when the original file url is POST-ed to the script's web app endpoint.\n\n```json\nfunction getFileByUrl(url , folderId){\n  // Download file from Url and save to specified folder\n  return newFileUrl\n  ...\n}\n```\n\nThe script will be published as a web app so that POST requests can be sent from other apps/services, allowing integrations with any REST API.\n\n```json\nfunction doPost(e) {\n  // POST Request Received, containing fileUrl and folderId\n  ...\n      returnedUrl = getFileByUrl(fileUrl, folderId);\n\n  return ContentService.createTextOutput(returnedUrl)\n}\n```\n\n## Use Cases\n\n* Copy images/files from 3rd party app or API\n    \n* Loop through a spreadsheet of file urls\n    \n* Scrape image/file urls from a web page\n    \n\n### DoPost() - Requirements for web apps:\n\n> A script can be published as a web app if it meets these requirements:\n> \n> It contains a doGet(e) or doPost(e) function.\n> \n> The function returns an HTML service HtmlOutput object or a Content service TextOutput object.\n\n1. Start with a basic doPost() function that returns a url.\n    \n\n```json\nfunction doPost(e) {\n  let returnedUrl = 'https://indico.cern.ch/event/853710/contributions/3708132/attachments/1985053/3307323/Armina_Abramyan_JS_for_Science.pdf';\n\n  return ContentService.createTextOutput(returnedUrl)\n}\n```\n\n2. Name, save and then publish as a web app: `Execute as: *Me*, Who has access: *Anyone*`\n    \n3. Send a test POST to the new published URL\n    \n    ![Screen Shot 2021-07-25 at 9.00.00 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1627218007410/aFH2zDUV4z.png align=\"left\")\n    \n\nOk, the doPost() responds to our POST request and returns a file url. Now let's create a function that GETs a file from a url and saves it to Google Drive.\n\n```json\nfunction getFileByUrl(url, folderId){\n  // Download file from url and save to GDrive folder with fileName\n\n  const fileData = UrlFetchApp.fetch(url);\n  const folder = DriveApp.getFolderById(folderId);\n  const fileName = url.split('/').pop(); // last value = file name in last folder, url/folder/filename.type\n  const newFileUrl = folder.createFile(fileData).setName(fileName).getUrl();\n  Logger.log(newFileUrl);\n  return newFileUrl;\n\n}\n```\n\n> `const fileName = url.split('/').pop();`\n\nThe split() method creates an array of strings from the url, with the last value being the text after the last forward slash. https://indico.cern.ch/event/853710/contributions/3708132/attachments/1985053/3307323/`Armina_Abramyan_JS_for_Science.pdf` And the pop() array method returns the last value, to be used as the new file name!\n\nNow the getFileByUrl() function can be inserted into the doPost().\n\n```json\nfunction doPost(e) {\n\n  const fileUrl = 'https://www.evl.uic.edu/luc/bvis546/Essential_Javascript_--_A_Javascript_Tutorial.pdf';\n  const folderId = '{FOLDER_ID}';\n  returnedUrl = getFileByUrl(fileUrl, folderId);\n  return ContentService.createTextOutput(returnedUrl)\n}\n```\n\nPUBLISH and Retest.\n\n![Screen Shot 2021-07-25 at 9.18.40 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1627219153918/scNWuDaZ9.png align=\"left\")\n\n![image.png](https://media.giphy.com/media/xT5LMHxhOfscxPfIfm/giphy.gif align=\"left\")\n\nSUCCESS! The script created a new copy of the file in Google Drive!\n\n![Screen Shot 2021-07-25 at 9.22.48 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1627219372636/qLAdeGq7F.png align=\"left\")\n\nFinally, to dynamically pass the url and folderId, and an API key as a security check:\n\n```json\nfunction doPost(e) {\n  let returnedUrl = '';\n\n  if(e.parameter.key == key && 'fileUrl' in e.parameter){\n    const fileUrl = decodeURI(e.parameter.fileUrl);\n    const folderId = decodeURI(e.parameter.folderId);\n    returnedUrl = getFileByUrl(fileUrl, folderId);\n  }\n  return ContentService.createTextOutput(returnedUrl)\n}\n```\n\nNow we can POST to the web app using the following url parameters:\n\n```json\n{\n  key: 'API_KEY',\n  fileUrl: 'FULL_URL_TO_FILE',\n  folderId: 'ID_OF_DRIVE_FOLDER'\n}\n```\n\n![Screen Shot 2021-07-25 at 9.34.34 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1627220175285/_iJ2aDnOa.png align=\"left\")\n\n## Here's the finished script:\n\n```json\nconst key = 'APIKEY';  // custom string to check before returning contacts\nconst defaultFolder = 'OPTIONAL_FOLDER_ID'; // folder to use if no id is given\nconst defaultUrl = 'https://www.acquisition.gov/sites/default/files/current/dfars/pdf/DFARS.pdf';\n\nfunction doPost(e) {\n  let responseBody = {'requestEvent':e};\n  let returnedUrl = '';\n\n  if(e.parameter.key == key && 'fileUrl' in e.parameter){\n    const fileUrl = decodeURI(e.parameter.fileUrl);\n    const folderId = decodeURI(e.parameter.folderId);\n    returnedUrl = getFileByUrl(fileUrl, folderId);\n  }\n  return ContentService.createTextOutput(returnedUrl)\n}\n\nfunction getFileByUrl(url = defaultUrl, folderId = defaultFolder){\n  // Download file from url and save to GDrive folder with fileName\n\n  const fileData = UrlFetchApp.fetch(url);\n  const folder = DriveApp.getFolderById(folderId);\n  const fileName = url.split('/').pop(); // last value = file name in last folder, url/folder/filename.type\n  const newFileUrl = folder.createFile(fileData).setName(fileName).getUrl();\n  Logger.log(newFileUrl);\n  return newFileUrl;\n\n}\n```\n\n---\n\n#### Thanks for reading!\n\nComment below with any questions or ideas for other use cases.","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b95470","56744722958ef13879b951dd","56744721958ef13879b94cad","56744720958ef13879b947ce","56744723958ef13879b95245"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4849.0971,"responses":[{"popularity":5615.4904,"isActive":true,"upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"score":0,"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"_id":"630ba7eb56df9e8e5024f49a","content":"<p>Thanks, GreenFlux.</p>\n<p>I have found various Apps Script solutions for downloading a PDF from a source URL to a Google Drive folder. Unfortunately, none of the examples accommodate URLs that don&#39;t contain the filename within the specified URL. More specifically, the following URL successfully displays a PDF in the browser, but the URL does not download a rendered PDF blob as downloaded via your solution.</p>\n<p>childcarefinder.wisconsin.gov/Documents/ViewRatingReport?ProviderNumber=2000563892&amp;LocationNumber=096&amp;DocumentNumber=5003408534</p>\n<p>Respectfully,</p>\n<p>Richmond</p>\n","contentMarkdown":"Thanks, GreenFlux.\n\nI have found various Apps Script solutions for downloading a PDF from a source URL to a Google Drive folder. Unfortunately, none of the examples accommodate URLs that don't contain the filename within the specified URL. More specifically, the following URL successfully displays a PDF in the browser, but the URL does not download a rendered PDF blob as downloaded via your solution.\n\nchildcarefinder.wisconsin.gov/Documents/ViewRatingReport?ProviderNumber=2000563892&LocationNumber=096&DocumentNumber=5003408534\n\nRespectfully,\n\nRichmond","author":"630ba3e656df9e8e5024f411","stamp":"cl7dm75at02t91unv14chduvy","post":"60fd6a5b18fbbb77c9467bdd","replies":[],"dateAdded":"2022-08-28T17:37:47.670Z","badgesAwarded":[],"__v":0}],"responseCount":1,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":false,"numUniqueUsersWhoReacted":0,"title":"Saving Files to Google Drive by POST-ing the Url to a Web App","type":"story","partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"saving-files-to-google-drive-by-post-ing-the-url-to-a-web-app","pollOptions":[],"dateAdded":"2021-07-25T13:42:51.003Z","badges":[],"questionReplies":[],"contributors":[{"_id":"630ba7eb56df9e8e5024f49b","user":"630ba3e656df9e8e5024f411","stamp":"cl7dm75at02t91unv14chduvy"}],"cuid":"ckrj944fv0rjtnts1b67wcua8","author":"60771bbfa3407a32d7041f47","followersCount":2,"draft":"60fd4df818fbbb77c9467847","isRepublished":false,"hasPinnedTag":false,"readTime":3,"__v":1,"viewsUpdatedOn":1714021236918,"commentsPaused":false,"enableToc":false,"lastActivity":"2022-08-28T17:37:47.680Z","coAuthors":[],"dateUpdated":"2025-03-16T00:42:35.959Z","hasCustomDate":false,"isCoverAttributionHidden":false,"series":"679fa03905414f167a095994","stickCoverToBottom":false,"updatedAt":"2025-03-16T00:42:35.959Z","uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"60fd6a5b18fbbb77c9467bdd"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"discussionScore":0,"totalReactionsByCurrentUser":0,"commentsPaused":false,"toc":[],"numUniqueUsersWhoReacted":0,"_id":"60f7687d410a0224b5d4ff35","sourcedFromGithub":false,"isAnonymous":false,"views":1118,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1626825294574/ePvyhIJeB.png","autoGeneratedCover":"","brief":"Did you know you can turn almost any sub-Reddit into an RSS feed by adding .RSS to the url?!\n\nRSS? Ok, by why is this useful? 🤨\nBecause it's basically an API to GET the recent posts, in XML format, without all the setup of enabling the API!!\n\nAnd wi...","content":"<h2 id=\"heading-did-you-know-you-can-turn-almost-any-sub-reddit-into-an-rss-feed-by-adding-rss-to-the-url\">Did you know you can turn almost any sub-Reddit into an RSS feed by adding <code>.RSS</code> to the url?!</h2>\n<p><img src=\"https://media.giphy.com/media/SJX3gbZ2dbaEhU92Pu/giphy.gif\" alt=\"shocked\" /></p>\n<h3 id=\"heading-rss-ok-by-why-is-this-useful\">RSS? Ok, by why is this useful? 🤨</h3>\n<p><strong>Because it's basically an API to GET the recent posts, in XML format, without all the setup of enabling the API!!</strong></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626824033656/ESM_NzLBZ.png\" alt=\"Screen Shot 2021-07-20 at 7.33.48 PM.png\" /></p>\n<p>And with a little data transformation using Appsmith, the raw XML can easily be turned into an array of JSON objects to build a feed viewer. From there, all kinds of other integrations could be built, passing data from the selected feed to the next function. </p>\n<p><strong>For this tutorial, I'll be parsing data from www.Reddit.com using the <code>.RSS</code> url, but this method could be applied for viewing any XML data source.</strong> </p>\n<h2 id=\"heading-setup\">⚙️ Setup</h2>\n<h3 id=\"heading-create-a-new-appsmith-app-and-add-the-following-widgets\">Create a new Appsmith app and add the following Widgets:</h3>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626824203045/yf44xZTMB.gif\" alt=\"2021-07-20 19.36.18.gif\" /></p>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>Name</td><td>Type</td></tr>\n</thead>\n<tbody>\n<tr>\n<td>subreddit</td><td>Input/Text</td></tr>\n<tr>\n<td>results</td><td>Table</td></tr>\n<tr>\n<td>update</td><td>Button</td></tr>\n<tr>\n<td>preview</td><td>Iframe</td></tr>\n</tbody>\n</table>\n</div><ol>\n<li>Add a new Datasource&gt;APIs&gt;Create New: <code>Name: getXML</code>\n<code>GET: https://www.reddit.com/r/{{subreddit.text}}/.rss</code></li>\n<li>Enter a sub-reddit name in the subreddit Input Widget</li>\n<li>Run <code>getXML</code></li>\n</ol>\n<p>Now that the API response is populated, the auto-complete will help us navigate the results and bind the correct property of the response to a the <code>results</code> table Widget. </p>\n<ol start=\"4\">\n<li>Bind the <code>results</code> Table-Widget to the <code>getXML</code> API\n<code>{{xmlParser.parse(getXML.data).feed.entry}}</code>\n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626824450373/xM8sm89p-.png\" alt=\"Screen Shot 2021-07-20 at 7.40.32 PM.png\" /></li>\n<li>Bind the <code>preview</code> Iframe-Widget to the 3rd link in the <code>content</code> property of the \"currentRow\"\n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626824961173/vzkx864ZR.png\" alt=\"Screen Shot 2021-07-20 at 7.47.44 PM.png\" /></li>\n<li><strong>DEPLOY!</strong> 🚀</li>\n</ol>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626825036971/-B-YEaa9v.gif\" alt=\"2021-07-20 19.49.59.gif\" /></p>\n<hr />\n<p>{{results.selectedRow.content.split(<code>'&amp;quot;'</code>)[3]}}</p>\n<p>This line 'splits' the  <code>content</code> property of the <code>getXML</code> API results by the <code>&amp;quote;</code> pattern, and creates and array from the results. The 4rd value in this list is the one we want for the preview, but the list is zero-based. So [3] gets the 4th item from the array. </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626826737197/772LDjml7.gif\" alt=\"2021-07-20 20.18.28.gif\" /></p>\n<hr />\n<p>Thanks for reading! Even though RSS isn't as popular these days for personal use, there are still TONS of uses for no-code solutions! Here are a few resources to help inspire your own integration:</p>\n<p>https://rss.app/</p>\n<p>https://rss2json.com/</p>\n<p>https://www.listennotes.com/rss-viewer/</p>\n<p>https://www.google.com/alerts</p>\n","contentMarkdown":"## Did you know you can turn almost any sub-Reddit into an RSS feed by adding `.RSS` to the url?!\n\n![shocked](https://media.giphy.com/media/SJX3gbZ2dbaEhU92Pu/giphy.gif)\n\n### RSS? Ok, by why is this useful? 🤨\n\n**Because it's basically an API to GET the recent posts, in XML format, without all the setup of enabling the API!!**\n\n![Screen Shot 2021-07-20 at 7.33.48 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626824033656/ESM_NzLBZ.png)\n\nAnd with a little data transformation using Appsmith, the raw XML can easily be turned into an array of JSON objects to build a feed viewer. From there, all kinds of other integrations could be built, passing data from the selected feed to the next function. \n\n**For this tutorial, I'll be parsing data from www.Reddit.com using the `.RSS` url, but this method could be applied for viewing any XML data source.** \n\n## ⚙️ Setup\n\n### Create a new Appsmith app and add the following Widgets:\n![2021-07-20 19.36.18.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1626824203045/yf44xZTMB.gif)\n\n|Name|Type|\n|---|---|\n|subreddit|Input/Text|\n|results|Table|\n|update|Button|\n|preview|Iframe|\n\n1. Add a new Datasource>APIs>Create New: `Name: getXML`\n```GET: https://www.reddit.com/r/{{subreddit.text}}/.rss```\n2. Enter a sub-reddit name in the subreddit Input Widget\n3. Run `getXML`\n\nNow that the API response is populated, the auto-complete will help us navigate the results and bind the correct property of the response to a the `results` table Widget. \n4. Bind the `results` Table-Widget to the `getXML` API\n```{{xmlParser.parse(getXML.data).feed.entry}}```\n![Screen Shot 2021-07-20 at 7.40.32 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626824450373/xM8sm89p-.png)\n5. Bind the `preview` Iframe-Widget to the 3rd link in the `content` property of the \"currentRow\"\n![Screen Shot 2021-07-20 at 7.47.44 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626824961173/vzkx864ZR.png)\n6. **DEPLOY!** 🚀\n\n![2021-07-20 19.49.59.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1626825036971/-B-YEaa9v.gif)\n\n___\n{{results.selectedRow.content.split(`'&quot;'`)[3]}}\n\nThis line 'splits' the  `content` property of the `getXML` API results by the `&quote;` pattern, and creates and array from the results. The 4rd value in this list is the one we want for the preview, but the list is zero-based. So [3] gets the 4th item from the array. \n\n![2021-07-20 20.18.28.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1626826737197/772LDjml7.gif)\n___\nThanks for reading! Even though RSS isn't as popular these days for personal use, there are still TONS of uses for no-code solutions! Here are a few resources to help inspire your own integration:\n\nhttps://rss.app/\n\nhttps://rss2json.com/\n\nhttps://www.listennotes.com/rss-viewer/\n\nhttps://www.google.com/alerts\n\n\n\n ","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744721958ef13879b94b0b","56744721958ef13879b949e6","56744723958ef13879b9550d","56744720958ef13879b947ce","60ed9e18fc37a15ec15683b3"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4841.2515,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d3548b","567453d0b73d6a82ac8c5abd","5c090d96c2a9c2a674d35484","567453d0b73d6a82ac8c5abc","567453d0b73d6a82ac8c5ab9"],"totalReactions":8,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":true,"title":"Building a Reddit Browser (and XML Parser) in Appsmith","type":"story","partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"building-a-reddit-browser-and-xml-parser-in-appsmith","pollOptions":[],"dateAdded":"2021-07-21T00:21:17.107Z","badges":[],"questionReplies":[],"contributors":[],"cuid":"ckrcqpw5i06mf91s1clqjad36","author":"60771bbfa3407a32d7041f47","followersCount":1,"draft":"60f7306e410a0224b5d4f8e8","isRepublished":false,"hasPinnedTag":false,"readTime":2,"__v":0,"series":"67d6b35a41604947f002d803","dateUpdated":"2025-03-16T11:20:36.406Z","pendingPublicationApproval":false,"reactionToCountMap":{"reaction_5d9dd859f31791c942dc5b52":1,"reaction_5c090d96c2a9c2a674d3548b":1,"reaction_567453d0b73d6a82ac8c5abd":1,"reaction_5c090d96c2a9c2a674d35484":2,"reaction_567453d0b73d6a82ac8c5abc":1,"reaction_567453d0b73d6a82ac8c5ab9":2},"viewsUpdatedOn":1713781846245,"coAuthors":[],"enableToc":false,"hasCustomDate":false,"isCoverAttributionHidden":false,"stickCoverToBottom":false,"updatedAt":"2025-03-16T11:20:36.406Z","uniqueReactions":["5d9dd859f31791c942dc5b52","5c090d96c2a9c2a674d3548b","567453d0b73d6a82ac8c5abd","5c090d96c2a9c2a674d35484","567453d0b73d6a82ac8c5abc","567453d0b73d6a82ac8c5ab9"],"reactionToCountMapUnique":{"reaction_5d9dd859f31791c942dc5b52":1,"reaction_5c090d96c2a9c2a674d3548b":1,"reaction_567453d0b73d6a82ac8c5abd":1,"reaction_5c090d96c2a9c2a674d35484":2,"reaction_567453d0b73d6a82ac8c5abc":1,"reaction_567453d0b73d6a82ac8c5ab9":2},"id":"60f7687d410a0224b5d4ff35"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"coAuthors":[],"discussionScore":0,"totalReactionsByCurrentUser":0,"commentsPaused":false,"enableToc":false,"toc":[],"numUniqueUsersWhoReacted":0,"_id":"60f5775fbb67011cb836e249","sourcedFromGithub":false,"isAnonymous":false,"views":1020,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1626698327419/nHCQxoDz-.png","autoGeneratedCover":"","brief":"AppSheet is a no-code, mobile/web-app builder that connects to cloud spreadsheets and databases.\nIt's a great tool for throwing together a quick mobile app with no coding experience, but also powerful enough to create complex business solutions. \n\nHi...","content":"<h3 id=\"appsheet-is-a-no-code-mobileweb-app-builder-that-connects-to-cloud-spreadsheets-and-databases\">AppSheet is a no-code, mobile/web-app builder that connects to cloud spreadsheets and databases.</h3>\n<p>It's a great tool for throwing together a quick mobile app with no coding experience, but also powerful enough to create complex business solutions. </p>\n<p><img src=\"https://www.appsheet.com/Content/img/heroimg/desktop_screen.png\" alt=\"screenshot\" /></p>\n<h3 id=\"history\">History</h3>\n<p>You may not have heard of it, but AppSheet is nothing new; It was started out of Seattle back in 2014. Google had started its own 'App Maker' in 2016, and AppSheet was a separate, independent company at this time. </p>\n<p>Then, in January 2020, Google  <a target=\"_blank\" href=\"https://cloud.google.com/blog/topics/inside-google-cloud/helping-businesses-create-and-extend-applications-without-coding\">announced</a>  its acquisition of AppSheet. And in <em>February</em> 2020, they announced the scheduled  <a target=\"_blank\" href=\"https://support.google.com/a/answer/9682494?hl=en\">shutdown of App Maker</a> . </p>\n<p>These past few years, Google has invested heavily in the AppSheet infrastructure, adding GDPR compliance, migrated from Azure to Google Cloud, added regional servers, improved security, and made the platform more robust and scalable. </p>\n<p>And now that those upgrades are out of the way, the AppSheet team has moved on to UI and feature updates. The platform is still under rapid development, and certain features like the new Automations section tend to be buggy. But many long awaited features are finally rolling out. </p>\n<h3 id=\"features\">Features</h3>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626692179430/dYeVfg0YO.png\" alt=\"Screen Shot 2021-07-19 at 6.55.23 AM.png\" /></p>\n<ul>\n<li>Capture Images from mobile or web</li>\n<li>Detect user location (on form submit, no live tracking)</li>\n<li>Scan barcodes to trigger lookups, navigation, actions, etc</li>\n<li>Send in app notifications, emails and text messages</li>\n<li>Build interactive dashboards with live charts</li>\n<li>Accept signature on web and mobile</li>\n<li>Work offline: create/edit records and sync when a connection is available</li>\n<li>Build once, install on iOS, Android and web</li>\n<li>Integrate with other platforms via webhooks</li>\n<li>Automate business processes </li>\n</ul>\n<h3 id=\"datasources\">Datasources</h3>\n<p>Store data in your preferred cloud storage provider:\n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626692104301/oCYen3zZe.png\" alt=\"Screen Shot 2021-07-19 at 6.54.57 AM.png\" /></p>\n<h3 id=\"pricing\">Pricing</h3>\n<ul>\n<li><strong>Free</strong> plan is for testing only (10 users max). Emails/texts will only send to app owner until app is deployed &amp; hosting plan is added. </li>\n<li>Test indefinitely, but deploy/pay for hosting to use all features </li>\n<li><strong>Core</strong>: $5/mo PER USER, No security filters (all users see all data), and limited automations. </li>\n<li><strong>Standard</strong>: $10/mo PER USER, Good for most use-cases. Adds all features except Enterprise Datasources/Connectors. </li>\n<li><strong>Enterprise</strong>: Contact Sales for pricing</li>\n</ul>\n<h3 id=\"public-apps\">Public Apps</h3>\n<p>There's also a public (no login) Publisher Pro plan for $50/mo PER APP, with unlimited users. </p>\n<ul>\n<li>Public apps can NOT be hosted in the same account as a secure app. </li>\n<li>When upgrading from the free plan, you choose one plan to host all your apps. </li>\n<li>Secure plans (Core, Standard, Enterprise) charge PER USER, with <em>unlimited apps</em> allowed</li>\n<li>Public (Publisher Pro) plan charges PER APP, with <em>unlimited users</em> </li>\n</ul>\n<h3 id=\"white-labeling\">White Labeling</h3>\n<p>Although AppSheet does offer the ability to white label your app and submit it directly to the app stores, this feature is rarely used. AppSheet's pricing is more geared towards internal tools, not public facing apps. At $5-10/mo per user, publishing a secure app would quickly get expensive! </p>\n<p>Given that most use cases are internal, and not public or customer facing, white labeling in AppSheet tends to be a lot of extra work and cost, with little benefit. </p>\n<h3 id=\"community\">Community</h3>\n<p>AppSheet has an outstanding, extremely active and helpful  <a target=\"_blank\" href=\"https://community.appsheet.com/\">community forum</a> ! And if you go back a few years, they even had a fairly active Google+ Group (RIP G+ 😂).</p>\n<p>There's also a Slack Workspace for AppSheet freelancers to find or post jobs. \n <a target=\"_blank\" href=\"https://join.slack.com/t/appsheetdev/shared_invite/zt-ta36auc4-ZX7kQxV~mtKz8uAkQXj3Ww\">https://join.slack.com/t/appsheetdev/shared_invite/zt-ta36auc4-ZX7kQxV~mtKz8uAkQXj3Ww</a> </p>\n<blockquote>\n<p>Link expires after 30 days. Comment below if you want to join and need a new link :)</p>\n</blockquote>\n<h3 id=\"pros\">Pros</h3>\n<ul>\n<li>Rapid development of mobile &amp; web apps</li>\n<li>Easy to build <em>basic</em> apps with minimal learning curve</li>\n<li>Build once, run on mobile &amp; web</li>\n<li>Automate emails, text messages and PDF creation easily</li>\n<li>Tons of options for data storage</li>\n</ul>\n<h3 id=\"cons\">Cons</h3>\n<ul>\n<li>Learning curve is much higher for Automations &amp; more complex features</li>\n<li>SQL datasources only available with Enterprise plans</li>\n<li>Undergoing major transition period; Constant updates, and frequent new bugs</li>\n<li>Pricing is not scaleable for public apps that require securely filtering data</li>\n<li>Support &amp; Sales are known for being difficult to contact</li>\n<li>Partner program is incomplete, unorganized, inactive (abandoned?)</li>\n</ul>\n<hr />\n<p>Overall, AppSheet is a great platform for most use-cases, especially with small teams. \nDue to cost, it's definitely not the best choice for apps with a large user base, unless all of the data can be public. </p>\n<p><strong>Final thought:</strong> Make sure you understand AppSheet's hosting plans and features before investing extensive time building an application you might not be able to afford! </p>\n<p>Thanks for reading! </p>\n","contentMarkdown":"### AppSheet is a no-code, mobile/web-app builder that connects to cloud spreadsheets and databases. \n\nIt's a great tool for throwing together a quick mobile app with no coding experience, but also powerful enough to create complex business solutions. \n\n![screenshot](https://www.appsheet.com/Content/img/heroimg/desktop_screen.png)\n\n### History\nYou may not have heard of it, but AppSheet is nothing new; It was started out of Seattle back in 2014. Google had started its own 'App Maker' in 2016, and AppSheet was a separate, independent company at this time. \n\nThen, in January 2020, Google  [announced](https://cloud.google.com/blog/topics/inside-google-cloud/helping-businesses-create-and-extend-applications-without-coding)  its acquisition of AppSheet. And in *February* 2020, they announced the scheduled  [shutdown of App Maker](https://support.google.com/a/answer/9682494?hl=en) . \n\nThese past few years, Google has invested heavily in the AppSheet infrastructure, adding GDPR compliance, migrated from Azure to Google Cloud, added regional servers, improved security, and made the platform more robust and scalable. \n\nAnd now that those upgrades are out of the way, the AppSheet team has moved on to UI and feature updates. The platform is still under rapid development, and certain features like the new Automations section tend to be buggy. But many long awaited features are finally rolling out. \n\n### Features\n\n![Screen Shot 2021-07-19 at 6.55.23 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626692179430/dYeVfg0YO.png)\n- Capture Images from mobile or web\n- Detect user location (on form submit, no live tracking)\n- Scan barcodes to trigger lookups, navigation, actions, etc\n- Send in app notifications, emails and text messages\n- Build interactive dashboards with live charts\n- Accept signature on web and mobile\n- Work offline: create/edit records and sync when a connection is available\n- Build once, install on iOS, Android and web\n- Integrate with other platforms via webhooks\n- Automate business processes \n\n### Datasources\nStore data in your preferred cloud storage provider:\n![Screen Shot 2021-07-19 at 6.54.57 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626692104301/oCYen3zZe.png)\n\n### Pricing\n- **Free** plan is for testing only (10 users max). Emails/texts will only send to app owner until app is deployed & hosting plan is added. \n- Test indefinitely, but deploy/pay for hosting to use all features \n- **Core**: $5/mo PER USER, No security filters (all users see all data), and limited automations. \n- **Standard**: $10/mo PER USER, Good for most use-cases. Adds all features except Enterprise Datasources/Connectors. \n- **Enterprise**: Contact Sales for pricing\n\n### Public Apps\nThere's also a public (no login) Publisher Pro plan for $50/mo PER APP, with unlimited users. \n- Public apps can NOT be hosted in the same account as a secure app. \n- When upgrading from the free plan, you choose one plan to host all your apps. \n- Secure plans (Core, Standard, Enterprise) charge PER USER, with *unlimited apps* allowed\n- Public (Publisher Pro) plan charges PER APP, with *unlimited users* \n\n### White Labeling\nAlthough AppSheet does offer the ability to white label your app and submit it directly to the app stores, this feature is rarely used. AppSheet's pricing is more geared towards internal tools, not public facing apps. At $5-10/mo per user, publishing a secure app would quickly get expensive! \n\nGiven that most use cases are internal, and not public or customer facing, white labeling in AppSheet tends to be a lot of extra work and cost, with little benefit. \n\n### Community\nAppSheet has an outstanding, extremely active and helpful  [community forum](https://community.appsheet.com/) ! And if you go back a few years, they even had a fairly active Google+ Group (RIP G+ 😂).\n\nThere's also a Slack Workspace for AppSheet freelancers to find or post jobs. \n [https://join.slack.com/t/appsheetdev/shared_invite/zt-ta36auc4-ZX7kQxV~mtKz8uAkQXj3Ww](https://join.slack.com/t/appsheetdev/shared_invite/zt-ta36auc4-ZX7kQxV~mtKz8uAkQXj3Ww) \n>Link expires after 30 days. Comment below if you want to join and need a new link :)\n \n\n### Pros \n- Rapid development of mobile & web apps\n- Easy to build *basic* apps with minimal learning curve\n- Build once, run on mobile & web\n- Automate emails, text messages and PDF creation easily\n- Tons of options for data storage\n\n\n### Cons\n- Learning curve is much higher for Automations & more complex features\n- SQL datasources only available with Enterprise plans\n- Undergoing major transition period; Constant updates, and frequent new bugs\n- Pricing is not scaleable for public apps that require securely filtering data\n- Support & Sales are known for being difficult to contact\n- Partner program is incomplete, unorganized, inactive (abandoned?)\n\n___\nOverall, AppSheet is a great platform for most use-cases, especially with small teams. \nDue to cost, it's definitely not the best choice for apps with a large user base, unless all of the data can be public. \n\n**Final thought:** Make sure you understand AppSheet's hosting plans and features before investing extensive time building an application you might not be able to afford! \n\n\nThanks for reading! \n\n","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56e669b622f645300192ed17","56744723958ef13879b95470","57ebac0bd9b08ec06a77be05","56744723958ef13879b953b4","56744722958ef13879b951dd"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4837.5203,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":true,"syncAlgolia":false,"title":"Google's AppSheet: No-Code Apps from Spreadsheets","subtitle":"A quick overview from an AppSheet Partner Developer","type":"story","partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"googles-appsheet-no-code-apps-from-spreadsheets","pollOptions":[],"dateAdded":"2021-07-19T13:00:15.412Z","badges":[],"questionReplies":[],"contributors":[],"cuid":"ckramy8e10t44o8s11yw761em","author":"60771bbfa3407a32d7041f47","followersCount":1,"draft":"60f54f76bb67011cb836dc87","isRepublished":false,"hasPinnedTag":false,"readTime":4,"__v":0,"viewsUpdatedOn":1713720636775,"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"60f5775fbb67011cb836e249"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"discussionScore":0,"totalReactionsByCurrentUser":0,"commentsPaused":false,"toc":[],"numUniqueUsersWhoReacted":0,"_id":"60f44a53bb67011cb836c3f9","sourcedFromGithub":false,"isAnonymous":false,"views":751,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1626617063902/J2Tc1vU86.png","autoGeneratedCover":"","brief":"Google Forms is widely used in various integrations and workflows that all start with capturing data and sending it to a Google Sheet.\nWhether it's a contact form embedded on your website, a registration form to share on social media, or something mo...","content":"<p><strong>Google Forms is widely used in various integrations and workflows that all start with capturing data and sending it to a Google Sheet.</strong></p>\n<p>Whether it's a contact form embedded on your website, a registration form to share on social media, or something more advanced- the general principle is the same. Give the user some input fields and a suitable UI, capture the response and send the data to a spreadsheet.</p>\n<p>From there, all kinds of integrations, automations and workflows are possible. But regardless of the use case, the Google branding is pretty noticeable. Even with a form embedded in an iframe on your own site, the bottom of the form clearly states that it was built with Google Forms.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626616366678/LKymzbGbS.png\" alt=\"Screen Shot 2021-07-18 at 9.52.32 AM.png\" /></p>\n<p>So how do you replace the form with something that has your own branding, without breaking the integrations that rely on Google Sheets as a datasource?</p>\n<h2 id=\"heading-with-appsmith\">with Appsmith!</h2>\n<h3 id=\"heading-add-apis\">Add APIs</h3>\n<ol>\n<li><p>Start a new Appsmith app and add a new API: <code>Datasources&gt; Create New&gt; Google Sheets &gt; Fetch Rows</code></p>\n</li>\n<li><p>Use the URL from your existing Responses Sheet that is linked to your Google Form</p>\n<p> <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626617485038/yRLPr5ArF.png\" alt=\"Screen Shot 2021-07-18 at 10.09.51 AM.png\" /></p>\n</li>\n<li><p>Run the API and verify the response</p>\n<p> <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626617596660/DWI7VCfN5.png\" alt=\"Screen Shot 2021-07-18 at 10.12.22 AM.png\" /></p>\n<p> <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626617598855/SXd62K5Lc.png\" alt=\"Screen Shot 2021-07-18 at 10.12.12 AM.png\" /></p>\n</li>\n<li><p>Now, Copy the API, and change the method to <code>Insert Row</code></p>\n</li>\n<li><p>Copy the <em>Response</em> from the <code>get_rows</code> API into the <em>Row Object</em> of the <code>add_row</code> API.</p>\n</li>\n<li><p>Remove the <code>RowIndex</code> <em>(not needed for Insert row)</em></p>\n</li>\n<li><p>Add commas after each property in the <em>Row Object</em> template <em>(except the last one)</em></p>\n</li>\n<li><p>Run the API and verify a new row was added to the sheet</p>\n</li>\n</ol>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626619417424/I7uah37f2.png\" alt=\"Screen Shot 2021-07-18 at 10.43.14 AM.png\" /></p>\n<p>You should have a new row in added to your sheet, using the hard-coded data we just added to the template. Now, let's add a form to capture the inputs. Then we can come back to the template and bind the inputs.</p>\n<h3 id=\"heading-create-form\">Create Form</h3>\n<ol>\n<li><p>Change <a target=\"_blank\" href=\"https://docs.appsmith.com/core-concepts/dynamic-ui/application-layout#how-it-works\">Layout Size</a> to Mobile <em>(smaller for iframe)</em></p>\n</li>\n<li><p>Add a new Button-Widget to the Page</p>\n</li>\n<li><p>Button Settings: <code>OnClick&gt; Open Modal&gt; New Modal</code></p>\n</li>\n<li><p>Change Modal type to <strong>Form</strong></p>\n</li>\n<li><p>Add Inputs to Form</p>\n<p> <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626620982730/GsibVgO0T.gif\" alt=\"2021-07-18 11.09.20.gif\" /></p>\n</li>\n<li><p>Bind Submit button to <code>add_row</code> API</p>\n<p> <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626620929979/L4eXrJPNT.png\" alt=\"Screen Shot 2021-07-18 at 11.08.17 AM.png\" /></p>\n</li>\n<li><p>Update API body template to bind inputs</p>\n</li>\n</ol>\n<pre><code class=\"lang-json\">{\n<span class=\"hljs-attr\">\"Timestamp\"</span>: <span class=\"hljs-string\">\"{{moment().format('MM/DD/yyyy hh:mm:ss')}}\"</span>,\n<span class=\"hljs-attr\">\"Name\"</span>:<span class=\"hljs-string\">\"{{name.text}}\"</span>,\n<span class=\"hljs-attr\">\"Email\"</span>:<span class=\"hljs-string\">\"{{email.text}}\"</span>,\n<span class=\"hljs-attr\">\"Comments\"</span>:<span class=\"hljs-string\">\"{{comments.text}}\"</span>\n}\n</code></pre>\n<ol start=\"8\">\n<li><strong>DEPLOY!</strong> 🚀</li>\n</ol>\n<h3 id=\"heading-ok-now-we-have-a-working-replacement-for-our-google-form\">Ok, now we have a working replacement for our Google Form.</h3>\n<p>Next, either set your app to <a target=\"_blank\" href=\"https://docs.appsmith.com/core-concepts/access-control#public-apps\">share publicly</a>, or add the users you want to have access to the form.</p>\n<p>If your previous integration was embedded in an iframe, you can replace it with the new app using this format:</p>\n<p><code>&lt;iframe src=\"https://app.appsmith.com/applications/{{APP_ID}}/pages/{{PAGE_ID}}?embed=true\" height=\"700\" width=\"100%\"&gt;&lt;/iframe&gt;</code></p>\n<blockquote>\n<p>Note the <code>embed=true</code> parameter. This removes the Appsmith top bar so you can add your own branding.</p>\n</blockquote>\n<p><a target=\"_blank\" href=\"https://docs.appsmith.com/how-to-guides/embed-appsmith-into-existing-application\">Docs:embed-appsmith-into-existing-application</a></p>\n<hr />\n<p>Using this guide, you should be able to replace a <em>Google Form</em> with an <strong>Appsmith app</strong> and continue adding rows to the same sheet. So any integrations that rely on data in that spreadsheet should continue to work.</p>\n<p>However, if you were using an onSubmit() trigger you may have to replace that with a webhook from Appsmith.</p>\n","contentMarkdown":"**Google Forms is widely used in various integrations and workflows that all start with capturing data and sending it to a Google Sheet.**\n\nWhether it's a contact form embedded on your website, a registration form to share on social media, or something more advanced- the general principle is the same. Give the user some input fields and a suitable UI, capture the response and send the data to a spreadsheet.\n\nFrom there, all kinds of integrations, automations and workflows are possible. But regardless of the use case, the Google branding is pretty noticeable. Even with a form embedded in an iframe on your own site, the bottom of the form clearly states that it was built with Google Forms.\n\n![Screen Shot 2021-07-18 at 9.52.32 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626616366678/LKymzbGbS.png align=\"left\")\n\nSo how do you replace the form with something that has your own branding, without breaking the integrations that rely on Google Sheets as a datasource?\n\n## with Appsmith!\n\n### Add APIs\n\n1. Start a new Appsmith app and add a new API: `Datasources> Create New> Google Sheets > Fetch Rows`\n    \n2. Use the URL from your existing Responses Sheet that is linked to your Google Form\n    \n    ![Screen Shot 2021-07-18 at 10.09.51 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626617485038/yRLPr5ArF.png align=\"left\")\n    \n3. Run the API and verify the response\n    \n    ![Screen Shot 2021-07-18 at 10.12.22 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626617596660/DWI7VCfN5.png align=\"left\")\n    \n    ![Screen Shot 2021-07-18 at 10.12.12 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626617598855/SXd62K5Lc.png align=\"left\")\n    \n4. Now, Copy the API, and change the method to `Insert Row`\n    \n5. Copy the *Response* from the `get_rows` API into the *Row Object* of the `add_row` API.\n    \n6. Remove the `RowIndex` *(not needed for Insert row)*\n    \n7. Add commas after each property in the *Row Object* template *(except the last one)*\n    \n8. Run the API and verify a new row was added to the sheet\n    \n\n![Screen Shot 2021-07-18 at 10.43.14 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626619417424/I7uah37f2.png align=\"left\")\n\nYou should have a new row in added to your sheet, using the hard-coded data we just added to the template. Now, let's add a form to capture the inputs. Then we can come back to the template and bind the inputs.\n\n### Create Form\n\n1. Change [Layout Size](https://docs.appsmith.com/core-concepts/dynamic-ui/application-layout#how-it-works) to Mobile *(smaller for iframe)*\n    \n2. Add a new Button-Widget to the Page\n    \n3. Button Settings: `OnClick> Open Modal> New Modal`\n    \n4. Change Modal type to **Form**\n    \n5. Add Inputs to Form\n    \n    ![2021-07-18 11.09.20.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1626620982730/GsibVgO0T.gif align=\"left\")\n    \n6. Bind Submit button to `add_row` API\n    \n    ![Screen Shot 2021-07-18 at 11.08.17 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626620929979/L4eXrJPNT.png align=\"left\")\n    \n7. Update API body template to bind inputs\n    \n\n```json\n{\n\"Timestamp\": \"{{moment().format('MM/DD/yyyy hh:mm:ss')}}\",\n\"Name\":\"{{name.text}}\",\n\"Email\":\"{{email.text}}\",\n\"Comments\":\"{{comments.text}}\"\n}\n```\n\n8. **DEPLOY!** 🚀\n    \n\n### Ok, now we have a working replacement for our Google Form.\n\nNext, either set your app to [share publicly](https://docs.appsmith.com/core-concepts/access-control#public-apps), or add the users you want to have access to the form.\n\nIf your previous integration was embedded in an iframe, you can replace it with the new app using this format:\n\n`<iframe src=\"https://app.appsmith.com/applications/{{APP_ID}}/pages/{{PAGE_ID}}?embed=true\" height=\"700\" width=\"100%\"></iframe>`\n\n> Note the `embed=true` parameter. This removes the Appsmith top bar so you can add your own branding.\n\n[Docs:embed-appsmith-into-existing-application](https://docs.appsmith.com/how-to-guides/embed-appsmith-into-existing-application)\n\n---\n\nUsing this guide, you should be able to replace a *Google Form* with an **Appsmith app** and continue adding rows to the same sheet. So any integrations that rely on data in that spreadsheet should continue to work.\n\nHowever, if you were using an onSubmit() trigger you may have to replace that with a webhook from Appsmith.","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b95470","56e669b622f645300192ed17","56744722958ef13879b950fe","56744721958ef13879b948fa","56744720958ef13879b947ce"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4835.8077,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":false,"title":"Replacing Google Forms with Appsmith","subtitle":"-without breaking existing integrations!","type":"story","partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"replacing-google-forms-with-appsmith","pollOptions":[],"dateAdded":"2021-07-18T15:35:47.862Z","badges":[],"questionReplies":[],"contributors":[],"cuid":"ckr9d2ess0juwo8s12v5ad6z6","author":"60771bbfa3407a32d7041f47","followersCount":1,"draft":"60f42b15bb67011cb836be38","isRepublished":false,"hasPinnedTag":false,"readTime":3,"__v":0,"viewsUpdatedOn":1713889840159,"coAuthors":[],"dateUpdated":"2025-03-16T11:19:51.624Z","enableToc":false,"hasCustomDate":false,"isCoverAttributionHidden":false,"series":"67d6b35a41604947f002d803","stickCoverToBottom":false,"updatedAt":"2025-03-16T11:19:51.624Z","uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"60f44a53bb67011cb836c3f9"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"discussionScore":0,"totalReactionsByCurrentUser":0,"commentsPaused":false,"toc":[],"numUniqueUsersWhoReacted":0,"_id":"60f2fb06bb67011cb836991b","sourcedFromGithub":false,"isAnonymous":false,"views":464,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1626536051582/IdmkSJI5M.png","autoGeneratedCover":"","brief":"Today I will be integrating with Google's Static Maps API and using Appsmith to retrieve a map image, given a text-string street address.\nThere's a bit of setup involved if you've never used the Google Cloud Platform before. You'll have to accept the...","content":"<h3 id=\"heading-today-i-will-be-integrating-with-googles-static-maps-api-and-using-appsmith-to-retrieve-a-map-image-given-a-text-string-street-address\">Today I will be integrating with Google's Static Maps API and using Appsmith to retrieve a map image, given a text-string street address.</h3>\n<p>There's a bit of setup involved if you've never used the Google Cloud Platform before. You'll have to accept the terms and set up billing, but you can also get a free trial if haven't used it yet.</p>\n<p>Google's own guides on enabling the API and creating a project are great, so I'm just going to link them here and skip to the fun stuff.</p>\n<h2 id=\"heading-enable-the-static-maps-api\">📍 Enable the Static Maps API</h2>\n<ul>\n<li><p><a target=\"_blank\" href=\"https://console.cloud.google.com/projectcreate\">Create a New Project</a></p>\n</li>\n<li><p>Enable the <a target=\"_blank\" href=\"https://developers.google.com/maps/gmp-get-started\">Static Maps API</a></p>\n</li>\n<li><p><a target=\"_blank\" href=\"https://developers.google.com/workspace/guides/create-credentials\">Create Credentials</a></p>\n</li>\n</ul>\n<h1 id=\"heading-appsmith-setup\">⚙️ Appsmith Setup</h1>\n<ul>\n<li>Add new Datasource: Create New&gt; API &gt; GET</li>\n</ul>\n<p><strong>Parameters:</strong></p>\n<pre><code class=\"lang-json\">{\n  sensor: <span class=\"hljs-literal\">false</span>,\n  center: {{address.text.replace(/\\W/g,'+')}},\n  key: 'YOUR_API_KEY',\n  size: '<span class=\"hljs-number\">512</span>x512'\n}\n</code></pre>\n<ul>\n<li>Add new Widgets</li>\n</ul>\n<div class=\"hn-table\">\n<table>\n<thead>\n<tr>\n<td>Type</td><td>Name</td><td>Value/ Settings</td></tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Input</strong></td><td>address</td><td><strong>OnTextChange:</strong> <code>{{function({if(live.isSwitchedOn{addressToImage.run()}}()}}</code></td></tr>\n<tr>\n<td><strong>Switch</strong></td><td>live</td><td><strong>Default:</strong> Off</td></tr>\n<tr>\n<td><strong>Button</strong></td><td>submit</td><td><strong>Run a Query:</strong> addressToImage</td></tr>\n<tr>\n<td><strong>Image</strong></td><td>image</td><td><code>{{addressToImage.data}}</code></td></tr>\n</tbody>\n</table>\n</div><p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626541152459/nlgE1ESp_T.gif\" alt=\"2021-07-17 12.58.04.gif\" /></p>\n<h1 id=\"heading-deploy\">DEPLOY! 🚀</h1>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626535698182/czJdCEVsP.gif\" alt=\"2021-07-17 11.27.42.gif\" /></p>\n<h1 id=\"heading-warning\">WARNING! ☠️⚠️</h1>\n<h3 id=\"heading-i-dont-recommend-using-the-live-search-in-a-public-app-or-anything-with-a-lot-of-users\">I don't recommend using the live search in a public app or anything with a lot of users.</h3>\n<p>It's just a fun experiment to see the image update in real time as you type. But it'll definitely rack up some charges quick if you're not careful.</p>\n<hr />\n<h2 id=\"heading-thanks-for-reading-this-was-a-fun-one\">Thanks for reading! This was a fun one 🤓</h2>\n<p>Here's the entire app definition for anyone that wants to skip the build and just import the app.</p>\n<pre><code class=\"lang-json\">{<span class=\"hljs-attr\">\"exportedApplication\"</span>:{<span class=\"hljs-attr\">\"userPermissions\"</span>:[<span class=\"hljs-string\">\"manage:applications\"</span>,<span class=\"hljs-string\">\"canComment:applications\"</span>,<span class=\"hljs-string\">\"export:applications\"</span>,<span class=\"hljs-string\">\"read:applications\"</span>,<span class=\"hljs-string\">\"publish:applications\"</span>,<span class=\"hljs-string\">\"makePublic:applications\"</span>],<span class=\"hljs-attr\">\"name\"</span>:<span class=\"hljs-string\">\"Map Image Extractor\"</span>,<span class=\"hljs-attr\">\"isPublic\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"appIsExample\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"unreadCommentThreads\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"color\"</span>:<span class=\"hljs-string\">\"#A8D76C\"</span>,<span class=\"hljs-attr\">\"icon\"</span>:<span class=\"hljs-string\">\"location\"</span>,<span class=\"hljs-attr\">\"appLayout\"</span>:{<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"DESKTOP\"</span>},<span class=\"hljs-attr\">\"new\"</span>:<span class=\"hljs-literal\">true</span>},<span class=\"hljs-attr\">\"datasourceList\"</span>:[],<span class=\"hljs-attr\">\"pageList\"</span>:[{<span class=\"hljs-attr\">\"userPermissions\"</span>:[<span class=\"hljs-string\">\"read:pages\"</span>,<span class=\"hljs-string\">\"manage:pages\"</span>],<span class=\"hljs-attr\">\"unpublishedPage\"</span>:{<span class=\"hljs-attr\">\"name\"</span>:<span class=\"hljs-string\">\"Page1\"</span>,<span class=\"hljs-attr\">\"layouts\"</span>:[{<span class=\"hljs-attr\">\"id\"</span>:<span class=\"hljs-string\">\"60f2b0955686e31913efe828\"</span>,<span class=\"hljs-attr\">\"userPermissions\"</span>:[],<span class=\"hljs-attr\">\"dsl\"</span>:{<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"MainContainer\"</span>,<span class=\"hljs-attr\">\"backgroundColor\"</span>:<span class=\"hljs-string\">\"none\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">1280</span>,<span class=\"hljs-attr\">\"snapColumns\"</span>:<span class=\"hljs-number\">64</span>,<span class=\"hljs-attr\">\"detachFromLayout\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"0\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">880</span>,<span class=\"hljs-attr\">\"containerStyle\"</span>:<span class=\"hljs-string\">\"none\"</span>,<span class=\"hljs-attr\">\"snapRows\"</span>:<span class=\"hljs-number\">125</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"CANVAS_WIDGET\"</span>,<span class=\"hljs-attr\">\"canExtend\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">27</span>,<span class=\"hljs-attr\">\"minHeight\"</span>:<span class=\"hljs-number\">890</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"dynamicTriggerPathList\"</span>:[],<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[],<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"children\"</span>:[{<span class=\"hljs-attr\">\"backgroundColor\"</span>:<span class=\"hljs-string\">\"#FFFFFF\"</span>,<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"Container1\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">36</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"s9pgimssky\"</span>,<span class=\"hljs-attr\">\"containerStyle\"</span>:<span class=\"hljs-string\">\"card\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">59</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">10</span>,<span class=\"hljs-attr\">\"isVisible\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"CONTAINER_WIDGET\"</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"parentId\"</span>:<span class=\"hljs-string\">\"0\"</span>,<span class=\"hljs-attr\">\"isLoading\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">19.8125</span>,<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"children\"</span>:[{<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"Canvas1\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">634</span>,<span class=\"hljs-attr\">\"detachFromLayout\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"mv8rqf5log\"</span>,<span class=\"hljs-attr\">\"containerStyle\"</span>:<span class=\"hljs-string\">\"none\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">400</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"isVisible\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"canExtend\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"CANVAS_WIDGET\"</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"parentId\"</span>:<span class=\"hljs-string\">\"s9pgimssky\"</span>,<span class=\"hljs-attr\">\"minHeight\"</span>:<span class=\"hljs-number\">580</span>,<span class=\"hljs-attr\">\"isLoading\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"dynamicTriggerPathList\"</span>:[],<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[],<span class=\"hljs-attr\">\"children\"</span>:[{<span class=\"hljs-attr\">\"image\"</span>:<span class=\"hljs-string\">\"{{addressToImage.data}}\"</span>,<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"image\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">52</span>,<span class=\"hljs-attr\">\"objectFit\"</span>:<span class=\"hljs-string\">\"cover\"</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"si6a53w6f1\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">10</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">46</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">10</span>,<span class=\"hljs-attr\">\"isVisible\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"IMAGE_WIDGET\"</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"parentId\"</span>:<span class=\"hljs-string\">\"mv8rqf5log\"</span>,<span class=\"hljs-attr\">\"isLoading\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"maxZoomLevel\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"enableDownload\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">18.409375</span>,<span class=\"hljs-attr\">\"dynamicTriggerPathList\"</span>:[],<span class=\"hljs-attr\">\"imageShape\"</span>:<span class=\"hljs-string\">\"RECTANGLE\"</span>,<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"defaultImage\"</span>},{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"image\"</span>}],<span class=\"hljs-attr\">\"enableRotation\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"defaultImage\"</span>:<span class=\"hljs-string\">\"{{addressToImage.data}}\"</span>},{<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"address\"</span>,<span class=\"hljs-attr\">\"dynamicPropertyPathList\"</span>:[{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"onTextChanged\"</span>}],<span class=\"hljs-attr\">\"onSubmit\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">4</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">8</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">10</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"INPUT_WIDGET\"</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">19.8125</span>,<span class=\"hljs-attr\">\"dynamicTriggerPathList\"</span>:[{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"onTextChanged\"</span>},{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"onSubmit\"</span>}],<span class=\"hljs-attr\">\"resetOnSubmit\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[],<span class=\"hljs-attr\">\"inputType\"</span>:<span class=\"hljs-string\">\"TEXT\"</span>,<span class=\"hljs-attr\">\"placeholderText\"</span>:<span class=\"hljs-string\">\"address\"</span>,<span class=\"hljs-attr\">\"isDisabled\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"isRequired\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"onTextChanged\"</span>:<span class=\"hljs-string\">\" {{function(){\\nif(live.isSwitchedOn){addressToImage.run()}\\n}()}}\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">36</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"1ovbcudtlz\"</span>,<span class=\"hljs-attr\">\"isVisible\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"label\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"parentId\"</span>:<span class=\"hljs-string\">\"mv8rqf5log\"</span>,<span class=\"hljs-attr\">\"isLoading\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"defaultText\"</span>:<span class=\"hljs-string\">\"\"</span>},{<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"live\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">52</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"860098p531\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">4</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">10</span>,<span class=\"hljs-attr\">\"isVisible\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"label\"</span>:<span class=\"hljs-string\">\"live search\"</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"SWITCH_WIDGET\"</span>,<span class=\"hljs-attr\">\"defaultSwitchState\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"alignWidget\"</span>:<span class=\"hljs-string\">\"LEFT\"</span>,<span class=\"hljs-attr\">\"parentId\"</span>:<span class=\"hljs-string\">\"mv8rqf5log\"</span>,<span class=\"hljs-attr\">\"isLoading\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">19.8125</span>,<span class=\"hljs-attr\">\"dynamicTriggerPathList\"</span>:[],<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">38</span>,<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[],<span class=\"hljs-attr\">\"isDisabled\"</span>:<span class=\"hljs-literal\">false</span>},{<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"submit\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">52</span>,<span class=\"hljs-attr\">\"onClick\"</span>:<span class=\"hljs-string\">\"{{addressToImage.run()}}\"</span>,<span class=\"hljs-attr\">\"isDefaultClickDisabled\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"1jslvl8hbw\"</span>,<span class=\"hljs-attr\">\"buttonStyle\"</span>:<span class=\"hljs-string\">\"PRIMARY_BUTTON\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">4</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">8</span>,<span class=\"hljs-attr\">\"recaptchaV2\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">10</span>,<span class=\"hljs-attr\">\"isVisible\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"BUTTON_WIDGET\"</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"parentId\"</span>:<span class=\"hljs-string\">\"mv8rqf5log\"</span>,<span class=\"hljs-attr\">\"isLoading\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">19.8125</span>,<span class=\"hljs-attr\">\"dynamicTriggerPathList\"</span>:[{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"onClick\"</span>}],<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">38</span>,<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[],<span class=\"hljs-attr\">\"text\"</span>:<span class=\"hljs-string\">\"Submit\"</span>,<span class=\"hljs-attr\">\"isDisabled\"</span>:<span class=\"hljs-literal\">false</span>},{<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"Text1\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">36</span>,<span class=\"hljs-attr\">\"textAlign\"</span>:<span class=\"hljs-string\">\"LEFT\"</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"muibkh17ic\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">4</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">10</span>,<span class=\"hljs-attr\">\"isVisible\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"fontStyle\"</span>:<span class=\"hljs-string\">\"BOLD\"</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"TEXT_WIDGET\"</span>,<span class=\"hljs-attr\">\"textColor\"</span>:<span class=\"hljs-string\">\"#231F20\"</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"parentId\"</span>:<span class=\"hljs-string\">\"mv8rqf5log\"</span>,<span class=\"hljs-attr\">\"isLoading\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">19.5</span>,<span class=\"hljs-attr\">\"dynamicTriggerPathList\"</span>:[],<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[],<span class=\"hljs-attr\">\"fontSize\"</span>:<span class=\"hljs-string\">\"PARAGRAPH\"</span>,<span class=\"hljs-attr\">\"text\"</span>:<span class=\"hljs-string\">\"Google - Static Maps API\"</span>}]}]}]},<span class=\"hljs-attr\">\"layoutOnLoadActions\"</span>:[[{<span class=\"hljs-attr\">\"id\"</span>:<span class=\"hljs-string\">\"60f2b0ac5686e31913efe82a\"</span>,<span class=\"hljs-attr\">\"name\"</span>:<span class=\"hljs-string\">\"addressToImage\"</span>,<span class=\"hljs-attr\">\"pluginType\"</span>:<span class=\"hljs-string\">\"API\"</span>,<span class=\"hljs-attr\">\"jsonPathKeys\"</span>:[<span class=\"hljs-string\">\"address.text.replace(/\\\\W/g,'+')\"</span>],<span class=\"hljs-attr\">\"timeoutInMillisecond\"</span>:<span class=\"hljs-number\">10000</span>}]],<span class=\"hljs-attr\">\"new\"</span>:<span class=\"hljs-literal\">false</span>}],<span class=\"hljs-attr\">\"userPermissions\"</span>:[]},<span class=\"hljs-attr\">\"publishedPage\"</span>:{<span class=\"hljs-attr\">\"name\"</span>:<span class=\"hljs-string\">\"Page1\"</span>,<span class=\"hljs-attr\">\"layouts\"</span>:[{<span class=\"hljs-attr\">\"id\"</span>:<span class=\"hljs-string\">\"60f2b0955686e31913efe828\"</span>,<span class=\"hljs-attr\">\"userPermissions\"</span>:[],<span class=\"hljs-attr\">\"dsl\"</span>:{<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"MainContainer\"</span>,<span class=\"hljs-attr\">\"backgroundColor\"</span>:<span class=\"hljs-string\">\"none\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">1280</span>,<span class=\"hljs-attr\">\"snapColumns\"</span>:<span class=\"hljs-number\">64</span>,<span class=\"hljs-attr\">\"detachFromLayout\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"0\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">880</span>,<span class=\"hljs-attr\">\"containerStyle\"</span>:<span class=\"hljs-string\">\"none\"</span>,<span class=\"hljs-attr\">\"snapRows\"</span>:<span class=\"hljs-number\">125</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"CANVAS_WIDGET\"</span>,<span class=\"hljs-attr\">\"canExtend\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">27</span>,<span class=\"hljs-attr\">\"minHeight\"</span>:<span class=\"hljs-number\">890</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"dynamicTriggerPathList\"</span>:[],<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[],<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"children\"</span>:[{<span class=\"hljs-attr\">\"backgroundColor\"</span>:<span class=\"hljs-string\">\"#FFFFFF\"</span>,<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"Container1\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">36</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"s9pgimssky\"</span>,<span class=\"hljs-attr\">\"containerStyle\"</span>:<span class=\"hljs-string\">\"card\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">59</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">10</span>,<span class=\"hljs-attr\">\"isVisible\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"CONTAINER_WIDGET\"</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"parentId\"</span>:<span class=\"hljs-string\">\"0\"</span>,<span class=\"hljs-attr\">\"isLoading\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">19.8125</span>,<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"children\"</span>:[{<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"Canvas1\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">634</span>,<span class=\"hljs-attr\">\"detachFromLayout\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"mv8rqf5log\"</span>,<span class=\"hljs-attr\">\"containerStyle\"</span>:<span class=\"hljs-string\">\"none\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">400</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"isVisible\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"canExtend\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"CANVAS_WIDGET\"</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"parentId\"</span>:<span class=\"hljs-string\">\"s9pgimssky\"</span>,<span class=\"hljs-attr\">\"minHeight\"</span>:<span class=\"hljs-number\">580</span>,<span class=\"hljs-attr\">\"isLoading\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"dynamicTriggerPathList\"</span>:[],<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[],<span class=\"hljs-attr\">\"children\"</span>:[{<span class=\"hljs-attr\">\"image\"</span>:<span class=\"hljs-string\">\"{{addressToImage.data}}\"</span>,<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"image\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">52</span>,<span class=\"hljs-attr\">\"objectFit\"</span>:<span class=\"hljs-string\">\"cover\"</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"si6a53w6f1\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">10</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">46</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">10</span>,<span class=\"hljs-attr\">\"isVisible\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"IMAGE_WIDGET\"</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"parentId\"</span>:<span class=\"hljs-string\">\"mv8rqf5log\"</span>,<span class=\"hljs-attr\">\"isLoading\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"maxZoomLevel\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"enableDownload\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">18.409375</span>,<span class=\"hljs-attr\">\"dynamicTriggerPathList\"</span>:[],<span class=\"hljs-attr\">\"imageShape\"</span>:<span class=\"hljs-string\">\"RECTANGLE\"</span>,<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"defaultImage\"</span>},{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"image\"</span>}],<span class=\"hljs-attr\">\"enableRotation\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"defaultImage\"</span>:<span class=\"hljs-string\">\"{{addressToImage.data}}\"</span>},{<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"address\"</span>,<span class=\"hljs-attr\">\"dynamicPropertyPathList\"</span>:[{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"onTextChanged\"</span>}],<span class=\"hljs-attr\">\"onSubmit\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">4</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">8</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">10</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"INPUT_WIDGET\"</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">19.8125</span>,<span class=\"hljs-attr\">\"dynamicTriggerPathList\"</span>:[{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"onTextChanged\"</span>},{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"onSubmit\"</span>}],<span class=\"hljs-attr\">\"resetOnSubmit\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[],<span class=\"hljs-attr\">\"inputType\"</span>:<span class=\"hljs-string\">\"TEXT\"</span>,<span class=\"hljs-attr\">\"placeholderText\"</span>:<span class=\"hljs-string\">\"address\"</span>,<span class=\"hljs-attr\">\"isDisabled\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"isRequired\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"onTextChanged\"</span>:<span class=\"hljs-string\">\" {{function(){\\nif(live.isSwitchedOn){addressToImage.run()}\\n}()}}\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">36</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"1ovbcudtlz\"</span>,<span class=\"hljs-attr\">\"isVisible\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"label\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"parentId\"</span>:<span class=\"hljs-string\">\"mv8rqf5log\"</span>,<span class=\"hljs-attr\">\"isLoading\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"defaultText\"</span>:<span class=\"hljs-string\">\"\"</span>},{<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"live\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">52</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"860098p531\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">4</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">10</span>,<span class=\"hljs-attr\">\"isVisible\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"label\"</span>:<span class=\"hljs-string\">\"live search\"</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"SWITCH_WIDGET\"</span>,<span class=\"hljs-attr\">\"defaultSwitchState\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"alignWidget\"</span>:<span class=\"hljs-string\">\"LEFT\"</span>,<span class=\"hljs-attr\">\"parentId\"</span>:<span class=\"hljs-string\">\"mv8rqf5log\"</span>,<span class=\"hljs-attr\">\"isLoading\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">19.8125</span>,<span class=\"hljs-attr\">\"dynamicTriggerPathList\"</span>:[],<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">38</span>,<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[],<span class=\"hljs-attr\">\"isDisabled\"</span>:<span class=\"hljs-literal\">false</span>},{<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"submit\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">52</span>,<span class=\"hljs-attr\">\"onClick\"</span>:<span class=\"hljs-string\">\"{{addressToImage.run()}}\"</span>,<span class=\"hljs-attr\">\"isDefaultClickDisabled\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"1jslvl8hbw\"</span>,<span class=\"hljs-attr\">\"buttonStyle\"</span>:<span class=\"hljs-string\">\"PRIMARY_BUTTON\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">4</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">8</span>,<span class=\"hljs-attr\">\"recaptchaV2\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">10</span>,<span class=\"hljs-attr\">\"isVisible\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"BUTTON_WIDGET\"</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"parentId\"</span>:<span class=\"hljs-string\">\"mv8rqf5log\"</span>,<span class=\"hljs-attr\">\"isLoading\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">19.8125</span>,<span class=\"hljs-attr\">\"dynamicTriggerPathList\"</span>:[{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"onClick\"</span>}],<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">38</span>,<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[],<span class=\"hljs-attr\">\"text\"</span>:<span class=\"hljs-string\">\"Submit\"</span>,<span class=\"hljs-attr\">\"isDisabled\"</span>:<span class=\"hljs-literal\">false</span>},{<span class=\"hljs-attr\">\"widgetName\"</span>:<span class=\"hljs-string\">\"Text1\"</span>,<span class=\"hljs-attr\">\"rightColumn\"</span>:<span class=\"hljs-number\">36</span>,<span class=\"hljs-attr\">\"textAlign\"</span>:<span class=\"hljs-string\">\"LEFT\"</span>,<span class=\"hljs-attr\">\"widgetId\"</span>:<span class=\"hljs-string\">\"muibkh17ic\"</span>,<span class=\"hljs-attr\">\"topRow\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"bottomRow\"</span>:<span class=\"hljs-number\">4</span>,<span class=\"hljs-attr\">\"parentRowSpace\"</span>:<span class=\"hljs-number\">10</span>,<span class=\"hljs-attr\">\"isVisible\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"fontStyle\"</span>:<span class=\"hljs-string\">\"BOLD\"</span>,<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"TEXT_WIDGET\"</span>,<span class=\"hljs-attr\">\"textColor\"</span>:<span class=\"hljs-string\">\"#231F20\"</span>,<span class=\"hljs-attr\">\"version\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">\"parentId\"</span>:<span class=\"hljs-string\">\"mv8rqf5log\"</span>,<span class=\"hljs-attr\">\"isLoading\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"parentColumnSpace\"</span>:<span class=\"hljs-number\">19.5</span>,<span class=\"hljs-attr\">\"dynamicTriggerPathList\"</span>:[],<span class=\"hljs-attr\">\"leftColumn\"</span>:<span class=\"hljs-number\">0</span>,<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[],<span class=\"hljs-attr\">\"fontSize\"</span>:<span class=\"hljs-string\">\"PARAGRAPH\"</span>,<span class=\"hljs-attr\">\"text\"</span>:<span class=\"hljs-string\">\"Google - Static Maps API\"</span>}]}]}]},<span class=\"hljs-attr\">\"layoutOnLoadActions\"</span>:[[{<span class=\"hljs-attr\">\"id\"</span>:<span class=\"hljs-string\">\"60f2b0ac5686e31913efe82a\"</span>,<span class=\"hljs-attr\">\"name\"</span>:<span class=\"hljs-string\">\"addressToImage\"</span>,<span class=\"hljs-attr\">\"pluginType\"</span>:<span class=\"hljs-string\">\"API\"</span>,<span class=\"hljs-attr\">\"jsonPathKeys\"</span>:[<span class=\"hljs-string\">\"address.text.replace(/\\\\W/g,'+')\"</span>],<span class=\"hljs-attr\">\"timeoutInMillisecond\"</span>:<span class=\"hljs-number\">10000</span>}]],<span class=\"hljs-attr\">\"new\"</span>:<span class=\"hljs-literal\">false</span>}],<span class=\"hljs-attr\">\"userPermissions\"</span>:[]},<span class=\"hljs-attr\">\"new\"</span>:<span class=\"hljs-literal\">true</span>}],<span class=\"hljs-attr\">\"publishedDefaultPageName\"</span>:<span class=\"hljs-string\">\"Page1\"</span>,<span class=\"hljs-attr\">\"unpublishedDefaultPageName\"</span>:<span class=\"hljs-string\">\"Page1\"</span>,<span class=\"hljs-attr\">\"actionList\"</span>:[{<span class=\"hljs-attr\">\"id\"</span>:<span class=\"hljs-string\">\"60f2b0ac5686e31913efe82a\"</span>,<span class=\"hljs-attr\">\"userPermissions\"</span>:[<span class=\"hljs-string\">\"read:actions\"</span>,<span class=\"hljs-string\">\"execute:actions\"</span>,<span class=\"hljs-string\">\"manage:actions\"</span>],<span class=\"hljs-attr\">\"pluginType\"</span>:<span class=\"hljs-string\">\"API\"</span>,<span class=\"hljs-attr\">\"pluginId\"</span>:<span class=\"hljs-string\">\"restapi-plugin\"</span>,<span class=\"hljs-attr\">\"unpublishedAction\"</span>:{<span class=\"hljs-attr\">\"name\"</span>:<span class=\"hljs-string\">\"addressToImage\"</span>,<span class=\"hljs-attr\">\"datasource\"</span>:{<span class=\"hljs-attr\">\"userPermissions\"</span>:[],<span class=\"hljs-attr\">\"name\"</span>:<span class=\"hljs-string\">\"DEFAULT_REST_DATASOURCE\"</span>,<span class=\"hljs-attr\">\"pluginId\"</span>:<span class=\"hljs-string\">\"restapi-plugin\"</span>,<span class=\"hljs-attr\">\"datasourceConfiguration\"</span>:{<span class=\"hljs-attr\">\"url\"</span>:<span class=\"hljs-string\">\"https://maps.google.com\"</span>},<span class=\"hljs-attr\">\"invalids\"</span>:[],<span class=\"hljs-attr\">\"isValid\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"new\"</span>:<span class=\"hljs-literal\">true</span>},<span class=\"hljs-attr\">\"pageId\"</span>:<span class=\"hljs-string\">\"Page1\"</span>,<span class=\"hljs-attr\">\"actionConfiguration\"</span>:{<span class=\"hljs-attr\">\"timeoutInMillisecond\"</span>:<span class=\"hljs-number\">10000</span>,<span class=\"hljs-attr\">\"paginationType\"</span>:<span class=\"hljs-string\">\"NONE\"</span>,<span class=\"hljs-attr\">\"path\"</span>:<span class=\"hljs-string\">\"/maps/api/staticmap\"</span>,<span class=\"hljs-attr\">\"headers\"</span>:[{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-attr\">\"value\"</span>:<span class=\"hljs-string\">\"\"</span>},{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-attr\">\"value\"</span>:<span class=\"hljs-string\">\"\"</span>}],<span class=\"hljs-attr\">\"encodeParamsToggle\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"queryParameters\"</span>:[{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"sensor\"</span>,<span class=\"hljs-attr\">\"value\"</span>:<span class=\"hljs-string\">\"false\"</span>},{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"center\"</span>,<span class=\"hljs-attr\">\"value\"</span>:<span class=\"hljs-string\">\"{{address.text.replace(/\\\\W/g,'+')}}\"</span>},{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"key\"</span>,<span class=\"hljs-attr\">\"value\"</span>:<span class=\"hljs-string\">\"YOUR_API_KEY\"</span>},{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"size\"</span>,<span class=\"hljs-attr\">\"value\"</span>:<span class=\"hljs-string\">\"512x512\"</span>}],<span class=\"hljs-attr\">\"body\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-attr\">\"httpMethod\"</span>:<span class=\"hljs-string\">\"GET\"</span>,<span class=\"hljs-attr\">\"pluginSpecifiedTemplates\"</span>:[{<span class=\"hljs-attr\">\"value\"</span>:<span class=\"hljs-literal\">true</span>}]},<span class=\"hljs-attr\">\"executeOnLoad\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"queryParameters[1].value\"</span>}],<span class=\"hljs-attr\">\"isValid\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"invalids\"</span>:[],<span class=\"hljs-attr\">\"jsonPathKeys\"</span>:[<span class=\"hljs-string\">\"address.text.replace(/\\\\W/g,'+')\"</span>],<span class=\"hljs-attr\">\"confirmBeforeExecute\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"userPermissions\"</span>:[]},<span class=\"hljs-attr\">\"publishedAction\"</span>:{<span class=\"hljs-attr\">\"name\"</span>:<span class=\"hljs-string\">\"addressToImage\"</span>,<span class=\"hljs-attr\">\"datasource\"</span>:{<span class=\"hljs-attr\">\"userPermissions\"</span>:[],<span class=\"hljs-attr\">\"name\"</span>:<span class=\"hljs-string\">\"DEFAULT_REST_DATASOURCE\"</span>,<span class=\"hljs-attr\">\"pluginId\"</span>:<span class=\"hljs-string\">\"restapi-plugin\"</span>,<span class=\"hljs-attr\">\"datasourceConfiguration\"</span>:{<span class=\"hljs-attr\">\"url\"</span>:<span class=\"hljs-string\">\"https://maps.google.com\"</span>},<span class=\"hljs-attr\">\"invalids\"</span>:[],<span class=\"hljs-attr\">\"isValid\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"new\"</span>:<span class=\"hljs-literal\">true</span>},<span class=\"hljs-attr\">\"pageId\"</span>:<span class=\"hljs-string\">\"Page1\"</span>,<span class=\"hljs-attr\">\"actionConfiguration\"</span>:{<span class=\"hljs-attr\">\"timeoutInMillisecond\"</span>:<span class=\"hljs-number\">10000</span>,<span class=\"hljs-attr\">\"paginationType\"</span>:<span class=\"hljs-string\">\"NONE\"</span>,<span class=\"hljs-attr\">\"path\"</span>:<span class=\"hljs-string\">\"/maps/api/staticmap\"</span>,<span class=\"hljs-attr\">\"headers\"</span>:[{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-attr\">\"value\"</span>:<span class=\"hljs-string\">\"\"</span>},{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-attr\">\"value\"</span>:<span class=\"hljs-string\">\"\"</span>}],<span class=\"hljs-attr\">\"encodeParamsToggle\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"queryParameters\"</span>:[{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"sensor\"</span>,<span class=\"hljs-attr\">\"value\"</span>:<span class=\"hljs-string\">\"false\"</span>},{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"center\"</span>,<span class=\"hljs-attr\">\"value\"</span>:<span class=\"hljs-string\">\"{{address.text.replace(/\\\\W/g,'+')}}\"</span>},{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"key\"</span>,<span class=\"hljs-attr\">\"value\"</span>:<span class=\"hljs-string\">\"YOUR_API_KEY\"</span>},{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"size\"</span>,<span class=\"hljs-attr\">\"value\"</span>:<span class=\"hljs-string\">\"512x512\"</span>}],<span class=\"hljs-attr\">\"body\"</span>:<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-attr\">\"httpMethod\"</span>:<span class=\"hljs-string\">\"GET\"</span>,<span class=\"hljs-attr\">\"pluginSpecifiedTemplates\"</span>:[{<span class=\"hljs-attr\">\"value\"</span>:<span class=\"hljs-literal\">true</span>}]},<span class=\"hljs-attr\">\"executeOnLoad\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"dynamicBindingPathList\"</span>:[{<span class=\"hljs-attr\">\"key\"</span>:<span class=\"hljs-string\">\"queryParameters[1].value\"</span>}],<span class=\"hljs-attr\">\"isValid\"</span>:<span class=\"hljs-literal\">true</span>,<span class=\"hljs-attr\">\"invalids\"</span>:[],<span class=\"hljs-attr\">\"jsonPathKeys\"</span>:[<span class=\"hljs-string\">\"address.text.replace(/\\\\W/g,'+')\"</span>],<span class=\"hljs-attr\">\"confirmBeforeExecute\"</span>:<span class=\"hljs-literal\">false</span>,<span class=\"hljs-attr\">\"userPermissions\"</span>:[]},<span class=\"hljs-attr\">\"new\"</span>:<span class=\"hljs-literal\">false</span>}],<span class=\"hljs-attr\">\"decryptedFields\"</span>:{},<span class=\"hljs-attr\">\"publishedLayoutmongoEscapedWidgets\"</span>:{},<span class=\"hljs-attr\">\"unpublishedLayoutmongoEscapedWidgets\"</span>:{}}\n</code></pre>\n","contentMarkdown":"### Today I will be integrating with Google's Static Maps API and using Appsmith to retrieve a map image, given a text-string street address.\n\nThere's a bit of setup involved if you've never used the Google Cloud Platform before. You'll have to accept the terms and set up billing, but you can also get a free trial if haven't used it yet.\n\nGoogle's own guides on enabling the API and creating a project are great, so I'm just going to link them here and skip to the fun stuff.\n\n## 📍 Enable the Static Maps API\n\n* [Create a New Project](https://console.cloud.google.com/projectcreate)\n    \n* Enable the [Static Maps API](https://developers.google.com/maps/gmp-get-started)\n    \n* [Create Credentials](https://developers.google.com/workspace/guides/create-credentials)\n    \n\n# ⚙️ Appsmith Setup\n\n* Add new Datasource: Create New&gt; API &gt; GET\n    \n\n**Parameters:**\n\n```json\n{\n  sensor: false,\n  center: {{address.text.replace(/\\W/g,'+')}},\n  key: 'YOUR_API_KEY',\n  size: '512x512'\n}\n```\n\n* Add new Widgets\n    \n\n| Type | Name | Value/ Settings |\n| --- | --- | --- |\n| **Input** | address | **OnTextChange:** `{{function({if(live.isSwitchedOn{addressToImage.run()}}()}}` |\n| **Switch** | live | **Default:** Off |\n| **Button** | submit | **Run a Query:** addressToImage |\n| **Image** | image | `{{addressToImage.data}}` |\n\n![2021-07-17 12.58.04.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1626541152459/nlgE1ESp_T.gif align=\"left\")\n\n# DEPLOY! 🚀\n\n![2021-07-17 11.27.42.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1626535698182/czJdCEVsP.gif align=\"left\")\n\n# WARNING! ☠️⚠️\n\n### I don't recommend using the live search in a public app or anything with a lot of users.\n\nIt's just a fun experiment to see the image update in real time as you type. But it'll definitely rack up some charges quick if you're not careful.\n\n---\n\n## Thanks for reading! This was a fun one 🤓\n\nHere's the entire app definition for anyone that wants to skip the build and just import the app.\n\n```json\n{\"exportedApplication\":{\"userPermissions\":[\"manage:applications\",\"canComment:applications\",\"export:applications\",\"read:applications\",\"publish:applications\",\"makePublic:applications\"],\"name\":\"Map Image Extractor\",\"isPublic\":false,\"appIsExample\":false,\"unreadCommentThreads\":0,\"color\":\"#A8D76C\",\"icon\":\"location\",\"appLayout\":{\"type\":\"DESKTOP\"},\"new\":true},\"datasourceList\":[],\"pageList\":[{\"userPermissions\":[\"read:pages\",\"manage:pages\"],\"unpublishedPage\":{\"name\":\"Page1\",\"layouts\":[{\"id\":\"60f2b0955686e31913efe828\",\"userPermissions\":[],\"dsl\":{\"widgetName\":\"MainContainer\",\"backgroundColor\":\"none\",\"rightColumn\":1280,\"snapColumns\":64,\"detachFromLayout\":true,\"widgetId\":\"0\",\"topRow\":0,\"bottomRow\":880,\"containerStyle\":\"none\",\"snapRows\":125,\"parentRowSpace\":1,\"type\":\"CANVAS_WIDGET\",\"canExtend\":true,\"version\":27,\"minHeight\":890,\"parentColumnSpace\":1,\"dynamicTriggerPathList\":[],\"dynamicBindingPathList\":[],\"leftColumn\":0,\"children\":[{\"backgroundColor\":\"#FFFFFF\",\"widgetName\":\"Container1\",\"rightColumn\":36,\"widgetId\":\"s9pgimssky\",\"containerStyle\":\"card\",\"topRow\":1,\"bottomRow\":59,\"parentRowSpace\":10,\"isVisible\":true,\"type\":\"CONTAINER_WIDGET\",\"version\":1,\"parentId\":\"0\",\"isLoading\":false,\"parentColumnSpace\":19.8125,\"leftColumn\":0,\"children\":[{\"widgetName\":\"Canvas1\",\"rightColumn\":634,\"detachFromLayout\":true,\"widgetId\":\"mv8rqf5log\",\"containerStyle\":\"none\",\"topRow\":0,\"bottomRow\":400,\"parentRowSpace\":1,\"isVisible\":true,\"canExtend\":false,\"type\":\"CANVAS_WIDGET\",\"version\":1,\"parentId\":\"s9pgimssky\",\"minHeight\":580,\"isLoading\":false,\"parentColumnSpace\":1,\"dynamicTriggerPathList\":[],\"leftColumn\":0,\"dynamicBindingPathList\":[],\"children\":[{\"image\":\"{{addressToImage.data}}\",\"widgetName\":\"image\",\"rightColumn\":52,\"objectFit\":\"cover\",\"widgetId\":\"si6a53w6f1\",\"topRow\":10,\"bottomRow\":46,\"parentRowSpace\":10,\"isVisible\":true,\"type\":\"IMAGE_WIDGET\",\"version\":1,\"parentId\":\"mv8rqf5log\",\"isLoading\":false,\"maxZoomLevel\":1,\"enableDownload\":false,\"parentColumnSpace\":18.409375,\"dynamicTriggerPathList\":[],\"imageShape\":\"RECTANGLE\",\"leftColumn\":0,\"dynamicBindingPathList\":[{\"key\":\"defaultImage\"},{\"key\":\"image\"}],\"enableRotation\":false,\"defaultImage\":\"{{addressToImage.data}}\"},{\"widgetName\":\"address\",\"dynamicPropertyPathList\":[{\"key\":\"onTextChanged\"}],\"onSubmit\":\"\",\"topRow\":4,\"bottomRow\":8,\"parentRowSpace\":10,\"type\":\"INPUT_WIDGET\",\"parentColumnSpace\":19.8125,\"dynamicTriggerPathList\":[{\"key\":\"onTextChanged\"},{\"key\":\"onSubmit\"}],\"resetOnSubmit\":false,\"leftColumn\":0,\"dynamicBindingPathList\":[],\"inputType\":\"TEXT\",\"placeholderText\":\"address\",\"isDisabled\":false,\"isRequired\":false,\"onTextChanged\":\" {{function(){\\nif(live.isSwitchedOn){addressToImage.run()}\\n}()}}\",\"rightColumn\":36,\"widgetId\":\"1ovbcudtlz\",\"isVisible\":true,\"label\":\"\",\"version\":1,\"parentId\":\"mv8rqf5log\",\"isLoading\":false,\"defaultText\":\"\"},{\"widgetName\":\"live\",\"rightColumn\":52,\"widgetId\":\"860098p531\",\"topRow\":0,\"bottomRow\":4,\"parentRowSpace\":10,\"isVisible\":true,\"label\":\"live search\",\"type\":\"SWITCH_WIDGET\",\"defaultSwitchState\":true,\"version\":1,\"alignWidget\":\"LEFT\",\"parentId\":\"mv8rqf5log\",\"isLoading\":false,\"parentColumnSpace\":19.8125,\"dynamicTriggerPathList\":[],\"leftColumn\":38,\"dynamicBindingPathList\":[],\"isDisabled\":false},{\"widgetName\":\"submit\",\"rightColumn\":52,\"onClick\":\"{{addressToImage.run()}}\",\"isDefaultClickDisabled\":true,\"widgetId\":\"1jslvl8hbw\",\"buttonStyle\":\"PRIMARY_BUTTON\",\"topRow\":4,\"bottomRow\":8,\"recaptchaV2\":false,\"parentRowSpace\":10,\"isVisible\":true,\"type\":\"BUTTON_WIDGET\",\"version\":1,\"parentId\":\"mv8rqf5log\",\"isLoading\":false,\"parentColumnSpace\":19.8125,\"dynamicTriggerPathList\":[{\"key\":\"onClick\"}],\"leftColumn\":38,\"dynamicBindingPathList\":[],\"text\":\"Submit\",\"isDisabled\":false},{\"widgetName\":\"Text1\",\"rightColumn\":36,\"textAlign\":\"LEFT\",\"widgetId\":\"muibkh17ic\",\"topRow\":0,\"bottomRow\":4,\"parentRowSpace\":10,\"isVisible\":true,\"fontStyle\":\"BOLD\",\"type\":\"TEXT_WIDGET\",\"textColor\":\"#231F20\",\"version\":1,\"parentId\":\"mv8rqf5log\",\"isLoading\":false,\"parentColumnSpace\":19.5,\"dynamicTriggerPathList\":[],\"leftColumn\":0,\"dynamicBindingPathList\":[],\"fontSize\":\"PARAGRAPH\",\"text\":\"Google - Static Maps API\"}]}]}]},\"layoutOnLoadActions\":[[{\"id\":\"60f2b0ac5686e31913efe82a\",\"name\":\"addressToImage\",\"pluginType\":\"API\",\"jsonPathKeys\":[\"address.text.replace(/\\\\W/g,'+')\"],\"timeoutInMillisecond\":10000}]],\"new\":false}],\"userPermissions\":[]},\"publishedPage\":{\"name\":\"Page1\",\"layouts\":[{\"id\":\"60f2b0955686e31913efe828\",\"userPermissions\":[],\"dsl\":{\"widgetName\":\"MainContainer\",\"backgroundColor\":\"none\",\"rightColumn\":1280,\"snapColumns\":64,\"detachFromLayout\":true,\"widgetId\":\"0\",\"topRow\":0,\"bottomRow\":880,\"containerStyle\":\"none\",\"snapRows\":125,\"parentRowSpace\":1,\"type\":\"CANVAS_WIDGET\",\"canExtend\":true,\"version\":27,\"minHeight\":890,\"parentColumnSpace\":1,\"dynamicTriggerPathList\":[],\"dynamicBindingPathList\":[],\"leftColumn\":0,\"children\":[{\"backgroundColor\":\"#FFFFFF\",\"widgetName\":\"Container1\",\"rightColumn\":36,\"widgetId\":\"s9pgimssky\",\"containerStyle\":\"card\",\"topRow\":1,\"bottomRow\":59,\"parentRowSpace\":10,\"isVisible\":true,\"type\":\"CONTAINER_WIDGET\",\"version\":1,\"parentId\":\"0\",\"isLoading\":false,\"parentColumnSpace\":19.8125,\"leftColumn\":0,\"children\":[{\"widgetName\":\"Canvas1\",\"rightColumn\":634,\"detachFromLayout\":true,\"widgetId\":\"mv8rqf5log\",\"containerStyle\":\"none\",\"topRow\":0,\"bottomRow\":400,\"parentRowSpace\":1,\"isVisible\":true,\"canExtend\":false,\"type\":\"CANVAS_WIDGET\",\"version\":1,\"parentId\":\"s9pgimssky\",\"minHeight\":580,\"isLoading\":false,\"parentColumnSpace\":1,\"dynamicTriggerPathList\":[],\"leftColumn\":0,\"dynamicBindingPathList\":[],\"children\":[{\"image\":\"{{addressToImage.data}}\",\"widgetName\":\"image\",\"rightColumn\":52,\"objectFit\":\"cover\",\"widgetId\":\"si6a53w6f1\",\"topRow\":10,\"bottomRow\":46,\"parentRowSpace\":10,\"isVisible\":true,\"type\":\"IMAGE_WIDGET\",\"version\":1,\"parentId\":\"mv8rqf5log\",\"isLoading\":false,\"maxZoomLevel\":1,\"enableDownload\":false,\"parentColumnSpace\":18.409375,\"dynamicTriggerPathList\":[],\"imageShape\":\"RECTANGLE\",\"leftColumn\":0,\"dynamicBindingPathList\":[{\"key\":\"defaultImage\"},{\"key\":\"image\"}],\"enableRotation\":false,\"defaultImage\":\"{{addressToImage.data}}\"},{\"widgetName\":\"address\",\"dynamicPropertyPathList\":[{\"key\":\"onTextChanged\"}],\"onSubmit\":\"\",\"topRow\":4,\"bottomRow\":8,\"parentRowSpace\":10,\"type\":\"INPUT_WIDGET\",\"parentColumnSpace\":19.8125,\"dynamicTriggerPathList\":[{\"key\":\"onTextChanged\"},{\"key\":\"onSubmit\"}],\"resetOnSubmit\":false,\"leftColumn\":0,\"dynamicBindingPathList\":[],\"inputType\":\"TEXT\",\"placeholderText\":\"address\",\"isDisabled\":false,\"isRequired\":false,\"onTextChanged\":\" {{function(){\\nif(live.isSwitchedOn){addressToImage.run()}\\n}()}}\",\"rightColumn\":36,\"widgetId\":\"1ovbcudtlz\",\"isVisible\":true,\"label\":\"\",\"version\":1,\"parentId\":\"mv8rqf5log\",\"isLoading\":false,\"defaultText\":\"\"},{\"widgetName\":\"live\",\"rightColumn\":52,\"widgetId\":\"860098p531\",\"topRow\":0,\"bottomRow\":4,\"parentRowSpace\":10,\"isVisible\":true,\"label\":\"live search\",\"type\":\"SWITCH_WIDGET\",\"defaultSwitchState\":true,\"version\":1,\"alignWidget\":\"LEFT\",\"parentId\":\"mv8rqf5log\",\"isLoading\":false,\"parentColumnSpace\":19.8125,\"dynamicTriggerPathList\":[],\"leftColumn\":38,\"dynamicBindingPathList\":[],\"isDisabled\":false},{\"widgetName\":\"submit\",\"rightColumn\":52,\"onClick\":\"{{addressToImage.run()}}\",\"isDefaultClickDisabled\":true,\"widgetId\":\"1jslvl8hbw\",\"buttonStyle\":\"PRIMARY_BUTTON\",\"topRow\":4,\"bottomRow\":8,\"recaptchaV2\":false,\"parentRowSpace\":10,\"isVisible\":true,\"type\":\"BUTTON_WIDGET\",\"version\":1,\"parentId\":\"mv8rqf5log\",\"isLoading\":false,\"parentColumnSpace\":19.8125,\"dynamicTriggerPathList\":[{\"key\":\"onClick\"}],\"leftColumn\":38,\"dynamicBindingPathList\":[],\"text\":\"Submit\",\"isDisabled\":false},{\"widgetName\":\"Text1\",\"rightColumn\":36,\"textAlign\":\"LEFT\",\"widgetId\":\"muibkh17ic\",\"topRow\":0,\"bottomRow\":4,\"parentRowSpace\":10,\"isVisible\":true,\"fontStyle\":\"BOLD\",\"type\":\"TEXT_WIDGET\",\"textColor\":\"#231F20\",\"version\":1,\"parentId\":\"mv8rqf5log\",\"isLoading\":false,\"parentColumnSpace\":19.5,\"dynamicTriggerPathList\":[],\"leftColumn\":0,\"dynamicBindingPathList\":[],\"fontSize\":\"PARAGRAPH\",\"text\":\"Google - Static Maps API\"}]}]}]},\"layoutOnLoadActions\":[[{\"id\":\"60f2b0ac5686e31913efe82a\",\"name\":\"addressToImage\",\"pluginType\":\"API\",\"jsonPathKeys\":[\"address.text.replace(/\\\\W/g,'+')\"],\"timeoutInMillisecond\":10000}]],\"new\":false}],\"userPermissions\":[]},\"new\":true}],\"publishedDefaultPageName\":\"Page1\",\"unpublishedDefaultPageName\":\"Page1\",\"actionList\":[{\"id\":\"60f2b0ac5686e31913efe82a\",\"userPermissions\":[\"read:actions\",\"execute:actions\",\"manage:actions\"],\"pluginType\":\"API\",\"pluginId\":\"restapi-plugin\",\"unpublishedAction\":{\"name\":\"addressToImage\",\"datasource\":{\"userPermissions\":[],\"name\":\"DEFAULT_REST_DATASOURCE\",\"pluginId\":\"restapi-plugin\",\"datasourceConfiguration\":{\"url\":\"https://maps.google.com\"},\"invalids\":[],\"isValid\":true,\"new\":true},\"pageId\":\"Page1\",\"actionConfiguration\":{\"timeoutInMillisecond\":10000,\"paginationType\":\"NONE\",\"path\":\"/maps/api/staticmap\",\"headers\":[{\"key\":\"\",\"value\":\"\"},{\"key\":\"\",\"value\":\"\"}],\"encodeParamsToggle\":true,\"queryParameters\":[{\"key\":\"sensor\",\"value\":\"false\"},{\"key\":\"center\",\"value\":\"{{address.text.replace(/\\\\W/g,'+')}}\"},{\"key\":\"key\",\"value\":\"YOUR_API_KEY\"},{\"key\":\"size\",\"value\":\"512x512\"}],\"body\":\"\",\"httpMethod\":\"GET\",\"pluginSpecifiedTemplates\":[{\"value\":true}]},\"executeOnLoad\":true,\"dynamicBindingPathList\":[{\"key\":\"queryParameters[1].value\"}],\"isValid\":true,\"invalids\":[],\"jsonPathKeys\":[\"address.text.replace(/\\\\W/g,'+')\"],\"confirmBeforeExecute\":false,\"userPermissions\":[]},\"publishedAction\":{\"name\":\"addressToImage\",\"datasource\":{\"userPermissions\":[],\"name\":\"DEFAULT_REST_DATASOURCE\",\"pluginId\":\"restapi-plugin\",\"datasourceConfiguration\":{\"url\":\"https://maps.google.com\"},\"invalids\":[],\"isValid\":true,\"new\":true},\"pageId\":\"Page1\",\"actionConfiguration\":{\"timeoutInMillisecond\":10000,\"paginationType\":\"NONE\",\"path\":\"/maps/api/staticmap\",\"headers\":[{\"key\":\"\",\"value\":\"\"},{\"key\":\"\",\"value\":\"\"}],\"encodeParamsToggle\":true,\"queryParameters\":[{\"key\":\"sensor\",\"value\":\"false\"},{\"key\":\"center\",\"value\":\"{{address.text.replace(/\\\\W/g,'+')}}\"},{\"key\":\"key\",\"value\":\"YOUR_API_KEY\"},{\"key\":\"size\",\"value\":\"512x512\"}],\"body\":\"\",\"httpMethod\":\"GET\",\"pluginSpecifiedTemplates\":[{\"value\":true}]},\"executeOnLoad\":true,\"dynamicBindingPathList\":[{\"key\":\"queryParameters[1].value\"}],\"isValid\":true,\"invalids\":[],\"jsonPathKeys\":[\"address.text.replace(/\\\\W/g,'+')\"],\"confirmBeforeExecute\":false,\"userPermissions\":[]},\"new\":false}],\"decryptedFields\":{},\"publishedLayoutmongoEscapedWidgets\":{},\"unpublishedLayoutmongoEscapedWidgets\":{}}\n```","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b95470","57496c3892b151fb90adc735","56744723958ef13879b95245","56b1208d04f0061506b360ff","56744720958ef13879b947ce"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4833.9002,"responses":[{"popularity":4834.0157,"isActive":true,"upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"score":0,"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"_id":"60f30f5266fcdb0a027425dc","content":"<blockquote>\n<p> center: {{address.text.replace(/\\W/g,&#39;+&#39;)}},</p>\n</blockquote>\n<p><strong>Explanation</strong></p>\n<ul>\n<li><code>\\W</code> is the REGEX symbol for all non-word characters</li>\n<li><code>\\w</code> = word characters: a-z, A-Z, 0-9 and underscore</li>\n<li><code>/g</code> for global, to replace all non-word characters with a plus</li>\n</ul>\n<p>This is the expected format of the Google Maps URL parameters:</p>\n<p><code>https://maps.google.com/maps/api/staticmap?sensor=false&amp;center=streetNum+streetName+city+state&amp;key=YOUR_API_KEY&amp;size=512x512</code></p>\n","contentMarkdown":">  center: {{address.text.replace(/\\W/g,'+')}},\n\n**Explanation**\n\n- `\\W` is the REGEX symbol for all non-word characters\n- `\\w` = word characters: a-z, A-Z, 0-9 and underscore\n- `/g` for global, to replace all non-word characters with a plus\n\nThis is the expected format of the Google Maps URL parameters:\n\n`https://maps.google.com/maps/api/staticmap?sensor=false&center=streetNum+streetName+city+state&key=YOUR_API_KEY&size=512x512`","author":"60771bbfa3407a32d7041f47","stamp":"ckr811zkj07gtz6s1641rc9yl","post":"60f2fb06bb67011cb836991b","replies":[],"dateAdded":"2021-07-17T17:11:46.772Z","badgesAwarded":[],"__v":0}],"responseCount":1,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35484"],"totalReactions":1,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":true,"title":"GET Google Maps Images from Address Text","subtitle":"Static Maps API & Appsmith Tutorial","type":"story","partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"get-google-maps-images-from-address-text","pollOptions":[],"dateAdded":"2021-07-17T15:45:10.689Z","badges":[],"questionReplies":[],"contributors":[{"_id":"60f30f5266fcdb0a027425dd","user":"60771bbfa3407a32d7041f47","stamp":"ckr811zkj07gtz6s1641rc9yl"}],"cuid":"ckr7xyn1v09tdo8s1120mgknd","author":"60771bbfa3407a32d7041f47","followersCount":1,"draft":"60f2e64266fcdb0a02741e2a","isRepublished":false,"hasPinnedTag":false,"readTime":2,"__v":1,"series":"67d6b35a41604947f002d803","dateUpdated":"2025-03-16T11:20:48.050Z","pendingPublicationApproval":false,"lastActivity":"2021-07-17T17:11:46.803Z","viewsUpdatedOn":1712718030345,"reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35484":1},"coAuthors":[],"enableToc":false,"hasCustomDate":false,"isCoverAttributionHidden":false,"stickCoverToBottom":false,"updatedAt":"2025-03-16T11:20:48.050Z","uniqueReactions":["5c090d96c2a9c2a674d35484"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35484":1},"id":"60f2fb06bb67011cb836991b"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"discussionScore":0,"totalReactionsByCurrentUser":0,"commentsPaused":false,"toc":[],"numUniqueUsersWhoReacted":0,"_id":"60f1e06350ffb41c8bbe5eac","sourcedFromGithub":false,"isAnonymous":false,"views":393,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1626452045811/rWcDbt9TK.png","autoGeneratedCover":"","brief":"Verifalia is an email validation service with an API and a free plan that can be used to verify up to 25 emails per day (or more with the paid plans).\nSend in one or more email addresses, and Verifalia will generate a report with all kinds of data ab...","content":"<h3 id=\"heading-verifaliahttpsverifaliacom-is-an-email-validation-service-with-an-api-and-a-free-plan-that-can-be-used-to-verify-up-to-25-emails-per-day-or-more-with-the-paid-plans\"><a target=\"_blank\" href=\"https://verifalia.com/\">Verifalia</a> is an email validation service with an API and a free plan that can be used to verify up to 25 emails per day <em>(or more with the paid plans)</em>.</h3>\n<p>Send in one or more email addresses, and Verifalia will generate a report with all kinds of data about each address.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626458178143/csFjRRjFP.png\" alt=\"Screen Shot 2021-07-16 at 1.55.58 PM.png\" /></p>\n<p>Now, let's build our own email validation tool using Appsmith for the UI to integrate with the Verifalia API.</p>\n<h2 id=\"heading-goals\">👉 Goals</h2>\n<ul>\n<li><p>Create new APIs in Appsmith to verify email addresses</p>\n</li>\n<li><p>Build UI to submit verifications and view results</p>\n</li>\n<li><p>Store results for each request in Google Sheets <em>(future post)</em></p>\n</li>\n</ul>\n<h2 id=\"heading-build-process\">⚙️ Build Process</h2>\n<h3 id=\"heading-get-bearer-token\">Get Bearer Token</h3>\n<p>Start by adding Input Widgets for <code>api_email</code> and <code>api_pw</code>, and a button to run the <code>POST: Bearer_Request</code>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626459947452/Pawu_j3f4.gif\" alt=\"2021-07-16 14.22.46.gif\" /></p>\n<p>Then add a new API:</p>\n<p><code>POST: https://api.verifalia.com/v2.2/auth/tokens</code></p>\n<p><code>Headers: {content-type:'application/json'}</code></p>\n<p><code>Body: {username: 'EMAIL_ADDRESS', password: 'password'}</code></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626460151335/L3P68aoxJ.gif\" alt=\"2021-07-16 14.19.36.gif\" /></p>\n<p>Next, set Button1 to run the <code>Bearer_Request</code> query, and save the response to the user's local store (appsmith.store.token).</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626461572817/DIEMLUvnu.png\" alt=\"Screen Shot 2021-07-16 at 2.52.47 PM.png\" /></p>\n<p>Deploy, and test to make sure the POST response includes an accessToken. If there is no error alert then you should be good to go. But you can also display the accessToken on the UI just to verify.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626461525502/XHc4WBZht.png\" alt=\"Screen Shot 2021-07-16 at 2.51.59 PM.png\" /></p>\n<h3 id=\"heading-send-email-validation-request\">Send Email Validation Request</h3>\n<p>Now that we have an accessToken, we can use that in our header to make a POST request and send an email address to be verified.</p>\n<p>Add New API:</p>\n<p><code>POST: https://api.verifalia.com/v2.2/email-validations</code></p>\n<pre><code class=\"lang-json\">Headers: {content-type:'application/json', Authorization: Bearer {{Bearer_Request.data.accessToken}} }\n</code></pre>\n<pre><code class=\"lang-json\">Body: {\n    entries: [\n        { inputData: 'test@email.com' }\n    ]\n}\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626461673372/CR9pIyj7r.gif\" alt=\"2021-07-16 14.54.04.gif\" /></p>\n<p>Run the new <code>POST: submit_job</code> and you should get back a response with an 'id' for the job. The request takes some time to process, so the API doesn't return the results in the same call. Instead, you have to get the 'id' and then do a followup GET request to check the status.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626463836594/6Q-9STGdn.png\" alt=\"Screen Shot 2021-07-16 at 3.29.43 PM.png\" /></p>\n<h3 id=\"heading-check-job-status\">Check Job Status</h3>\n<p>Add a new API: <code>check_job</code></p>\n<p><code>GET: https://api.verifalia.com/v2.2/email-validations/{{submit_job.data.overview.id}}</code></p>\n<pre><code class=\"lang-json\">Headers: {content-type:'application/json', Authorization: Bearer {{Bearer_Request.data.accessToken}} }\n</code></pre>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626462024604/9kiNkd9b4.png\" alt=\"Screen Shot 2021-07-16 at 3.00.19 PM.png\" /></p>\n<p>Run the <code>GET: check_job</code> API and you should get back a report like this:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626462234670/V-58X-QRY.png\" alt=\"Screen Shot 2021-07-16 at 3.02.49 PM.png\" /></p>\n<h2 id=\"heading-viewing-results-on-the-ui\">Viewing Results on the UI</h2>\n<p>Now let's add a Table Widget to display the results. <code>{{check_job.data.entries.data}}</code></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626462367831/RW4_RrQOJ.png\" alt=\"Screen Shot 2021-07-16 at 3.05.17 PM.png\" /></p>\n<p>Next, we can add an Input Widget to pass a new email, and a button to send another request.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626462634187/GP1O1me4J.gif\" alt=\"2021-07-16 15.09.46.gif\" /></p>\n<p>And finally, a button to check the job status.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626463479531/HgFtx-JHF.gif\" alt=\"2021-07-16 15.24.11.gif\" /></p>\n<hr />\n<p>Ok, the UI could use some work, but we have a functional system for checking an emails now!</p>\n<p>I hope this helps others figure out the authentication and formatting for using the Verifalia API. Please post below if you have any questions setting up your own email validation system in Appsmith.</p>\n<p>Thanks for reading!</p>\n","contentMarkdown":"### [Verifalia](https://verifalia.com/) is an email validation service with an API and a free plan that can be used to verify up to 25 emails per day *(or more with the paid plans)*.\n\nSend in one or more email addresses, and Verifalia will generate a report with all kinds of data about each address.\n\n![Screen Shot 2021-07-16 at 1.55.58 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626458178143/csFjRRjFP.png align=\"left\")\n\nNow, let's build our own email validation tool using Appsmith for the UI to integrate with the Verifalia API.\n\n## 👉 Goals\n\n* Create new APIs in Appsmith to verify email addresses\n    \n* Build UI to submit verifications and view results\n    \n* Store results for each request in Google Sheets *(future post)*\n    \n\n## ⚙️ Build Process\n\n### Get Bearer Token\n\nStart by adding Input Widgets for `api_email` and `api_pw`, and a button to run the `POST: Bearer_Request`.\n\n![2021-07-16 14.22.46.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1626459947452/Pawu_j3f4.gif align=\"left\")\n\nThen add a new API:\n\n`POST: https://api.verifalia.com/v2.2/auth/tokens`\n\n`Headers: {content-type:'application/json'}`\n\n`Body: {username: 'EMAIL_ADDRESS', password: 'password'}`\n\n![2021-07-16 14.19.36.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1626460151335/L3P68aoxJ.gif align=\"left\")\n\nNext, set Button1 to run the `Bearer_Request` query, and save the response to the user's local store (appsmith.store.token).\n\n![Screen Shot 2021-07-16 at 2.52.47 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626461572817/DIEMLUvnu.png align=\"left\")\n\nDeploy, and test to make sure the POST response includes an accessToken. If there is no error alert then you should be good to go. But you can also display the accessToken on the UI just to verify.\n\n![Screen Shot 2021-07-16 at 2.51.59 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626461525502/XHc4WBZht.png align=\"left\")\n\n### Send Email Validation Request\n\nNow that we have an accessToken, we can use that in our header to make a POST request and send an email address to be verified.\n\nAdd New API:\n\n`POST: https://api.verifalia.com/v2.2/email-validations`\n\n```json\nHeaders: {content-type:'application/json', Authorization: Bearer {{Bearer_Request.data.accessToken}} }\n```\n\n```json\nBody: {\n    entries: [\n        { inputData: 'test@email.com' }\n    ]\n}\n```\n\n![2021-07-16 14.54.04.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1626461673372/CR9pIyj7r.gif align=\"left\")\n\nRun the new `POST: submit_job` and you should get back a response with an 'id' for the job. The request takes some time to process, so the API doesn't return the results in the same call. Instead, you have to get the 'id' and then do a followup GET request to check the status.\n\n![Screen Shot 2021-07-16 at 3.29.43 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626463836594/6Q-9STGdn.png align=\"left\")\n\n### Check Job Status\n\nAdd a new API: `check_job`\n\n`GET: https://api.verifalia.com/v2.2/email-validations/{{submit_job.data.overview.id}}`\n\n```json\nHeaders: {content-type:'application/json', Authorization: Bearer {{Bearer_Request.data.accessToken}} }\n```\n\n![Screen Shot 2021-07-16 at 3.00.19 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626462024604/9kiNkd9b4.png align=\"left\")\n\nRun the `GET: check_job` API and you should get back a report like this:\n\n![Screen Shot 2021-07-16 at 3.02.49 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626462234670/V-58X-QRY.png align=\"left\")\n\n## Viewing Results on the UI\n\nNow let's add a Table Widget to display the results. `{{check_job.data.entries.data}}`\n\n![Screen Shot 2021-07-16 at 3.05.17 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626462367831/RW4_RrQOJ.png align=\"left\")\n\nNext, we can add an Input Widget to pass a new email, and a button to send another request.\n\n![2021-07-16 15.09.46.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1626462634187/GP1O1me4J.gif align=\"left\")\n\nAnd finally, a button to check the job status.\n\n![2021-07-16 15.24.11.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1626463479531/HgFtx-JHF.gif align=\"left\")\n\n---\n\nOk, the UI could use some work, but we have a functional system for checking an emails now!\n\nI hope this helps others figure out the authentication and formatting for using the Verifalia API. Please post below if you have any questions setting up your own email validation system in Appsmith.\n\nThanks for reading!","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56b1208d04f0061506b360ff","57b76044a629e4147b4251d5","57f58a9917809963610207dd","56744720958ef13879b947ce","56744723958ef13879b9550d"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4832.2923,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":false,"title":"Validating Emails with Appsmith & the Verifalia API","type":"story","isRepublished":false,"partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"validating-emails-with-appsmith-and-the-verifalia-api","importedFromMedium":false,"dateAdded":"2021-07-16T19:39:15.471Z","hasCustomDate":false,"stickCoverToBottom":false,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"cuid":"ckr6qvsos01i7mzs18nri7rtv","author":"60771bbfa3407a32d7041f47","followersCount":1,"draft":"60f19bf5cbcd625a5d31ff49","hasPinnedTag":false,"readTime":3,"__v":0,"viewsUpdatedOn":1713432639715,"coAuthors":[],"dateUpdated":"2025-03-16T11:19:41.288Z","enableToc":false,"isCoverAttributionHidden":false,"series":"67d6b35a41604947f002d803","updatedAt":"2025-03-16T11:19:41.289Z","uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"60f1e06350ffb41c8bbe5eac"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"coAuthors":[],"discussionScore":0,"totalReactionsByCurrentUser":0,"commentsPaused":false,"enableToc":false,"toc":[],"_id":"60f051b6303c5845ab8c92a7","sourcedFromGithub":false,"isAnonymous":false,"views":492,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1626360133303/NI7r4qogc.png","autoGeneratedCover":"","brief":"UpWork is a great way for developers to start freelancing, and build an online profile with customer reviews to help gain further clients. But it can be a little tough to get started and close the deal on those first few jobs. Sure, there are plenty ...","content":"<p>UpWork is a great way for developers to start freelancing, and build an online profile with customer reviews to help gain further clients. But it can be a little tough to get started and close the deal on those first few jobs. Sure, there are plenty of jobs listed, but there are also TONS of developers applying-- sometimes 50+ on a single job. </p>\n<h2 id=\"so-how-do-you-get-started\">So how do you get started?</h2>\n<h3 id=\"how-do-you-get-noticed-and-gain-those-first-few-clients\">How do you get noticed and gain those first few clients?</h3>\n<h4 id=\"its-a-numbers-game\">It's a numbers game. 🎲</h4>\n<p>And there are a few simple ways to drastically improve your chances. 🎯</p>\n<p>But before we get to the tips, I should mention UpWork  <a target=\"_blank\" href=\"https://support.upwork.com/hc/en-us/articles/211062898-Understanding-and-Using-Connects\">Connects</a>  and the free plan limitations.</p>\n<ul>\n<li>Applying to a job requires at least 2 <strong>connects</strong> for most jobs, unless you are invited to apply. </li>\n<li>The free plan limits users to 10 <strong>connects</strong> per month, or only 5 applications :(</li>\n<li>Additional connects can be purchased for $0.15 (USD) each and are sold in bundles of 10, 20, 40, 60, and 80.</li>\n<li>Paid monthly plans include 70 connects per month with rollover.</li>\n</ul>\n<p>So you can <em>pay</em> to increase your odds, but I don't really consider that a tip. That's just pay-to-play. It does cut down on clients getting spammed with proposals, though- so I can see the need to charge a little. </p>\n<h3 id=\"ok-on-to-the-real-tips\">Ok, on to the real tips!</h3>\n<h2 id=\"tip-1-use-all-the-search-tools\">Tip #1: Use ALL the Search Tools</h2>\n<h3 id=\"advanced-search\">Advanced Search</h3>\n<p>This one is pretty obvious, but I mention it because it's what lead me to find the next tip.  Try out a few different combos of searches and you'll notice how the 'Advanced Search' form converts the search to a boolean expression. \n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626357628470/bxjRtejBE.png\" alt=\"Screen Shot 2021-07-15 at 9.58.37 AM.png\" />\n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626357639292/SczBO5Jnp.png\" alt=\"Screen Shot 2021-07-15 at 9.58.50 AM.png\" /></p>\n<h2 id=\"tip2-boolean-search\">Tip#2: Boolean Search</h2>\n<p>You can also type your own Boolean searches directly in the search bar without using the Advanced Search.  </p>\n<p>Try breaking the 'topics' of your search into groups and search for one key word from each group. </p>\n<pre><code>(API <span class=\"hljs-keyword\">OR</span> <span class=\"hljs-keyword\">database</span> <span class=\"hljs-keyword\">OR</span> mySQL) \n<span class=\"hljs-keyword\">AND</span> \n(engineering <span class=\"hljs-keyword\">OR</span> construction <span class=\"hljs-keyword\">OR</span> manufacturing)\n</code></pre><h2 id=\"tip3-us-filter\">Tip#3: US Filter</h2>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626357860824/ugZHC3WF-.png\" alt=\"Screen Shot 2021-07-15 at 10.03.30 AM.png\" />\n<strong>Don't be afraid to turn off the US only search!</strong> I've gotten plenty of great, long-term clients that are based overseas. </p>\n<p><em>But here's the real tip:</em> Even if you only want US jobs, <strong>TURN IT OFF ANYWAY!</strong></p>\n<p>It's not always accurate. I've seen plenty of US jobs that only show up with this setting off, presumably because the client didn't enter a location. </p>\n<h2 id=\"tip4-save-searches\">Tip#4: Save Searches</h2>\n<p>So you've crafted the perfect boolean search for your skill set, you run it and... no results. 🤨</p>\n<p>Must be something wrong with your search?! ...Right? </p>\n<p>NOPE! Don't give up if there are no results the first day you search. \n<em>SAVE</em> the searches to run again daily, so you can be first to apply once the search returns a match! </p>\n<h2 id=\"tip5-rss-feeds-for-searches\">Tip#5: RSS Feeds for Searches</h2>\n<p>Now, take those saved searches and set up an auto-notification system! \nIf you really want to be first to apply, subscribe to the RSS feed for the search and get notified as soon as a matching job is posted. </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626358773861/4NF6HMsDf.png\" alt=\"Screen Shot 2021-07-15 at 10.18.57 AM.png\" /></p>\n<p>For my notification system, I used the  <a target=\"_blank\" href=\"https://slack.com/help/articles/218688467-Add-RSS-feeds-to-Slack\">Slack RSS app</a>  to send a private message to myself in Slack. But there are tons of  <a target=\"_blank\" href=\"https://www.producthunt.com/search/posts?q=rss&amp;postedDate=12%3Amonths&amp;featured=false\">other RSS tools</a>  that could be used. </p>\n<h2 id=\"tip6-proposals\">Tip#6: Proposals</h2>\n<p>This is a HUGE topic. I'm not going to try covering proposal content in this post, but it's definitely important. </p>\n<p><em>The tip,</em> is that you take this fancy, new automated job search notification, <strong>and act on it</strong>, just as quickly as you got the notification! And to do that, you need to have proposals ready ahead of time.</p>\n<p>Type up a standard intro and closing that you can use as a template for most proposals, and include a link to a sample of your work or website. Then, as soon as you get a notification, copy/paste in the template and add a few lines to the body that are specific to the job posting- after throughly reading the posting, of course! </p>\n<hr />\n<blockquote>\n<p>After a few years of dialing in this process, I created a daily routine to review the RSS feed and pick one or two jobs to apply to every morning. With the search automated and the proposal templates already written, I was only spending ~20 minutes a day instead of hours to apply to a few jobs. </p>\n</blockquote>\n<hr />\n<p>Thanks for reading! </p>\n","contentMarkdown":"UpWork is a great way for developers to start freelancing, and build an online profile with customer reviews to help gain further clients. But it can be a little tough to get started and close the deal on those first few jobs. Sure, there are plenty of jobs listed, but there are also TONS of developers applying-- sometimes 50+ on a single job. \n## So how do you get started?  \n### How do you get noticed and gain those first few clients? \n\n#### It's a numbers game. 🎲 \nAnd there are a few simple ways to drastically improve your chances. 🎯\n\nBut before we get to the tips, I should mention UpWork  [Connects](https://support.upwork.com/hc/en-us/articles/211062898-Understanding-and-Using-Connects)  and the free plan limitations.\n- Applying to a job requires at least 2 **connects** for most jobs, unless you are invited to apply. \n- The free plan limits users to 10 **connects** per month, or only 5 applications :(\n- Additional connects can be purchased for $0.15 (USD) each and are sold in bundles of 10, 20, 40, 60, and 80.\n- Paid monthly plans include 70 connects per month with rollover.\n\nSo you can *pay* to increase your odds, but I don't really consider that a tip. That's just pay-to-play. It does cut down on clients getting spammed with proposals, though- so I can see the need to charge a little. \n\n### Ok, on to the real tips!\n\n## Tip #1: Use ALL the Search Tools\n\n### Advanced Search\nThis one is pretty obvious, but I mention it because it's what lead me to find the next tip.  Try out a few different combos of searches and you'll notice how the 'Advanced Search' form converts the search to a boolean expression. \n![Screen Shot 2021-07-15 at 9.58.37 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626357628470/bxjRtejBE.png)\n![Screen Shot 2021-07-15 at 9.58.50 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626357639292/SczBO5Jnp.png)\n## Tip#2: Boolean Search\nYou can also type your own Boolean searches directly in the search bar without using the Advanced Search.  \n\nTry breaking the 'topics' of your search into groups and search for one key word from each group. \n\n```\n(API OR database OR mySQL) \nAND \n(engineering OR construction OR manufacturing)\n```\n\n## Tip#3: US Filter\n\n![Screen Shot 2021-07-15 at 10.03.30 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626357860824/ugZHC3WF-.png)\n**Don't be afraid to turn off the US only search!** I've gotten plenty of great, long-term clients that are based overseas. \n\n*But here's the real tip:* Even if you only want US jobs, **TURN IT OFF ANYWAY!**\n\nIt's not always accurate. I've seen plenty of US jobs that only show up with this setting off, presumably because the client didn't enter a location. \n\n## Tip#4: Save Searches\nSo you've crafted the perfect boolean search for your skill set, you run it and... no results. 🤨\n\nMust be something wrong with your search?! ...Right? \n\nNOPE! Don't give up if there are no results the first day you search. \n*SAVE* the searches to run again daily, so you can be first to apply once the search returns a match! \n\n## Tip#5: RSS Feeds for Searches\nNow, take those saved searches and set up an auto-notification system! \nIf you really want to be first to apply, subscribe to the RSS feed for the search and get notified as soon as a matching job is posted. \n\n![Screen Shot 2021-07-15 at 10.18.57 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626358773861/4NF6HMsDf.png)\n\nFor my notification system, I used the  [Slack RSS app](https://slack.com/help/articles/218688467-Add-RSS-feeds-to-Slack)  to send a private message to myself in Slack. But there are tons of  [other RSS tools](https://www.producthunt.com/search/posts?q=rss&postedDate=12%3Amonths&featured=false)  that could be used. \n\n## Tip#6: Proposals\nThis is a HUGE topic. I'm not going to try covering proposal content in this post, but it's definitely important. \n\n*The tip,* is that you take this fancy, new automated job search notification, **and act on it**, just as quickly as you got the notification! And to do that, you need to have proposals ready ahead of time.\n\nType up a standard intro and closing that you can use as a template for most proposals, and include a link to a sample of your work or website. Then, as soon as you get a notification, copy/paste in the template and add a few lines to the body that are specific to the job posting- after throughly reading the posting, of course! \n\n___\n\n>After a few years of dialing in this process, I created a daily routine to review the RSS feed and pick one or two jobs to apply to every morning. With the search automated and the proposal templates already written, I was only spending ~20 minutes a day instead of hours to apply to a few jobs. \n\n___\n\nThanks for reading! \n\n\n","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b953cc","56744723958ef13879b952d7","5f19d647cef915427a14ca2c"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4830.0243,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":true,"syncAlgolia":false,"title":"UpWork: Job Search Tips & Tricks","subtitle":"6 Tips for Better Results","type":"story","partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"upwork-job-search-tips-and-tricks","pollOptions":[],"dateAdded":"2021-07-15T15:18:14.353Z","badges":[],"questionReplies":[],"contributors":[],"cuid":"ckr5249t302bhrfs1ht5rfxr8","author":"60771bbfa3407a32d7041f47","followersCount":1,"draft":"60f030d7303c5845ab8c8f2d","isRepublished":false,"hasPinnedTag":false,"readTime":4,"__v":0,"series":null,"dateUpdated":"2021-08-20T19:48:33.145Z","numUniqueUsersWhoReacted":0,"pendingPublicationApproval":false,"viewsUpdatedOn":1713852036725,"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"60f051b6303c5845ab8c92a7"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"discussionScore":0,"totalReactionsByCurrentUser":0,"toc":[],"_id":"60ef61807d1ba0644913984b","sourcedFromGithub":false,"isAnonymous":false,"views":1414,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1626297230856/QBTAcJtqB.png","autoGeneratedCover":"","brief":"Appsmith recently released a new Google Sheets integration with a huge list of options, including a method to Bulk Insert Rows to an existing sheet.  \n\n☝️ So let's say you want to take the response data from a GET request, transform the data and send...","content":"<p>Appsmith recently released a new <a target=\"_blank\" href=\"https://docs.appsmith.com/datasource-reference/querying-google-sheets\">Google Sheets integration</a> with a huge list of options, including a method to <strong>Bulk Insert Rows</strong> to an existing sheet.  </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626285769728/HdacnH9iA.png\" alt=\"Screen Shot 2021-07-14 at 2.02.45 PM.png\" /></p>\n<h3 id=\"heading-so-lets-say-you-want-to-take-the-response-data-from-a-get-request-transform-the-data-and-send-it-to-google-sheets\">☝️ So let's say you want to take the response data from a GET request, transform the data and send it to Google Sheets:</h3>\n<p>For this example, I will be using data from the <a target=\"_blank\" href=\"https://www.randomuser.me\">RandomUser.me</a> API to build on my previous <a target=\"_blank\" href=\"https://community.appsmith.com/t/sample-app-random-user-api/100\">Appsmith sample app</a> . However, I'm going to try to break down the steps so this post can be applied to saving data from any API to Google Sheets.</p>\n<h3 id=\"heading-project-requirements\">✅ Project Requirements</h3>\n<ul>\n<li><p>Download multiple records of JSON data from an API</p>\n</li>\n<li><p>Transform/flatten the data</p>\n</li>\n<li><p>Add modified records as new rows in Google Sheets</p>\n</li>\n</ul>\n<h3 id=\"heading-prerequisites\">👉 Prerequisites</h3>\n<ol>\n<li><p>Existing <a target=\"_blank\" href=\"https://docs.appsmith.com/core-concepts/connecting-to-data-sources/connect-to-apis\">GET request</a> is already configured in Appsmith</p>\n</li>\n<li><p>Destination spreadsheet is setup with desired column names</p>\n</li>\n</ol>\n<p><strong>Sample Request</strong></p>\n<p><code>GET: https://randomuser.me/api/?seed=foobar&amp;results=50&amp;nat=us</code></p>\n<p>The response data has several nested fields, but we want to 'flatten' the data and only send certain values to the spreadsheet.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626286804433/ck6PXpTiA.png\" alt=\"Screen Shot 2021-07-14 at 2.20.00 PM.png\" /></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626286876590/66YpvlZGb.png\" alt=\"Screen Shot 2021-07-14 at 2.21.10 PM.png\" /></p>\n<h3 id=\"heading-setup\">⚙️ Setup</h3>\n<ol>\n<li><p>Add a new Google Sheets Data Source and authorize it for your Google account.</p>\n</li>\n<li><p>Add a new API and choose the method <strong>Bulk Insert Rows</strong>.</p>\n</li>\n<li><p>Copy/paste in the function below</p>\n</li>\n</ol>\n<pre><code class=\"lang-json\">{{\nget_users.data.results.map(\n  u =&gt; {\n    return {'name':u.name.first, 'email':u.email, 'id':u.id.value};\n  }\n)\n}}\n</code></pre>\n<ol start=\"4\">\n<li><strong>DEPLOY!</strong> 🚀</li>\n</ol>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626299508055/Qp12vVOmt.png\" alt=\"Screen Shot 2021-07-14 at 5.46.53 PM.png\" /></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626299626935/pGzhjxQhi3.png\" alt=\"Screen Shot 2021-07-14 at 5.53.07 PM.png\" /></p>\n<p>The <strong>Bulk Insert Rows</strong> method expects an array of objects, with keys that match the the sheet's column names:</p>\n<p><code>[{key:value},...]</code></p>\n<p>And the map() method returns an array. So we can <strong>map!</strong> over the <code>get_users</code> data and build our rows.</p>\n<h2 id=\"heading-thats-it\">That's it! 😁</h2>\n<h4 id=\"heading-it-really-is-that-easy-to-transform-and-push-data-to-google-sheets-from-an-api-response\">It really is that easy to transform and push data to Google Sheets from an API response!</h4>\n<hr />\n<p>This is just the beginning in a series where I will cover transforming the data in more detail, filtering and sorting the results, and eventually, syncing a Google Sheet with an API endpoint on a timer.</p>\n<p>Thanks for reading!</p>\n","contentMarkdown":"Appsmith recently released a new [Google Sheets integration](https://docs.appsmith.com/datasource-reference/querying-google-sheets) with a huge list of options, including a method to **Bulk Insert Rows** to an existing sheet.  \n\n![Screen Shot 2021-07-14 at 2.02.45 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626285769728/HdacnH9iA.png align=\"left\")\n\n### ☝️ So let's say you want to take the response data from a GET request, transform the data and send it to Google Sheets:\n\nFor this example, I will be using data from the [RandomUser.me](https://www.randomuser.me) API to build on my previous [Appsmith sample app](https://community.appsmith.com/t/sample-app-random-user-api/100) . However, I'm going to try to break down the steps so this post can be applied to saving data from any API to Google Sheets.\n\n### ✅ Project Requirements\n\n* Download multiple records of JSON data from an API\n    \n* Transform/flatten the data\n    \n* Add modified records as new rows in Google Sheets\n    \n\n### 👉 Prerequisites\n\n1. Existing [GET request](https://docs.appsmith.com/core-concepts/connecting-to-data-sources/connect-to-apis) is already configured in Appsmith\n    \n2. Destination spreadsheet is setup with desired column names\n    \n\n**Sample Request**\n\n`GET: https://randomuser.me/api/?seed=foobar&results=50&nat=us`\n\nThe response data has several nested fields, but we want to 'flatten' the data and only send certain values to the spreadsheet.\n\n![Screen Shot 2021-07-14 at 2.20.00 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626286804433/ck6PXpTiA.png align=\"left\")\n\n![Screen Shot 2021-07-14 at 2.21.10 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626286876590/66YpvlZGb.png align=\"left\")\n\n### ⚙️ Setup\n\n1. Add a new Google Sheets Data Source and authorize it for your Google account.\n    \n2. Add a new API and choose the method **Bulk Insert Rows**.\n    \n3. Copy/paste in the function below\n    \n\n```json\n{{\nget_users.data.results.map(\n  u => {\n    return {'name':u.name.first, 'email':u.email, 'id':u.id.value};\n  }\n)\n}}\n```\n\n4. **DEPLOY!** 🚀\n    \n\n![Screen Shot 2021-07-14 at 5.46.53 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626299508055/Qp12vVOmt.png align=\"left\")\n\n![Screen Shot 2021-07-14 at 5.53.07 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626299626935/pGzhjxQhi3.png align=\"left\")\n\nThe **Bulk Insert Rows** method expects an array of objects, with keys that match the the sheet's column names:\n\n`[{key:value},...]`\n\nAnd the map() method returns an array. So we can **map!** over the `get_users` data and build our rows.\n\n## That's it! 😁\n\n#### It really is that easy to transform and push data to Google Sheets from an API response!\n\n---\n\nThis is just the beginning in a series where I will cover transforming the data in more detail, filtering and sorting the results, and eventually, syncing a Google Sheet with an API endpoint on a timer.\n\nThanks for reading!","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b95245","56b1208d04f0061506b360ff","56744720958ef13879b947ce","56e669b622f645300192ed17","56744723958ef13879b95470"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4829.1349,"responses":[{"popularity":5081.5995,"isActive":true,"upvotedBy":[],"downvotedBy":[],"upvotes":0,"downvotes":0,"isCollapsed":false,"totalBadgesAwarded":0,"isRewardWinner":false,"bookmarkedIn":[],"score":0,"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"_id":"619d0fe9fa52cd31fe52cc86","content":"<p>Great guide you have here . I read most of your post on appsmith . How would I use appsmith to upload image from mobile device to google drive ?</p>\n","contentMarkdown":"Great guide you have here . I read most of your post on appsmith . How would I use appsmith to upload image from mobile device to google drive ?","author":"619d0e83fa52cd31fe52cc4d","stamp":"ckwcaa2va04m5vis13iz7219t","post":"60ef61807d1ba0644913984b","replies":[],"dateAdded":"2021-11-23T15:59:37.223Z","badgesAwarded":[],"__v":0}],"responseCount":1,"replyCount":1,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35484","567453d0b73d6a82ac8c5abd","5d9dd859f31791c942dc5b52"],"totalReactions":3,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":true,"title":"Saving API Response Data to Google Sheets with Appsmith","type":"story","partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"saving-api-response-data-to-google-sheets-with-appsmith","pollOptions":[],"dateAdded":"2021-07-14T22:13:20.179Z","badges":[],"questionReplies":[],"contributors":[{"_id":"619d0fe9fa52cd31fe52cc87","user":"619d0e83fa52cd31fe52cc4d","stamp":"ckwcaa2va04m5vis13iz7219t"}],"cuid":"ckr41i8ls02xnt5s17z7jby8k","author":"60771bbfa3407a32d7041f47","followersCount":1,"draft":"60ef255f23b128642163a7d4","isRepublished":false,"hasPinnedTag":false,"readTime":2,"__v":1,"reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35484":1,"reaction_567453d0b73d6a82ac8c5abd":1,"reaction_5d9dd859f31791c942dc5b52":1},"viewsUpdatedOn":1714008635848,"commentsPaused":false,"enableToc":false,"lastActivity":"2021-11-23T17:47:40.065Z","numUniqueUsersWhoReacted":0,"coAuthors":[],"dateUpdated":"2025-03-16T11:20:18.142Z","hasCustomDate":false,"isCoverAttributionHidden":false,"series":"67d6b35a41604947f002d803","stickCoverToBottom":false,"updatedAt":"2025-03-16T11:20:18.142Z","uniqueReactions":["5c090d96c2a9c2a674d35484","567453d0b73d6a82ac8c5abd","5d9dd859f31791c942dc5b52"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35484":1,"reaction_567453d0b73d6a82ac8c5abd":1,"reaction_5d9dd859f31791c942dc5b52":1},"id":"60ef61807d1ba0644913984b"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"discussionScore":0,"totalReactionsByCurrentUser":0,"commentsPaused":false,"toc":[],"numUniqueUsersWhoReacted":0,"_id":"60edb6b7573c235ee63a3a9b","sourcedFromGithub":false,"isAnonymous":false,"views":313,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1626120023386/7E3ShXxC2i.png","autoGeneratedCover":"","brief":"I've been having a lot of fun building with Appsmith lately and wanted to do something with Google Contacts.\nIt's easy to connect to a new API from Appsmith, but it's not so easy to enable the Google Contacts API for first time users. It takes a bit ...","content":"<h4 id=\"heading-ive-been-having-a-lot-of-fun-building-with-appsmith-lately-and-wanted-to-do-something-with-google-contacts\">I've been having a lot of fun building with Appsmith lately and wanted to do something with Google Contacts.</h4>\n<p>It's easy to connect to a new API from Appsmith, but it's not so easy to enable the Google Contacts API for first time users. It takes a bit of setup in the Google Cloud Console before you can start using the API. You have to set up billing, create a project, add credentials, define the scope, etc. But most of the same data can be accessed using Apps Script, and without all the setup work to enable the API.</p>\n<h3 id=\"heading-project-requirements\">📐 Project Requirements</h3>\n<ul>\n<li><p>Create endpoint for GET requests to retrieve all Contacts by 'label'</p>\n</li>\n<li><p>Option to retrieve full list of all labels, to populate dropdown in Appsmith</p>\n</li>\n<li><p>Security check so web app does not respond to all requests</p>\n</li>\n</ul>\n<h3 id=\"heading-topics-covered\">📗 Topics Covered</h3>\n<ul>\n<li><p>Publishing a script as a <a target=\"_blank\" href=\"https://developers.google.com/apps-script/guides/web#request_parameters\">web app</a></p>\n</li>\n<li><p>Passing URL parameters to the web app</p>\n</li>\n<li><p>Using <a target=\"_blank\" href=\"https://developers.google.com/apps-script/reference/contacts/contacts-app\">ContactsApp</a> to retrieve contacts &amp; labels</p>\n</li>\n</ul>\n<h3 id=\"heading-a-note-on-terminology\">📌 A Note on Terminology</h3>\n<p>Google uses the term <code>Label</code> throughout the Gmail UI to refer to email categories.</p>\n<p><strong>But on the Apps Script and API side, they are referred to as</strong> <code>Groups</code>!</p>\n<p>In an effort to maintain an equal level of confusion in this post, I'll also be using <code>Label</code> to refer to the frontend (user input) and using <code>Groups</code> when referencing the data returned from the ContactsApp. 🙃</p>\n<h2 id=\"heading-setup-guide\">⚙️ Setup Guide</h2>\n<h4 id=\"heading-script-deploy-as-web-app\">SCRIPT: Deploy as Web App</h4>\n<ol>\n<li><p>Create a <a target=\"_blank\" href=\"https://www.script.new\">new Apps Script project</a> and paste in the script below.</p>\n</li>\n<li><p>Replace the <code>APIKEY</code> with a custom value, then SAVE.</p>\n</li>\n<li><p>Deploy&gt; New Deployment&gt; Select Type&gt; WEB APP</p>\n</li>\n<li><p>Execute As: ME, Who has access: ANYONE</p>\n</li>\n<li><p>DEPLOY and copy the new URL for the web app.</p>\n</li>\n</ol>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626172021727/2622fVNQK.png\" alt=\"Screen Shot 2021-07-13 at 6.26.52 AM.png\" /></p>\n<h4 id=\"heading-appsmith-add-contacts-web-app-as-api\">Appsmith: Add Contacts Web App as API</h4>\n<ol>\n<li><p>Create a new app, and add a new API using the web app URL.</p>\n</li>\n<li><p>Add parameters: <code>key={APIKEY}</code> and <code>labels</code> -with no value <em>(to return the list of labels)</em></p>\n<p> <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626172547449/c3WTGGaoI.png\" alt=\"Screen Shot 2021-07-13 at 6.35.21 AM.png\" /></p>\n</li>\n<li><p>Add a Select-widget and set the Options to <code>{{get_labels.data.groups}}</code></p>\n<p> <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626190164946/JA3RR6BB9.png\" alt=\"Screen Shot 2021-07-13 at 11.28.31 AM.png\" /></p>\n</li>\n<li><p>Copy the get_labels API, rename <code>get_contacts</code></p>\n</li>\n<li><p>Update parameters: Change label<strong>s</strong> to <code>label</code>\\= <code>{{Select1.selectedOptionValue}}</code></p>\n<p> <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626172089788/uKzOBveyJ.png\" alt=\"Screen Shot 2021-07-13 at 6.28.00 AM.png\" /></p>\n</li>\n<li><p>Add a Table-widget and set the Data as <code>{{get_contacts.data.contacts}}</code></p>\n<p> <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626172412376/_NUb_Wd15.png\" alt=\"Screen Shot 2021-07-13 at 6.21.46 AM.png\" /></p>\n</li>\n<li><p>DEPLOY</p>\n</li>\n</ol>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1626172426482/AdkX0UoZq.gif\" alt=\"2021-07-13 06.24.35.gif\" /></p>\n<h3 id=\"heading-awesome-now-all-gmail-contacts-can-be-pulled-into-appsmith-by-label\">AWESOME! Now all Gmail Contacts can be pulled into Appsmith by Label. 🤓</h3>\n<h3 id=\"heading-script\">💾 Script</h3>\n<pre><code class=\"lang-json\">const key = 'APIKEY';  <span class=\"hljs-comment\">// custom string to check before returning contacts</span>\n\nfunction doGet(e) {\n  let responseBody = {'requestEvent':e};\n\n  if('label' in e.parameter &amp;&amp; e.parameter.key == key){\n    const label = e.parameter.label;\n    const foundContacts = getContacts(label);\n    responseBody['contacts'] = foundContacts;\n\n  }else if('labels' in e.parameter &amp;&amp; e.parameter.key == key){\n    const foundGroups = getLabels();\n    responseBody['groups'] = foundGroups;\n\n  }\n\n  return ContentService.createTextOutput(JSON.stringify(responseBody))\n  .setMimeType(ContentService.MimeType.JSON)\n}\n\n\nfunction getContacts(label) {\n  const contactGroup = ContactsApp.getContactGroup(label); \n  const contactsArr = ContactsApp.getContactsByGroup(contactGroup);\n\n  const contacts = contactsArr.map(function(c) {\n    let cObj = {};\n    cObj['name'] = c.getFullName();\n    cObj['phone'] = c.getMobilePhone();\n    cObj['email'] = c.getEmailAddresses()[<span class=\"hljs-number\">0</span>];\n    return cObj\n  });\n\n  Logger.log(JSON.stringify(contacts));\n  return contacts\n}\n\n\nfunction getLabels(){\n  const groups = ContactsApp.getContactGroups();\n  let groupsArr = groups.map((group, index) =&gt; {\n                             return {'label':group.getName(),'value':group.getName()}\n}\n\n);\n\nLogger.log(groupsArr);\nreturn groupsArr\n}\n</code></pre>\n","contentMarkdown":"#### I've been having a lot of fun building with Appsmith lately and wanted to do something with Google Contacts.\n\nIt's easy to connect to a new API from Appsmith, but it's not so easy to enable the Google Contacts API for first time users. It takes a bit of setup in the Google Cloud Console before you can start using the API. You have to set up billing, create a project, add credentials, define the scope, etc. But most of the same data can be accessed using Apps Script, and without all the setup work to enable the API.\n\n### 📐 Project Requirements\n\n* Create endpoint for GET requests to retrieve all Contacts by 'label'\n    \n* Option to retrieve full list of all labels, to populate dropdown in Appsmith\n    \n* Security check so web app does not respond to all requests\n    \n\n### 📗 Topics Covered\n\n* Publishing a script as a [web app](https://developers.google.com/apps-script/guides/web#request_parameters)\n    \n* Passing URL parameters to the web app\n    \n* Using [ContactsApp](https://developers.google.com/apps-script/reference/contacts/contacts-app) to retrieve contacts & labels\n    \n\n### 📌 A Note on Terminology\n\nGoogle uses the term `Label` throughout the Gmail UI to refer to email categories.\n\n**But on the Apps Script and API side, they are referred to as** `Groups`!\n\nIn an effort to maintain an equal level of confusion in this post, I'll also be using `Label` to refer to the frontend (user input) and using `Groups` when referencing the data returned from the ContactsApp. 🙃\n\n## ⚙️ Setup Guide\n\n#### SCRIPT: Deploy as Web App\n\n1. Create a [new Apps Script project](https://www.script.new) and paste in the script below.\n    \n2. Replace the `APIKEY` with a custom value, then SAVE.\n    \n3. Deploy&gt; New Deployment&gt; Select Type&gt; WEB APP\n    \n4. Execute As: ME, Who has access: ANYONE\n    \n5. DEPLOY and copy the new URL for the web app.\n    \n\n![Screen Shot 2021-07-13 at 6.26.52 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626172021727/2622fVNQK.png align=\"left\")\n\n#### Appsmith: Add Contacts Web App as API\n\n1. Create a new app, and add a new API using the web app URL.\n    \n2. Add parameters: `key={APIKEY}` and `labels` -with no value *(to return the list of labels)*\n    \n    ![Screen Shot 2021-07-13 at 6.35.21 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626172547449/c3WTGGaoI.png align=\"left\")\n    \n3. Add a Select-widget and set the Options to `{{get_labels.data.groups}}`\n    \n    ![Screen Shot 2021-07-13 at 11.28.31 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626190164946/JA3RR6BB9.png align=\"left\")\n    \n4. Copy the get\\_labels API, rename `get_contacts`\n    \n5. Update parameters: Change label**s** to `label`\\= `{{Select1.selectedOptionValue}}`\n    \n    ![Screen Shot 2021-07-13 at 6.28.00 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626172089788/uKzOBveyJ.png align=\"left\")\n    \n6. Add a Table-widget and set the Data as `{{get_contacts.data.contacts}}`\n    \n    ![Screen Shot 2021-07-13 at 6.21.46 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1626172412376/_NUb_Wd15.png align=\"left\")\n    \n7. DEPLOY\n    \n\n![2021-07-13 06.24.35.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1626172426482/AdkX0UoZq.gif align=\"left\")\n\n### AWESOME! Now all Gmail Contacts can be pulled into Appsmith by Label. 🤓\n\n### 💾 Script\n\n```json\nconst key = 'APIKEY';  // custom string to check before returning contacts\n\nfunction doGet(e) {\n  let responseBody = {'requestEvent':e};\n  \n  if('label' in e.parameter && e.parameter.key == key){\n    const label = e.parameter.label;\n    const foundContacts = getContacts(label);\n    responseBody['contacts'] = foundContacts;\n    \n  }else if('labels' in e.parameter && e.parameter.key == key){\n    const foundGroups = getLabels();\n    responseBody['groups'] = foundGroups;\n\n  }\n\n  return ContentService.createTextOutput(JSON.stringify(responseBody))\n  .setMimeType(ContentService.MimeType.JSON)\n}\n\n\nfunction getContacts(label) {\n  const contactGroup = ContactsApp.getContactGroup(label); \n  const contactsArr = ContactsApp.getContactsByGroup(contactGroup);\n  \n  const contacts = contactsArr.map(function(c) {\n    let cObj = {};\n    cObj['name'] = c.getFullName();\n    cObj['phone'] = c.getMobilePhone();\n    cObj['email'] = c.getEmailAddresses()[0];\n    return cObj\n  });\n  \n  Logger.log(JSON.stringify(contacts));\n  return contacts\n}\n\n\nfunction getLabels(){\n  const groups = ContactsApp.getContactGroups();\n  let groupsArr = groups.map((group, index) => {\n                             return {'label':group.getName(),'value':group.getName()}\n}\n\n);\n\nLogger.log(groupsArr);\nreturn groupsArr\n}\n```","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744721958ef13879b94cad","56744723958ef13879b95470","56744723958ef13879b95245","56b1208d04f0061506b360ff","56744720958ef13879b947ce"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4826.5309,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":["5c090d96c2a9c2a674d35485"],"totalReactions":2,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":true,"title":"Adding Gmail Contacts to Appsmith using Apps Script","subtitle":"Publishing script as a web app to serve as API endpoint","type":"story","isRepublished":false,"partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"adding-gmail-contacts-to-appsmith-using-apps-script","importedFromMedium":false,"dateAdded":"2021-07-13T15:52:23.945Z","hasCustomDate":false,"stickCoverToBottom":false,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"cuid":"ckr28gi0d0l18qus118313jxj","author":"60771bbfa3407a32d7041f47","followersCount":1,"draft":"60ec13c2573c235ee639b605","hasPinnedTag":false,"readTime":3,"__v":0,"reactionToCountMap":{"reaction_5c090d96c2a9c2a674d35485":2},"viewsUpdatedOn":1713902439308,"coAuthors":[],"dateUpdated":"2025-03-16T00:38:57.283Z","enableToc":false,"isCoverAttributionHidden":false,"series":"679fa03905414f167a095994","updatedAt":"2025-03-16T00:38:57.283Z","uniqueReactions":["5c090d96c2a9c2a674d35485"],"reactionToCountMapUnique":{"reaction_5c090d96c2a9c2a674d35485":2},"id":"60edb6b7573c235ee63a3a9b"},{"reward":{"type":"xlm"},"commentMetadata":{"qualityCommentCharLength":0,"qualityCommentCount":0,"totalCommentCount":1,"lastCommentAddedDate":"2024-02-11T00:03:23.596Z"},"githubAsSourceMeta":null,"totalReactionsByCurrentUser":0,"commentsPaused":false,"toc":[],"numUniqueUsersWhoReacted":0,"_id":"60e852916d962b01bdecaa98","sourcedFromGithub":false,"isAnonymous":false,"views":388,"slugOverridden":true,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1625584039639/esE1Zsh89.png","autoGeneratedCover":"","brief":"Apps Script is a powerful tool for automating routine tasks with Google Sheets, Docs, Gmail, and other Google services. On a recent job, I needed to create a daily backup of a Google Sheet for a client, and I was looking for a simple, reusable soluti...","content":"<p>Apps Script is a powerful tool for automating routine tasks with Google Sheets, Docs, Gmail, and other Google services. On a recent job, I needed to create a daily backup of a Google Sheet for a client, and I was looking for a simple, reusable solution.</p>\n<p>This sounded like a perfect job for Apps Script! Here's what I came up with. Jump to the end to see the final script.</p>\n<h4 id=\"heading-this-post-will-cover\">🧐 This post will cover</h4>\n<ul>\n<li><p>Writing a basic <a target=\"_blank\" href=\"https://developers.google.com/apps-script/overview\">Apps Script</a> function</p>\n</li>\n<li><p>Using <a target=\"_blank\" href=\"https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app\">SpreadsheetApp</a> &amp; <a target=\"_blank\" href=\"https://developers.google.com/apps-script/reference/drive/drive-app\">DriveApp</a> Classes</p>\n</li>\n<li><p>Creating a time-driven <a target=\"_blank\" href=\"https://developers.google.com/apps-script/guides/triggers/installable\">Trigger</a> to run the function</p>\n</li>\n</ul>\n<h4 id=\"heading-project-requirements\">👉 Project Requirements</h4>\n<ol>\n<li><p>Backup multiple sheets on a schedule</p>\n</li>\n<li><p>Different backup destinations for each sheet</p>\n</li>\n<li><p>Read/write between different Google accounts</p>\n</li>\n</ol>\n<h4 id=\"heading-setup\">⚙️ Setup</h4>\n<p>I started out with a new sheet, and added columns for the source sheet Id, destination folder Id, and a link to the latest backup file.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1625832710063/5qXaLmxMN.png\" alt=\"Screen Shot 2021-07-09 at 8.08.18 AM.png\" /></p>\n<p>And created a new script: <code>Tools&gt;Script Editor</code></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1625832942981/hlKWVKJlY.png\" alt=\"Screen Shot 2021-07-09 at 8.13.18 AM.png\" /></p>\n<p>Next, I loaded up the list of source sheet Ids into an array so I could loop through them for backing up:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1625833143982/TTmL4KKA5.png\" alt=\"Screen Shot 2021-07-09 at 8.18.58 AM.png\" /></p>\n<blockquote>\n<p>📌 NOTE: <code>getLastRow() - 1</code> is used to offset the the header row.</p>\n</blockquote>\n<h4 id=\"heading-now-what-should-i-name-the-backup-file\">Now, what should I name the backup file?🤔</h4>\n<p>Well, I wanted the original sheet name included, and a timestamp to make each name unique.</p>\n<p>Something like this: <code>const backupName = sourceName +'_BAK' + dateTimeStr</code></p>\n<p>So to get a string with the current timestamp, I used <a target=\"_blank\" href=\"https://developers.google.com/apps-script/reference/utilities/utilities#formatdatedate,-timezone,-format\">Utilities.formatDate()</a> .</p>\n<pre><code class=\"lang-json\">const dateTimeStr = Utilities.formatDate(new Date(),'GMT<span class=\"hljs-number\">-4</span>','yyyyMMdd_HHmmss');\nconst backupName = sourceName +'_BAK' + dateTimeStr\n</code></pre>\n<p>Now the <code>backupName</code> can be used in the next step, which creates the actual backup file.</p>\n<pre><code class=\"lang-json\"><span class=\"hljs-comment\">// COPY EACH SOURCE SHEET TO DESTINATION FOLDER</span>\n  sourceIds.forEach((sourceId, index) =&gt; {\n    const source = SpreadsheetApp.openById(sourceId);\n    const sourceName = source.getName();\n    const dateTimeStr = Utilities.formatDate(new Date(),'GMT-4','yyyyMMdd_HHmmss');\n    const backupName = sourceName +'_BAK' + dateTimeStr;\n    const backupId = source.copy(backupName).getId();  <span class=\"hljs-comment\">// File created in My Drive by default</span>\n    const destinationId = sh.getRange(index + 2, destinationIdCol).getValue();  <span class=\"hljs-comment\">// Folder Id for destination sheet</span>\n    const destination = DriveApp.getFolderById(destinationId);\n    DriveApp.getFileById(backupId).moveTo(destination);\n</code></pre>\n<blockquote>\n<p>📌 NOTE: Here the offset is <code>-2</code> because the <code>index</code> of the forEach() loop is zero-based. So to match the loop index with the correct row number (one-based), the offsets are combined.</p>\n</blockquote>\n<p>For the last step, I wanted to save a link to the sheet for the latest backup file. Saving the link text was pretty easy, but that only shows the Id, and not the name. <code>https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/edit#gid=0</code></p>\n<p>So to get the new filename as the link text, the cell value has to be a hyperlink. I tried the normal setValue() method but this doesn't work with hyperlinks. They have to be created using the <a target=\"_blank\" href=\"https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app#newrichtextvalue\">newRichTextValue()</a> method.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1625835019072/7YGgZUVn4.png\" alt=\"Screen Shot 2021-07-09 at 8.50.12 AM.png\" /></p>\n<h4 id=\"heading-lastly-to-set-the-script-on-a-timer\">Lastly, to set the script on a timer</h4>\n<p><code>Triggers (Left sidebar in script editor) &gt; Add Trigger</code></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1625835739110/K4D8R4nzv.png\" alt=\"Screen Shot 2021-07-09 at 9.02.13 AM.png\" /></p>\n<p>Now all sheets will be backed up daily to their specified folder. This even works across Google accounts! All you need is READ access to the source sheet, and WRITE access to the destination folder.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1625836066096/iTGa6Jpp5.png\" alt=\"Screen Shot 2021-07-09 at 9.04.35 AM.png\" /></p>\n<h3 id=\"heading-finished-script\">FINISHED SCRIPT</h3>\n<pre><code class=\"lang-json\">function backupSheets() {\n  <span class=\"hljs-comment\">// CONFIGURE FOR GSHEET</span>\n  const spreadsheetId     = '{SPREADSHEET_ID}'  <span class=\"hljs-comment\">//  list of sheet/folder Ids</span>\n  const sheetName         = 'sheetlist' <span class=\"hljs-comment\">// sheet with the list of Ids</span>\n  const sourceIdCol       = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// source spreadsheet Id</span>\n  const destinationIdCol  = <span class=\"hljs-number\">2</span>;  <span class=\"hljs-comment\">// destination folder Id</span>\n  const newFileURLCol     = <span class=\"hljs-number\">3</span>;  <span class=\"hljs-comment\">// link to new file [OUTPUT TO SHEET]</span>\n\n  <span class=\"hljs-comment\">// LOAD SOURCE SHEET IDS FOR BACKUP</span>\n  const ss = SpreadsheetApp.openById(spreadsheetId); \n  const sh = ss.getSheetByName(sheetName);\n  const lastRow   = sh.getLastRow();\n  const sourceIds = sh.getRange(<span class=\"hljs-number\">2</span>, sourceIdCol, lastRow - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>).getValues(); <span class=\"hljs-comment\">// Array of Ids for source sheets</span>\n\n  <span class=\"hljs-comment\">// COPY EACH SOURCE SHEET TO DESTINATION FOLDER</span>\n  sourceIds.forEach((sourceId, index) =&gt; {\n    const source        = SpreadsheetApp.openById(sourceId);\n    const sourceName    = source.getName();\n    const dateTimeStr   = Utilities.formatDate(new Date(),'GMT-4','yyyyMMdd_HHmmss');\n    const backupName    = sourceName +'_BAK' + dateTimeStr;\n    const backupId      = source.copy(backupName).getId();  <span class=\"hljs-comment\">// File created in My Drive by default</span>\n    const destinationId = sh.getRange(index + 2, destinationIdCol).getValue();  <span class=\"hljs-comment\">// Folder Id for destination sheet</span>\n    const destination   = DriveApp.getFolderById(destinationId);\n    DriveApp.getFileById(backupId).moveTo(destination);\n\n    <span class=\"hljs-comment\">// SAVE NEW FILE LINK TO SHEET</span>\n    const backupURL = 'https:<span class=\"hljs-comment\">//docs.google.com/spreadsheets/d/' + backupId +'/edit#gid=0';</span>\n    const hyperlink = SpreadsheetApp.newRichTextValue().setText(backupName).setLinkUrl(backupURL).build();\n    sh.getRange(index + <span class=\"hljs-number\">2</span>,newFileURLCol).setRichTextValue(hyperlink);    <span class=\"hljs-comment\">// link to last backup file</span>\n  });\n}\n</code></pre>\n","contentMarkdown":"Apps Script is a powerful tool for automating routine tasks with Google Sheets, Docs, Gmail, and other Google services. On a recent job, I needed to create a daily backup of a Google Sheet for a client, and I was looking for a simple, reusable solution.\n\nThis sounded like a perfect job for Apps Script! Here's what I came up with. Jump to the end to see the final script.\n\n#### 🧐 This post will cover\n\n* Writing a basic [Apps Script](https://developers.google.com/apps-script/overview) function\n    \n* Using [SpreadsheetApp](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app) & [DriveApp](https://developers.google.com/apps-script/reference/drive/drive-app) Classes\n    \n* Creating a time-driven [Trigger](https://developers.google.com/apps-script/guides/triggers/installable) to run the function\n    \n\n#### 👉 Project Requirements\n\n1. Backup multiple sheets on a schedule\n    \n2. Different backup destinations for each sheet\n    \n3. Read/write between different Google accounts\n    \n\n#### ⚙️ Setup\n\nI started out with a new sheet, and added columns for the source sheet Id, destination folder Id, and a link to the latest backup file.\n\n![Screen Shot 2021-07-09 at 8.08.18 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625832710063/5qXaLmxMN.png align=\"left\")\n\nAnd created a new script: `Tools>Script Editor`\n\n![Screen Shot 2021-07-09 at 8.13.18 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625832942981/hlKWVKJlY.png align=\"left\")\n\nNext, I loaded up the list of source sheet Ids into an array so I could loop through them for backing up:\n\n![Screen Shot 2021-07-09 at 8.18.58 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625833143982/TTmL4KKA5.png align=\"left\")\n\n> 📌 NOTE: `getLastRow() - 1` is used to offset the the header row.\n\n#### Now, what should I name the backup file?🤔\n\nWell, I wanted the original sheet name included, and a timestamp to make each name unique.\n\nSomething like this: `const backupName = sourceName +'_BAK' + dateTimeStr`\n\nSo to get a string with the current timestamp, I used [Utilities.formatDate()](https://developers.google.com/apps-script/reference/utilities/utilities#formatdatedate,-timezone,-format) .\n\n```json\nconst dateTimeStr = Utilities.formatDate(new Date(),'GMT-4','yyyyMMdd_HHmmss');\nconst backupName = sourceName +'_BAK' + dateTimeStr\n```\n\nNow the `backupName` can be used in the next step, which creates the actual backup file.\n\n```json\n// COPY EACH SOURCE SHEET TO DESTINATION FOLDER\n  sourceIds.forEach((sourceId, index) => {\n    const source = SpreadsheetApp.openById(sourceId);\n    const sourceName = source.getName();\n    const dateTimeStr = Utilities.formatDate(new Date(),'GMT-4','yyyyMMdd_HHmmss');\n    const backupName = sourceName +'_BAK' + dateTimeStr;\n    const backupId = source.copy(backupName).getId();  // File created in My Drive by default\n    const destinationId = sh.getRange(index + 2, destinationIdCol).getValue();  // Folder Id for destination sheet\n    const destination = DriveApp.getFolderById(destinationId);\n    DriveApp.getFileById(backupId).moveTo(destination);\n```\n\n> 📌 NOTE: Here the offset is `-2` because the `index` of the forEach() loop is zero-based. So to match the loop index with the correct row number (one-based), the offsets are combined.\n\nFor the last step, I wanted to save a link to the sheet for the latest backup file. Saving the link text was pretty easy, but that only shows the Id, and not the name. `https://docs.google.com/spreadsheets/d/{SPREADSHEET_ID}/edit#gid=0`\n\nSo to get the new filename as the link text, the cell value has to be a hyperlink. I tried the normal setValue() method but this doesn't work with hyperlinks. They have to be created using the [newRichTextValue()](https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app#newrichtextvalue) method.\n\n![Screen Shot 2021-07-09 at 8.50.12 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625835019072/7YGgZUVn4.png align=\"left\")\n\n#### Lastly, to set the script on a timer\n\n`Triggers (Left sidebar in script editor) > Add Trigger`\n\n![Screen Shot 2021-07-09 at 9.02.13 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625835739110/K4D8R4nzv.png align=\"left\")\n\nNow all sheets will be backed up daily to their specified folder. This even works across Google accounts! All you need is READ access to the source sheet, and WRITE access to the destination folder.\n\n![Screen Shot 2021-07-09 at 9.04.35 AM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1625836066096/iTGa6Jpp5.png align=\"left\")\n\n### FINISHED SCRIPT\n\n```json\nfunction backupSheets() {\n  // CONFIGURE FOR GSHEET\n  const spreadsheetId     = '{SPREADSHEET_ID}'  //  list of sheet/folder Ids\n  const sheetName         = 'sheetlist' // sheet with the list of Ids\n  const sourceIdCol       = 1;  // source spreadsheet Id\n  const destinationIdCol  = 2;  // destination folder Id\n  const newFileURLCol     = 3;  // link to new file [OUTPUT TO SHEET]\n  \n  // LOAD SOURCE SHEET IDS FOR BACKUP\n  const ss = SpreadsheetApp.openById(spreadsheetId); \n  const sh = ss.getSheetByName(sheetName);\n  const lastRow   = sh.getLastRow();\n  const sourceIds = sh.getRange(2, sourceIdCol, lastRow - 1, 1).getValues(); // Array of Ids for source sheets\n\n  // COPY EACH SOURCE SHEET TO DESTINATION FOLDER\n  sourceIds.forEach((sourceId, index) => {\n    const source        = SpreadsheetApp.openById(sourceId);\n    const sourceName    = source.getName();\n    const dateTimeStr   = Utilities.formatDate(new Date(),'GMT-4','yyyyMMdd_HHmmss');\n    const backupName    = sourceName +'_BAK' + dateTimeStr;\n    const backupId      = source.copy(backupName).getId();  // File created in My Drive by default\n    const destinationId = sh.getRange(index + 2, destinationIdCol).getValue();  // Folder Id for destination sheet\n    const destination   = DriveApp.getFolderById(destinationId);\n    DriveApp.getFileById(backupId).moveTo(destination);\n\n    // SAVE NEW FILE LINK TO SHEET\n    const backupURL = 'https://docs.google.com/spreadsheets/d/' + backupId +'/edit#gid=0';\n    const hyperlink = SpreadsheetApp.newRichTextValue().setText(backupName).setLinkUrl(backupURL).build();\n    sh.getRange(index + 2,newFileURLCol).setRichTextValue(hyperlink);    // link to last backup file\n  });\n}\n```","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56e669b622f645300192ed17","56744721958ef13879b94cad","56744720958ef13879b947ce","56744723958ef13879b95470"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4818.3783,"responses":[],"responseCount":1,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"syncAlgolia":false,"title":"Creating a Scheduled Backup Service for Google Sheets using Apps Script.","subtitle":"Beginner Apps Script tutorial","type":"story","isRepublished":false,"partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"creating-a-scheduled-backup-service-for-google-sheets-using-apps-script","importedFromMedium":false,"dateAdded":"2021-07-09T13:43:45.125Z","hasCustomDate":false,"stickCoverToBottom":false,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[{"_id":"686429d7dbf6bfe1b0c07144","user":"65c80d7c63bbc2202845268b","stamp":"clsgqsd3f00020akzgy8q7nrm"}],"cuid":"ckqwe3niv03wfcds1by8r0lto","author":"60771bbfa3407a32d7041f47","followersCount":0,"draft":"60e463114aacd63048242e21","hasPinnedTag":false,"readTime":4,"__v":0,"viewsUpdatedOn":1713960046770,"lastActivity":"2024-02-11T00:03:23.599Z","updatedAt":"2025-03-16T00:39:18.043Z","discussionScore":0,"coAuthors":[],"dateUpdated":"2025-03-16T00:39:18.043Z","enableToc":false,"isCoverAttributionHidden":false,"series":"679fa03905414f167a095994","uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"60e852916d962b01bdecaa98"},{"reward":{"type":"xlm"},"githubAsSourceMeta":null,"coAuthors":[],"discussionScore":0,"totalReactionsByCurrentUser":0,"commentsPaused":false,"syncAlgolia":false,"enableToc":false,"toc":[],"numUniqueUsersWhoReacted":0,"_id":"607df037c99e200d08f7f75f","sourcedFromGithub":false,"isAnonymous":false,"views":41,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1618854344924/9mmzm-1Ow.png","autoGeneratedCover":"","brief":"Hey Everyone, I'm Joseph from GreenFlux, LLC  👋\nI'm a freelance developer and I'm currently learning Google Apps Script. I use Google Sheets as a backend for several no-code platforms, and often need to interact with that data using Apps Scripts. \nF...","content":"<h3 id=\"hey-everyone-im-joseph-from-greenflux-llcgreenflux\">Hey Everyone, I'm Joseph from <a class=\"user-mention\" href=\"https://hashnode.com/@greenflux\">GreenFlux, LLC</a>  👋</h3>\n<p>I'm a freelance developer and I'm currently learning Google Apps Script. I use Google Sheets as a backend for several no-code platforms, and often need to interact with that data using Apps Scripts. </p>\n<p>For API integrations, I used to rely on 3rd party services like Zapier &amp; Integromat. But lately I've been writing GAS functions to replace those dependencies where possible, and provide more control and customization. </p>\n<p><em>which brings me to the question: </em></p>\n<h2 id=\"what-are-all-the-different-methods-of-invoking-apps-script-functions\">What are all the different methods of invoking Apps Script functions?</h2>\n<p><strong>Here's what I could come up with so far.</strong> ✏️</p>\n<h4 id=\"1-manually-via-run-button\">1) Manually, via RUN button</h4>\n<p>First one is obvious. No explanation needed. </p>\n<h4 id=\"2-using-a-custom-functionhttpsdevelopersgooglecomapps-scriptguidessheetsfunctions\">2) Using a  <a target=\"_blank\" href=\"https://developers.google.com/apps-script/guides/sheets/functions\">custom function</a></h4>\n<p>This method allows referencing the function in a formula, and passing cell values as inputs. </p>\n<pre><code><span class=\"hljs-comment\">/**\n * Base64 Encodes {input1 + ':' + input2}.\n *\n * <span class=\"hljs-doctag\">@param</span> {string} API Key or Client ID.\n * <span class=\"hljs-doctag\">@param</span> {string} Password or client Secret.\n * <span class=\"hljs-doctag\">@return</span> Base64 encoded token.\n * <span class=\"hljs-doctag\">@customfunction</span>\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createToken</span>(<span class=\"hljs-params\">apiKey,pw</span>)</span>{\n<span class=\"hljs-keyword\">var</span> token = Utilities.base64Encode(apiKey + <span class=\"hljs-string\">\":\"</span> + pw);\n<span class=\"hljs-keyword\">return</span> token;\n}\n</code></pre><p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1618863379599/15s2XiWoL.png\" alt=\"Screen Shot 2021-04-19 at 4.15.39 PM.png\" /></p>\n<h4 id=\"3-create-a-triggerhttpsdevelopersgooglecomapps-scriptguidestriggers\">3) Create a  <a target=\"_blank\" href=\"https://developers.google.com/apps-script/guides/triggers\">trigger</a></h4>\n<p>Next up we have <strong>Triggers</strong>, which include quite a few option. </p>\n<ul>\n<li>Run scripts on a schedule by adding a \"Time-driven\" trigger</li>\n<li>Monitor for Spreadsheet/Form events</li>\n<li>Monitor a calendar for updates</li>\n</ul>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1618863516773/kjjlnb_ia.png\" alt=\"Screen Shot 2021-04-19 at 4.18.10 PM.png\" /></p>\n<p>I've used the <em>time-driven</em> triggers for things like periodically downloading Orders from Shopify, and the <em>On form submit</em> trigger for sending confirmation emails. But I haven't tried the calendar trigger yet. </p>\n<h4 id=\"4-from-doget-or-dopost\">4) From doGet() Or doPost()</h4>\n<p>Functions can also be called by publishing your script as a  <a target=\"_blank\" href=\"https://developers.google.com/apps-script/guides/web\">web-app</a>  and then sending a POST or GET request to the published URL.  Query parameters can be passed from the URL to the script by appending the URL with <code>key=value</code> pairs\n<code>https://script.google.com/a/macros/greenflux.us/s/{SCRIPT_ID}-/exec?testing=123&amp;msg=Hello+World%21</code></p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doGet</span>(<span class=\"hljs-params\">e</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> params = <span class=\"hljs-built_in\">JSON</span>.stringify(e);\n<span class=\"hljs-comment\">/*\nCall Apps Script function\n*/</span>\n  <span class=\"hljs-keyword\">return</span> HtmlService.createHtmlOutput(params);\n}\n</code></pre><p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1618864827367/ADPKCqYKZ.png\" alt=\"Screen Shot 2021-04-19 at 4.40.12 PM.png\" /></p>\n<h4 id=\"5-via-api-add-on-or-library\">5) Via API, Add-On or Library</h4>\n<p>In addition to web-apps, scripts can also be published as an API, Add-On or Library. I haven't used these options but I'd love to hear how others are making use of them. </p>\n<h4 id=\"6-via-google-cloud-console\">6) Via Google Cloud Console?</h4>\n<p>This is another area that I'm unfamiliar with, but I have a feeling there would be a way to invoke a function via the console.</p>\n<h3 id=\"any-other-methods\">Any other methods ❓</h3>\n<h3 id=\"what-are-you-using-apps-script-for-and-how-do-you-trigger-your-functions\">What are you using Apps Script for, and how do you trigger your functions?</h3>\n<h4 id=\"other-thoughts\">Other thoughts:</h4>\n<p><strong>There are a few limitations I've been struggling with, when trying to integrate Google Sheets and Apps Script with other platforms. </strong></p>\n<ul>\n<li>Webapps can't send replies to acknowledge receipt of webhooks. And most platforms that send webhooks will pause or delete the webhook rule after so many attempts if a reply is not received. </li>\n<li>Webapps  <a target=\"_blank\" href=\"https://issuetracker.google.com/issues/67764685\">can't read headers</a>  from the request that invoked them. </li>\n</ul>\n","contentMarkdown":"### Hey Everyone, I'm Joseph from @[GreenFlux, LLC](@greenflux)  👋\n\nI'm a freelance developer and I'm currently learning Google Apps Script. I use Google Sheets as a backend for several no-code platforms, and often need to interact with that data using Apps Scripts. \n\nFor API integrations, I used to rely on 3rd party services like Zapier & Integromat. But lately I've been writing GAS functions to replace those dependencies where possible, and provide more control and customization. \n\n*which brings me to the question: *\n## What are all the different methods of invoking Apps Script functions? \n\n\n**Here's what I could come up with so far.** ✏️\n\n#### 1) Manually, via RUN button\nFirst one is obvious. No explanation needed. \n#### 2) Using a  [custom function](https://developers.google.com/apps-script/guides/sheets/functions)\nThis method allows referencing the function in a formula, and passing cell values as inputs. \n```\n/**\n * Base64 Encodes {input1 + ':' + input2}.\n *\n * @param {string} API Key or Client ID.\n * @param {string} Password or client Secret.\n * @return Base64 encoded token.\n * @customfunction\n */\nfunction createToken(apiKey,pw){\nvar token = Utilities.base64Encode(apiKey + \":\" + pw);\nreturn token;\n}\n```\n\n![Screen Shot 2021-04-19 at 4.15.39 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1618863379599/15s2XiWoL.png)\n\n\n#### 3) Create a  [trigger](https://developers.google.com/apps-script/guides/triggers)  \nNext up we have **Triggers**, which include quite a few option. \n- Run scripts on a schedule by adding a \"Time-driven\" trigger\n- Monitor for Spreadsheet/Form events\n- Monitor a calendar for updates\n\n![Screen Shot 2021-04-19 at 4.18.10 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1618863516773/kjjlnb_ia.png)\n\nI've used the *time-driven* triggers for things like periodically downloading Orders from Shopify, and the *On form submit* trigger for sending confirmation emails. But I haven't tried the calendar trigger yet. \n\n#### 4) From doGet() Or doPost()\nFunctions can also be called by publishing your script as a  [web-app](https://developers.google.com/apps-script/guides/web)  and then sending a POST or GET request to the published URL.  Query parameters can be passed from the URL to the script by appending the URL with `key=value` pairs\n`https://script.google.com/a/macros/greenflux.us/s/{SCRIPT_ID}-/exec?testing=123&msg=Hello+World%21`\n\n```\nfunction doGet(e) {\n  var params = JSON.stringify(e);\n/*\nCall Apps Script function\n*/\n  return HtmlService.createHtmlOutput(params);\n}\n```\n![Screen Shot 2021-04-19 at 4.40.12 PM.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1618864827367/ADPKCqYKZ.png)\n\n#### 5) Via API, Add-On or Library\nIn addition to web-apps, scripts can also be published as an API, Add-On or Library. I haven't used these options but I'd love to hear how others are making use of them. \n\n#### 6) Via Google Cloud Console? \nThis is another area that I'm unfamiliar with, but I have a feeling there would be a way to invoke a function via the console.\n\n### Any other methods ❓\n### What are you using Apps Script for, and how do you trigger your functions? \n\n#### Other thoughts:\n**There are a few limitations I've been struggling with, when trying to integrate Google Sheets and Apps Script with other platforms. **\n\n- Webapps can't send replies to acknowledge receipt of webhooks. And most platforms that send webhooks will pause or delete the webhook rule after so many attempts if a reply is not received. \n- Webapps  [can't read headers](https://issuetracker.google.com/issues/67764685)  from the request that invoked them. \n\n\n","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56e669b622f645300192ed17","56744721958ef13879b94cad","56744723958ef13879b955a9","56744723958ef13879b95470"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":4663.4451,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":false,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"hasLatex":false,"title":"Various methods of invoking functions in Google Apps Script","subtitle":"","type":"story","ogImage":"","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"60771c264155da32fc83ad6e","slug":"various-methods-of-invoking-functions-in-google-apps-script","importedFromMedium":false,"dateAdded":"2021-04-19T21:03:51.955Z","hasCustomDate":false,"stickCoverToBottom":true,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"cuid":"cknp35n2w0owukos14xiu2t78","author":"60771bbfa3407a32d7041f47","followersCount":1,"draft":"607d73c7eb2bd30d2d2294a3","hasPinnedTag":false,"readTime":3,"__v":0,"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"607df037c99e200d08f7f75f"}]}